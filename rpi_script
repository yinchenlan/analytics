java -cp bin:antlr-3.1.2.jar:/opt/db/oracle/10.2.0/jdbc/lib/ojdbc14.jar RPIExprWalkerTest

SET_DIM(PERIOD,'20061', '20062', '20063');
SET_DIM(MONTHLY_PERIOD,'200601', '200602', '200603', '200604', '200605', '200606', '200607', '200608', '200609');
SET_DIM(NDC,'19999001515', '19999001615', '19999001715', '19999001815', '59999023202', '59999023205','59999023206', '59999023207','59999023208', '59999023210');
SET_DIM(NDC9,'199990015', '199990017', '199990018', '599990232');
SET_DIM(STATE, 'CO', 'DC');
SET_DIM(PROGRAM, 'Test501', 'Test601');
SET_BASE_PERIOD('20063');
UTIL(PERIOD, NDC, NDC9, STATE, PROGRAM) = CREATE_PREDICATE(SQL(SELECT PAID_UNITS AS VALUE, TRIM(TO_CHAR(ORIG_QTR)) AS PERIOD, NDC AS NDC, STATE AS STATE, PROGRAM_SHORT_NAME AS PROGRAM, SUBSTR(NDC, 1, 9) AS NDC9 FROM MN_RPI_UTILIZATION_VW));
UTILFCST(PERIOD,NDC,NDC9,STATE,PROGRAM) = [IF_THEN([GET_CURR_PERIOD()] < [GET_BASE_PERIOD()], {UTIL}, ({UTIL:PM1} + {UTIL:PM2} * 1.1) / 2)];
QAMP_DSD(PERIOD, MONTHLY_PERIOD, NDC, NDC9) = CREATE_PREDICATE(SQL(SELECT DIRECT_SALES_DOL AS VALUE,  TO_CHAR(START_DATE, 'YYYYQ') AS PERIOD, TO_CHAR(START_DATE, 'YYYYMM') AS MONTHLY_PERIOD, NDC AS NDC, SUBSTR(NDC, 1, 9) AS NDC9 FROM MN_RPI_MAMP_VW));
PRINT(QAMP_DSD);
QAMP_DSD_FCST(PERIOD, MONTHLY_PERIOD, NDC, NDC9) = [IF_THEN([GET_CURR_PERIOD()] < [GET_BASE_PERIOD()], {QAMP_DSD}, ({QAMP_DSD_FCST:PM1} + {QAMP_DSD_FCST:PM2}) / 2)];
PRINT(QAMP_DSD_FCST);
QAMP_DSD_NDC9(PERIOD,NDC9)=[AGG(SUM, {QAMP_DSD})];
PRINT(QAMP_DSD_NDC9);
QAMP_DSD_NDC9_FCST(PERIOD,NDC9)=[AGG(SUM, {QAMP_DSD_FCST})];
PRINT(QAMP_DSD_NDC9_FCST);
UTILNDC(PERIOD,NDC) = {UTIL};
TIMESERIES(PERIOD) = CREATE_PREDICATE(SQL(SELECT ENTRY_VALUE VALUE, TO_CHAR(ENTRY_START_DATE, 'YYYYQ') PERIOD FROM MN_RPI_TIME_SERIES_VW WHERE TO_CHAR(ENTRY_START_DATE, 'MON') IN ('JAN', 'APR', 'JUL', 'OCT')));
TIMESERIESFCST(PERIOD) = [IF_THEN([GET_CURR_PERIOD()] < [GET_BASE_PERIOD()], {TIMESERIES}, ({TIMESERIESFCST:PM1} + {TIMESERIESFCST:PM2}) / 2)];
TIMESERIES(PERIOD) = [IF_THEN([GET_CURR_PERIOD()] < [GET_BASE_PERIOD()], {TIMESERIES}, ({TIMESERIES:PM1} + {TIMESERIES:PM2}) / 2)];
UTILPERIODNDC(PERIOD,NDC) = [AGG(SUM,{UTIL})];
PRINT(UTILPERIODNDC);
UTILPERIODNDC(PERIOD,NDC) = [IF_THEN([GET_CURR_PERIOD()] < [GET_BASE_PERIOD()], {UTILPERIODNDC}, ({UTILPERIODNDC:PM3} + {UTILPERIODNDC:PM2} + {UTILPERIODNDC:PM1}) / 3)];
PRINT(UTILPERIODNDC);
