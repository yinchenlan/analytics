// $ANTLR 3.1.2 RPIExprAST.g 2011-03-09 16:14:04

import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/**
 *  AST for RPI using existing language syntax.
 **/
public class RPIExprASTParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "EXPRLIST", "BOOLOP", "REF", "VARLIST", "ASSIGN", "DIM", "PRINT", "CREATEPREDICATE", "QUOTEDSTRINGLIST", "SETBASEPERIOD", "SETLEVEL", "SUBSTR", "TO_CHAR", "DBCONNECT", "TRIM", "CREATE_MODEL", "DBLQUOTE", "ID", "LPAREN", "RPAREN", "EQ", "SEMICOLON", "COMMA", "SQL", "PLUS", "MINUS", "ASTERISK", "DIV", "NUMBER", "COMPMODIFIER", "LBRACK", "MAXOF", "LEASTOF", "ABS", "IFTHEN", "QTR", "NONZEROCOUNT", "NONZEROAVG", "AVG", "IFZERO", "ACCRUE", "ACCRUEFROMBASE", "ACCRUEFROM", "SERIESAVERAGE", "AVGBASIS", "DATE", "DATEFORMAT", "XFCN", "XFCNARG", "AGG", "AGGRULE", "GETCURRPERIOD", "GETBASEPERIOD", "RBRACK", "AND", "OR", "NOT", "BOOLOP_EQ", "BOOLOP_LT", "BOOLOP_GT", "BOOLOP_GE", "BOOLOP_LE", "DOT", "SQL_ASSIGN", "DOUBLEDOT", "LLABEL", "RLABEL", "QUOTED_STRING", "COLON", "CHARSET_ATTR", "TYPE_ATTR", "ROWTYPE_ATTR", "FOUND_ATTR", "NOTFOUND_ATTR", "ISOPEN_ATTR", "ROWCOUNT_ATTR", "BULK_ROWCOUNT_ATTR", "DOUBLEVERTBAR", "EXPONENT", "AT_SIGN", "NOT_EQ", "ARROW", "DOUBLEQUOTED_STRING", "CREATEGROUP", "ADDPRODUCTSELECTOR", "SETPOSTPROCESSCLASS", "SETSCENARIOUICLASS", "SETUSERINPUTUICLASS", "SETPRODUCTUICLASS", "SETMODELPROCCLASS", "SETREPORTUICLASS", "PRODUCTSELECTOR", "FORECASTABLETYPE", "PERIODICITY", "NEWLINE", "WS", "ML_COMMENT", "SL_COMMENT", "POINT", "PERCENTAGE", "VERTBAR", "N", "QUOTE", "SQLSL_COMMENT", "'{'", "'}'", "'CREATE'", "'IS'", "'AS'", "'END'", "'BEGIN'", "'CONSTANT'", "'NULL'", "'DEFAULT'", "'DECLARE'", "'EXCEPTION'", "'GOTO'", "'WHEN'", "'BINARY_INTEGER'", "'BINARY_FLOAT'", "'BINARY_DOUBLE'", "'NATURAL'", "'POSITIVE'", "'NUMBER'", "'NUMERIC'", "'DECIMAL'", "'DEC'", "'LONG'", "'RAW'", "'BOOLEAN'", "'DATE'", "'TO'", "'WITH'", "'INTEGER'", "'INT'", "'SMALLINT'", "'FLOAT'", "'REAL'", "'DOUBLE'", "'CHAR'", "'CHARACTER'", "'SET'", "'VARCHAR'", "'VARCHAR2'", "'NCHAR'", "'NVARCHAR'", "'NVARCHAR2'", "'NATIONAL'", "'MLSLABEL'", "'PLS_INTEGER'", "'BLOB'", "'CLOB'", "'NCLOB'", "'BFILE'", "'ROWID'", "'UROWID'", "'IN'", "'PROCEDURE'", "'FUNCTION'", "'TABLE'", "'OF'", "'INDEX'", "'BY'", "'THEN'", "'TRUE'", "'FALSE'", "'FOR'", "'COMMIT'", "'IF'", "'ELSE'", "'SELECT'", "'DISTINCT'", "'UNIQUE'", "'ALL'", "'INTO'", "'FROM'", "'HAVING'", "'UNION'", "'INTERSECT'", "'MINUS'", "'ON'", "'WHERE'", "'START'", "'CONNECT'", "'GROUP'", "'ROWS'", "'UPDATE'", "'ORDER'", "'LIKE'", "'ASC'", "'DESC'", "'NOWAIT'", "'BETWEEN'", "'PRIOR'", "'CASE'", "'AT'", "'EXISTS'", "'DELETE'", "'ANY'", "'INSERT'", "'VALUES'", "'FETCH'", "'LOCK'", "'MODE'", "'ROW'", "'SHARE'", "'EXCLUSIVE'", "'SAVEPOINT'", "'COMMENT'", "'ELSIF'", "'LOOP'", "'OUT'", "'PACKAGE'", "'PRAGMA'", "'RAISE'", "'RECORD'", "'RETURN'", "'RETURNING'", "'ROLLBACK'", "'WHILE'"
    };
    public static final int BULK_ROWCOUNT_ATTR=80;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int NONZEROAVG=41;
    public static final int T__160=160;
    public static final int NOT=60;
    public static final int ACCRUEFROM=46;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int RPAREN=23;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int CREATEGROUP=87;
    public static final int BOOLOP_EQ=61;
    public static final int EQ=24;
    public static final int SETUSERINPUTUICLASS=91;
    public static final int T__154=154;
    public static final int SETPOSTPROCESSCLASS=89;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int RBRACK=57;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int BOOLOP_GE=64;
    public static final int N=105;
    public static final int NUMBER=32;
    public static final int AT_SIGN=83;
    public static final int SEMICOLON=25;
    public static final int T__141=141;
    public static final int AGGRULE=54;
    public static final int T__142=142;
    public static final int T__140=140;
    public static final int PERCENTAGE=103;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__126=126;
    public static final int ABS=37;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int T__127=127;
    public static final int SQL_ASSIGN=67;
    public static final int WS=99;
    public static final int ACCRUE=44;
    public static final int T__129=129;
    public static final int SETMODELPROCCLASS=93;
    public static final int DBLQUOTE=20;
    public static final int SL_COMMENT=101;
    public static final int TRIM=18;
    public static final int GETBASEPERIOD=56;
    public static final int BOOLOP_GT=63;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int DBCONNECT=17;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int ROWTYPE_ATTR=75;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__215=215;
    public static final int T__216=216;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int T__219=219;
    public static final int LBRACK=34;
    public static final int PRODUCTSELECTOR=95;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int POINT=102;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int SERIESAVERAGE=47;
    public static final int T__123=123;
    public static final int LLABEL=69;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__223=223;
    public static final int T__222=222;
    public static final int CREATEPREDICATE=11;
    public static final int LPAREN=22;
    public static final int ASTERISK=30;
    public static final int TYPE_ATTR=74;
    public static final int T__221=221;
    public static final int T__220=220;
    public static final int RLABEL=70;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__108=108;
    public static final int SUBSTR=15;
    public static final int T__109=109;
    public static final int AVG=42;
    public static final int LEASTOF=36;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int SETSCENARIOUICLASS=90;
    public static final int T__112=112;
    public static final int QUOTEDSTRINGLIST=12;
    public static final int PLUS=28;
    public static final int T__210=210;
    public static final int CREATE_MODEL=19;
    public static final int T__212=212;
    public static final int NONZEROCOUNT=40;
    public static final int NOTFOUND_ATTR=77;
    public static final int T__211=211;
    public static final int FORECASTABLETYPE=96;
    public static final int MINUS=29;
    public static final int AGG=53;
    public static final int GETCURRPERIOD=55;
    public static final int PRINT=10;
    public static final int NOT_EQ=84;
    public static final int VERTBAR=104;
    public static final int COLON=72;
    public static final int BOOLOP_LT=62;
    public static final int DIM=9;
    public static final int IFTHEN=38;
    public static final int ARROW=85;
    public static final int BOOLOP_LE=65;
    public static final int DIV=31;
    public static final int SQLSL_COMMENT=107;
    public static final int IFZERO=43;
    public static final int SETPRODUCTUICLASS=92;
    public static final int EXPONENT=82;
    public static final int DOUBLEDOT=68;
    public static final int FOUND_ATTR=76;
    public static final int XFCNARG=52;
    public static final int QUOTE=106;
    public static final int SQL=27;
    public static final int COMPMODIFIER=33;
    public static final int QTR=39;
    public static final int SETREPORTUICLASS=94;
    public static final int ROWCOUNT_ATTR=79;
    public static final int DOUBLEVERTBAR=81;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int OR=59;
    public static final int VARLIST=7;
    public static final int ADDPRODUCTSELECTOR=88;
    public static final int AVGBASIS=48;
    public static final int XFCN=51;
    public static final int ID=21;
    public static final int AND=58;
    public static final int ACCRUEFROMBASE=45;
    public static final int DATEFORMAT=50;
    public static final int ML_COMMENT=100;
    public static final int T__199=199;
    public static final int T__198=198;
    public static final int T__197=197;
    public static final int T__196=196;
    public static final int T__195=195;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int COMMA=26;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int QUOTED_STRING=71;
    public static final int DOT=66;
    public static final int ISOPEN_ATTR=78;
    public static final int T__184=184;
    public static final int T__183=183;
    public static final int T__186=186;
    public static final int T__185=185;
    public static final int SETBASEPERIOD=13;
    public static final int T__188=188;
    public static final int T__187=187;
    public static final int T__189=189;
    public static final int DOUBLEQUOTED_STRING=86;
    public static final int T__180=180;
    public static final int EXPRLIST=4;
    public static final int T__182=182;
    public static final int BOOLOP=5;
    public static final int T__181=181;
    public static final int SETLEVEL=14;
    public static final int REF=6;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int T__179=179;
    public static final int TO_CHAR=16;
    public static final int T__178=178;
    public static final int NEWLINE=98;
    public static final int T__177=177;
    public static final int T__176=176;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int ASSIGN=8;
    public static final int MAXOF=35;
    public static final int DATE=49;
    public static final int T__169=169;
    public static final int CHARSET_ATTR=73;
    public static final int PERIODICITY=97;

    // delegates
    // delegators


        public RPIExprASTParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public RPIExprASTParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[1018+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return RPIExprASTParser.tokenNames; }
    public String getGrammarFileName() { return "RPIExprAST.g"; }


       private boolean is_sql = false;
       HashMap sqlMemory;
       public void setSQLMemory(HashMap memory) {
           this.sqlMemory = memory;
       }


    public static class model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model"
    // RPIExprAST.g:38:1: model : CREATE_MODEL DBLQUOTE ID DBLQUOTE '{' stats '}' -> ^( CREATE_MODEL ID stats ) ;
    public final RPIExprASTParser.model_return model() throws RecognitionException {
        RPIExprASTParser.model_return retval = new RPIExprASTParser.model_return();
        retval.start = input.LT(1);
        int model_StartIndex = input.index();
        Object root_0 = null;

        Token CREATE_MODEL1=null;
        Token DBLQUOTE2=null;
        Token ID3=null;
        Token DBLQUOTE4=null;
        Token char_literal5=null;
        Token char_literal7=null;
        RPIExprASTParser.stats_return stats6 = null;


        Object CREATE_MODEL1_tree=null;
        Object DBLQUOTE2_tree=null;
        Object ID3_tree=null;
        Object DBLQUOTE4_tree=null;
        Object char_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_CREATE_MODEL=new RewriteRuleTokenStream(adaptor,"token CREATE_MODEL");
        RewriteRuleTokenStream stream_DBLQUOTE=new RewriteRuleTokenStream(adaptor,"token DBLQUOTE");
        RewriteRuleSubtreeStream stream_stats=new RewriteRuleSubtreeStream(adaptor,"rule stats");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // RPIExprAST.g:39:5: ( CREATE_MODEL DBLQUOTE ID DBLQUOTE '{' stats '}' -> ^( CREATE_MODEL ID stats ) )
            // RPIExprAST.g:39:9: CREATE_MODEL DBLQUOTE ID DBLQUOTE '{' stats '}'
            {
            CREATE_MODEL1=(Token)match(input,CREATE_MODEL,FOLLOW_CREATE_MODEL_in_model151); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE_MODEL.add(CREATE_MODEL1);

            DBLQUOTE2=(Token)match(input,DBLQUOTE,FOLLOW_DBLQUOTE_in_model153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DBLQUOTE.add(DBLQUOTE2);

            ID3=(Token)match(input,ID,FOLLOW_ID_in_model155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID3);

            DBLQUOTE4=(Token)match(input,DBLQUOTE,FOLLOW_DBLQUOTE_in_model157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DBLQUOTE.add(DBLQUOTE4);

            char_literal5=(Token)match(input,108,FOLLOW_108_in_model159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_108.add(char_literal5);

            pushFollow(FOLLOW_stats_in_model161);
            stats6=stats();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_stats.add(stats6.getTree());
            char_literal7=(Token)match(input,109,FOLLOW_109_in_model163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_109.add(char_literal7);



            // AST REWRITE
            // elements: ID, stats, CREATE_MODEL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 39:57: -> ^( CREATE_MODEL ID stats )
            {
                // RPIExprAST.g:39:60: ^( CREATE_MODEL ID stats )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_CREATE_MODEL.nextNode(), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                adaptor.addChild(root_1, stream_stats.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model"

    public static class stats_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stats"
    // RPIExprAST.g:41:1: stats : ( stat )* ;
    public final RPIExprASTParser.stats_return stats() throws RecognitionException {
        RPIExprASTParser.stats_return retval = new RPIExprASTParser.stats_return();
        retval.start = input.LT(1);
        int stats_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.stat_return stat8 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // RPIExprAST.g:42:5: ( ( stat )* )
            // RPIExprAST.g:42:9: ( stat )*
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:42:9: ( stat )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==ID||LA1_0==SEMICOLON) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // RPIExprAST.g:0:0: stat
            	    {
            	    pushFollow(FOLLOW_stat_in_stats192);
            	    stat8=stat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat8.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, stats_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stats"

    public static class stat_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stat"
    // RPIExprAST.g:44:1: stat : ( ID LPAREN varlist RPAREN EQ expr SEMICOLON -> ^( ASSIGN ID varlist expr ) | keyLimit LPAREN ID COMMA quotedstringlist RPAREN SEMICOLON -> ^( DIM ID quotedstringlist ) | keyPrint LPAREN ID RPAREN SEMICOLON -> ^( PRINT ID ) | keySetBasePeriod LPAREN quoted_string RPAREN SEMICOLON -> ^( SETBASEPERIOD quoted_string ) | keyConnect LPAREN quoted_string COMMA quoted_string COMMA quoted_string COMMA quoted_string RPAREN SEMICOLON -> ^( DBCONNECT quoted_string quoted_string quoted_string quoted_string ) | SEMICOLON );
    public final RPIExprASTParser.stat_return stat() throws RecognitionException {
        RPIExprASTParser.stat_return retval = new RPIExprASTParser.stat_return();
        retval.start = input.LT(1);
        int stat_StartIndex = input.index();
        Object root_0 = null;

        Token ID9=null;
        Token LPAREN10=null;
        Token RPAREN12=null;
        Token EQ13=null;
        Token SEMICOLON15=null;
        Token LPAREN17=null;
        Token ID18=null;
        Token COMMA19=null;
        Token RPAREN21=null;
        Token SEMICOLON22=null;
        Token LPAREN24=null;
        Token ID25=null;
        Token RPAREN26=null;
        Token SEMICOLON27=null;
        Token LPAREN29=null;
        Token RPAREN31=null;
        Token SEMICOLON32=null;
        Token LPAREN34=null;
        Token COMMA36=null;
        Token COMMA38=null;
        Token COMMA40=null;
        Token RPAREN42=null;
        Token SEMICOLON43=null;
        Token SEMICOLON44=null;
        RPIExprASTParser.varlist_return varlist11 = null;

        RPIExprASTParser.expr_return expr14 = null;

        RPIExprASTParser.keyLimit_return keyLimit16 = null;

        RPIExprASTParser.quotedstringlist_return quotedstringlist20 = null;

        RPIExprASTParser.keyPrint_return keyPrint23 = null;

        RPIExprASTParser.keySetBasePeriod_return keySetBasePeriod28 = null;

        RPIExprASTParser.quoted_string_return quoted_string30 = null;

        RPIExprASTParser.keyConnect_return keyConnect33 = null;

        RPIExprASTParser.quoted_string_return quoted_string35 = null;

        RPIExprASTParser.quoted_string_return quoted_string37 = null;

        RPIExprASTParser.quoted_string_return quoted_string39 = null;

        RPIExprASTParser.quoted_string_return quoted_string41 = null;


        Object ID9_tree=null;
        Object LPAREN10_tree=null;
        Object RPAREN12_tree=null;
        Object EQ13_tree=null;
        Object SEMICOLON15_tree=null;
        Object LPAREN17_tree=null;
        Object ID18_tree=null;
        Object COMMA19_tree=null;
        Object RPAREN21_tree=null;
        Object SEMICOLON22_tree=null;
        Object LPAREN24_tree=null;
        Object ID25_tree=null;
        Object RPAREN26_tree=null;
        Object SEMICOLON27_tree=null;
        Object LPAREN29_tree=null;
        Object RPAREN31_tree=null;
        Object SEMICOLON32_tree=null;
        Object LPAREN34_tree=null;
        Object COMMA36_tree=null;
        Object COMMA38_tree=null;
        Object COMMA40_tree=null;
        Object RPAREN42_tree=null;
        Object SEMICOLON43_tree=null;
        Object SEMICOLON44_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_EQ=new RewriteRuleTokenStream(adaptor,"token EQ");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_keySetBasePeriod=new RewriteRuleSubtreeStream(adaptor,"rule keySetBasePeriod");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_varlist=new RewriteRuleSubtreeStream(adaptor,"rule varlist");
        RewriteRuleSubtreeStream stream_keyPrint=new RewriteRuleSubtreeStream(adaptor,"rule keyPrint");
        RewriteRuleSubtreeStream stream_quotedstringlist=new RewriteRuleSubtreeStream(adaptor,"rule quotedstringlist");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_keyLimit=new RewriteRuleSubtreeStream(adaptor,"rule keyLimit");
        RewriteRuleSubtreeStream stream_keyConnect=new RewriteRuleSubtreeStream(adaptor,"rule keyConnect");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // RPIExprAST.g:44:5: ( ID LPAREN varlist RPAREN EQ expr SEMICOLON -> ^( ASSIGN ID varlist expr ) | keyLimit LPAREN ID COMMA quotedstringlist RPAREN SEMICOLON -> ^( DIM ID quotedstringlist ) | keyPrint LPAREN ID RPAREN SEMICOLON -> ^( PRINT ID ) | keySetBasePeriod LPAREN quoted_string RPAREN SEMICOLON -> ^( SETBASEPERIOD quoted_string ) | keyConnect LPAREN quoted_string COMMA quoted_string COMMA quoted_string COMMA quoted_string RPAREN SEMICOLON -> ^( DBCONNECT quoted_string quoted_string quoted_string quoted_string ) | SEMICOLON )
            int alt2=6;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==ID) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==LPAREN) ) {
                    int LA2_3 = input.LA(3);

                    if ( (LA2_3==ID) ) {
                        int LA2_4 = input.LA(4);

                        if ( (LA2_4==COMMA) ) {
                            int LA2_6 = input.LA(5);

                            if ( (LA2_6==ID) ) {
                                alt2=1;
                            }
                            else if ( (LA2_6==QUOTED_STRING) ) {
                                alt2=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 6, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA2_4==RPAREN) ) {
                            int LA2_7 = input.LA(5);

                            if ( (LA2_7==SEMICOLON) ) {
                                alt2=3;
                            }
                            else if ( (LA2_7==EQ) ) {
                                alt2=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 2, 7, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA2_3==QUOTED_STRING) ) {
                        int LA2_5 = input.LA(4);

                        if ( (LA2_5==COMMA) ) {
                            alt2=5;
                        }
                        else if ( (LA2_5==RPAREN) ) {
                            alt2=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 2, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA2_0==SEMICOLON) ) {
                alt2=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // RPIExprAST.g:44:9: ID LPAREN varlist RPAREN EQ expr SEMICOLON
                    {
                    ID9=(Token)match(input,ID,FOLLOW_ID_in_stat204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID9);

                    LPAREN10=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_stat206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN10);

                    pushFollow(FOLLOW_varlist_in_stat208);
                    varlist11=varlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_varlist.add(varlist11.getTree());
                    RPAREN12=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_stat210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN12);

                    EQ13=(Token)match(input,EQ,FOLLOW_EQ_in_stat212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQ.add(EQ13);

                    pushFollow(FOLLOW_expr_in_stat214);
                    expr14=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr14.getTree());
                    SEMICOLON15=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_stat216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON15);



                    // AST REWRITE
                    // elements: expr, ID, varlist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 44:52: -> ^( ASSIGN ID varlist expr )
                    {
                        // RPIExprAST.g:44:55: ^( ASSIGN ID varlist expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());
                        adaptor.addChild(root_1, stream_varlist.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RPIExprAST.g:45:9: keyLimit LPAREN ID COMMA quotedstringlist RPAREN SEMICOLON
                    {
                    pushFollow(FOLLOW_keyLimit_in_stat239);
                    keyLimit16=keyLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyLimit.add(keyLimit16.getTree());
                    LPAREN17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_stat241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN17);

                    ID18=(Token)match(input,ID,FOLLOW_ID_in_stat243); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID18);

                    COMMA19=(Token)match(input,COMMA,FOLLOW_COMMA_in_stat245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA19);

                    pushFollow(FOLLOW_quotedstringlist_in_stat247);
                    quotedstringlist20=quotedstringlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quotedstringlist.add(quotedstringlist20.getTree());
                    RPAREN21=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_stat249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN21);

                    SEMICOLON22=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_stat251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON22);



                    // AST REWRITE
                    // elements: quotedstringlist, ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 45:68: -> ^( DIM ID quotedstringlist )
                    {
                        // RPIExprAST.g:45:71: ^( DIM ID quotedstringlist )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DIM, "DIM"), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());
                        adaptor.addChild(root_1, stream_quotedstringlist.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RPIExprAST.g:46:9: keyPrint LPAREN ID RPAREN SEMICOLON
                    {
                    pushFollow(FOLLOW_keyPrint_in_stat271);
                    keyPrint23=keyPrint();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyPrint.add(keyPrint23.getTree());
                    LPAREN24=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_stat273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN24);

                    ID25=(Token)match(input,ID,FOLLOW_ID_in_stat275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID25);

                    RPAREN26=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_stat277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN26);

                    SEMICOLON27=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_stat279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON27);



                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 46:45: -> ^( PRINT ID )
                    {
                        // RPIExprAST.g:46:48: ^( PRINT ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PRINT, "PRINT"), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RPIExprAST.g:47:9: keySetBasePeriod LPAREN quoted_string RPAREN SEMICOLON
                    {
                    pushFollow(FOLLOW_keySetBasePeriod_in_stat297);
                    keySetBasePeriod28=keySetBasePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keySetBasePeriod.add(keySetBasePeriod28.getTree());
                    LPAREN29=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_stat299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN29);

                    pushFollow(FOLLOW_quoted_string_in_stat301);
                    quoted_string30=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string30.getTree());
                    RPAREN31=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_stat303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN31);

                    SEMICOLON32=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_stat305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON32);



                    // AST REWRITE
                    // elements: quoted_string
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 47:64: -> ^( SETBASEPERIOD quoted_string )
                    {
                        // RPIExprAST.g:47:67: ^( SETBASEPERIOD quoted_string )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SETBASEPERIOD, "SETBASEPERIOD"), root_1);

                        adaptor.addChild(root_1, stream_quoted_string.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RPIExprAST.g:48:9: keyConnect LPAREN quoted_string COMMA quoted_string COMMA quoted_string COMMA quoted_string RPAREN SEMICOLON
                    {
                    pushFollow(FOLLOW_keyConnect_in_stat323);
                    keyConnect33=keyConnect();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyConnect.add(keyConnect33.getTree());
                    LPAREN34=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_stat325); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN34);

                    pushFollow(FOLLOW_quoted_string_in_stat327);
                    quoted_string35=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string35.getTree());
                    COMMA36=(Token)match(input,COMMA,FOLLOW_COMMA_in_stat329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA36);

                    pushFollow(FOLLOW_quoted_string_in_stat331);
                    quoted_string37=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string37.getTree());
                    COMMA38=(Token)match(input,COMMA,FOLLOW_COMMA_in_stat333); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA38);

                    pushFollow(FOLLOW_quoted_string_in_stat335);
                    quoted_string39=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string39.getTree());
                    COMMA40=(Token)match(input,COMMA,FOLLOW_COMMA_in_stat337); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA40);

                    pushFollow(FOLLOW_quoted_string_in_stat339);
                    quoted_string41=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string41.getTree());
                    RPAREN42=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_stat341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN42);

                    SEMICOLON43=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_stat343); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON43);



                    // AST REWRITE
                    // elements: quoted_string, quoted_string, quoted_string, quoted_string
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 48:118: -> ^( DBCONNECT quoted_string quoted_string quoted_string quoted_string )
                    {
                        // RPIExprAST.g:48:121: ^( DBCONNECT quoted_string quoted_string quoted_string quoted_string )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DBCONNECT, "DBCONNECT"), root_1);

                        adaptor.addChild(root_1, stream_quoted_string.nextTree());
                        adaptor.addChild(root_1, stream_quoted_string.nextTree());
                        adaptor.addChild(root_1, stream_quoted_string.nextTree());
                        adaptor.addChild(root_1, stream_quoted_string.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RPIExprAST.g:49:9: SEMICOLON
                    {
                    root_0 = (Object)adaptor.nil();

                    SEMICOLON44=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_stat367); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, stat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stat"

    public static class quotedstringlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quotedstringlist"
    // RPIExprAST.g:52:1: quotedstringlist : quoted_string ( quotedstringtail )* -> ^( QUOTEDSTRINGLIST quoted_string ( quotedstringtail )* ) ;
    public final RPIExprASTParser.quotedstringlist_return quotedstringlist() throws RecognitionException {
        RPIExprASTParser.quotedstringlist_return retval = new RPIExprASTParser.quotedstringlist_return();
        retval.start = input.LT(1);
        int quotedstringlist_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.quoted_string_return quoted_string45 = null;

        RPIExprASTParser.quotedstringtail_return quotedstringtail46 = null;


        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_quotedstringtail=new RewriteRuleSubtreeStream(adaptor,"rule quotedstringtail");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // RPIExprAST.g:53:5: ( quoted_string ( quotedstringtail )* -> ^( QUOTEDSTRINGLIST quoted_string ( quotedstringtail )* ) )
            // RPIExprAST.g:53:9: quoted_string ( quotedstringtail )*
            {
            pushFollow(FOLLOW_quoted_string_in_quotedstringlist395);
            quoted_string45=quoted_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string45.getTree());
            // RPIExprAST.g:53:23: ( quotedstringtail )*
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==COMMA) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // RPIExprAST.g:0:0: quotedstringtail
            	    {
            	    pushFollow(FOLLOW_quotedstringtail_in_quotedstringlist397);
            	    quotedstringtail46=quotedstringtail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_quotedstringtail.add(quotedstringtail46.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);



            // AST REWRITE
            // elements: quoted_string, quotedstringtail
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 53:41: -> ^( QUOTEDSTRINGLIST quoted_string ( quotedstringtail )* )
            {
                // RPIExprAST.g:53:44: ^( QUOTEDSTRINGLIST quoted_string ( quotedstringtail )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(QUOTEDSTRINGLIST, "QUOTEDSTRINGLIST"), root_1);

                adaptor.addChild(root_1, stream_quoted_string.nextTree());
                // RPIExprAST.g:53:77: ( quotedstringtail )*
                while ( stream_quotedstringtail.hasNext() ) {
                    adaptor.addChild(root_1, stream_quotedstringtail.nextTree());

                }
                stream_quotedstringtail.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, quotedstringlist_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quotedstringlist"

    public static class quotedstringtail_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quotedstringtail"
    // RPIExprAST.g:56:1: quotedstringtail : COMMA quoted_string -> quoted_string ;
    public final RPIExprASTParser.quotedstringtail_return quotedstringtail() throws RecognitionException {
        RPIExprASTParser.quotedstringtail_return retval = new RPIExprASTParser.quotedstringtail_return();
        retval.start = input.LT(1);
        int quotedstringtail_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA47=null;
        RPIExprASTParser.quoted_string_return quoted_string48 = null;


        Object COMMA47_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // RPIExprAST.g:57:5: ( COMMA quoted_string -> quoted_string )
            // RPIExprAST.g:57:10: COMMA quoted_string
            {
            COMMA47=(Token)match(input,COMMA,FOLLOW_COMMA_in_quotedstringtail437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA47);

            pushFollow(FOLLOW_quoted_string_in_quotedstringtail439);
            quoted_string48=quoted_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string48.getTree());


            // AST REWRITE
            // elements: quoted_string
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 57:30: -> quoted_string
            {
                adaptor.addChild(root_0, stream_quoted_string.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, quotedstringtail_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quotedstringtail"

    public static class varlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varlist"
    // RPIExprAST.g:59:1: varlist : ID ( varlisttail )* -> ^( VARLIST ID ( varlisttail )* ) ;
    public final RPIExprASTParser.varlist_return varlist() throws RecognitionException {
        RPIExprASTParser.varlist_return retval = new RPIExprASTParser.varlist_return();
        retval.start = input.LT(1);
        int varlist_StartIndex = input.index();
        Object root_0 = null;

        Token ID49=null;
        RPIExprASTParser.varlisttail_return varlisttail50 = null;


        Object ID49_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_varlisttail=new RewriteRuleSubtreeStream(adaptor,"rule varlisttail");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // RPIExprAST.g:60:5: ( ID ( varlisttail )* -> ^( VARLIST ID ( varlisttail )* ) )
            // RPIExprAST.g:60:9: ID ( varlisttail )*
            {
            ID49=(Token)match(input,ID,FOLLOW_ID_in_varlist457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID49);

            // RPIExprAST.g:60:12: ( varlisttail )*
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==COMMA) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // RPIExprAST.g:0:0: varlisttail
            	    {
            	    pushFollow(FOLLOW_varlisttail_in_varlist459);
            	    varlisttail50=varlisttail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_varlisttail.add(varlisttail50.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);



            // AST REWRITE
            // elements: varlisttail, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 60:25: -> ^( VARLIST ID ( varlisttail )* )
            {
                // RPIExprAST.g:60:28: ^( VARLIST ID ( varlisttail )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARLIST, "VARLIST"), root_1);

                adaptor.addChild(root_1, stream_ID.nextNode());
                // RPIExprAST.g:60:41: ( varlisttail )*
                while ( stream_varlisttail.hasNext() ) {
                    adaptor.addChild(root_1, stream_varlisttail.nextTree());

                }
                stream_varlisttail.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, varlist_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varlist"

    public static class varlisttail_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varlisttail"
    // RPIExprAST.g:62:1: varlisttail : COMMA ID -> ID ;
    public final RPIExprASTParser.varlisttail_return varlisttail() throws RecognitionException {
        RPIExprASTParser.varlisttail_return retval = new RPIExprASTParser.varlisttail_return();
        retval.start = input.LT(1);
        int varlisttail_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA51=null;
        Token ID52=null;

        Object COMMA51_tree=null;
        Object ID52_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // RPIExprAST.g:63:5: ( COMMA ID -> ID )
            // RPIExprAST.g:63:9: COMMA ID
            {
            COMMA51=(Token)match(input,COMMA,FOLLOW_COMMA_in_varlisttail489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA51);

            ID52=(Token)match(input,ID,FOLLOW_ID_in_varlisttail491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID52);



            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 63:18: -> ID
            {
                adaptor.addChild(root_0, stream_ID.nextNode());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, varlisttail_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varlisttail"

    public static class sql_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql"
    // RPIExprAST.g:65:1: sql : SQL LPAREN select_expression RPAREN -> ^( SQL select_expression ) ;
    public final RPIExprASTParser.sql_return sql() throws RecognitionException {
        RPIExprASTParser.sql_return retval = new RPIExprASTParser.sql_return();
        retval.start = input.LT(1);
        int sql_StartIndex = input.index();
        Object root_0 = null;

        Token SQL53=null;
        Token LPAREN54=null;
        Token RPAREN56=null;
        RPIExprASTParser.select_expression_return select_expression55 = null;


        Object SQL53_tree=null;
        Object LPAREN54_tree=null;
        Object RPAREN56_tree=null;
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_select_expression=new RewriteRuleSubtreeStream(adaptor,"rule select_expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // RPIExprAST.g:65:5: ( SQL LPAREN select_expression RPAREN -> ^( SQL select_expression ) )
            // RPIExprAST.g:65:9: SQL LPAREN select_expression RPAREN
            {
            SQL53=(Token)match(input,SQL,FOLLOW_SQL_in_sql514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL53);

            LPAREN54=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sql516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN54);

            pushFollow(FOLLOW_select_expression_in_sql518);
            select_expression55=select_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_select_expression.add(select_expression55.getTree());
            RPAREN56=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sql520); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN56);



            // AST REWRITE
            // elements: SQL, select_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 65:45: -> ^( SQL select_expression )
            {
                // RPIExprAST.g:65:48: ^( SQL select_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_SQL.nextNode(), root_1);

                adaptor.addChild(root_1, stream_select_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, sql_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql"

    public static class expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // RPIExprAST.g:67:1: expr : multExpr ( PLUS multExpr | MINUS multExpr )* ;
    public final RPIExprASTParser.expr_return expr() throws RecognitionException {
        RPIExprASTParser.expr_return retval = new RPIExprASTParser.expr_return();
        retval.start = input.LT(1);
        int expr_StartIndex = input.index();
        Object root_0 = null;

        Token PLUS58=null;
        Token MINUS60=null;
        RPIExprASTParser.multExpr_return multExpr57 = null;

        RPIExprASTParser.multExpr_return multExpr59 = null;

        RPIExprASTParser.multExpr_return multExpr61 = null;


        Object PLUS58_tree=null;
        Object MINUS60_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // RPIExprAST.g:68:5: ( multExpr ( PLUS multExpr | MINUS multExpr )* )
            // RPIExprAST.g:68:9: multExpr ( PLUS multExpr | MINUS multExpr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multExpr_in_expr554);
            multExpr57=multExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multExpr57.getTree());
            // RPIExprAST.g:69:9: ( PLUS multExpr | MINUS multExpr )*
            loop5:
            do {
                int alt5=3;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==PLUS) ) {
                    alt5=1;
                }
                else if ( (LA5_0==MINUS) ) {
                    alt5=2;
                }


                switch (alt5) {
            	case 1 :
            	    // RPIExprAST.g:69:13: PLUS multExpr
            	    {
            	    PLUS58=(Token)match(input,PLUS,FOLLOW_PLUS_in_expr568); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    PLUS58_tree = (Object)adaptor.create(PLUS58);
            	    root_0 = (Object)adaptor.becomeRoot(PLUS58_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_multExpr_in_expr571);
            	    multExpr59=multExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multExpr59.getTree());

            	    }
            	    break;
            	case 2 :
            	    // RPIExprAST.g:70:13: MINUS multExpr
            	    {
            	    MINUS60=(Token)match(input,MINUS,FOLLOW_MINUS_in_expr586); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    MINUS60_tree = (Object)adaptor.create(MINUS60);
            	    root_0 = (Object)adaptor.becomeRoot(MINUS60_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_multExpr_in_expr589);
            	    multExpr61=multExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multExpr61.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class multExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multExpr"
    // RPIExprAST.g:74:1: multExpr : atom ( ASTERISK atom | DIV atom )* ;
    public final RPIExprASTParser.multExpr_return multExpr() throws RecognitionException {
        RPIExprASTParser.multExpr_return retval = new RPIExprASTParser.multExpr_return();
        retval.start = input.LT(1);
        int multExpr_StartIndex = input.index();
        Object root_0 = null;

        Token ASTERISK63=null;
        Token DIV65=null;
        RPIExprASTParser.atom_return atom62 = null;

        RPIExprASTParser.atom_return atom64 = null;

        RPIExprASTParser.atom_return atom66 = null;


        Object ASTERISK63_tree=null;
        Object DIV65_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // RPIExprAST.g:75:5: ( atom ( ASTERISK atom | DIV atom )* )
            // RPIExprAST.g:75:9: atom ( ASTERISK atom | DIV atom )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_atom_in_multExpr619);
            atom62=atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, atom62.getTree());
            // RPIExprAST.g:75:15: ( ASTERISK atom | DIV atom )*
            loop6:
            do {
                int alt6=3;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==ASTERISK) ) {
                    alt6=1;
                }
                else if ( (LA6_0==DIV) ) {
                    alt6=2;
                }


                switch (alt6) {
            	case 1 :
            	    // RPIExprAST.g:75:16: ASTERISK atom
            	    {
            	    ASTERISK63=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_multExpr623); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ASTERISK63_tree = (Object)adaptor.create(ASTERISK63);
            	    root_0 = (Object)adaptor.becomeRoot(ASTERISK63_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_atom_in_multExpr626);
            	    atom64=atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, atom64.getTree());

            	    }
            	    break;
            	case 2 :
            	    // RPIExprAST.g:75:33: DIV atom
            	    {
            	    DIV65=(Token)match(input,DIV,FOLLOW_DIV_in_multExpr630); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DIV65_tree = (Object)adaptor.create(DIV65);
            	    root_0 = (Object)adaptor.becomeRoot(DIV65_tree, root_0);
            	    }
            	    pushFollow(FOLLOW_atom_in_multExpr633);
            	    atom66=atom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, atom66.getTree());

            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, multExpr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multExpr"

    public static class atom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atom"
    // RPIExprAST.g:78:1: atom : ( NUMBER | '{' ID ( COMPMODIFIER )? '}' -> ^( REF ID ( COMPMODIFIER )? ) | LPAREN expr RPAREN -> expr | function -> function | keyPredicate LPAREN sql ( COMMA varlist )? RPAREN -> ^( CREATEPREDICATE sql ( varlist )? ) );
    public final RPIExprASTParser.atom_return atom() throws RecognitionException {
        RPIExprASTParser.atom_return retval = new RPIExprASTParser.atom_return();
        retval.start = input.LT(1);
        int atom_StartIndex = input.index();
        Object root_0 = null;

        Token NUMBER67=null;
        Token char_literal68=null;
        Token ID69=null;
        Token COMPMODIFIER70=null;
        Token char_literal71=null;
        Token LPAREN72=null;
        Token RPAREN74=null;
        Token LPAREN77=null;
        Token COMMA79=null;
        Token RPAREN81=null;
        RPIExprASTParser.expr_return expr73 = null;

        RPIExprASTParser.function_return function75 = null;

        RPIExprASTParser.keyPredicate_return keyPredicate76 = null;

        RPIExprASTParser.sql_return sql78 = null;

        RPIExprASTParser.varlist_return varlist80 = null;


        Object NUMBER67_tree=null;
        Object char_literal68_tree=null;
        Object ID69_tree=null;
        Object COMPMODIFIER70_tree=null;
        Object char_literal71_tree=null;
        Object LPAREN72_tree=null;
        Object RPAREN74_tree=null;
        Object LPAREN77_tree=null;
        Object COMMA79_tree=null;
        Object RPAREN81_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMPMODIFIER=new RewriteRuleTokenStream(adaptor,"token COMPMODIFIER");
        RewriteRuleTokenStream stream_109=new RewriteRuleTokenStream(adaptor,"token 109");
        RewriteRuleTokenStream stream_108=new RewriteRuleTokenStream(adaptor,"token 108");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_varlist=new RewriteRuleSubtreeStream(adaptor,"rule varlist");
        RewriteRuleSubtreeStream stream_sql=new RewriteRuleSubtreeStream(adaptor,"rule sql");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_keyPredicate=new RewriteRuleSubtreeStream(adaptor,"rule keyPredicate");
        RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // RPIExprAST.g:79:5: ( NUMBER | '{' ID ( COMPMODIFIER )? '}' -> ^( REF ID ( COMPMODIFIER )? ) | LPAREN expr RPAREN -> expr | function -> function | keyPredicate LPAREN sql ( COMMA varlist )? RPAREN -> ^( CREATEPREDICATE sql ( varlist )? ) )
            int alt9=5;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt9=1;
                }
                break;
            case 108:
                {
                alt9=2;
                }
                break;
            case LPAREN:
                {
                alt9=3;
                }
                break;
            case LBRACK:
                {
                alt9=4;
                }
                break;
            case ID:
                {
                alt9=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // RPIExprAST.g:79:9: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();

                    NUMBER67=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_atom655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER67_tree = (Object)adaptor.create(NUMBER67);
                    adaptor.addChild(root_0, NUMBER67_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:80:9: '{' ID ( COMPMODIFIER )? '}'
                    {
                    char_literal68=(Token)match(input,108,FOLLOW_108_in_atom666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_108.add(char_literal68);

                    ID69=(Token)match(input,ID,FOLLOW_ID_in_atom668); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID69);

                    // RPIExprAST.g:80:16: ( COMPMODIFIER )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==COMPMODIFIER) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // RPIExprAST.g:0:0: COMPMODIFIER
                            {
                            COMPMODIFIER70=(Token)match(input,COMPMODIFIER,FOLLOW_COMPMODIFIER_in_atom670); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMPMODIFIER.add(COMPMODIFIER70);


                            }
                            break;

                    }

                    char_literal71=(Token)match(input,109,FOLLOW_109_in_atom673); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_109.add(char_literal71);



                    // AST REWRITE
                    // elements: ID, COMPMODIFIER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 80:34: -> ^( REF ID ( COMPMODIFIER )? )
                    {
                        // RPIExprAST.g:80:37: ^( REF ID ( COMPMODIFIER )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(REF, "REF"), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());
                        // RPIExprAST.g:80:46: ( COMPMODIFIER )?
                        if ( stream_COMPMODIFIER.hasNext() ) {
                            adaptor.addChild(root_1, stream_COMPMODIFIER.nextNode());

                        }
                        stream_COMPMODIFIER.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RPIExprAST.g:81:9: LPAREN expr RPAREN
                    {
                    LPAREN72=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atom702); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN72);

                    pushFollow(FOLLOW_expr_in_atom704);
                    expr73=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr73.getTree());
                    RPAREN74=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atom706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN74);



                    // AST REWRITE
                    // elements: expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 81:28: -> expr
                    {
                        adaptor.addChild(root_0, stream_expr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RPIExprAST.g:82:9: function
                    {
                    pushFollow(FOLLOW_function_in_atom720);
                    function75=function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_function.add(function75.getTree());


                    // AST REWRITE
                    // elements: function
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 82:18: -> function
                    {
                        adaptor.addChild(root_0, stream_function.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RPIExprAST.g:83:9: keyPredicate LPAREN sql ( COMMA varlist )? RPAREN
                    {
                    pushFollow(FOLLOW_keyPredicate_in_atom734);
                    keyPredicate76=keyPredicate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_keyPredicate.add(keyPredicate76.getTree());
                    LPAREN77=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atom736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN77);

                    pushFollow(FOLLOW_sql_in_atom738);
                    sql78=sql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sql.add(sql78.getTree());
                    // RPIExprAST.g:83:33: ( COMMA varlist )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==COMMA) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // RPIExprAST.g:83:34: COMMA varlist
                            {
                            COMMA79=(Token)match(input,COMMA,FOLLOW_COMMA_in_atom741); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA79);

                            pushFollow(FOLLOW_varlist_in_atom743);
                            varlist80=varlist();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_varlist.add(varlist80.getTree());

                            }
                            break;

                    }

                    RPAREN81=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atom747); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN81);



                    // AST REWRITE
                    // elements: varlist, sql
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 83:57: -> ^( CREATEPREDICATE sql ( varlist )? )
                    {
                        // RPIExprAST.g:83:60: ^( CREATEPREDICATE sql ( varlist )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CREATEPREDICATE, "CREATEPREDICATE"), root_1);

                        adaptor.addChild(root_1, stream_sql.nextTree());
                        // RPIExprAST.g:83:82: ( varlist )?
                        if ( stream_varlist.hasNext() ) {
                            adaptor.addChild(root_1, stream_varlist.nextTree());

                        }
                        stream_varlist.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, atom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "atom"

    public static class exprlist_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exprlist"
    // RPIExprAST.g:86:1: exprlist : expr ( exprtail )* -> ^( EXPRLIST expr ( exprtail )* ) ;
    public final RPIExprASTParser.exprlist_return exprlist() throws RecognitionException {
        RPIExprASTParser.exprlist_return retval = new RPIExprASTParser.exprlist_return();
        retval.start = input.LT(1);
        int exprlist_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.expr_return expr82 = null;

        RPIExprASTParser.exprtail_return exprtail83 = null;


        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_exprtail=new RewriteRuleSubtreeStream(adaptor,"rule exprtail");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // RPIExprAST.g:87:5: ( expr ( exprtail )* -> ^( EXPRLIST expr ( exprtail )* ) )
            // RPIExprAST.g:87:7: expr ( exprtail )*
            {
            pushFollow(FOLLOW_expr_in_exprlist775);
            expr82=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr82.getTree());
            // RPIExprAST.g:87:12: ( exprtail )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==COMMA) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // RPIExprAST.g:0:0: exprtail
            	    {
            	    pushFollow(FOLLOW_exprtail_in_exprlist777);
            	    exprtail83=exprtail();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_exprtail.add(exprtail83.getTree());

            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);



            // AST REWRITE
            // elements: exprtail, expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 87:22: -> ^( EXPRLIST expr ( exprtail )* )
            {
                // RPIExprAST.g:87:25: ^( EXPRLIST expr ( exprtail )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXPRLIST, "EXPRLIST"), root_1);

                adaptor.addChild(root_1, stream_expr.nextTree());
                // RPIExprAST.g:87:41: ( exprtail )*
                while ( stream_exprtail.hasNext() ) {
                    adaptor.addChild(root_1, stream_exprtail.nextTree());

                }
                stream_exprtail.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, exprlist_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exprlist"

    public static class exprtail_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exprtail"
    // RPIExprAST.g:89:1: exprtail : COMMA expr -> expr ;
    public final RPIExprASTParser.exprtail_return exprtail() throws RecognitionException {
        RPIExprASTParser.exprtail_return retval = new RPIExprASTParser.exprtail_return();
        retval.start = input.LT(1);
        int exprtail_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA84=null;
        RPIExprASTParser.expr_return expr85 = null;


        Object COMMA84_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // RPIExprAST.g:90:5: ( COMMA expr -> expr )
            // RPIExprAST.g:90:7: COMMA expr
            {
            COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprtail801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA84);

            pushFollow(FOLLOW_expr_in_exprtail803);
            expr85=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(expr85.getTree());


            // AST REWRITE
            // elements: expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 90:18: -> expr
            {
                adaptor.addChild(root_0, stream_expr.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, exprtail_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exprtail"

    public static class function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // RPIExprAST.g:92:1: function : LBRACK ( MAXOF LPAREN expr COMMA expr RPAREN -> ^( MAXOF expr expr ) | LEASTOF LPAREN expr COMMA expr RPAREN -> ^( LEASTOF expr expr ) | ABS LPAREN expr RPAREN -> ^( ABS expr ) | IFTHEN LPAREN boolExpr COMMA expr COMMA expr RPAREN -> ^( IFTHEN boolExpr expr expr ) | QTR LPAREN RPAREN -> QTR | NONZEROCOUNT LPAREN exprlist RPAREN -> ^( NONZEROCOUNT exprlist ) | NONZEROAVG LPAREN exprlist RPAREN -> ^( NONZEROAVG exprlist ) | AVG LPAREN exprlist RPAREN -> ^( AVG exprlist ) | IFZERO LPAREN expr COMMA expr RPAREN -> ^( IFZERO expr expr ) | ACCRUE LPAREN ID RPAREN -> ^( ACCRUE ID ) | ACCRUEFROMBASE LPAREN ID RPAREN -> ^( ACCRUEFROMBASE ID ) | ACCRUEFROM LPAREN NUMBER COMMA ID RPAREN -> ^( ACCRUEFROM NUMBER ID ) | SERIESAVERAGE LPAREN ID COMMA AVGBASIS RPAREN -> ^( SERIESAVERAGE ID AVGBASIS ) | DATE LPAREN ( DATEFORMAT | NUMBER ) RPAREN -> ^( DATE ( DATEFORMAT )? ( NUMBER )? ) | XFCN LPAREN ID COMMA XFCNARG ( COMMA XFCNARG )* RPAREN -> ^( XFCN ID ( XFCNARG )+ ) | AGG LPAREN AGGRULE COMMA expr RPAREN -> ^( AGG AGGRULE expr ) | GETCURRPERIOD LPAREN RPAREN -> GETCURRPERIOD | GETBASEPERIOD LPAREN RPAREN -> GETBASEPERIOD ) RBRACK ;
    public final RPIExprASTParser.function_return function() throws RecognitionException {
        RPIExprASTParser.function_return retval = new RPIExprASTParser.function_return();
        retval.start = input.LT(1);
        int function_StartIndex = input.index();
        Object root_0 = null;

        Token LBRACK86=null;
        Token MAXOF87=null;
        Token LPAREN88=null;
        Token COMMA90=null;
        Token RPAREN92=null;
        Token LEASTOF93=null;
        Token LPAREN94=null;
        Token COMMA96=null;
        Token RPAREN98=null;
        Token ABS99=null;
        Token LPAREN100=null;
        Token RPAREN102=null;
        Token IFTHEN103=null;
        Token LPAREN104=null;
        Token COMMA106=null;
        Token COMMA108=null;
        Token RPAREN110=null;
        Token QTR111=null;
        Token LPAREN112=null;
        Token RPAREN113=null;
        Token NONZEROCOUNT114=null;
        Token LPAREN115=null;
        Token RPAREN117=null;
        Token NONZEROAVG118=null;
        Token LPAREN119=null;
        Token RPAREN121=null;
        Token AVG122=null;
        Token LPAREN123=null;
        Token RPAREN125=null;
        Token IFZERO126=null;
        Token LPAREN127=null;
        Token COMMA129=null;
        Token RPAREN131=null;
        Token ACCRUE132=null;
        Token LPAREN133=null;
        Token ID134=null;
        Token RPAREN135=null;
        Token ACCRUEFROMBASE136=null;
        Token LPAREN137=null;
        Token ID138=null;
        Token RPAREN139=null;
        Token ACCRUEFROM140=null;
        Token LPAREN141=null;
        Token NUMBER142=null;
        Token COMMA143=null;
        Token ID144=null;
        Token RPAREN145=null;
        Token SERIESAVERAGE146=null;
        Token LPAREN147=null;
        Token ID148=null;
        Token COMMA149=null;
        Token AVGBASIS150=null;
        Token RPAREN151=null;
        Token DATE152=null;
        Token LPAREN153=null;
        Token DATEFORMAT154=null;
        Token NUMBER155=null;
        Token RPAREN156=null;
        Token XFCN157=null;
        Token LPAREN158=null;
        Token ID159=null;
        Token COMMA160=null;
        Token XFCNARG161=null;
        Token COMMA162=null;
        Token XFCNARG163=null;
        Token RPAREN164=null;
        Token AGG165=null;
        Token LPAREN166=null;
        Token AGGRULE167=null;
        Token COMMA168=null;
        Token RPAREN170=null;
        Token GETCURRPERIOD171=null;
        Token LPAREN172=null;
        Token RPAREN173=null;
        Token GETBASEPERIOD174=null;
        Token LPAREN175=null;
        Token RPAREN176=null;
        Token RBRACK177=null;
        RPIExprASTParser.expr_return expr89 = null;

        RPIExprASTParser.expr_return expr91 = null;

        RPIExprASTParser.expr_return expr95 = null;

        RPIExprASTParser.expr_return expr97 = null;

        RPIExprASTParser.expr_return expr101 = null;

        RPIExprASTParser.boolExpr_return boolExpr105 = null;

        RPIExprASTParser.expr_return expr107 = null;

        RPIExprASTParser.expr_return expr109 = null;

        RPIExprASTParser.exprlist_return exprlist116 = null;

        RPIExprASTParser.exprlist_return exprlist120 = null;

        RPIExprASTParser.exprlist_return exprlist124 = null;

        RPIExprASTParser.expr_return expr128 = null;

        RPIExprASTParser.expr_return expr130 = null;

        RPIExprASTParser.expr_return expr169 = null;


        Object LBRACK86_tree=null;
        Object MAXOF87_tree=null;
        Object LPAREN88_tree=null;
        Object COMMA90_tree=null;
        Object RPAREN92_tree=null;
        Object LEASTOF93_tree=null;
        Object LPAREN94_tree=null;
        Object COMMA96_tree=null;
        Object RPAREN98_tree=null;
        Object ABS99_tree=null;
        Object LPAREN100_tree=null;
        Object RPAREN102_tree=null;
        Object IFTHEN103_tree=null;
        Object LPAREN104_tree=null;
        Object COMMA106_tree=null;
        Object COMMA108_tree=null;
        Object RPAREN110_tree=null;
        Object QTR111_tree=null;
        Object LPAREN112_tree=null;
        Object RPAREN113_tree=null;
        Object NONZEROCOUNT114_tree=null;
        Object LPAREN115_tree=null;
        Object RPAREN117_tree=null;
        Object NONZEROAVG118_tree=null;
        Object LPAREN119_tree=null;
        Object RPAREN121_tree=null;
        Object AVG122_tree=null;
        Object LPAREN123_tree=null;
        Object RPAREN125_tree=null;
        Object IFZERO126_tree=null;
        Object LPAREN127_tree=null;
        Object COMMA129_tree=null;
        Object RPAREN131_tree=null;
        Object ACCRUE132_tree=null;
        Object LPAREN133_tree=null;
        Object ID134_tree=null;
        Object RPAREN135_tree=null;
        Object ACCRUEFROMBASE136_tree=null;
        Object LPAREN137_tree=null;
        Object ID138_tree=null;
        Object RPAREN139_tree=null;
        Object ACCRUEFROM140_tree=null;
        Object LPAREN141_tree=null;
        Object NUMBER142_tree=null;
        Object COMMA143_tree=null;
        Object ID144_tree=null;
        Object RPAREN145_tree=null;
        Object SERIESAVERAGE146_tree=null;
        Object LPAREN147_tree=null;
        Object ID148_tree=null;
        Object COMMA149_tree=null;
        Object AVGBASIS150_tree=null;
        Object RPAREN151_tree=null;
        Object DATE152_tree=null;
        Object LPAREN153_tree=null;
        Object DATEFORMAT154_tree=null;
        Object NUMBER155_tree=null;
        Object RPAREN156_tree=null;
        Object XFCN157_tree=null;
        Object LPAREN158_tree=null;
        Object ID159_tree=null;
        Object COMMA160_tree=null;
        Object XFCNARG161_tree=null;
        Object COMMA162_tree=null;
        Object XFCNARG163_tree=null;
        Object RPAREN164_tree=null;
        Object AGG165_tree=null;
        Object LPAREN166_tree=null;
        Object AGGRULE167_tree=null;
        Object COMMA168_tree=null;
        Object RPAREN170_tree=null;
        Object GETCURRPERIOD171_tree=null;
        Object LPAREN172_tree=null;
        Object RPAREN173_tree=null;
        Object GETBASEPERIOD174_tree=null;
        Object LPAREN175_tree=null;
        Object RPAREN176_tree=null;
        Object RBRACK177_tree=null;
        RewriteRuleTokenStream stream_QTR=new RewriteRuleTokenStream(adaptor,"token QTR");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_XFCN=new RewriteRuleTokenStream(adaptor,"token XFCN");
        RewriteRuleTokenStream stream_NONZEROAVG=new RewriteRuleTokenStream(adaptor,"token NONZEROAVG");
        RewriteRuleTokenStream stream_NUMBER=new RewriteRuleTokenStream(adaptor,"token NUMBER");
        RewriteRuleTokenStream stream_SERIESAVERAGE=new RewriteRuleTokenStream(adaptor,"token SERIESAVERAGE");
        RewriteRuleTokenStream stream_ACCRUEFROM=new RewriteRuleTokenStream(adaptor,"token ACCRUEFROM");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_AGGRULE=new RewriteRuleTokenStream(adaptor,"token AGGRULE");
        RewriteRuleTokenStream stream_AGG=new RewriteRuleTokenStream(adaptor,"token AGG");
        RewriteRuleTokenStream stream_XFCNARG=new RewriteRuleTokenStream(adaptor,"token XFCNARG");
        RewriteRuleTokenStream stream_GETCURRPERIOD=new RewriteRuleTokenStream(adaptor,"token GETCURRPERIOD");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ACCRUEFROMBASE=new RewriteRuleTokenStream(adaptor,"token ACCRUEFROMBASE");
        RewriteRuleTokenStream stream_DATEFORMAT=new RewriteRuleTokenStream(adaptor,"token DATEFORMAT");
        RewriteRuleTokenStream stream_ABS=new RewriteRuleTokenStream(adaptor,"token ABS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ACCRUE=new RewriteRuleTokenStream(adaptor,"token ACCRUE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_AVG=new RewriteRuleTokenStream(adaptor,"token AVG");
        RewriteRuleTokenStream stream_IFTHEN=new RewriteRuleTokenStream(adaptor,"token IFTHEN");
        RewriteRuleTokenStream stream_LEASTOF=new RewriteRuleTokenStream(adaptor,"token LEASTOF");
        RewriteRuleTokenStream stream_MAXOF=new RewriteRuleTokenStream(adaptor,"token MAXOF");
        RewriteRuleTokenStream stream_GETBASEPERIOD=new RewriteRuleTokenStream(adaptor,"token GETBASEPERIOD");
        RewriteRuleTokenStream stream_DATE=new RewriteRuleTokenStream(adaptor,"token DATE");
        RewriteRuleTokenStream stream_AVGBASIS=new RewriteRuleTokenStream(adaptor,"token AVGBASIS");
        RewriteRuleTokenStream stream_IFZERO=new RewriteRuleTokenStream(adaptor,"token IFZERO");
        RewriteRuleTokenStream stream_NONZEROCOUNT=new RewriteRuleTokenStream(adaptor,"token NONZEROCOUNT");
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_boolExpr=new RewriteRuleSubtreeStream(adaptor,"rule boolExpr");
        RewriteRuleSubtreeStream stream_exprlist=new RewriteRuleSubtreeStream(adaptor,"rule exprlist");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // RPIExprAST.g:93:5: ( LBRACK ( MAXOF LPAREN expr COMMA expr RPAREN -> ^( MAXOF expr expr ) | LEASTOF LPAREN expr COMMA expr RPAREN -> ^( LEASTOF expr expr ) | ABS LPAREN expr RPAREN -> ^( ABS expr ) | IFTHEN LPAREN boolExpr COMMA expr COMMA expr RPAREN -> ^( IFTHEN boolExpr expr expr ) | QTR LPAREN RPAREN -> QTR | NONZEROCOUNT LPAREN exprlist RPAREN -> ^( NONZEROCOUNT exprlist ) | NONZEROAVG LPAREN exprlist RPAREN -> ^( NONZEROAVG exprlist ) | AVG LPAREN exprlist RPAREN -> ^( AVG exprlist ) | IFZERO LPAREN expr COMMA expr RPAREN -> ^( IFZERO expr expr ) | ACCRUE LPAREN ID RPAREN -> ^( ACCRUE ID ) | ACCRUEFROMBASE LPAREN ID RPAREN -> ^( ACCRUEFROMBASE ID ) | ACCRUEFROM LPAREN NUMBER COMMA ID RPAREN -> ^( ACCRUEFROM NUMBER ID ) | SERIESAVERAGE LPAREN ID COMMA AVGBASIS RPAREN -> ^( SERIESAVERAGE ID AVGBASIS ) | DATE LPAREN ( DATEFORMAT | NUMBER ) RPAREN -> ^( DATE ( DATEFORMAT )? ( NUMBER )? ) | XFCN LPAREN ID COMMA XFCNARG ( COMMA XFCNARG )* RPAREN -> ^( XFCN ID ( XFCNARG )+ ) | AGG LPAREN AGGRULE COMMA expr RPAREN -> ^( AGG AGGRULE expr ) | GETCURRPERIOD LPAREN RPAREN -> GETCURRPERIOD | GETBASEPERIOD LPAREN RPAREN -> GETBASEPERIOD ) RBRACK )
            // RPIExprAST.g:93:7: LBRACK ( MAXOF LPAREN expr COMMA expr RPAREN -> ^( MAXOF expr expr ) | LEASTOF LPAREN expr COMMA expr RPAREN -> ^( LEASTOF expr expr ) | ABS LPAREN expr RPAREN -> ^( ABS expr ) | IFTHEN LPAREN boolExpr COMMA expr COMMA expr RPAREN -> ^( IFTHEN boolExpr expr expr ) | QTR LPAREN RPAREN -> QTR | NONZEROCOUNT LPAREN exprlist RPAREN -> ^( NONZEROCOUNT exprlist ) | NONZEROAVG LPAREN exprlist RPAREN -> ^( NONZEROAVG exprlist ) | AVG LPAREN exprlist RPAREN -> ^( AVG exprlist ) | IFZERO LPAREN expr COMMA expr RPAREN -> ^( IFZERO expr expr ) | ACCRUE LPAREN ID RPAREN -> ^( ACCRUE ID ) | ACCRUEFROMBASE LPAREN ID RPAREN -> ^( ACCRUEFROMBASE ID ) | ACCRUEFROM LPAREN NUMBER COMMA ID RPAREN -> ^( ACCRUEFROM NUMBER ID ) | SERIESAVERAGE LPAREN ID COMMA AVGBASIS RPAREN -> ^( SERIESAVERAGE ID AVGBASIS ) | DATE LPAREN ( DATEFORMAT | NUMBER ) RPAREN -> ^( DATE ( DATEFORMAT )? ( NUMBER )? ) | XFCN LPAREN ID COMMA XFCNARG ( COMMA XFCNARG )* RPAREN -> ^( XFCN ID ( XFCNARG )+ ) | AGG LPAREN AGGRULE COMMA expr RPAREN -> ^( AGG AGGRULE expr ) | GETCURRPERIOD LPAREN RPAREN -> GETCURRPERIOD | GETBASEPERIOD LPAREN RPAREN -> GETBASEPERIOD ) RBRACK
            {
            LBRACK86=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_function833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK86);

            // RPIExprAST.g:93:14: ( MAXOF LPAREN expr COMMA expr RPAREN -> ^( MAXOF expr expr ) | LEASTOF LPAREN expr COMMA expr RPAREN -> ^( LEASTOF expr expr ) | ABS LPAREN expr RPAREN -> ^( ABS expr ) | IFTHEN LPAREN boolExpr COMMA expr COMMA expr RPAREN -> ^( IFTHEN boolExpr expr expr ) | QTR LPAREN RPAREN -> QTR | NONZEROCOUNT LPAREN exprlist RPAREN -> ^( NONZEROCOUNT exprlist ) | NONZEROAVG LPAREN exprlist RPAREN -> ^( NONZEROAVG exprlist ) | AVG LPAREN exprlist RPAREN -> ^( AVG exprlist ) | IFZERO LPAREN expr COMMA expr RPAREN -> ^( IFZERO expr expr ) | ACCRUE LPAREN ID RPAREN -> ^( ACCRUE ID ) | ACCRUEFROMBASE LPAREN ID RPAREN -> ^( ACCRUEFROMBASE ID ) | ACCRUEFROM LPAREN NUMBER COMMA ID RPAREN -> ^( ACCRUEFROM NUMBER ID ) | SERIESAVERAGE LPAREN ID COMMA AVGBASIS RPAREN -> ^( SERIESAVERAGE ID AVGBASIS ) | DATE LPAREN ( DATEFORMAT | NUMBER ) RPAREN -> ^( DATE ( DATEFORMAT )? ( NUMBER )? ) | XFCN LPAREN ID COMMA XFCNARG ( COMMA XFCNARG )* RPAREN -> ^( XFCN ID ( XFCNARG )+ ) | AGG LPAREN AGGRULE COMMA expr RPAREN -> ^( AGG AGGRULE expr ) | GETCURRPERIOD LPAREN RPAREN -> GETCURRPERIOD | GETBASEPERIOD LPAREN RPAREN -> GETBASEPERIOD )
            int alt13=18;
            switch ( input.LA(1) ) {
            case MAXOF:
                {
                alt13=1;
                }
                break;
            case LEASTOF:
                {
                alt13=2;
                }
                break;
            case ABS:
                {
                alt13=3;
                }
                break;
            case IFTHEN:
                {
                alt13=4;
                }
                break;
            case QTR:
                {
                alt13=5;
                }
                break;
            case NONZEROCOUNT:
                {
                alt13=6;
                }
                break;
            case NONZEROAVG:
                {
                alt13=7;
                }
                break;
            case AVG:
                {
                alt13=8;
                }
                break;
            case IFZERO:
                {
                alt13=9;
                }
                break;
            case ACCRUE:
                {
                alt13=10;
                }
                break;
            case ACCRUEFROMBASE:
                {
                alt13=11;
                }
                break;
            case ACCRUEFROM:
                {
                alt13=12;
                }
                break;
            case SERIESAVERAGE:
                {
                alt13=13;
                }
                break;
            case DATE:
                {
                alt13=14;
                }
                break;
            case XFCN:
                {
                alt13=15;
                }
                break;
            case AGG:
                {
                alt13=16;
                }
                break;
            case GETCURRPERIOD:
                {
                alt13=17;
                }
                break;
            case GETBASEPERIOD:
                {
                alt13=18;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // RPIExprAST.g:94:7: MAXOF LPAREN expr COMMA expr RPAREN
                    {
                    MAXOF87=(Token)match(input,MAXOF,FOLLOW_MAXOF_in_function844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAXOF.add(MAXOF87);

                    LPAREN88=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN88);

                    pushFollow(FOLLOW_expr_in_function848);
                    expr89=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr89.getTree());
                    COMMA90=(Token)match(input,COMMA,FOLLOW_COMMA_in_function850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA90);

                    pushFollow(FOLLOW_expr_in_function852);
                    expr91=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr91.getTree());
                    RPAREN92=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN92);



                    // AST REWRITE
                    // elements: expr, expr, MAXOF
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 94:43: -> ^( MAXOF expr expr )
                    {
                        // RPIExprAST.g:94:46: ^( MAXOF expr expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_MAXOF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RPIExprAST.g:95:7: LEASTOF LPAREN expr COMMA expr RPAREN
                    {
                    LEASTOF93=(Token)match(input,LEASTOF,FOLLOW_LEASTOF_in_function872); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LEASTOF.add(LEASTOF93);

                    LPAREN94=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function874); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN94);

                    pushFollow(FOLLOW_expr_in_function876);
                    expr95=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr95.getTree());
                    COMMA96=(Token)match(input,COMMA,FOLLOW_COMMA_in_function878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA96);

                    pushFollow(FOLLOW_expr_in_function880);
                    expr97=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr97.getTree());
                    RPAREN98=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN98);



                    // AST REWRITE
                    // elements: expr, LEASTOF, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 95:45: -> ^( LEASTOF expr expr )
                    {
                        // RPIExprAST.g:95:48: ^( LEASTOF expr expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_LEASTOF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RPIExprAST.g:96:7: ABS LPAREN expr RPAREN
                    {
                    ABS99=(Token)match(input,ABS,FOLLOW_ABS_in_function900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ABS.add(ABS99);

                    LPAREN100=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN100);

                    pushFollow(FOLLOW_expr_in_function904);
                    expr101=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr101.getTree());
                    RPAREN102=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN102);



                    // AST REWRITE
                    // elements: ABS, expr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 96:30: -> ^( ABS expr )
                    {
                        // RPIExprAST.g:96:33: ^( ABS expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_ABS.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // RPIExprAST.g:97:7: IFTHEN LPAREN boolExpr COMMA expr COMMA expr RPAREN
                    {
                    IFTHEN103=(Token)match(input,IFTHEN,FOLLOW_IFTHEN_in_function922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IFTHEN.add(IFTHEN103);

                    LPAREN104=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN104);

                    pushFollow(FOLLOW_boolExpr_in_function926);
                    boolExpr105=boolExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolExpr.add(boolExpr105.getTree());
                    COMMA106=(Token)match(input,COMMA,FOLLOW_COMMA_in_function928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA106);

                    pushFollow(FOLLOW_expr_in_function930);
                    expr107=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr107.getTree());
                    COMMA108=(Token)match(input,COMMA,FOLLOW_COMMA_in_function932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA108);

                    pushFollow(FOLLOW_expr_in_function934);
                    expr109=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr109.getTree());
                    RPAREN110=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN110);



                    // AST REWRITE
                    // elements: expr, expr, boolExpr, IFTHEN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 97:59: -> ^( IFTHEN boolExpr expr expr )
                    {
                        // RPIExprAST.g:97:62: ^( IFTHEN boolExpr expr expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_IFTHEN.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_boolExpr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // RPIExprAST.g:98:7: QTR LPAREN RPAREN
                    {
                    QTR111=(Token)match(input,QTR,FOLLOW_QTR_in_function956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QTR.add(QTR111);

                    LPAREN112=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN112);

                    RPAREN113=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function960); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN113);



                    // AST REWRITE
                    // elements: QTR
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 98:25: -> QTR
                    {
                        adaptor.addChild(root_0, stream_QTR.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // RPIExprAST.g:99:7: NONZEROCOUNT LPAREN exprlist RPAREN
                    {
                    NONZEROCOUNT114=(Token)match(input,NONZEROCOUNT,FOLLOW_NONZEROCOUNT_in_function972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NONZEROCOUNT.add(NONZEROCOUNT114);

                    LPAREN115=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function974); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN115);

                    pushFollow(FOLLOW_exprlist_in_function976);
                    exprlist116=exprlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprlist.add(exprlist116.getTree());
                    RPAREN117=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN117);



                    // AST REWRITE
                    // elements: NONZEROCOUNT, exprlist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 99:43: -> ^( NONZEROCOUNT exprlist )
                    {
                        // RPIExprAST.g:99:46: ^( NONZEROCOUNT exprlist )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_NONZEROCOUNT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_exprlist.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // RPIExprAST.g:100:7: NONZEROAVG LPAREN exprlist RPAREN
                    {
                    NONZEROAVG118=(Token)match(input,NONZEROAVG,FOLLOW_NONZEROAVG_in_function994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NONZEROAVG.add(NONZEROAVG118);

                    LPAREN119=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN119);

                    pushFollow(FOLLOW_exprlist_in_function998);
                    exprlist120=exprlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprlist.add(exprlist120.getTree());
                    RPAREN121=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN121);



                    // AST REWRITE
                    // elements: NONZEROAVG, exprlist
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 100:41: -> ^( NONZEROAVG exprlist )
                    {
                        // RPIExprAST.g:100:44: ^( NONZEROAVG exprlist )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_NONZEROAVG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_exprlist.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // RPIExprAST.g:101:7: AVG LPAREN exprlist RPAREN
                    {
                    AVG122=(Token)match(input,AVG,FOLLOW_AVG_in_function1016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVG.add(AVG122);

                    LPAREN123=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1018); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN123);

                    pushFollow(FOLLOW_exprlist_in_function1020);
                    exprlist124=exprlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exprlist.add(exprlist124.getTree());
                    RPAREN125=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN125);



                    // AST REWRITE
                    // elements: exprlist, AVG
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 101:34: -> ^( AVG exprlist )
                    {
                        // RPIExprAST.g:101:37: ^( AVG exprlist )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_AVG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_exprlist.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // RPIExprAST.g:102:7: IFZERO LPAREN expr COMMA expr RPAREN
                    {
                    IFZERO126=(Token)match(input,IFZERO,FOLLOW_IFZERO_in_function1038); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IFZERO.add(IFZERO126);

                    LPAREN127=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1040); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN127);

                    pushFollow(FOLLOW_expr_in_function1042);
                    expr128=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr128.getTree());
                    COMMA129=(Token)match(input,COMMA,FOLLOW_COMMA_in_function1044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA129);

                    pushFollow(FOLLOW_expr_in_function1046);
                    expr130=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr130.getTree());
                    RPAREN131=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN131);



                    // AST REWRITE
                    // elements: expr, expr, IFZERO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 102:44: -> ^( IFZERO expr expr )
                    {
                        // RPIExprAST.g:102:47: ^( IFZERO expr expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_IFZERO.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr.nextTree());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // RPIExprAST.g:103:7: ACCRUE LPAREN ID RPAREN
                    {
                    ACCRUE132=(Token)match(input,ACCRUE,FOLLOW_ACCRUE_in_function1066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ACCRUE.add(ACCRUE132);

                    LPAREN133=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN133);

                    ID134=(Token)match(input,ID,FOLLOW_ID_in_function1070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID134);

                    RPAREN135=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN135);



                    // AST REWRITE
                    // elements: ACCRUE, ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 103:31: -> ^( ACCRUE ID )
                    {
                        // RPIExprAST.g:103:34: ^( ACCRUE ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_ACCRUE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // RPIExprAST.g:104:7: ACCRUEFROMBASE LPAREN ID RPAREN
                    {
                    ACCRUEFROMBASE136=(Token)match(input,ACCRUEFROMBASE,FOLLOW_ACCRUEFROMBASE_in_function1088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ACCRUEFROMBASE.add(ACCRUEFROMBASE136);

                    LPAREN137=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1090); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN137);

                    ID138=(Token)match(input,ID,FOLLOW_ID_in_function1092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID138);

                    RPAREN139=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN139);



                    // AST REWRITE
                    // elements: ID, ACCRUEFROMBASE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 104:39: -> ^( ACCRUEFROMBASE ID )
                    {
                        // RPIExprAST.g:104:42: ^( ACCRUEFROMBASE ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_ACCRUEFROMBASE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // RPIExprAST.g:105:7: ACCRUEFROM LPAREN NUMBER COMMA ID RPAREN
                    {
                    ACCRUEFROM140=(Token)match(input,ACCRUEFROM,FOLLOW_ACCRUEFROM_in_function1110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ACCRUEFROM.add(ACCRUEFROM140);

                    LPAREN141=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN141);

                    NUMBER142=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function1114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER.add(NUMBER142);

                    COMMA143=(Token)match(input,COMMA,FOLLOW_COMMA_in_function1116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA143);

                    ID144=(Token)match(input,ID,FOLLOW_ID_in_function1118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID144);

                    RPAREN145=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN145);



                    // AST REWRITE
                    // elements: NUMBER, ACCRUEFROM, ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 105:48: -> ^( ACCRUEFROM NUMBER ID )
                    {
                        // RPIExprAST.g:105:51: ^( ACCRUEFROM NUMBER ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_ACCRUEFROM.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_NUMBER.nextNode());
                        adaptor.addChild(root_1, stream_ID.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // RPIExprAST.g:106:7: SERIESAVERAGE LPAREN ID COMMA AVGBASIS RPAREN
                    {
                    SERIESAVERAGE146=(Token)match(input,SERIESAVERAGE,FOLLOW_SERIESAVERAGE_in_function1138); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SERIESAVERAGE.add(SERIESAVERAGE146);

                    LPAREN147=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN147);

                    ID148=(Token)match(input,ID,FOLLOW_ID_in_function1142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID148);

                    COMMA149=(Token)match(input,COMMA,FOLLOW_COMMA_in_function1144); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA149);

                    AVGBASIS150=(Token)match(input,AVGBASIS,FOLLOW_AVGBASIS_in_function1146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AVGBASIS.add(AVGBASIS150);

                    RPAREN151=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1148); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN151);



                    // AST REWRITE
                    // elements: ID, AVGBASIS, SERIESAVERAGE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 106:53: -> ^( SERIESAVERAGE ID AVGBASIS )
                    {
                        // RPIExprAST.g:106:56: ^( SERIESAVERAGE ID AVGBASIS )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_SERIESAVERAGE.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());
                        adaptor.addChild(root_1, stream_AVGBASIS.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // RPIExprAST.g:107:7: DATE LPAREN ( DATEFORMAT | NUMBER ) RPAREN
                    {
                    DATE152=(Token)match(input,DATE,FOLLOW_DATE_in_function1166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DATE.add(DATE152);

                    LPAREN153=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1168); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN153);

                    // RPIExprAST.g:107:19: ( DATEFORMAT | NUMBER )
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==DATEFORMAT) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==NUMBER) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;
                    }
                    switch (alt11) {
                        case 1 :
                            // RPIExprAST.g:107:20: DATEFORMAT
                            {
                            DATEFORMAT154=(Token)match(input,DATEFORMAT,FOLLOW_DATEFORMAT_in_function1171); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DATEFORMAT.add(DATEFORMAT154);


                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:107:33: NUMBER
                            {
                            NUMBER155=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_function1175); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUMBER.add(NUMBER155);


                            }
                            break;

                    }

                    RPAREN156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN156);



                    // AST REWRITE
                    // elements: NUMBER, DATE, DATEFORMAT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 107:48: -> ^( DATE ( DATEFORMAT )? ( NUMBER )? )
                    {
                        // RPIExprAST.g:107:51: ^( DATE ( DATEFORMAT )? ( NUMBER )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_DATE.nextNode(), root_1);

                        // RPIExprAST.g:107:58: ( DATEFORMAT )?
                        if ( stream_DATEFORMAT.hasNext() ) {
                            adaptor.addChild(root_1, stream_DATEFORMAT.nextNode());

                        }
                        stream_DATEFORMAT.reset();
                        // RPIExprAST.g:107:70: ( NUMBER )?
                        if ( stream_NUMBER.hasNext() ) {
                            adaptor.addChild(root_1, stream_NUMBER.nextNode());

                        }
                        stream_NUMBER.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // RPIExprAST.g:108:7: XFCN LPAREN ID COMMA XFCNARG ( COMMA XFCNARG )* RPAREN
                    {
                    XFCN157=(Token)match(input,XFCN,FOLLOW_XFCN_in_function1198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_XFCN.add(XFCN157);

                    LPAREN158=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN158);

                    ID159=(Token)match(input,ID,FOLLOW_ID_in_function1202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID159);

                    COMMA160=(Token)match(input,COMMA,FOLLOW_COMMA_in_function1204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA160);

                    XFCNARG161=(Token)match(input,XFCNARG,FOLLOW_XFCNARG_in_function1206); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_XFCNARG.add(XFCNARG161);

                    // RPIExprAST.g:108:36: ( COMMA XFCNARG )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==COMMA) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // RPIExprAST.g:108:37: COMMA XFCNARG
                    	    {
                    	    COMMA162=(Token)match(input,COMMA,FOLLOW_COMMA_in_function1209); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA162);

                    	    XFCNARG163=(Token)match(input,XFCNARG,FOLLOW_XFCNARG_in_function1211); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_XFCNARG.add(XFCNARG163);


                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);

                    RPAREN164=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN164);



                    // AST REWRITE
                    // elements: XFCN, XFCNARG, ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 108:60: -> ^( XFCN ID ( XFCNARG )+ )
                    {
                        // RPIExprAST.g:108:63: ^( XFCN ID ( XFCNARG )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_XFCN.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_ID.nextNode());
                        if ( !(stream_XFCNARG.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_XFCNARG.hasNext() ) {
                            adaptor.addChild(root_1, stream_XFCNARG.nextNode());

                        }
                        stream_XFCNARG.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // RPIExprAST.g:109:7: AGG LPAREN AGGRULE COMMA expr RPAREN
                    {
                    AGG165=(Token)match(input,AGG,FOLLOW_AGG_in_function1234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AGG.add(AGG165);

                    LPAREN166=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN166);

                    AGGRULE167=(Token)match(input,AGGRULE,FOLLOW_AGGRULE_in_function1238); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AGGRULE.add(AGGRULE167);

                    COMMA168=(Token)match(input,COMMA,FOLLOW_COMMA_in_function1240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA168);

                    pushFollow(FOLLOW_expr_in_function1242);
                    expr169=expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expr.add(expr169.getTree());
                    RPAREN170=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1244); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN170);



                    // AST REWRITE
                    // elements: expr, AGG, AGGRULE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 109:44: -> ^( AGG AGGRULE expr )
                    {
                        // RPIExprAST.g:109:47: ^( AGG AGGRULE expr )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_AGG.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_AGGRULE.nextNode());
                        adaptor.addChild(root_1, stream_expr.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 17 :
                    // RPIExprAST.g:110:7: GETCURRPERIOD LPAREN RPAREN
                    {
                    GETCURRPERIOD171=(Token)match(input,GETCURRPERIOD,FOLLOW_GETCURRPERIOD_in_function1262); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GETCURRPERIOD.add(GETCURRPERIOD171);

                    LPAREN172=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1264); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN172);

                    RPAREN173=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1266); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN173);



                    // AST REWRITE
                    // elements: GETCURRPERIOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 110:35: -> GETCURRPERIOD
                    {
                        adaptor.addChild(root_0, stream_GETCURRPERIOD.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 18 :
                    // RPIExprAST.g:111:7: GETBASEPERIOD LPAREN RPAREN
                    {
                    GETBASEPERIOD174=(Token)match(input,GETBASEPERIOD,FOLLOW_GETBASEPERIOD_in_function1278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GETBASEPERIOD.add(GETBASEPERIOD174);

                    LPAREN175=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function1280); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN175);

                    RPAREN176=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function1282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN176);



                    // AST REWRITE
                    // elements: GETBASEPERIOD
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 111:35: -> GETBASEPERIOD
                    {
                        adaptor.addChild(root_0, stream_GETBASEPERIOD.nextNode());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            RBRACK177=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_function1294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK177);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class boolExpr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolExpr"
    // RPIExprAST.g:116:1: boolExpr : boolAtom ;
    public final RPIExprASTParser.boolExpr_return boolExpr() throws RecognitionException {
        RPIExprASTParser.boolExpr_return retval = new RPIExprASTParser.boolExpr_return();
        retval.start = input.LT(1);
        int boolExpr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.boolAtom_return boolAtom178 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // RPIExprAST.g:117:5: ( boolAtom )
            // RPIExprAST.g:117:9: boolAtom
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_boolAtom_in_boolExpr1325);
            boolAtom178=boolAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, boolAtom178.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, boolExpr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolExpr"

    public static class boolFunc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolFunc"
    // RPIExprAST.g:120:1: boolFunc : ( AND LPAREN boolAtom COMMA boolAtom RPAREN -> ^( AND boolAtom boolAtom ) | OR LPAREN boolAtom COMMA boolAtom RPAREN -> ^( OR boolAtom boolAtom ) | NOT LPAREN boolAtom RPAREN -> ^( NOT boolAtom ) );
    public final RPIExprASTParser.boolFunc_return boolFunc() throws RecognitionException {
        RPIExprASTParser.boolFunc_return retval = new RPIExprASTParser.boolFunc_return();
        retval.start = input.LT(1);
        int boolFunc_StartIndex = input.index();
        Object root_0 = null;

        Token AND179=null;
        Token LPAREN180=null;
        Token COMMA182=null;
        Token RPAREN184=null;
        Token OR185=null;
        Token LPAREN186=null;
        Token COMMA188=null;
        Token RPAREN190=null;
        Token NOT191=null;
        Token LPAREN192=null;
        Token RPAREN194=null;
        RPIExprASTParser.boolAtom_return boolAtom181 = null;

        RPIExprASTParser.boolAtom_return boolAtom183 = null;

        RPIExprASTParser.boolAtom_return boolAtom187 = null;

        RPIExprASTParser.boolAtom_return boolAtom189 = null;

        RPIExprASTParser.boolAtom_return boolAtom193 = null;


        Object AND179_tree=null;
        Object LPAREN180_tree=null;
        Object COMMA182_tree=null;
        Object RPAREN184_tree=null;
        Object OR185_tree=null;
        Object LPAREN186_tree=null;
        Object COMMA188_tree=null;
        Object RPAREN190_tree=null;
        Object NOT191_tree=null;
        Object LPAREN192_tree=null;
        Object RPAREN194_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT=new RewriteRuleTokenStream(adaptor,"token NOT");
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleSubtreeStream stream_boolAtom=new RewriteRuleSubtreeStream(adaptor,"rule boolAtom");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // RPIExprAST.g:121:5: ( AND LPAREN boolAtom COMMA boolAtom RPAREN -> ^( AND boolAtom boolAtom ) | OR LPAREN boolAtom COMMA boolAtom RPAREN -> ^( OR boolAtom boolAtom ) | NOT LPAREN boolAtom RPAREN -> ^( NOT boolAtom ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case AND:
                {
                alt14=1;
                }
                break;
            case OR:
                {
                alt14=2;
                }
                break;
            case NOT:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // RPIExprAST.g:121:9: AND LPAREN boolAtom COMMA boolAtom RPAREN
                    {
                    AND179=(Token)match(input,AND,FOLLOW_AND_in_boolFunc1348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND.add(AND179);

                    LPAREN180=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_boolFunc1350); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN180);

                    pushFollow(FOLLOW_boolAtom_in_boolFunc1352);
                    boolAtom181=boolAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolAtom.add(boolAtom181.getTree());
                    COMMA182=(Token)match(input,COMMA,FOLLOW_COMMA_in_boolFunc1354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA182);

                    pushFollow(FOLLOW_boolAtom_in_boolFunc1356);
                    boolAtom183=boolAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolAtom.add(boolAtom183.getTree());
                    RPAREN184=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_boolFunc1358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN184);



                    // AST REWRITE
                    // elements: AND, boolAtom, boolAtom
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 121:51: -> ^( AND boolAtom boolAtom )
                    {
                        // RPIExprAST.g:121:54: ^( AND boolAtom boolAtom )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_AND.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_boolAtom.nextTree());
                        adaptor.addChild(root_1, stream_boolAtom.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // RPIExprAST.g:122:9: OR LPAREN boolAtom COMMA boolAtom RPAREN
                    {
                    OR185=(Token)match(input,OR,FOLLOW_OR_in_boolFunc1378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_OR.add(OR185);

                    LPAREN186=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_boolFunc1380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN186);

                    pushFollow(FOLLOW_boolAtom_in_boolFunc1382);
                    boolAtom187=boolAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolAtom.add(boolAtom187.getTree());
                    COMMA188=(Token)match(input,COMMA,FOLLOW_COMMA_in_boolFunc1384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA188);

                    pushFollow(FOLLOW_boolAtom_in_boolFunc1386);
                    boolAtom189=boolAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolAtom.add(boolAtom189.getTree());
                    RPAREN190=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_boolFunc1388); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN190);



                    // AST REWRITE
                    // elements: OR, boolAtom, boolAtom
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 122:50: -> ^( OR boolAtom boolAtom )
                    {
                        // RPIExprAST.g:122:53: ^( OR boolAtom boolAtom )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_OR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_boolAtom.nextTree());
                        adaptor.addChild(root_1, stream_boolAtom.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // RPIExprAST.g:123:9: NOT LPAREN boolAtom RPAREN
                    {
                    NOT191=(Token)match(input,NOT,FOLLOW_NOT_in_boolFunc1408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NOT.add(NOT191);

                    LPAREN192=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_boolFunc1410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN192);

                    pushFollow(FOLLOW_boolAtom_in_boolFunc1412);
                    boolAtom193=boolAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolAtom.add(boolAtom193.getTree());
                    RPAREN194=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_boolFunc1414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN194);



                    // AST REWRITE
                    // elements: boolAtom, NOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 123:36: -> ^( NOT boolAtom )
                    {
                        // RPIExprAST.g:123:39: ^( NOT boolAtom )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(stream_NOT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_boolAtom.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, boolFunc_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolFunc"

    public static class boolOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolOp"
    // RPIExprAST.g:126:1: boolOp : expr ( BOOLOP_EQ | BOOLOP_LT | BOOLOP_GT | BOOLOP_GE | BOOLOP_LE ) expr ;
    public final RPIExprASTParser.boolOp_return boolOp() throws RecognitionException {
        RPIExprASTParser.boolOp_return retval = new RPIExprASTParser.boolOp_return();
        retval.start = input.LT(1);
        int boolOp_StartIndex = input.index();
        Object root_0 = null;

        Token BOOLOP_EQ196=null;
        Token BOOLOP_LT197=null;
        Token BOOLOP_GT198=null;
        Token BOOLOP_GE199=null;
        Token BOOLOP_LE200=null;
        RPIExprASTParser.expr_return expr195 = null;

        RPIExprASTParser.expr_return expr201 = null;


        Object BOOLOP_EQ196_tree=null;
        Object BOOLOP_LT197_tree=null;
        Object BOOLOP_GT198_tree=null;
        Object BOOLOP_GE199_tree=null;
        Object BOOLOP_LE200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // RPIExprAST.g:127:5: ( expr ( BOOLOP_EQ | BOOLOP_LT | BOOLOP_GT | BOOLOP_GE | BOOLOP_LE ) expr )
            // RPIExprAST.g:127:9: expr ( BOOLOP_EQ | BOOLOP_LT | BOOLOP_GT | BOOLOP_GE | BOOLOP_LE ) expr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_in_boolOp1446);
            expr195=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr195.getTree());
            // RPIExprAST.g:127:14: ( BOOLOP_EQ | BOOLOP_LT | BOOLOP_GT | BOOLOP_GE | BOOLOP_LE )
            int alt15=5;
            switch ( input.LA(1) ) {
            case BOOLOP_EQ:
                {
                alt15=1;
                }
                break;
            case BOOLOP_LT:
                {
                alt15=2;
                }
                break;
            case BOOLOP_GT:
                {
                alt15=3;
                }
                break;
            case BOOLOP_GE:
                {
                alt15=4;
                }
                break;
            case BOOLOP_LE:
                {
                alt15=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // RPIExprAST.g:127:15: BOOLOP_EQ
                    {
                    BOOLOP_EQ196=(Token)match(input,BOOLOP_EQ,FOLLOW_BOOLOP_EQ_in_boolOp1449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_EQ196_tree = (Object)adaptor.create(BOOLOP_EQ196);
                    root_0 = (Object)adaptor.becomeRoot(BOOLOP_EQ196_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:127:28: BOOLOP_LT
                    {
                    BOOLOP_LT197=(Token)match(input,BOOLOP_LT,FOLLOW_BOOLOP_LT_in_boolOp1454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_LT197_tree = (Object)adaptor.create(BOOLOP_LT197);
                    root_0 = (Object)adaptor.becomeRoot(BOOLOP_LT197_tree, root_0);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:127:41: BOOLOP_GT
                    {
                    BOOLOP_GT198=(Token)match(input,BOOLOP_GT,FOLLOW_BOOLOP_GT_in_boolOp1459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_GT198_tree = (Object)adaptor.create(BOOLOP_GT198);
                    root_0 = (Object)adaptor.becomeRoot(BOOLOP_GT198_tree, root_0);
                    }

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:127:54: BOOLOP_GE
                    {
                    BOOLOP_GE199=(Token)match(input,BOOLOP_GE,FOLLOW_BOOLOP_GE_in_boolOp1464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_GE199_tree = (Object)adaptor.create(BOOLOP_GE199);
                    root_0 = (Object)adaptor.becomeRoot(BOOLOP_GE199_tree, root_0);
                    }

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:127:67: BOOLOP_LE
                    {
                    BOOLOP_LE200=(Token)match(input,BOOLOP_LE,FOLLOW_BOOLOP_LE_in_boolOp1469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_LE200_tree = (Object)adaptor.create(BOOLOP_LE200);
                    root_0 = (Object)adaptor.becomeRoot(BOOLOP_LE200_tree, root_0);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expr_in_boolOp1473);
            expr201=expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr201.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, boolOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolOp"

    public static class boolAtom_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolAtom"
    // RPIExprAST.g:130:1: boolAtom : ( ( boolOp )=> boolOp | boolFunc | LPAREN boolExpr RPAREN -> boolExpr );
    public final RPIExprASTParser.boolAtom_return boolAtom() throws RecognitionException {
        RPIExprASTParser.boolAtom_return retval = new RPIExprASTParser.boolAtom_return();
        retval.start = input.LT(1);
        int boolAtom_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN204=null;
        Token RPAREN206=null;
        RPIExprASTParser.boolOp_return boolOp202 = null;

        RPIExprASTParser.boolFunc_return boolFunc203 = null;

        RPIExprASTParser.boolExpr_return boolExpr205 = null;


        Object LPAREN204_tree=null;
        Object RPAREN206_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_boolExpr=new RewriteRuleSubtreeStream(adaptor,"rule boolExpr");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // RPIExprAST.g:131:5: ( ( boolOp )=> boolOp | boolFunc | LPAREN boolExpr RPAREN -> boolExpr )
            int alt16=3;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==NUMBER) && (synpred45_RPIExprAST())) {
                alt16=1;
            }
            else if ( (LA16_0==108) && (synpred45_RPIExprAST())) {
                alt16=1;
            }
            else if ( (LA16_0==LPAREN) ) {
                int LA16_3 = input.LA(2);

                if ( (synpred45_RPIExprAST()) ) {
                    alt16=1;
                }
                else if ( (true) ) {
                    alt16=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA16_0==LBRACK) && (synpred45_RPIExprAST())) {
                alt16=1;
            }
            else if ( (LA16_0==ID) && (synpred45_RPIExprAST())) {
                alt16=1;
            }
            else if ( ((LA16_0>=AND && LA16_0<=NOT)) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // RPIExprAST.g:131:9: ( boolOp )=> boolOp
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolOp_in_boolAtom1498);
                    boolOp202=boolOp();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolOp202.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:132:9: boolFunc
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolFunc_in_boolAtom1508);
                    boolFunc203=boolFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolFunc203.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:133:9: LPAREN boolExpr RPAREN
                    {
                    LPAREN204=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_boolAtom1518); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN204);

                    pushFollow(FOLLOW_boolExpr_in_boolAtom1520);
                    boolExpr205=boolExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_boolExpr.add(boolExpr205.getTree());
                    RPAREN206=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_boolAtom1522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN206);



                    // AST REWRITE
                    // elements: boolExpr
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 133:32: -> boolExpr
                    {
                        adaptor.addChild(root_0, stream_boolExpr.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, boolAtom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolAtom"

    public static class start_rule_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start_rule"
    // RPIExprAST.g:138:1: start_rule : ( create_package )* EOF ;
    public final RPIExprASTParser.start_rule_return start_rule() throws RecognitionException {
        RPIExprASTParser.start_rule_return retval = new RPIExprASTParser.start_rule_return();
        retval.start = input.LT(1);
        int start_rule_StartIndex = input.index();
        Object root_0 = null;

        Token EOF208=null;
        RPIExprASTParser.create_package_return create_package207 = null;


        Object EOF208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // RPIExprAST.g:139:5: ( ( create_package )* EOF )
            // RPIExprAST.g:139:9: ( create_package )* EOF
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:139:9: ( create_package )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==110) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // RPIExprAST.g:139:10: create_package
            	    {
            	    pushFollow(FOLLOW_create_package_in_start_rule1548);
            	    create_package207=create_package();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, create_package207.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            EOF208=(Token)match(input,EOF,FOLLOW_EOF_in_start_rule1552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF208_tree = (Object)adaptor.create(EOF208);
            adaptor.addChild(root_0, EOF208_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, start_rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "start_rule"

    public static class create_package_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_package"
    // RPIExprAST.g:142:1: create_package : 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) ;
    public final RPIExprASTParser.create_package_return create_package() throws RecognitionException {
        RPIExprASTParser.create_package_return retval = new RPIExprASTParser.create_package_return();
        retval.start = input.LT(1);
        int create_package_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal209=null;
        Token string_literal210=null;
        RPIExprASTParser.keyREPLACE_return keyREPLACE211 = null;

        RPIExprASTParser.package_spec_return package_spec212 = null;

        RPIExprASTParser.package_body_return package_body213 = null;


        Object string_literal209_tree=null;
        Object string_literal210_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // RPIExprAST.g:143:5: ( 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) )
            // RPIExprAST.g:143:9: 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body )
            {
            root_0 = (Object)adaptor.nil();

            string_literal209=(Token)match(input,110,FOLLOW_110_in_create_package1571); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal209_tree = (Object)adaptor.create(string_literal209);
            adaptor.addChild(root_0, string_literal209_tree);
            }
            // RPIExprAST.g:143:18: ( 'OR' keyREPLACE )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==OR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // RPIExprAST.g:143:20: 'OR' keyREPLACE
                    {
                    string_literal210=(Token)match(input,OR,FOLLOW_OR_in_create_package1575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal210_tree = (Object)adaptor.create(string_literal210);
                    adaptor.addChild(root_0, string_literal210_tree);
                    }
                    pushFollow(FOLLOW_keyREPLACE_in_create_package1577);
                    keyREPLACE211=keyREPLACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREPLACE211.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:144:9: ( package_spec | package_body )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==216) ) {
                int LA19_1 = input.LA(2);

                if ( (LA19_1==ID) ) {
                    int LA19_2 = input.LA(3);

                    if ( (LA19_2==DOT||(LA19_2>=111 && LA19_2<=112)) ) {
                        alt19=1;
                    }
                    else if ( (LA19_2==ID||LA19_2==DOUBLEQUOTED_STRING||LA19_2==158) ) {
                        alt19=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 19, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA19_1==DOUBLEQUOTED_STRING||LA19_1==158) ) {
                    alt19=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // RPIExprAST.g:144:11: package_spec
                    {
                    pushFollow(FOLLOW_package_spec_in_create_package1592);
                    package_spec212=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_spec212.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:144:26: package_body
                    {
                    pushFollow(FOLLOW_package_body_in_create_package1596);
                    package_body213=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_body213.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, create_package_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_package"

    public static class package_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // RPIExprAST.g:147:1: package_spec : keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMICOLON ;
    public final RPIExprASTParser.package_spec_return package_spec() throws RecognitionException {
        RPIExprASTParser.package_spec_return retval = new RPIExprASTParser.package_spec_return();
        retval.start = input.LT(1);
        int package_spec_StartIndex = input.index();
        Object root_0 = null;

        Token set216=null;
        Token string_literal218=null;
        Token SEMICOLON220=null;
        RPIExprASTParser.keyPACKAGE_return keyPACKAGE214 = null;

        RPIExprASTParser.package_name_return package_name215 = null;

        RPIExprASTParser.package_obj_spec_return package_obj_spec217 = null;

        RPIExprASTParser.package_name_return package_name219 = null;


        Object set216_tree=null;
        Object string_literal218_tree=null;
        Object SEMICOLON220_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // RPIExprAST.g:148:5: ( keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMICOLON )
            // RPIExprAST.g:148:9: keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyPACKAGE_in_package_spec1621);
            keyPACKAGE214=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPACKAGE214.getTree());
            pushFollow(FOLLOW_package_name_in_package_spec1623);
            package_name215=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name215.getTree());
            set216=(Token)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set216));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprAST.g:149:9: ( package_obj_spec )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==ID||LA20_0==DOUBLEQUOTED_STRING||(LA20_0>=161 && LA20_0<=162)||LA20_0==217) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // RPIExprAST.g:149:11: package_obj_spec
            	    {
            	    pushFollow(FOLLOW_package_obj_spec_in_package_spec1646);
            	    package_obj_spec217=package_obj_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_obj_spec217.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            string_literal218=(Token)match(input,113,FOLLOW_113_in_package_spec1659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal218_tree = (Object)adaptor.create(string_literal218);
            adaptor.addChild(root_0, string_literal218_tree);
            }
            // RPIExprAST.g:150:15: ( package_name )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==ID||LA21_0==DOUBLEQUOTED_STRING||LA21_0==158) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // RPIExprAST.g:150:16: package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_spec1662);
                    package_name219=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name219.getTree());

                    }
                    break;

            }

            SEMICOLON220=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_spec1666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON220_tree = (Object)adaptor.create(SEMICOLON220);
            adaptor.addChild(root_0, SEMICOLON220_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, package_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // RPIExprAST.g:153:1: package_body : keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMICOLON ;
    public final RPIExprASTParser.package_body_return package_body() throws RecognitionException {
        RPIExprASTParser.package_body_return retval = new RPIExprASTParser.package_body_return();
        retval.start = input.LT(1);
        int package_body_StartIndex = input.index();
        Object root_0 = null;

        Token set224=null;
        Token string_literal226=null;
        Token string_literal228=null;
        Token SEMICOLON230=null;
        RPIExprASTParser.keyPACKAGE_return keyPACKAGE221 = null;

        RPIExprASTParser.keyBODY_return keyBODY222 = null;

        RPIExprASTParser.package_name_return package_name223 = null;

        RPIExprASTParser.package_obj_body_return package_obj_body225 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements227 = null;

        RPIExprASTParser.package_name_return package_name229 = null;


        Object set224_tree=null;
        Object string_literal226_tree=null;
        Object string_literal228_tree=null;
        Object SEMICOLON230_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // RPIExprAST.g:154:5: ( keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMICOLON )
            // RPIExprAST.g:154:9: keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyPACKAGE_in_package_body1689);
            keyPACKAGE221=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPACKAGE221.getTree());
            // RPIExprAST.g:154:20: ( keyBODY )
            // RPIExprAST.g:154:22: keyBODY
            {
            pushFollow(FOLLOW_keyBODY_in_package_body1693);
            keyBODY222=keyBODY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBODY222.getTree());

            }

            pushFollow(FOLLOW_package_name_in_package_body1697);
            package_name223=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name223.getTree());
            set224=(Token)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set224));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprAST.g:155:9: ( package_obj_body )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==ID||LA22_0==DOUBLEQUOTED_STRING||LA22_0==110||(LA22_0>=161 && LA22_0<=162)||LA22_0==217) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // RPIExprAST.g:155:11: package_obj_body
            	    {
            	    pushFollow(FOLLOW_package_obj_body_in_package_body1719);
            	    package_obj_body225=package_obj_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_obj_body225.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            // RPIExprAST.g:156:9: ( 'BEGIN' seq_of_statements )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==114) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // RPIExprAST.g:156:11: 'BEGIN' seq_of_statements
                    {
                    string_literal226=(Token)match(input,114,FOLLOW_114_in_package_body1734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal226_tree = (Object)adaptor.create(string_literal226);
                    adaptor.addChild(root_0, string_literal226_tree);
                    }
                    pushFollow(FOLLOW_seq_of_statements_in_package_body1736);
                    seq_of_statements227=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements227.getTree());

                    }
                    break;

            }

            string_literal228=(Token)match(input,113,FOLLOW_113_in_package_body1751); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal228_tree = (Object)adaptor.create(string_literal228);
            adaptor.addChild(root_0, string_literal228_tree);
            }
            // RPIExprAST.g:157:15: ( package_name )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ID||LA24_0==DOUBLEQUOTED_STRING||LA24_0==158) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // RPIExprAST.g:157:17: package_name
                    {
                    pushFollow(FOLLOW_package_name_in_package_body1755);
                    package_name229=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, package_name229.getTree());

                    }
                    break;

            }

            SEMICOLON230=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_body1760); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON230_tree = (Object)adaptor.create(SEMICOLON230);
            adaptor.addChild(root_0, SEMICOLON230_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, package_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_name"
    // RPIExprAST.g:160:1: package_name : ( schema_name DOT )? identifier ;
    public final RPIExprASTParser.package_name_return package_name() throws RecognitionException {
        RPIExprASTParser.package_name_return retval = new RPIExprASTParser.package_name_return();
        retval.start = input.LT(1);
        int package_name_StartIndex = input.index();
        Object root_0 = null;

        Token DOT232=null;
        RPIExprASTParser.schema_name_return schema_name231 = null;

        RPIExprASTParser.identifier_return identifier233 = null;


        Object DOT232_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // RPIExprAST.g:161:5: ( ( schema_name DOT )? identifier )
            // RPIExprAST.g:161:9: ( schema_name DOT )? identifier
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:161:9: ( schema_name DOT )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ID||LA25_0==DOUBLEQUOTED_STRING) ) {
                int LA25_1 = input.LA(2);

                if ( (LA25_1==DOT) ) {
                    alt25=1;
                }
            }
            else if ( (LA25_0==158) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // RPIExprAST.g:161:11: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_package_name1781);
                    schema_name231=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name231.getTree());
                    DOT232=(Token)match(input,DOT,FOLLOW_DOT_in_package_name1783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT232_tree = (Object)adaptor.create(DOT232);
                    adaptor.addChild(root_0, DOT232_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_package_name1788);
            identifier233=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier233.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, package_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_name"

    public static class package_obj_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_obj_spec"
    // RPIExprAST.g:164:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );
    public final RPIExprASTParser.package_obj_spec_return package_obj_spec() throws RecognitionException {
        RPIExprASTParser.package_obj_spec_return retval = new RPIExprASTParser.package_obj_spec_return();
        retval.start = input.LT(1);
        int package_obj_spec_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.variable_declaration_return variable_declaration234 = null;

        RPIExprASTParser.type_declaration_return type_declaration235 = null;

        RPIExprASTParser.subtype_declaration_return subtype_declaration236 = null;

        RPIExprASTParser.record_declaration_return record_declaration237 = null;

        RPIExprASTParser.plsql_table_declaration_return plsql_table_declaration238 = null;

        RPIExprASTParser.varray_declaration_return varray_declaration239 = null;

        RPIExprASTParser.cursor_declaration_return cursor_declaration240 = null;

        RPIExprASTParser.cursor_spec_return cursor_spec241 = null;

        RPIExprASTParser.procedure_spec_return procedure_spec242 = null;

        RPIExprASTParser.function_spec_return function_spec243 = null;

        RPIExprASTParser.exception_declaration_return exception_declaration244 = null;

        RPIExprASTParser.pragma_declaration_return pragma_declaration245 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // RPIExprAST.g:165:5: ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration )
            int alt26=12;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // RPIExprAST.g:165:9: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1808);
                    variable_declaration234=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration234.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:166:9: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_package_obj_spec1819);
                    type_declaration235=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration235.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:167:9: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1829);
                    subtype_declaration236=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration236.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:168:9: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec1840);
                    record_declaration237=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration237.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:169:9: plsql_table_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_spec1851);
                    plsql_table_declaration238=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration238.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:170:9: varray_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_varray_declaration_in_package_obj_spec1862);
                    varray_declaration239=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration239.getTree());

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:171:9: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1872);
                    cursor_declaration240=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration240.getTree());

                    }
                    break;
                case 8 :
                    // RPIExprAST.g:172:9: cursor_spec
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cursor_spec_in_package_obj_spec1883);
                    cursor_spec241=cursor_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_spec241.getTree());

                    }
                    break;
                case 9 :
                    // RPIExprAST.g:173:9: procedure_spec
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1894);
                    procedure_spec242=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_spec242.getTree());

                    }
                    break;
                case 10 :
                    // RPIExprAST.g:174:9: function_spec
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_spec_in_package_obj_spec1905);
                    function_spec243=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_spec243.getTree());

                    }
                    break;
                case 11 :
                    // RPIExprAST.g:175:9: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1916);
                    exception_declaration244=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration244.getTree());

                    }
                    break;
                case 12 :
                    // RPIExprAST.g:176:9: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1927);
                    pragma_declaration245=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration245.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, package_obj_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_obj_spec"

    public static class variable_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // RPIExprAST.g:179:1: variable_declaration : variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? SEMICOLON ;
    public final RPIExprASTParser.variable_declaration_return variable_declaration() throws RecognitionException {
        RPIExprASTParser.variable_declaration_return retval = new RPIExprASTParser.variable_declaration_return();
        retval.start = input.LT(1);
        int variable_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal247=null;
        Token string_literal249=null;
        Token string_literal250=null;
        Token set251=null;
        Token SEMICOLON253=null;
        RPIExprASTParser.variable_name_return variable_name246 = null;

        RPIExprASTParser.type_spec_return type_spec248 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression252 = null;


        Object string_literal247_tree=null;
        Object string_literal249_tree=null;
        Object string_literal250_tree=null;
        Object set251_tree=null;
        Object SEMICOLON253_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // RPIExprAST.g:180:5: ( variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? SEMICOLON )
            // RPIExprAST.g:180:9: variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variable_name_in_variable_declaration1946);
            variable_name246=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name246.getTree());
            // RPIExprAST.g:180:23: ( 'CONSTANT' )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==115) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // RPIExprAST.g:180:24: 'CONSTANT'
                    {
                    string_literal247=(Token)match(input,115,FOLLOW_115_in_variable_declaration1949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal247_tree = (Object)adaptor.create(string_literal247);
                    adaptor.addChild(root_0, string_literal247_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_type_spec_in_variable_declaration1961);
            type_spec248=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec248.getTree());
            // RPIExprAST.g:181:19: ( 'NOT' 'NULL' )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==NOT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // RPIExprAST.g:181:20: 'NOT' 'NULL'
                    {
                    string_literal249=(Token)match(input,NOT,FOLLOW_NOT_in_variable_declaration1964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal249_tree = (Object)adaptor.create(string_literal249);
                    adaptor.addChild(root_0, string_literal249_tree);
                    }
                    string_literal250=(Token)match(input,116,FOLLOW_116_in_variable_declaration1966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal250_tree = (Object)adaptor.create(string_literal250);
                    adaptor.addChild(root_0, string_literal250_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:182:9: ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==SQL_ASSIGN||LA29_0==117) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // RPIExprAST.g:182:11: ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    set251=(Token)input.LT(1);
                    if ( input.LA(1)==SQL_ASSIGN||input.LA(1)==117 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set251));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    pushFollow(FOLLOW_plsql_expression_in_variable_declaration1991);
                    plsql_expression252=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression252.getTree());

                    }
                    break;

            }

            SEMICOLON253=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration1995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON253_tree = (Object)adaptor.create(SEMICOLON253);
            adaptor.addChild(root_0, SEMICOLON253_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // RPIExprAST.g:185:1: type_declaration : keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMICOLON ;
    public final RPIExprASTParser.type_declaration_return type_declaration() throws RecognitionException {
        RPIExprASTParser.type_declaration_return retval = new RPIExprASTParser.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal256=null;
        Token string_literal259=null;
        Token string_literal260=null;
        Token LPAREN261=null;
        Token RPAREN263=null;
        Token SEMICOLON264=null;
        RPIExprASTParser.keyTYPE_return keyTYPE254 = null;

        RPIExprASTParser.type_spec_return type_spec255 = null;

        RPIExprASTParser.keyNEW_return keyNEW257 = null;

        RPIExprASTParser.type_spec_return type_spec258 = null;

        RPIExprASTParser.plsql_expressions_return plsql_expressions262 = null;


        Object string_literal256_tree=null;
        Object string_literal259_tree=null;
        Object string_literal260_tree=null;
        Object LPAREN261_tree=null;
        Object RPAREN263_tree=null;
        Object SEMICOLON264_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // RPIExprAST.g:186:5: ( keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMICOLON )
            // RPIExprAST.g:186:9: keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyTYPE_in_type_declaration2018);
            keyTYPE254=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE254.getTree());
            pushFollow(FOLLOW_type_spec_in_type_declaration2020);
            type_spec255=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec255.getTree());
            string_literal256=(Token)match(input,111,FOLLOW_111_in_type_declaration2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal256_tree = (Object)adaptor.create(string_literal256);
            adaptor.addChild(root_0, string_literal256_tree);
            }
            // RPIExprAST.g:186:32: ( keyNEW )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID) ) {
                switch ( input.LA(2) ) {
                    case LPAREN:
                        {
                        int LA30_3 = input.LA(3);

                        if ( (LA30_3==NUMBER) ) {
                            int LA30_6 = input.LA(4);

                            if ( (LA30_6==RPAREN) ) {
                                int LA30_8 = input.LA(5);

                                if ( ((synpred73_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NEW")))) ) {
                                    alt30=1;
                                }
                            }
                            else if ( (LA30_6==EQ||LA30_6==COMMA||(LA30_6>=PLUS && LA30_6<=DIV)||(LA30_6>=AND && LA30_6<=NOT)||(LA30_6>=BOOLOP_LT && LA30_6<=BOOLOP_LE)||(LA30_6>=FOUND_ATTR && LA30_6<=EXPONENT)||LA30_6==NOT_EQ||LA30_6==111||LA30_6==160||LA30_6==192||LA30_6==196) ) {
                                alt30=1;
                            }
                        }
                        else if ( ((LA30_3>=ID && LA30_3<=LPAREN)||(LA30_3>=SQL && LA30_3<=MINUS)||LA30_3==NOT||LA30_3==QUOTED_STRING||LA30_3==DOUBLEQUOTED_STRING||LA30_3==116||LA30_3==158||(LA30_3>=168 && LA30_3<=169)||(LA30_3>=174 && LA30_3<=175)||LA30_3==198) ) {
                            alt30=1;
                        }
                        }
                        break;
                    case ID:
                        {
                        int LA30_4 = input.LA(3);

                        if ( (LA30_4==LPAREN) ) {
                            int LA30_7 = input.LA(4);

                            if ( (LA30_7==NUMBER) ) {
                                int LA30_9 = input.LA(5);

                                if ( (LA30_9==RPAREN) ) {
                                    int LA30_10 = input.LA(6);

                                    if ( (LA30_10==SEMICOLON||LA30_10==NOT||LA30_10==136) ) {
                                        alt30=1;
                                    }
                                }
                            }
                        }
                        else if ( (LA30_4==ID||LA30_4==SEMICOLON||LA30_4==NOT||LA30_4==DOT||(LA30_4>=TYPE_ATTR && LA30_4<=ROWTYPE_ATTR)||LA30_4==AT_SIGN||LA30_4==136) ) {
                            alt30=1;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt30=1;
                        }
                        break;
                }

            }
            switch (alt30) {
                case 1 :
                    // RPIExprAST.g:186:34: keyNEW
                    {
                    pushFollow(FOLLOW_keyNEW_in_type_declaration2026);
                    keyNEW257=keyNEW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNEW257.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:186:44: ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==ID||LA32_0==DOUBLEQUOTED_STRING||(LA32_0>=122 && LA32_0<=134)||(LA32_0>=137 && LA32_0<=144)||(LA32_0>=146 && LA32_0<=159)) ) {
                alt32=1;
            }
            else if ( (LA32_0==LPAREN) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // RPIExprAST.g:186:46: type_spec ( 'NOT' 'NULL' )?
                    {
                    pushFollow(FOLLOW_type_spec_in_type_declaration2033);
                    type_spec258=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec258.getTree());
                    // RPIExprAST.g:186:56: ( 'NOT' 'NULL' )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==NOT) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // RPIExprAST.g:186:58: 'NOT' 'NULL'
                            {
                            string_literal259=(Token)match(input,NOT,FOLLOW_NOT_in_type_declaration2037); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal259_tree = (Object)adaptor.create(string_literal259);
                            adaptor.addChild(root_0, string_literal259_tree);
                            }
                            string_literal260=(Token)match(input,116,FOLLOW_116_in_type_declaration2039); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal260_tree = (Object)adaptor.create(string_literal260);
                            adaptor.addChild(root_0, string_literal260_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:186:76: LPAREN plsql_expressions RPAREN
                    {
                    LPAREN261=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_declaration2046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN261_tree = (Object)adaptor.create(LPAREN261);
                    adaptor.addChild(root_0, LPAREN261_tree);
                    }
                    pushFollow(FOLLOW_plsql_expressions_in_type_declaration2048);
                    plsql_expressions262=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions262.getTree());
                    RPAREN263=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_declaration2050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN263_tree = (Object)adaptor.create(RPAREN263);
                    adaptor.addChild(root_0, RPAREN263_tree);
                    }

                    }
                    break;

            }

            SEMICOLON264=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration2054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON264_tree = (Object)adaptor.create(SEMICOLON264);
            adaptor.addChild(root_0, SEMICOLON264_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, type_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class subtype_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_declaration"
    // RPIExprAST.g:189:1: subtype_declaration : keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMICOLON ;
    public final RPIExprASTParser.subtype_declaration_return subtype_declaration() throws RecognitionException {
        RPIExprASTParser.subtype_declaration_return retval = new RPIExprASTParser.subtype_declaration_return();
        retval.start = input.LT(1);
        int subtype_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal267=null;
        Token string_literal269=null;
        Token string_literal270=null;
        Token DOUBLEDOT273=null;
        Token SEMICOLON275=null;
        RPIExprASTParser.keySUBTYPE_return keySUBTYPE265 = null;

        RPIExprASTParser.type_spec_return type_spec266 = null;

        RPIExprASTParser.type_spec_return type_spec268 = null;

        RPIExprASTParser.keyRANGE_return keyRANGE271 = null;

        RPIExprASTParser.literal_return literal272 = null;

        RPIExprASTParser.literal_return literal274 = null;


        Object string_literal267_tree=null;
        Object string_literal269_tree=null;
        Object string_literal270_tree=null;
        Object DOUBLEDOT273_tree=null;
        Object SEMICOLON275_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // RPIExprAST.g:190:5: ( keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMICOLON )
            // RPIExprAST.g:190:9: keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keySUBTYPE_in_subtype_declaration2077);
            keySUBTYPE265=keySUBTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySUBTYPE265.getTree());
            pushFollow(FOLLOW_type_spec_in_subtype_declaration2079);
            type_spec266=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec266.getTree());
            string_literal267=(Token)match(input,111,FOLLOW_111_in_subtype_declaration2081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal267_tree = (Object)adaptor.create(string_literal267);
            adaptor.addChild(root_0, string_literal267_tree);
            }
            pushFollow(FOLLOW_type_spec_in_subtype_declaration2083);
            type_spec268=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec268.getTree());
            // RPIExprAST.g:190:45: ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )?
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==NOT) ) {
                alt33=1;
            }
            else if ( (LA33_0==ID) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    // RPIExprAST.g:190:47: 'NOT' 'NULL'
                    {
                    string_literal269=(Token)match(input,NOT,FOLLOW_NOT_in_subtype_declaration2087); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal269_tree = (Object)adaptor.create(string_literal269);
                    adaptor.addChild(root_0, string_literal269_tree);
                    }
                    string_literal270=(Token)match(input,116,FOLLOW_116_in_subtype_declaration2089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal270_tree = (Object)adaptor.create(string_literal270);
                    adaptor.addChild(root_0, string_literal270_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:190:62: keyRANGE literal DOUBLEDOT literal
                    {
                    pushFollow(FOLLOW_keyRANGE_in_subtype_declaration2093);
                    keyRANGE271=keyRANGE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRANGE271.getTree());
                    pushFollow(FOLLOW_literal_in_subtype_declaration2095);
                    literal272=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal272.getTree());
                    DOUBLEDOT273=(Token)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_subtype_declaration2097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLEDOT273_tree = (Object)adaptor.create(DOUBLEDOT273);
                    adaptor.addChild(root_0, DOUBLEDOT273_tree);
                    }
                    pushFollow(FOLLOW_literal_in_subtype_declaration2099);
                    literal274=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal274.getTree());

                    }
                    break;

            }

            SEMICOLON275=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_subtype_declaration2104); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON275_tree = (Object)adaptor.create(SEMICOLON275);
            adaptor.addChild(root_0, SEMICOLON275_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, subtype_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"

    public static class cursor_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_declaration"
    // RPIExprAST.g:193:1: cursor_declaration : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMICOLON ;
    public final RPIExprASTParser.cursor_declaration_return cursor_declaration() throws RecognitionException {
        RPIExprASTParser.cursor_declaration_return retval = new RPIExprASTParser.cursor_declaration_return();
        retval.start = input.LT(1);
        int cursor_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN278=null;
        Token RPAREN280=null;
        Token string_literal281=null;
        Token SEMICOLON283=null;
        RPIExprASTParser.keyCURSOR_return keyCURSOR276 = null;

        RPIExprASTParser.cursor_name_return cursor_name277 = null;

        RPIExprASTParser.parameter_specs_return parameter_specs279 = null;

        RPIExprASTParser.select_command_return select_command282 = null;


        Object LPAREN278_tree=null;
        Object RPAREN280_tree=null;
        Object string_literal281_tree=null;
        Object SEMICOLON283_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // RPIExprAST.g:194:5: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMICOLON )
            // RPIExprAST.g:194:9: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyCURSOR_in_cursor_declaration2130);
            keyCURSOR276=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR276.getTree());
            pushFollow(FOLLOW_cursor_name_in_cursor_declaration2132);
            cursor_name277=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name277.getTree());
            // RPIExprAST.g:195:9: ( LPAREN parameter_specs RPAREN )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==LPAREN) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // RPIExprAST.g:195:11: LPAREN parameter_specs RPAREN
                    {
                    LPAREN278=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_declaration2144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN278_tree = (Object)adaptor.create(LPAREN278);
                    adaptor.addChild(root_0, LPAREN278_tree);
                    }
                    pushFollow(FOLLOW_parameter_specs_in_cursor_declaration2146);
                    parameter_specs279=parameter_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_specs279.getTree());
                    RPAREN280=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_declaration2148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN280_tree = (Object)adaptor.create(RPAREN280);
                    adaptor.addChild(root_0, RPAREN280_tree);
                    }

                    }
                    break;

            }

            string_literal281=(Token)match(input,111,FOLLOW_111_in_cursor_declaration2161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal281_tree = (Object)adaptor.create(string_literal281);
            adaptor.addChild(root_0, string_literal281_tree);
            }
            pushFollow(FOLLOW_select_command_in_cursor_declaration2163);
            select_command282=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command282.getTree());
            SEMICOLON283=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_cursor_declaration2165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON283_tree = (Object)adaptor.create(SEMICOLON283);
            adaptor.addChild(root_0, SEMICOLON283_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, cursor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_declaration"

    public static class package_obj_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_obj_body"
    // RPIExprAST.g:198:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );
    public final RPIExprASTParser.package_obj_body_return package_obj_body() throws RecognitionException {
        RPIExprASTParser.package_obj_body_return retval = new RPIExprASTParser.package_obj_body_return();
        retval.start = input.LT(1);
        int package_obj_body_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.variable_declaration_return variable_declaration284 = null;

        RPIExprASTParser.subtype_declaration_return subtype_declaration285 = null;

        RPIExprASTParser.cursor_declaration_return cursor_declaration286 = null;

        RPIExprASTParser.exception_declaration_return exception_declaration287 = null;

        RPIExprASTParser.record_declaration_return record_declaration288 = null;

        RPIExprASTParser.plsql_table_declaration_return plsql_table_declaration289 = null;

        RPIExprASTParser.varray_declaration_return varray_declaration290 = null;

        RPIExprASTParser.procedure_body_return procedure_body291 = null;

        RPIExprASTParser.function_body_return function_body292 = null;

        RPIExprASTParser.pragma_declaration_return pragma_declaration293 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // RPIExprAST.g:199:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration )
            int alt35=10;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // RPIExprAST.g:199:9: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body2183);
                    variable_declaration284=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration284.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:200:9: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body2194);
                    subtype_declaration285=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration285.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:201:9: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body2205);
                    cursor_declaration286=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration286.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:202:9: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body2216);
                    exception_declaration287=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration287.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:203:9: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_record_declaration_in_package_obj_body2227);
                    record_declaration288=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration288.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:204:9: plsql_table_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_body2238);
                    plsql_table_declaration289=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration289.getTree());

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:205:9: varray_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_varray_declaration_in_package_obj_body2249);
                    varray_declaration290=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration290.getTree());

                    }
                    break;
                case 8 :
                    // RPIExprAST.g:206:9: procedure_body
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedure_body_in_package_obj_body2259);
                    procedure_body291=procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_body291.getTree());

                    }
                    break;
                case 9 :
                    // RPIExprAST.g:207:9: function_body
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_body_in_package_obj_body2270);
                    function_body292=function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_body292.getTree());

                    }
                    break;
                case 10 :
                    // RPIExprAST.g:208:9: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_body2281);
                    pragma_declaration293=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration293.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, package_obj_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_obj_body"

    public static class seq_of_statements_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "seq_of_statements"
    // RPIExprAST.g:211:1: seq_of_statements : statement SEMICOLON ( statement SEMICOLON )* ;
    public final RPIExprASTParser.seq_of_statements_return seq_of_statements() throws RecognitionException {
        RPIExprASTParser.seq_of_statements_return retval = new RPIExprASTParser.seq_of_statements_return();
        retval.start = input.LT(1);
        int seq_of_statements_StartIndex = input.index();
        Object root_0 = null;

        Token SEMICOLON295=null;
        Token SEMICOLON297=null;
        RPIExprASTParser.statement_return statement294 = null;

        RPIExprASTParser.statement_return statement296 = null;


        Object SEMICOLON295_tree=null;
        Object SEMICOLON297_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // RPIExprAST.g:212:5: ( statement SEMICOLON ( statement SEMICOLON )* )
            // RPIExprAST.g:212:9: statement SEMICOLON ( statement SEMICOLON )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_statement_in_seq_of_statements2300);
            statement294=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, statement294.getTree());
            SEMICOLON295=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements2302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON295_tree = (Object)adaptor.create(SEMICOLON295);
            adaptor.addChild(root_0, SEMICOLON295_tree);
            }
            // RPIExprAST.g:212:29: ( statement SEMICOLON )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ID||LA36_0==LLABEL||LA36_0==COLON||LA36_0==DOUBLEQUOTED_STRING||LA36_0==110||LA36_0==114||LA36_0==116||LA36_0==118||LA36_0==120||LA36_0==145||LA36_0==158||(LA36_0>=161 && LA36_0<=162)||(LA36_0>=170 && LA36_0<=172)||LA36_0==174||LA36_0==190||LA36_0==198||LA36_0==201||LA36_0==203||(LA36_0>=205 && LA36_0<=206)||LA36_0==211||LA36_0==214||(LA36_0>=217 && LA36_0<=218)||LA36_0==220||(LA36_0>=222 && LA36_0<=223)) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // RPIExprAST.g:212:31: statement SEMICOLON
            	    {
            	    pushFollow(FOLLOW_statement_in_seq_of_statements2306);
            	    statement296=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement296.getTree());
            	    SEMICOLON297=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements2308); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON297_tree = (Object)adaptor.create(SEMICOLON297);
            	    adaptor.addChild(root_0, SEMICOLON297_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, seq_of_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "seq_of_statements"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // RPIExprAST.g:215:1: statement : ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call );
    public final RPIExprASTParser.statement_return statement() throws RecognitionException {
        RPIExprASTParser.statement_return retval = new RPIExprASTParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.assignment_statement_return assignment_statement298 = null;

        RPIExprASTParser.exit_statement_return exit_statement299 = null;

        RPIExprASTParser.goto_statement_return goto_statement300 = null;

        RPIExprASTParser.case_statement_return case_statement301 = null;

        RPIExprASTParser.if_statement_return if_statement302 = null;

        RPIExprASTParser.loop_statement_return loop_statement303 = null;

        RPIExprASTParser.null_statement_return null_statement304 = null;

        RPIExprASTParser.raise_statement_return raise_statement305 = null;

        RPIExprASTParser.return_statement_return return_statement306 = null;

        RPIExprASTParser.sql_statement_return sql_statement307 = null;

        RPIExprASTParser.plsql_block_return plsql_block308 = null;

        RPIExprASTParser.function_call_return function_call309 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // RPIExprAST.g:216:5: ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call )
            int alt37=12;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA37_1 = input.LA(2);

                if ( (synpred89_RPIExprAST()) ) {
                    alt37=1;
                }
                else if ( ((synpred90_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EXIT")))) ) {
                    alt37=2;
                }
                else if ( (synpred92_RPIExprAST()) ) {
                    alt37=4;
                }
                else if ( (((synpred98_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE")))||(synpred98_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OPEN"))))) ) {
                    alt37=10;
                }
                else if ( (((synpred99_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))||synpred99_RPIExprAST()||(synpred99_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE")))||(synpred99_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(synpred99_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))||(synpred99_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))||(synpred99_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE"))))) ) {
                    alt37=11;
                }
                else if ( (true) ) {
                    alt37=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                alt37=1;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA37_3 = input.LA(2);

                if ( (synpred89_RPIExprAST()) ) {
                    alt37=1;
                }
                else if ( (synpred92_RPIExprAST()) ) {
                    alt37=4;
                }
                else if ( (synpred99_RPIExprAST()) ) {
                    alt37=11;
                }
                else if ( (true) ) {
                    alt37=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 3, input);

                    throw nvae;
                }
                }
                break;
            case 120:
                {
                alt37=3;
                }
                break;
            case 198:
                {
                alt37=4;
                }
                break;
            case 172:
                {
                alt37=5;
                }
                break;
            case LLABEL:
                {
                int LA37_7 = input.LA(2);

                if ( (synpred94_RPIExprAST()) ) {
                    alt37=6;
                }
                else if ( (synpred99_RPIExprAST()) ) {
                    alt37=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 7, input);

                    throw nvae;
                }
                }
                break;
            case 170:
            case 214:
            case 223:
                {
                alt37=6;
                }
                break;
            case 116:
                {
                alt37=7;
                }
                break;
            case 218:
                {
                alt37=8;
                }
                break;
            case 220:
                {
                alt37=9;
                }
                break;
            case 145:
            case 171:
            case 174:
            case 190:
            case 201:
            case 203:
            case 205:
            case 206:
            case 211:
            case 222:
                {
                alt37=10;
                }
                break;
            case 110:
            case 114:
            case 118:
            case 161:
            case 162:
            case 217:
                {
                alt37=11;
                }
                break;
            case 158:
                {
                alt37=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // RPIExprAST.g:216:9: assignment_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_assignment_statement_in_statement2334);
                    assignment_statement298=assignment_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_statement298.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:217:9: exit_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exit_statement_in_statement2344);
                    exit_statement299=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exit_statement299.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:218:9: goto_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_goto_statement_in_statement2354);
                    goto_statement300=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_statement300.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:219:9: case_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_statement_in_statement2364);
                    case_statement301=case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_statement301.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:220:9: if_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_if_statement_in_statement2374);
                    if_statement302=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_statement302.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:221:9: loop_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_loop_statement_in_statement2385);
                    loop_statement303=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, loop_statement303.getTree());

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:222:9: null_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_null_statement_in_statement2396);
                    null_statement304=null_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, null_statement304.getTree());

                    }
                    break;
                case 8 :
                    // RPIExprAST.g:223:9: raise_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_raise_statement_in_statement2406);
                    raise_statement305=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_statement305.getTree());

                    }
                    break;
                case 9 :
                    // RPIExprAST.g:224:9: return_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_return_statement_in_statement2416);
                    return_statement306=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_statement306.getTree());

                    }
                    break;
                case 10 :
                    // RPIExprAST.g:225:9: sql_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_statement_in_statement2426);
                    sql_statement307=sql_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_statement307.getTree());

                    }
                    break;
                case 11 :
                    // RPIExprAST.g:226:9: plsql_block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_plsql_block_in_statement2436);
                    plsql_block308=plsql_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_block308.getTree());

                    }
                    break;
                case 12 :
                    // RPIExprAST.g:228:9: function_call
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_call_in_statement2447);
                    function_call309=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call309.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class plsql_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_block"
    // RPIExprAST.g:231:1: plsql_block : ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) ;
    public final RPIExprASTParser.plsql_block_return plsql_block() throws RecognitionException {
        RPIExprASTParser.plsql_block_return retval = new RPIExprASTParser.plsql_block_return();
        retval.start = input.LT(1);
        int plsql_block_StartIndex = input.index();
        Object root_0 = null;

        Token LLABEL310=null;
        Token RLABEL312=null;
        Token string_literal313=null;
        Token string_literal315=null;
        Token string_literal317=null;
        Token string_literal319=null;
        RPIExprASTParser.label_name_return label_name311 = null;

        RPIExprASTParser.declare_spec_return declare_spec314 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements316 = null;

        RPIExprASTParser.exception_handler_return exception_handler318 = null;

        RPIExprASTParser.label_name_return label_name320 = null;


        Object LLABEL310_tree=null;
        Object RLABEL312_tree=null;
        Object string_literal313_tree=null;
        Object string_literal315_tree=null;
        Object string_literal317_tree=null;
        Object string_literal319_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // RPIExprAST.g:232:5: ( ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) )
            // RPIExprAST.g:232:9: ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? )
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:232:9: ( LLABEL label_name RLABEL )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==LLABEL) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // RPIExprAST.g:232:11: LLABEL label_name RLABEL
                    {
                    LLABEL310=(Token)match(input,LLABEL,FOLLOW_LLABEL_in_plsql_block2476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLABEL310_tree = (Object)adaptor.create(LLABEL310);
                    adaptor.addChild(root_0, LLABEL310_tree);
                    }
                    pushFollow(FOLLOW_label_name_in_plsql_block2478);
                    label_name311=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name311.getTree());
                    RLABEL312=(Token)match(input,RLABEL,FOLLOW_RLABEL_in_plsql_block2480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RLABEL312_tree = (Object)adaptor.create(RLABEL312);
                    adaptor.addChild(root_0, RLABEL312_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:233:9: ( ( 'DECLARE' )? ( declare_spec )+ )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ID||LA41_0==DOUBLEQUOTED_STRING||LA41_0==110||LA41_0==118||(LA41_0>=161 && LA41_0<=162)||LA41_0==217) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // RPIExprAST.g:233:11: ( 'DECLARE' )? ( declare_spec )+
                    {
                    // RPIExprAST.g:233:11: ( 'DECLARE' )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==118) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // RPIExprAST.g:233:13: 'DECLARE'
                            {
                            string_literal313=(Token)match(input,118,FOLLOW_118_in_plsql_block2497); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal313_tree = (Object)adaptor.create(string_literal313);
                            adaptor.addChild(root_0, string_literal313_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:233:26: ( declare_spec )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( (LA40_0==ID||LA40_0==DOUBLEQUOTED_STRING||LA40_0==110||(LA40_0>=161 && LA40_0<=162)||LA40_0==217) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // RPIExprAST.g:233:27: declare_spec
                    	    {
                    	    pushFollow(FOLLOW_declare_spec_in_plsql_block2503);
                    	    declare_spec314=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec314.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);


                    }
                    break;

            }

            // RPIExprAST.g:234:9: ( 'BEGIN' )
            // RPIExprAST.g:234:11: 'BEGIN'
            {
            string_literal315=(Token)match(input,114,FOLLOW_114_in_plsql_block2521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal315_tree = (Object)adaptor.create(string_literal315);
            adaptor.addChild(root_0, string_literal315_tree);
            }

            }

            pushFollow(FOLLOW_seq_of_statements_in_plsql_block2533);
            seq_of_statements316=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements316.getTree());
            // RPIExprAST.g:236:9: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==119) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // RPIExprAST.g:236:11: 'EXCEPTION' ( exception_handler )+
                    {
                    string_literal317=(Token)match(input,119,FOLLOW_119_in_plsql_block2545); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal317_tree = (Object)adaptor.create(string_literal317);
                    adaptor.addChild(root_0, string_literal317_tree);
                    }
                    // RPIExprAST.g:236:23: ( exception_handler )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==121) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // RPIExprAST.g:236:25: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_plsql_block2549);
                    	    exception_handler318=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler318.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);


                    }
                    break;

            }

            // RPIExprAST.g:237:9: ( 'END' ( label_name )? )
            // RPIExprAST.g:237:11: 'END' ( label_name )?
            {
            string_literal319=(Token)match(input,113,FOLLOW_113_in_plsql_block2568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal319_tree = (Object)adaptor.create(string_literal319);
            adaptor.addChild(root_0, string_literal319_tree);
            }
            // RPIExprAST.g:237:17: ( label_name )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ID||LA44_0==DOUBLEQUOTED_STRING) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // RPIExprAST.g:237:19: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_plsql_block2572);
                    label_name320=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name320.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, plsql_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_block"

    public static class declare_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_spec"
    // RPIExprAST.g:240:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );
    public final RPIExprASTParser.declare_spec_return declare_spec() throws RecognitionException {
        RPIExprASTParser.declare_spec_return retval = new RPIExprASTParser.declare_spec_return();
        retval.start = input.LT(1);
        int declare_spec_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.variable_declaration_return variable_declaration321 = null;

        RPIExprASTParser.subtype_declaration_return subtype_declaration322 = null;

        RPIExprASTParser.cursor_declaration_return cursor_declaration323 = null;

        RPIExprASTParser.exception_declaration_return exception_declaration324 = null;

        RPIExprASTParser.record_declaration_return record_declaration325 = null;

        RPIExprASTParser.plsql_table_declaration_return plsql_table_declaration326 = null;

        RPIExprASTParser.varray_declaration_return varray_declaration327 = null;

        RPIExprASTParser.procedure_declaration_return procedure_declaration328 = null;

        RPIExprASTParser.function_declaration_return function_declaration329 = null;

        RPIExprASTParser.type_declaration_return type_declaration330 = null;

        RPIExprASTParser.pragma_declaration_return pragma_declaration331 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // RPIExprAST.g:241:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration )
            int alt45=11;
            alt45 = dfa45.predict(input);
            switch (alt45) {
                case 1 :
                    // RPIExprAST.g:241:9: variable_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variable_declaration_in_declare_spec2596);
                    variable_declaration321=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration321.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:242:9: subtype_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec2607);
                    subtype_declaration322=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subtype_declaration322.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:243:9: cursor_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec2618);
                    cursor_declaration323=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_declaration323.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:244:9: exception_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_exception_declaration_in_declare_spec2629);
                    exception_declaration324=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_declaration324.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:245:9: record_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_record_declaration_in_declare_spec2640);
                    record_declaration325=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_declaration325.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:246:9: plsql_table_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_plsql_table_declaration_in_declare_spec2651);
                    plsql_table_declaration326=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_declaration326.getTree());

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:247:9: varray_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_varray_declaration_in_declare_spec2662);
                    varray_declaration327=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varray_declaration327.getTree());

                    }
                    break;
                case 8 :
                    // RPIExprAST.g:248:9: procedure_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_procedure_declaration_in_declare_spec2672);
                    procedure_declaration328=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_declaration328.getTree());

                    }
                    break;
                case 9 :
                    // RPIExprAST.g:249:9: function_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_declaration_in_declare_spec2683);
                    function_declaration329=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_declaration329.getTree());

                    }
                    break;
                case 10 :
                    // RPIExprAST.g:250:9: type_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_declaration_in_declare_spec2693);
                    type_declaration330=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration330.getTree());

                    }
                    break;
                case 11 :
                    // RPIExprAST.g:251:9: pragma_declaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec2704);
                    pragma_declaration331=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_declaration331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, declare_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declare_spec"

    public static class pragma_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_declaration"
    // RPIExprAST.g:254:1: pragma_declaration : keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMICOLON ;
    public final RPIExprASTParser.pragma_declaration_return pragma_declaration() throws RecognitionException {
        RPIExprASTParser.pragma_declaration_return retval = new RPIExprASTParser.pragma_declaration_return();
        retval.start = input.LT(1);
        int pragma_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN334=null;
        Token string_literal335=null;
        Token COMMA337=null;
        Token RPAREN339=null;
        Token LPAREN341=null;
        Token COMMA343=null;
        Token RPAREN345=null;
        Token LPAREN349=null;
        Token RPAREN351=null;
        Token LPAREN353=null;
        Token RPAREN355=null;
        Token LPAREN357=null;
        Token RPAREN359=null;
        Token LPAREN361=null;
        Token RPAREN363=null;
        Token LPAREN365=null;
        Token RPAREN367=null;
        Token SEMICOLON368=null;
        RPIExprASTParser.keyPRAGMA_return keyPRAGMA332 = null;

        RPIExprASTParser.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES333 = null;

        RPIExprASTParser.function_name_return function_name336 = null;

        RPIExprASTParser.pragma_param_return pragma_param338 = null;

        RPIExprASTParser.keyEXCEPTION_INIT_return keyEXCEPTION_INIT340 = null;

        RPIExprASTParser.exception_name_return exception_name342 = null;

        RPIExprASTParser.literal_return literal344 = null;

        RPIExprASTParser.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION346 = null;

        RPIExprASTParser.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE347 = null;

        RPIExprASTParser.keyBUILTIN_return keyBUILTIN348 = null;

        RPIExprASTParser.pragma_params_return pragma_params350 = null;

        RPIExprASTParser.keyFIPSFLAG_return keyFIPSFLAG352 = null;

        RPIExprASTParser.pragma_params_return pragma_params354 = null;

        RPIExprASTParser.keyINTERFACE_return keyINTERFACE356 = null;

        RPIExprASTParser.pragma_params_return pragma_params358 = null;

        RPIExprASTParser.keyNEW_NAMES_return keyNEW_NAMES360 = null;

        RPIExprASTParser.pragma_params_return pragma_params362 = null;

        RPIExprASTParser.keyTIMESTAMP_return keyTIMESTAMP364 = null;

        RPIExprASTParser.pragma_params_return pragma_params366 = null;


        Object LPAREN334_tree=null;
        Object string_literal335_tree=null;
        Object COMMA337_tree=null;
        Object RPAREN339_tree=null;
        Object LPAREN341_tree=null;
        Object COMMA343_tree=null;
        Object RPAREN345_tree=null;
        Object LPAREN349_tree=null;
        Object RPAREN351_tree=null;
        Object LPAREN353_tree=null;
        Object RPAREN355_tree=null;
        Object LPAREN357_tree=null;
        Object RPAREN359_tree=null;
        Object LPAREN361_tree=null;
        Object RPAREN363_tree=null;
        Object LPAREN365_tree=null;
        Object RPAREN367_tree=null;
        Object SEMICOLON368_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // RPIExprAST.g:255:5: ( keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMICOLON )
            // RPIExprAST.g:255:9: keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyPRAGMA_in_pragma_declaration2723);
            keyPRAGMA332=keyPRAGMA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRAGMA332.getTree());
            // RPIExprAST.g:256:9: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )
            int alt48=9;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // RPIExprAST.g:256:13: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
                    {
                    pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration2738);
                    keyRESTRICT_REFERENCES333=keyRESTRICT_REFERENCES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRESTRICT_REFERENCES333.getTree());
                    LPAREN334=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN334_tree = (Object)adaptor.create(LPAREN334);
                    adaptor.addChild(root_0, LPAREN334_tree);
                    }
                    // RPIExprAST.g:256:43: ( 'DEFAULT' | function_name )
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==117) ) {
                        alt46=1;
                    }
                    else if ( (LA46_0==ID||LA46_0==QUOTED_STRING||LA46_0==DOUBLEQUOTED_STRING) ) {
                        alt46=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 46, 0, input);

                        throw nvae;
                    }
                    switch (alt46) {
                        case 1 :
                            // RPIExprAST.g:256:45: 'DEFAULT'
                            {
                            string_literal335=(Token)match(input,117,FOLLOW_117_in_pragma_declaration2744); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal335_tree = (Object)adaptor.create(string_literal335);
                            adaptor.addChild(root_0, string_literal335_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:256:57: function_name
                            {
                            pushFollow(FOLLOW_function_name_in_pragma_declaration2748);
                            function_name336=function_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name336.getTree());

                            }
                            break;

                    }

                    // RPIExprAST.g:256:73: ( COMMA pragma_param )+
                    int cnt47=0;
                    loop47:
                    do {
                        int alt47=2;
                        int LA47_0 = input.LA(1);

                        if ( (LA47_0==COMMA) ) {
                            alt47=1;
                        }


                        switch (alt47) {
                    	case 1 :
                    	    // RPIExprAST.g:256:75: COMMA pragma_param
                    	    {
                    	    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration2754); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA337_tree = (Object)adaptor.create(COMMA337);
                    	    adaptor.addChild(root_0, COMMA337_tree);
                    	    }
                    	    pushFollow(FOLLOW_pragma_param_in_pragma_declaration2756);
                    	    pragma_param338=pragma_param();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param338.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt47 >= 1 ) break loop47;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(47, input);
                                throw eee;
                        }
                        cnt47++;
                    } while (true);

                    RPAREN339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2761); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN339_tree = (Object)adaptor.create(RPAREN339);
                    adaptor.addChild(root_0, RPAREN339_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:257:13: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
                    {
                    pushFollow(FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration2776);
                    keyEXCEPTION_INIT340=keyEXCEPTION_INIT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEXCEPTION_INIT340.getTree());
                    LPAREN341=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN341_tree = (Object)adaptor.create(LPAREN341);
                    adaptor.addChild(root_0, LPAREN341_tree);
                    }
                    pushFollow(FOLLOW_exception_name_in_pragma_declaration2780);
                    exception_name342=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name342.getTree());
                    COMMA343=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration2782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA343_tree = (Object)adaptor.create(COMMA343);
                    adaptor.addChild(root_0, COMMA343_tree);
                    }
                    pushFollow(FOLLOW_literal_in_pragma_declaration2784);
                    literal344=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal344.getTree());
                    RPAREN345=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN345_tree = (Object)adaptor.create(RPAREN345);
                    adaptor.addChild(root_0, RPAREN345_tree);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:258:13: keyAUTONOMOUS_TRANSACTION
                    {
                    pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration2800);
                    keyAUTONOMOUS_TRANSACTION346=keyAUTONOMOUS_TRANSACTION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyAUTONOMOUS_TRANSACTION346.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:259:13: keySERIALLY_REUSABLE
                    {
                    pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration2814);
                    keySERIALLY_REUSABLE347=keySERIALLY_REUSABLE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySERIALLY_REUSABLE347.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:260:13: keyBUILTIN LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyBUILTIN_in_pragma_declaration2828);
                    keyBUILTIN348=keyBUILTIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBUILTIN348.getTree());
                    LPAREN349=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN349_tree = (Object)adaptor.create(LPAREN349);
                    adaptor.addChild(root_0, LPAREN349_tree);
                    }
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2832);
                    pragma_params350=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params350.getTree());
                    RPAREN351=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN351_tree = (Object)adaptor.create(RPAREN351);
                    adaptor.addChild(root_0, RPAREN351_tree);
                    }

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:261:13: keyFIPSFLAG LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyFIPSFLAG_in_pragma_declaration2848);
                    keyFIPSFLAG352=keyFIPSFLAG();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFIPSFLAG352.getTree());
                    LPAREN353=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN353_tree = (Object)adaptor.create(LPAREN353);
                    adaptor.addChild(root_0, LPAREN353_tree);
                    }
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2852);
                    pragma_params354=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params354.getTree());
                    RPAREN355=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN355_tree = (Object)adaptor.create(RPAREN355);
                    adaptor.addChild(root_0, RPAREN355_tree);
                    }

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:263:13: keyINTERFACE LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyINTERFACE_in_pragma_declaration2869);
                    keyINTERFACE356=keyINTERFACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERFACE356.getTree());
                    LPAREN357=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2871); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN357_tree = (Object)adaptor.create(LPAREN357);
                    adaptor.addChild(root_0, LPAREN357_tree);
                    }
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2873);
                    pragma_params358=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params358.getTree());
                    RPAREN359=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN359_tree = (Object)adaptor.create(RPAREN359);
                    adaptor.addChild(root_0, RPAREN359_tree);
                    }

                    }
                    break;
                case 8 :
                    // RPIExprAST.g:264:13: keyNEW_NAMES LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyNEW_NAMES_in_pragma_declaration2889);
                    keyNEW_NAMES360=keyNEW_NAMES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNEW_NAMES360.getTree());
                    LPAREN361=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN361_tree = (Object)adaptor.create(LPAREN361);
                    adaptor.addChild(root_0, LPAREN361_tree);
                    }
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2893);
                    pragma_params362=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params362.getTree());
                    RPAREN363=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN363_tree = (Object)adaptor.create(RPAREN363);
                    adaptor.addChild(root_0, RPAREN363_tree);
                    }

                    }
                    break;
                case 9 :
                    // RPIExprAST.g:265:13: keyTIMESTAMP LPAREN pragma_params RPAREN
                    {
                    pushFollow(FOLLOW_keyTIMESTAMP_in_pragma_declaration2909);
                    keyTIMESTAMP364=keyTIMESTAMP();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIMESTAMP364.getTree());
                    LPAREN365=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN365_tree = (Object)adaptor.create(LPAREN365);
                    adaptor.addChild(root_0, LPAREN365_tree);
                    }
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2913);
                    pragma_params366=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_params366.getTree());
                    RPAREN367=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2915); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN367_tree = (Object)adaptor.create(RPAREN367);
                    adaptor.addChild(root_0, RPAREN367_tree);
                    }

                    }
                    break;

            }

            SEMICOLON368=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pragma_declaration2935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON368_tree = (Object)adaptor.create(SEMICOLON368);
            adaptor.addChild(root_0, SEMICOLON368_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, pragma_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_declaration"

    public static class pragma_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_params"
    // RPIExprAST.g:270:1: pragma_params : pragma_param ( COMMA pragma_param )* ;
    public final RPIExprASTParser.pragma_params_return pragma_params() throws RecognitionException {
        RPIExprASTParser.pragma_params_return retval = new RPIExprASTParser.pragma_params_return();
        retval.start = input.LT(1);
        int pragma_params_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA370=null;
        RPIExprASTParser.pragma_param_return pragma_param369 = null;

        RPIExprASTParser.pragma_param_return pragma_param371 = null;


        Object COMMA370_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // RPIExprAST.g:271:5: ( pragma_param ( COMMA pragma_param )* )
            // RPIExprAST.g:271:9: pragma_param ( COMMA pragma_param )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_pragma_param_in_pragma_params2954);
            pragma_param369=pragma_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param369.getTree());
            // RPIExprAST.g:271:22: ( COMMA pragma_param )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==COMMA) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // RPIExprAST.g:271:24: COMMA pragma_param
            	    {
            	    COMMA370=(Token)match(input,COMMA,FOLLOW_COMMA_in_pragma_params2958); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA370_tree = (Object)adaptor.create(COMMA370);
            	    adaptor.addChild(root_0, COMMA370_tree);
            	    }
            	    pushFollow(FOLLOW_pragma_param_in_pragma_params2960);
            	    pragma_param371=pragma_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pragma_param371.getTree());

            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, pragma_params_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_params"

    public static class pragma_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_param"
    // RPIExprAST.g:274:1: pragma_param : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier );
    public final RPIExprASTParser.pragma_param_return pragma_param() throws RecognitionException {
        RPIExprASTParser.pragma_param_return retval = new RPIExprASTParser.pragma_param_return();
        retval.start = input.LT(1);
        int pragma_param_StartIndex = input.index();
        Object root_0 = null;

        Token set372=null;
        Token NUMBER373=null;
        Token QUOTED_STRING374=null;
        RPIExprASTParser.identifier_return identifier375 = null;


        Object set372_tree=null;
        Object NUMBER373_tree=null;
        Object QUOTED_STRING374_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // RPIExprAST.g:275:5: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier )
            int alt51=3;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
            case NUMBER:
                {
                alt51=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt51=2;
                }
                break;
            case ID:
            case DOUBLEQUOTED_STRING:
                {
                alt51=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // RPIExprAST.g:275:9: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:275:9: ( PLUS | MINUS )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( ((LA50_0>=PLUS && LA50_0<=MINUS)) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // RPIExprAST.g:
                            {
                            set372=(Token)input.LT(1);
                            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set372));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER373=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_pragma_param2993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER373_tree = (Object)adaptor.create(NUMBER373);
                    adaptor.addChild(root_0, NUMBER373_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:276:9: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    QUOTED_STRING374=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pragma_param3003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING374_tree = (Object)adaptor.create(QUOTED_STRING374);
                    adaptor.addChild(root_0, QUOTED_STRING374_tree);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:277:9: identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_pragma_param3013);
                    identifier375=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier375.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, pragma_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_param"

    public static class assignment_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_statement"
    // RPIExprAST.g:280:1: assignment_statement : ( lvalue SQL_ASSIGN plsql_expression ) ;
    public final RPIExprASTParser.assignment_statement_return assignment_statement() throws RecognitionException {
        RPIExprASTParser.assignment_statement_return retval = new RPIExprASTParser.assignment_statement_return();
        retval.start = input.LT(1);
        int assignment_statement_StartIndex = input.index();
        Object root_0 = null;

        Token SQL_ASSIGN377=null;
        RPIExprASTParser.lvalue_return lvalue376 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression378 = null;


        Object SQL_ASSIGN377_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // RPIExprAST.g:281:5: ( ( lvalue SQL_ASSIGN plsql_expression ) )
            // RPIExprAST.g:283:9: ( lvalue SQL_ASSIGN plsql_expression )
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:283:9: ( lvalue SQL_ASSIGN plsql_expression )
            // RPIExprAST.g:283:10: lvalue SQL_ASSIGN plsql_expression
            {
            pushFollow(FOLLOW_lvalue_in_assignment_statement3043);
            lvalue376=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue376.getTree());
            SQL_ASSIGN377=(Token)match(input,SQL_ASSIGN,FOLLOW_SQL_ASSIGN_in_assignment_statement3045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL_ASSIGN377_tree = (Object)adaptor.create(SQL_ASSIGN377);
            adaptor.addChild(root_0, SQL_ASSIGN377_tree);
            }
            pushFollow(FOLLOW_plsql_expression_in_assignment_statement3047);
            plsql_expression378=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression378.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, assignment_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_statement"

    public static class lvalues_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lvalues"
    // RPIExprAST.g:286:1: lvalues : lvalue ( COMMA lvalue )* ;
    public final RPIExprASTParser.lvalues_return lvalues() throws RecognitionException {
        RPIExprASTParser.lvalues_return retval = new RPIExprASTParser.lvalues_return();
        retval.start = input.LT(1);
        int lvalues_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA380=null;
        RPIExprASTParser.lvalue_return lvalue379 = null;

        RPIExprASTParser.lvalue_return lvalue381 = null;


        Object COMMA380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // RPIExprAST.g:287:5: ( lvalue ( COMMA lvalue )* )
            // RPIExprAST.g:287:9: lvalue ( COMMA lvalue )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_lvalue_in_lvalues3067);
            lvalue379=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue379.getTree());
            // RPIExprAST.g:287:16: ( COMMA lvalue )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( (LA52_0==COMMA) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // RPIExprAST.g:287:18: COMMA lvalue
            	    {
            	    COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_lvalues3071); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA380_tree = (Object)adaptor.create(COMMA380);
            	    adaptor.addChild(root_0, COMMA380_tree);
            	    }
            	    pushFollow(FOLLOW_lvalue_in_lvalues3073);
            	    lvalue381=lvalue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue381.getTree());

            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, lvalues_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lvalues"

    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lvalue"
    // RPIExprAST.g:289:1: lvalue : ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? );
    public final RPIExprASTParser.lvalue_return lvalue() throws RecognitionException {
        RPIExprASTParser.lvalue_return retval = new RPIExprASTParser.lvalue_return();
        retval.start = input.LT(1);
        int lvalue_StartIndex = input.index();
        Object root_0 = null;

        Token DOT384=null;
        Token LPAREN387=null;
        Token RPAREN389=null;
        Token DOT390=null;
        Token COLON392=null;
        Token COLON394=null;
        RPIExprASTParser.variable_name_return variable_name382 = null;

        RPIExprASTParser.record_name_return record_name383 = null;

        RPIExprASTParser.field_name_return field_name385 = null;

        RPIExprASTParser.plsql_table_name_return plsql_table_name386 = null;

        RPIExprASTParser.subscript_return subscript388 = null;

        RPIExprASTParser.field_name_return field_name391 = null;

        RPIExprASTParser.host_variable_return host_variable393 = null;

        RPIExprASTParser.host_variable_return host_variable395 = null;


        Object DOT384_tree=null;
        Object LPAREN387_tree=null;
        Object RPAREN389_tree=null;
        Object DOT390_tree=null;
        Object COLON392_tree=null;
        Object COLON394_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // RPIExprAST.g:290:5: ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? )
            int alt55=4;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==ID||LA55_0==DOUBLEQUOTED_STRING) ) {
                switch ( input.LA(2) ) {
                case DOT:
                    {
                    int LA55_3 = input.LA(3);

                    if ( (LA55_3==ID||LA55_3==DOUBLEQUOTED_STRING) ) {
                        int LA55_6 = input.LA(4);

                        if ( (LA55_6==EOF||(LA55_6>=SEMICOLON && LA55_6<=COMMA)||LA55_6==SQL_ASSIGN||LA55_6==179) ) {
                            alt55=2;
                        }
                        else if ( (LA55_6==LPAREN||LA55_6==DOT) ) {
                            alt55=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 55, 6, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 55, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt55=3;
                    }
                    break;
                case EOF:
                case SEMICOLON:
                case COMMA:
                case SQL_ASSIGN:
                case 179:
                    {
                    alt55=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 55, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA55_0==COLON) ) {
                alt55=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // RPIExprAST.g:290:9: variable_name
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variable_name_in_lvalue3094);
                    variable_name382=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name382.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:291:9: record_name DOT field_name
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_record_name_in_lvalue3104);
                    record_name383=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name383.getTree());
                    DOT384=(Token)match(input,DOT,FOLLOW_DOT_in_lvalue3106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT384_tree = (Object)adaptor.create(DOT384);
                    adaptor.addChild(root_0, DOT384_tree);
                    }
                    pushFollow(FOLLOW_field_name_in_lvalue3108);
                    field_name385=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name385.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:292:9: plsql_table_name LPAREN subscript RPAREN ( DOT field_name )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_plsql_table_name_in_lvalue3118);
                    plsql_table_name386=plsql_table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name386.getTree());
                    LPAREN387=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lvalue3120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN387_tree = (Object)adaptor.create(LPAREN387);
                    adaptor.addChild(root_0, LPAREN387_tree);
                    }
                    pushFollow(FOLLOW_subscript_in_lvalue3122);
                    subscript388=subscript();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subscript388.getTree());
                    RPAREN389=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lvalue3124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN389_tree = (Object)adaptor.create(RPAREN389);
                    adaptor.addChild(root_0, RPAREN389_tree);
                    }
                    // RPIExprAST.g:292:50: ( DOT field_name )*
                    loop53:
                    do {
                        int alt53=2;
                        int LA53_0 = input.LA(1);

                        if ( (LA53_0==DOT) ) {
                            alt53=1;
                        }


                        switch (alt53) {
                    	case 1 :
                    	    // RPIExprAST.g:292:52: DOT field_name
                    	    {
                    	    DOT390=(Token)match(input,DOT,FOLLOW_DOT_in_lvalue3128); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT390_tree = (Object)adaptor.create(DOT390);
                    	    adaptor.addChild(root_0, DOT390_tree);
                    	    }
                    	    pushFollow(FOLLOW_field_name_in_lvalue3130);
                    	    field_name391=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name391.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop53;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // RPIExprAST.g:293:9: COLON host_variable ( COLON host_variable )?
                    {
                    root_0 = (Object)adaptor.nil();

                    COLON392=(Token)match(input,COLON,FOLLOW_COLON_in_lvalue3143); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON392_tree = (Object)adaptor.create(COLON392);
                    adaptor.addChild(root_0, COLON392_tree);
                    }
                    pushFollow(FOLLOW_host_variable_in_lvalue3145);
                    host_variable393=host_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, host_variable393.getTree());
                    // RPIExprAST.g:293:29: ( COLON host_variable )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==COLON) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // RPIExprAST.g:293:31: COLON host_variable
                            {
                            COLON394=(Token)match(input,COLON,FOLLOW_COLON_in_lvalue3149); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON394_tree = (Object)adaptor.create(COLON394);
                            adaptor.addChild(root_0, COLON394_tree);
                            }
                            pushFollow(FOLLOW_host_variable_in_lvalue3151);
                            host_variable395=host_variable();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, host_variable395.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, lvalue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lvalue"

    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_name"
    // RPIExprAST.g:296:1: field_name : identifier ;
    public final RPIExprASTParser.field_name_return field_name() throws RecognitionException {
        RPIExprASTParser.field_name_return retval = new RPIExprASTParser.field_name_return();
        retval.start = input.LT(1);
        int field_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier396 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // RPIExprAST.g:297:5: ( identifier )
            // RPIExprAST.g:297:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_field_name3173);
            identifier396=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier396.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, field_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_name"

    public static class subscript_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subscript"
    // RPIExprAST.g:300:1: subscript : plsql_expression ;
    public final RPIExprASTParser.subscript_return subscript() throws RecognitionException {
        RPIExprASTParser.subscript_return retval = new RPIExprASTParser.subscript_return();
        retval.start = input.LT(1);
        int subscript_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression397 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // RPIExprAST.g:301:5: ( plsql_expression )
            // RPIExprAST.g:301:9: plsql_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_plsql_expression_in_subscript3196);
            plsql_expression397=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression397.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, subscript_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subscript"

    public static class host_variable_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "host_variable"
    // RPIExprAST.g:304:1: host_variable : identifier ;
    public final RPIExprASTParser.host_variable_return host_variable() throws RecognitionException {
        RPIExprASTParser.host_variable_return retval = new RPIExprASTParser.host_variable_return();
        retval.start = input.LT(1);
        int host_variable_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier398 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // RPIExprAST.g:305:5: ( identifier )
            // RPIExprAST.g:305:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_host_variable3220);
            identifier398=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier398.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, host_variable_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "host_variable"

    public static class goto_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // RPIExprAST.g:308:1: goto_statement : 'GOTO' label_name ;
    public final RPIExprASTParser.goto_statement_return goto_statement() throws RecognitionException {
        RPIExprASTParser.goto_statement_return retval = new RPIExprASTParser.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal399=null;
        RPIExprASTParser.label_name_return label_name400 = null;


        Object string_literal399_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // RPIExprAST.g:309:5: ( 'GOTO' label_name )
            // RPIExprAST.g:309:9: 'GOTO' label_name
            {
            root_0 = (Object)adaptor.nil();

            string_literal399=(Token)match(input,120,FOLLOW_120_in_goto_statement3243); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal399_tree = (Object)adaptor.create(string_literal399);
            adaptor.addChild(root_0, string_literal399_tree);
            }
            pushFollow(FOLLOW_label_name_in_goto_statement3245);
            label_name400=label_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name400.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class label_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label_name"
    // RPIExprAST.g:312:1: label_name : identifier ;
    public final RPIExprASTParser.label_name_return label_name() throws RecognitionException {
        RPIExprASTParser.label_name_return retval = new RPIExprASTParser.label_name_return();
        retval.start = input.LT(1);
        int label_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier401 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // RPIExprAST.g:313:5: ( identifier )
            // RPIExprAST.g:313:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_label_name3268);
            identifier401=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier401.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, label_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label_name"

    public static class exit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // RPIExprAST.g:316:1: exit_statement : keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? ;
    public final RPIExprASTParser.exit_statement_return exit_statement() throws RecognitionException {
        RPIExprASTParser.exit_statement_return retval = new RPIExprASTParser.exit_statement_return();
        retval.start = input.LT(1);
        int exit_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal404=null;
        RPIExprASTParser.keyEXIT_return keyEXIT402 = null;

        RPIExprASTParser.label_name_return label_name403 = null;

        RPIExprASTParser.plsql_condition_return plsql_condition405 = null;


        Object string_literal404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // RPIExprAST.g:317:5: ( keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? )
            // RPIExprAST.g:317:9: keyEXIT ( label_name )? ( 'WHEN' plsql_condition )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyEXIT_in_exit_statement3290);
            keyEXIT402=keyEXIT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEXIT402.getTree());
            // RPIExprAST.g:317:17: ( label_name )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==ID||LA56_0==DOUBLEQUOTED_STRING) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // RPIExprAST.g:317:19: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_exit_statement3294);
                    label_name403=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name403.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:317:33: ( 'WHEN' plsql_condition )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==121) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // RPIExprAST.g:317:35: 'WHEN' plsql_condition
                    {
                    string_literal404=(Token)match(input,121,FOLLOW_121_in_exit_statement3301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal404_tree = (Object)adaptor.create(string_literal404);
                    adaptor.addChild(root_0, string_literal404_tree);
                    }
                    pushFollow(FOLLOW_plsql_condition_in_exit_statement3303);
                    plsql_condition405=plsql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition405.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, exit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class datatype_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datatype"
    // RPIExprAST.g:320:1: datatype : ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? );
    public final RPIExprASTParser.datatype_return datatype() throws RecognitionException {
        RPIExprASTParser.datatype_return retval = new RPIExprASTParser.datatype_return();
        retval.start = input.LT(1);
        int datatype_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal406=null;
        Token string_literal407=null;
        Token string_literal408=null;
        Token string_literal409=null;
        Token string_literal410=null;
        Token set411=null;
        Token LPAREN412=null;
        Token NUMBER413=null;
        Token COMMA414=null;
        Token NUMBER415=null;
        Token RPAREN416=null;
        Token string_literal417=null;
        Token string_literal418=null;
        Token LPAREN419=null;
        Token NUMBER420=null;
        Token RPAREN421=null;
        Token string_literal422=null;
        Token LPAREN423=null;
        Token NUMBER424=null;
        Token RPAREN425=null;
        Token string_literal426=null;
        Token string_literal427=null;
        Token LPAREN430=null;
        Token NUMBER431=null;
        Token RPAREN432=null;
        Token string_literal433=null;
        Token LPAREN435=null;
        Token NUMBER436=null;
        Token RPAREN437=null;
        Token LPAREN440=null;
        Token NUMBER441=null;
        Token RPAREN442=null;
        Token string_literal443=null;
        Token LPAREN447=null;
        Token NUMBER448=null;
        Token RPAREN449=null;
        Token string_literal450=null;
        Token string_literal454=null;
        Token string_literal455=null;
        Token string_literal456=null;
        Token string_literal457=null;
        Token LPAREN458=null;
        Token NUMBER459=null;
        Token RPAREN460=null;
        Token string_literal461=null;
        Token string_literal462=null;
        Token string_literal464=null;
        Token LPAREN466=null;
        Token NUMBER467=null;
        Token string_literal469=null;
        Token RPAREN470=null;
        Token string_literal471=null;
        Token string_literal472=null;
        Token CHARSET_ATTR475=null;
        Token string_literal476=null;
        Token LPAREN477=null;
        Token NUMBER478=null;
        Token string_literal480=null;
        Token RPAREN481=null;
        Token string_literal482=null;
        Token string_literal483=null;
        Token CHARSET_ATTR486=null;
        Token string_literal487=null;
        Token LPAREN488=null;
        Token NUMBER489=null;
        Token string_literal491=null;
        Token RPAREN492=null;
        Token string_literal493=null;
        Token string_literal494=null;
        Token CHARSET_ATTR497=null;
        Token string_literal498=null;
        Token LPAREN500=null;
        Token NUMBER501=null;
        Token RPAREN502=null;
        Token string_literal503=null;
        Token LPAREN505=null;
        Token NUMBER506=null;
        Token RPAREN507=null;
        Token string_literal508=null;
        Token LPAREN509=null;
        Token NUMBER510=null;
        Token RPAREN511=null;
        Token string_literal512=null;
        Token LPAREN513=null;
        Token NUMBER514=null;
        Token RPAREN515=null;
        Token string_literal516=null;
        Token set517=null;
        Token LPAREN519=null;
        Token NUMBER520=null;
        Token RPAREN521=null;
        Token string_literal522=null;
        Token string_literal523=null;
        Token string_literal524=null;
        Token string_literal525=null;
        Token string_literal526=null;
        Token string_literal527=null;
        Token CHARSET_ATTR530=null;
        Token string_literal531=null;
        Token string_literal532=null;
        Token string_literal533=null;
        Token string_literal534=null;
        Token LPAREN535=null;
        Token NUMBER536=null;
        Token RPAREN537=null;
        RPIExprASTParser.keyINTERVAL_return keyINTERVAL428 = null;

        RPIExprASTParser.keyDAY_return keyDAY429 = null;

        RPIExprASTParser.keySECOND_return keySECOND434 = null;

        RPIExprASTParser.keyINTERVAL_return keyINTERVAL438 = null;

        RPIExprASTParser.keyYEAR_return keyYEAR439 = null;

        RPIExprASTParser.keyMONTH_return keyMONTH444 = null;

        RPIExprASTParser.keyTIME_return keyTIME445 = null;

        RPIExprASTParser.keyTIMESTAMP_return keyTIMESTAMP446 = null;

        RPIExprASTParser.keyLOCAL_return keyLOCAL451 = null;

        RPIExprASTParser.keyTIME_return keyTIME452 = null;

        RPIExprASTParser.keyZONE_return keyZONE453 = null;

        RPIExprASTParser.keyPRECISION_return keyPRECISION463 = null;

        RPIExprASTParser.keyVARYING_return keyVARYING465 = null;

        RPIExprASTParser.keyBYTE_return keyBYTE468 = null;

        RPIExprASTParser.identifier_return identifier473 = null;

        RPIExprASTParser.column_spec_return column_spec474 = null;

        RPIExprASTParser.keyBYTE_return keyBYTE479 = null;

        RPIExprASTParser.identifier_return identifier484 = null;

        RPIExprASTParser.column_spec_return column_spec485 = null;

        RPIExprASTParser.keyBYTE_return keyBYTE490 = null;

        RPIExprASTParser.identifier_return identifier495 = null;

        RPIExprASTParser.column_spec_return column_spec496 = null;

        RPIExprASTParser.keyVARYING_return keyVARYING499 = null;

        RPIExprASTParser.keyVARYING_return keyVARYING504 = null;

        RPIExprASTParser.keyVARYING_return keyVARYING518 = null;

        RPIExprASTParser.identifier_return identifier528 = null;

        RPIExprASTParser.column_spec_return column_spec529 = null;


        Object string_literal406_tree=null;
        Object string_literal407_tree=null;
        Object string_literal408_tree=null;
        Object string_literal409_tree=null;
        Object string_literal410_tree=null;
        Object set411_tree=null;
        Object LPAREN412_tree=null;
        Object NUMBER413_tree=null;
        Object COMMA414_tree=null;
        Object NUMBER415_tree=null;
        Object RPAREN416_tree=null;
        Object string_literal417_tree=null;
        Object string_literal418_tree=null;
        Object LPAREN419_tree=null;
        Object NUMBER420_tree=null;
        Object RPAREN421_tree=null;
        Object string_literal422_tree=null;
        Object LPAREN423_tree=null;
        Object NUMBER424_tree=null;
        Object RPAREN425_tree=null;
        Object string_literal426_tree=null;
        Object string_literal427_tree=null;
        Object LPAREN430_tree=null;
        Object NUMBER431_tree=null;
        Object RPAREN432_tree=null;
        Object string_literal433_tree=null;
        Object LPAREN435_tree=null;
        Object NUMBER436_tree=null;
        Object RPAREN437_tree=null;
        Object LPAREN440_tree=null;
        Object NUMBER441_tree=null;
        Object RPAREN442_tree=null;
        Object string_literal443_tree=null;
        Object LPAREN447_tree=null;
        Object NUMBER448_tree=null;
        Object RPAREN449_tree=null;
        Object string_literal450_tree=null;
        Object string_literal454_tree=null;
        Object string_literal455_tree=null;
        Object string_literal456_tree=null;
        Object string_literal457_tree=null;
        Object LPAREN458_tree=null;
        Object NUMBER459_tree=null;
        Object RPAREN460_tree=null;
        Object string_literal461_tree=null;
        Object string_literal462_tree=null;
        Object string_literal464_tree=null;
        Object LPAREN466_tree=null;
        Object NUMBER467_tree=null;
        Object string_literal469_tree=null;
        Object RPAREN470_tree=null;
        Object string_literal471_tree=null;
        Object string_literal472_tree=null;
        Object CHARSET_ATTR475_tree=null;
        Object string_literal476_tree=null;
        Object LPAREN477_tree=null;
        Object NUMBER478_tree=null;
        Object string_literal480_tree=null;
        Object RPAREN481_tree=null;
        Object string_literal482_tree=null;
        Object string_literal483_tree=null;
        Object CHARSET_ATTR486_tree=null;
        Object string_literal487_tree=null;
        Object LPAREN488_tree=null;
        Object NUMBER489_tree=null;
        Object string_literal491_tree=null;
        Object RPAREN492_tree=null;
        Object string_literal493_tree=null;
        Object string_literal494_tree=null;
        Object CHARSET_ATTR497_tree=null;
        Object string_literal498_tree=null;
        Object LPAREN500_tree=null;
        Object NUMBER501_tree=null;
        Object RPAREN502_tree=null;
        Object string_literal503_tree=null;
        Object LPAREN505_tree=null;
        Object NUMBER506_tree=null;
        Object RPAREN507_tree=null;
        Object string_literal508_tree=null;
        Object LPAREN509_tree=null;
        Object NUMBER510_tree=null;
        Object RPAREN511_tree=null;
        Object string_literal512_tree=null;
        Object LPAREN513_tree=null;
        Object NUMBER514_tree=null;
        Object RPAREN515_tree=null;
        Object string_literal516_tree=null;
        Object set517_tree=null;
        Object LPAREN519_tree=null;
        Object NUMBER520_tree=null;
        Object RPAREN521_tree=null;
        Object string_literal522_tree=null;
        Object string_literal523_tree=null;
        Object string_literal524_tree=null;
        Object string_literal525_tree=null;
        Object string_literal526_tree=null;
        Object string_literal527_tree=null;
        Object CHARSET_ATTR530_tree=null;
        Object string_literal531_tree=null;
        Object string_literal532_tree=null;
        Object string_literal533_tree=null;
        Object string_literal534_tree=null;
        Object LPAREN535_tree=null;
        Object NUMBER536_tree=null;
        Object RPAREN537_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // RPIExprAST.g:321:5: ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? )
            int alt95=35;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt95=1;
                }
                break;
            case 123:
                {
                alt95=2;
                }
                break;
            case 124:
                {
                alt95=3;
                }
                break;
            case 125:
                {
                alt95=4;
                }
                break;
            case 126:
                {
                alt95=5;
                }
                break;
            case 127:
            case 128:
            case 129:
            case 130:
                {
                alt95=6;
                }
                break;
            case 131:
                {
                alt95=7;
                }
                break;
            case 132:
                {
                alt95=8;
                }
                break;
            case 133:
                {
                alt95=9;
                }
                break;
            case 134:
                {
                alt95=10;
                }
                break;
            case ID:
                {
                int LA95_11 = input.LA(2);

                if ( (LA95_11==EOF||(LA95_11>=LPAREN && LA95_11<=RPAREN)||(LA95_11>=SEMICOLON && LA95_11<=COMMA)||LA95_11==NOT||LA95_11==SQL_ASSIGN||LA95_11==DOUBLEQUOTED_STRING||(LA95_11>=110 && LA95_11<=114)||LA95_11==117||LA95_11==136||(LA95_11>=161 && LA95_11<=162)||LA95_11==165||LA95_11==217) ) {
                    alt95=13;
                }
                else if ( (LA95_11==ID) ) {
                    switch ( input.LA(3) ) {
                    case ID:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case DOT:
                    case QUOTED_STRING:
                    case DOUBLEQUOTED_STRING:
                    case 115:
                    case 119:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt95=13;
                        }
                        break;
                    case LPAREN:
                        {
                        int LA95_36 = input.LA(4);

                        if ( (LA95_36==NUMBER) ) {
                            int LA95_38 = input.LA(5);

                            if ( (LA95_38==RPAREN) ) {
                                int LA95_40 = input.LA(6);

                                if ( (LA95_40==135) ) {
                                    int LA95_37 = input.LA(7);

                                    if ( (LA95_37==ID) ) {
                                        int LA95_39 = input.LA(8);

                                        if ( ((synpred160_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                            alt95=11;
                                        }
                                        else if ( ((synpred162_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                            alt95=12;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 95, 39, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 95, 37, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 95, 40, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 95, 38, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 95, 36, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 135:
                        {
                        int LA95_37 = input.LA(4);

                        if ( (LA95_37==ID) ) {
                            int LA95_39 = input.LA(5);

                            if ( ((synpred160_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                alt95=11;
                            }
                            else if ( ((synpred162_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                alt95=12;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 95, 39, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 95, 37, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 35, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 11, input);

                    throw nvae;
                }
                }
                break;
            case 137:
                {
                alt95=14;
                }
                break;
            case 138:
                {
                alt95=15;
                }
                break;
            case 139:
                {
                alt95=16;
                }
                break;
            case 140:
                {
                alt95=17;
                }
                break;
            case 141:
                {
                alt95=18;
                }
                break;
            case 142:
                {
                alt95=19;
                }
                break;
            case 143:
                {
                alt95=20;
                }
                break;
            case 146:
                {
                alt95=21;
                }
                break;
            case 147:
                {
                alt95=22;
                }
                break;
            case 144:
                {
                alt95=23;
                }
                break;
            case 148:
                {
                alt95=24;
                }
                break;
            case 149:
                {
                alt95=25;
                }
                break;
            case 150:
                {
                alt95=26;
                }
                break;
            case 151:
                {
                alt95=27;
                }
                break;
            case 152:
                {
                alt95=28;
                }
                break;
            case 153:
                {
                alt95=29;
                }
                break;
            case 154:
                {
                alt95=30;
                }
                break;
            case 155:
                {
                alt95=31;
                }
                break;
            case 156:
                {
                alt95=32;
                }
                break;
            case 157:
                {
                alt95=33;
                }
                break;
            case 158:
                {
                alt95=34;
                }
                break;
            case 159:
                {
                alt95=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }

            switch (alt95) {
                case 1 :
                    // RPIExprAST.g:321:9: 'BINARY_INTEGER'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal406=(Token)match(input,122,FOLLOW_122_in_datatype3329); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal406_tree = (Object)adaptor.create(string_literal406);
                    adaptor.addChild(root_0, string_literal406_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:322:9: 'BINARY_FLOAT'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal407=(Token)match(input,123,FOLLOW_123_in_datatype3340); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal407_tree = (Object)adaptor.create(string_literal407);
                    adaptor.addChild(root_0, string_literal407_tree);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:323:9: 'BINARY_DOUBLE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal408=(Token)match(input,124,FOLLOW_124_in_datatype3350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal408_tree = (Object)adaptor.create(string_literal408);
                    adaptor.addChild(root_0, string_literal408_tree);
                    }

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:324:9: 'NATURAL'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal409=(Token)match(input,125,FOLLOW_125_in_datatype3360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal409_tree = (Object)adaptor.create(string_literal409);
                    adaptor.addChild(root_0, string_literal409_tree);
                    }

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:325:9: 'POSITIVE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal410=(Token)match(input,126,FOLLOW_126_in_datatype3371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal410_tree = (Object)adaptor.create(string_literal410);
                    adaptor.addChild(root_0, string_literal410_tree);
                    }

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:326:9: ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    set411=(Token)input.LT(1);
                    if ( (input.LA(1)>=127 && input.LA(1)<=130) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set411));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprAST.g:326:54: ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==LPAREN) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // RPIExprAST.g:326:56: LPAREN NUMBER ( COMMA NUMBER )? RPAREN
                            {
                            LPAREN412=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3402); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN412_tree = (Object)adaptor.create(LPAREN412);
                            adaptor.addChild(root_0, LPAREN412_tree);
                            }
                            NUMBER413=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3404); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER413_tree = (Object)adaptor.create(NUMBER413);
                            adaptor.addChild(root_0, NUMBER413_tree);
                            }
                            // RPIExprAST.g:326:70: ( COMMA NUMBER )?
                            int alt58=2;
                            int LA58_0 = input.LA(1);

                            if ( (LA58_0==COMMA) ) {
                                alt58=1;
                            }
                            switch (alt58) {
                                case 1 :
                                    // RPIExprAST.g:326:72: COMMA NUMBER
                                    {
                                    COMMA414=(Token)match(input,COMMA,FOLLOW_COMMA_in_datatype3408); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COMMA414_tree = (Object)adaptor.create(COMMA414);
                                    adaptor.addChild(root_0, COMMA414_tree);
                                    }
                                    NUMBER415=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3410); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NUMBER415_tree = (Object)adaptor.create(NUMBER415);
                                    adaptor.addChild(root_0, NUMBER415_tree);
                                    }

                                    }
                                    break;

                            }

                            RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3415); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN416_tree = (Object)adaptor.create(RPAREN416);
                            adaptor.addChild(root_0, RPAREN416_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // RPIExprAST.g:327:9: 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal417=(Token)match(input,131,FOLLOW_131_in_datatype3428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal417_tree = (Object)adaptor.create(string_literal417);
                    adaptor.addChild(root_0, string_literal417_tree);
                    }
                    // RPIExprAST.g:327:16: ( 'RAW' )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==132) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // RPIExprAST.g:327:18: 'RAW'
                            {
                            string_literal418=(Token)match(input,132,FOLLOW_132_in_datatype3432); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal418_tree = (Object)adaptor.create(string_literal418);
                            adaptor.addChild(root_0, string_literal418_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:327:26: ( LPAREN NUMBER RPAREN )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==LPAREN) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // RPIExprAST.g:327:28: LPAREN NUMBER RPAREN
                            {
                            LPAREN419=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3438); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN419_tree = (Object)adaptor.create(LPAREN419);
                            adaptor.addChild(root_0, LPAREN419_tree);
                            }
                            NUMBER420=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3440); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER420_tree = (Object)adaptor.create(NUMBER420);
                            adaptor.addChild(root_0, NUMBER420_tree);
                            }
                            RPAREN421=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3442); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN421_tree = (Object)adaptor.create(RPAREN421);
                            adaptor.addChild(root_0, RPAREN421_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // RPIExprAST.g:328:9: 'RAW' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal422=(Token)match(input,132,FOLLOW_132_in_datatype3455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal422_tree = (Object)adaptor.create(string_literal422);
                    adaptor.addChild(root_0, string_literal422_tree);
                    }
                    // RPIExprAST.g:328:15: ( LPAREN NUMBER RPAREN )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==LPAREN) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // RPIExprAST.g:328:17: LPAREN NUMBER RPAREN
                            {
                            LPAREN423=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3459); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN423_tree = (Object)adaptor.create(LPAREN423);
                            adaptor.addChild(root_0, LPAREN423_tree);
                            }
                            NUMBER424=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3461); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER424_tree = (Object)adaptor.create(NUMBER424);
                            adaptor.addChild(root_0, NUMBER424_tree);
                            }
                            RPAREN425=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3463); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN425_tree = (Object)adaptor.create(RPAREN425);
                            adaptor.addChild(root_0, RPAREN425_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // RPIExprAST.g:329:9: 'BOOLEAN'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal426=(Token)match(input,133,FOLLOW_133_in_datatype3476); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal426_tree = (Object)adaptor.create(string_literal426);
                    adaptor.addChild(root_0, string_literal426_tree);
                    }

                    }
                    break;
                case 10 :
                    // RPIExprAST.g:330:9: 'DATE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal427=(Token)match(input,134,FOLLOW_134_in_datatype3486); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal427_tree = (Object)adaptor.create(string_literal427);
                    adaptor.addChild(root_0, string_literal427_tree);
                    }

                    }
                    break;
                case 11 :
                    // RPIExprAST.g:331:9: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_keyINTERVAL_in_datatype3496);
                    keyINTERVAL428=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERVAL428.getTree());
                    pushFollow(FOLLOW_keyDAY_in_datatype3498);
                    keyDAY429=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDAY429.getTree());
                    // RPIExprAST.g:331:28: ( LPAREN NUMBER RPAREN )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==LPAREN) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // RPIExprAST.g:331:30: LPAREN NUMBER RPAREN
                            {
                            LPAREN430=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3502); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN430_tree = (Object)adaptor.create(LPAREN430);
                            adaptor.addChild(root_0, LPAREN430_tree);
                            }
                            NUMBER431=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3504); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER431_tree = (Object)adaptor.create(NUMBER431);
                            adaptor.addChild(root_0, NUMBER431_tree);
                            }
                            RPAREN432=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3506); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN432_tree = (Object)adaptor.create(RPAREN432);
                            adaptor.addChild(root_0, RPAREN432_tree);
                            }

                            }
                            break;

                    }

                    string_literal433=(Token)match(input,135,FOLLOW_135_in_datatype3511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal433_tree = (Object)adaptor.create(string_literal433);
                    adaptor.addChild(root_0, string_literal433_tree);
                    }
                    pushFollow(FOLLOW_keySECOND_in_datatype3513);
                    keySECOND434=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySECOND434.getTree());
                    // RPIExprAST.g:331:69: ( LPAREN NUMBER RPAREN )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==LPAREN) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // RPIExprAST.g:331:71: LPAREN NUMBER RPAREN
                            {
                            LPAREN435=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3517); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN435_tree = (Object)adaptor.create(LPAREN435);
                            adaptor.addChild(root_0, LPAREN435_tree);
                            }
                            NUMBER436=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3519); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER436_tree = (Object)adaptor.create(NUMBER436);
                            adaptor.addChild(root_0, NUMBER436_tree);
                            }
                            RPAREN437=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3521); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN437_tree = (Object)adaptor.create(RPAREN437);
                            adaptor.addChild(root_0, RPAREN437_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 12 :
                    // RPIExprAST.g:332:9: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_keyINTERVAL_in_datatype3534);
                    keyINTERVAL438=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINTERVAL438.getTree());
                    pushFollow(FOLLOW_keyYEAR_in_datatype3536);
                    keyYEAR439=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyYEAR439.getTree());
                    // RPIExprAST.g:332:29: ( LPAREN NUMBER RPAREN )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==LPAREN) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // RPIExprAST.g:332:31: LPAREN NUMBER RPAREN
                            {
                            LPAREN440=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3540); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN440_tree = (Object)adaptor.create(LPAREN440);
                            adaptor.addChild(root_0, LPAREN440_tree);
                            }
                            NUMBER441=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3542); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER441_tree = (Object)adaptor.create(NUMBER441);
                            adaptor.addChild(root_0, NUMBER441_tree);
                            }
                            RPAREN442=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3544); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN442_tree = (Object)adaptor.create(RPAREN442);
                            adaptor.addChild(root_0, RPAREN442_tree);
                            }

                            }
                            break;

                    }

                    string_literal443=(Token)match(input,135,FOLLOW_135_in_datatype3549); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal443_tree = (Object)adaptor.create(string_literal443);
                    adaptor.addChild(root_0, string_literal443_tree);
                    }
                    pushFollow(FOLLOW_keyMONTH_in_datatype3551);
                    keyMONTH444=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMONTH444.getTree());

                    }
                    break;
                case 13 :
                    // RPIExprAST.g:333:9: ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:333:9: ( keyTIME | keyTIMESTAMP )
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==ID) ) {
                        int LA66_1 = input.LA(2);

                        if ( ((synpred163_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIME")))) ) {
                            alt66=1;
                        }
                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {
                            alt66=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 66, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 66, 0, input);

                        throw nvae;
                    }
                    switch (alt66) {
                        case 1 :
                            // RPIExprAST.g:333:11: keyTIME
                            {
                            pushFollow(FOLLOW_keyTIME_in_datatype3563);
                            keyTIME445=keyTIME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME445.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:333:21: keyTIMESTAMP
                            {
                            pushFollow(FOLLOW_keyTIMESTAMP_in_datatype3567);
                            keyTIMESTAMP446=keyTIMESTAMP();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIMESTAMP446.getTree());

                            }
                            break;

                    }

                    // RPIExprAST.g:333:36: ( LPAREN NUMBER RPAREN )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==LPAREN) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // RPIExprAST.g:333:38: LPAREN NUMBER RPAREN
                            {
                            LPAREN447=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3573); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN447_tree = (Object)adaptor.create(LPAREN447);
                            adaptor.addChild(root_0, LPAREN447_tree);
                            }
                            NUMBER448=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3575); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER448_tree = (Object)adaptor.create(NUMBER448);
                            adaptor.addChild(root_0, NUMBER448_tree);
                            }
                            RPAREN449=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3577); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN449_tree = (Object)adaptor.create(RPAREN449);
                            adaptor.addChild(root_0, RPAREN449_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:333:62: ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==136) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // RPIExprAST.g:333:64: 'WITH' ( keyLOCAL )? keyTIME keyZONE
                            {
                            string_literal450=(Token)match(input,136,FOLLOW_136_in_datatype3584); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal450_tree = (Object)adaptor.create(string_literal450);
                            adaptor.addChild(root_0, string_literal450_tree);
                            }
                            // RPIExprAST.g:333:71: ( keyLOCAL )?
                            int alt68=2;
                            int LA68_0 = input.LA(1);

                            if ( (LA68_0==ID) ) {
                                int LA68_1 = input.LA(2);

                                if ( (LA68_1==ID) ) {
                                    int LA68_2 = input.LA(3);

                                    if ( (LA68_2==ID) ) {
                                        switch ( input.LA(4) ) {
                                            case ID:
                                                {
                                                switch ( input.LA(5) ) {
                                                    case PLUS:
                                                    case MINUS:
                                                    case NUMBER:
                                                    case QUOTED_STRING:
                                                    case DOUBLEQUOTED_STRING:
                                                    case 115:
                                                    case 119:
                                                    case 122:
                                                    case 123:
                                                    case 124:
                                                    case 125:
                                                    case 126:
                                                    case 127:
                                                    case 128:
                                                    case 129:
                                                    case 130:
                                                    case 131:
                                                    case 132:
                                                    case 133:
                                                    case 134:
                                                    case 137:
                                                    case 138:
                                                    case 139:
                                                    case 140:
                                                    case 141:
                                                    case 142:
                                                    case 143:
                                                    case 144:
                                                    case 146:
                                                    case 147:
                                                    case 148:
                                                    case 149:
                                                    case 150:
                                                    case 151:
                                                    case 152:
                                                    case 153:
                                                    case 154:
                                                    case 155:
                                                    case 156:
                                                    case 157:
                                                    case 158:
                                                    case 159:
                                                        {
                                                        alt68=1;
                                                        }
                                                        break;
                                                    case ID:
                                                        {
                                                        int LA68_8 = input.LA(6);

                                                        if ( (LA68_8==ID||LA68_8==SEMICOLON||LA68_8==NOT||(LA68_8>=DOT && LA68_8<=SQL_ASSIGN)||(LA68_8>=TYPE_ATTR && LA68_8<=ROWTYPE_ATTR)||LA68_8==AT_SIGN||LA68_8==111||LA68_8==117||LA68_8==136||LA68_8==220) ) {
                                                            alt68=1;
                                                        }
                                                        else if ( (LA68_8==LPAREN) ) {
                                                            int LA68_10 = input.LA(7);

                                                            if ( (LA68_10==NUMBER) ) {
                                                                int LA68_12 = input.LA(8);

                                                                if ( (LA68_12==RPAREN) ) {
                                                                    int LA68_13 = input.LA(9);

                                                                    if ( (LA68_13==SEMICOLON||LA68_13==NOT||LA68_13==SQL_ASSIGN||LA68_13==111||LA68_13==117||LA68_13==136) ) {
                                                                        alt68=1;
                                                                    }
                                                                }
                                                            }
                                                            else if ( (LA68_10==ID||LA68_10==DOUBLEQUOTED_STRING) ) {
                                                                alt68=1;
                                                            }
                                                        }
                                                        }
                                                        break;
                                                    case DOT:
                                                        {
                                                        int LA68_9 = input.LA(6);

                                                        if ( (LA68_9==ID||LA68_9==DOUBLEQUOTED_STRING) ) {
                                                            int LA68_11 = input.LA(7);

                                                            if ( (LA68_11==119) ) {
                                                                alt68=1;
                                                            }
                                                        }
                                                        }
                                                        break;
                                                }

                                                }
                                                break;
                                            case DOUBLEQUOTED_STRING:
                                                {
                                                int LA68_6 = input.LA(5);

                                                if ( (LA68_6==DOT) ) {
                                                    int LA68_9 = input.LA(6);

                                                    if ( (LA68_9==ID||LA68_9==DOUBLEQUOTED_STRING) ) {
                                                        int LA68_11 = input.LA(7);

                                                        if ( (LA68_11==119) ) {
                                                            alt68=1;
                                                        }
                                                    }
                                                }
                                                else if ( (LA68_6==ID||LA68_6==DOUBLEQUOTED_STRING||LA68_6==115||LA68_6==119||(LA68_6>=122 && LA68_6<=134)||(LA68_6>=137 && LA68_6<=144)||(LA68_6>=146 && LA68_6<=159)) ) {
                                                    alt68=1;
                                                }
                                                }
                                                break;
                                            case EOF:
                                            case RPAREN:
                                            case SEMICOLON:
                                            case COMMA:
                                            case NOT:
                                            case SQL_ASSIGN:
                                            case 110:
                                            case 111:
                                            case 112:
                                            case 113:
                                            case 114:
                                            case 117:
                                            case 161:
                                            case 162:
                                            case 165:
                                            case 217:
                                                {
                                                alt68=1;
                                                }
                                                break;
                                        }

                                    }
                                }
                            }
                            switch (alt68) {
                                case 1 :
                                    // RPIExprAST.g:333:73: keyLOCAL
                                    {
                                    pushFollow(FOLLOW_keyLOCAL_in_datatype3588);
                                    keyLOCAL451=keyLOCAL();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOCAL451.getTree());

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_keyTIME_in_datatype3593);
                            keyTIME452=keyTIME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME452.getTree());
                            pushFollow(FOLLOW_keyZONE_in_datatype3595);
                            keyZONE453=keyZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyZONE453.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 14 :
                    // RPIExprAST.g:334:9: 'INTEGER'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal454=(Token)match(input,137,FOLLOW_137_in_datatype3607); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal454_tree = (Object)adaptor.create(string_literal454);
                    adaptor.addChild(root_0, string_literal454_tree);
                    }

                    }
                    break;
                case 15 :
                    // RPIExprAST.g:335:9: 'INT'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal455=(Token)match(input,138,FOLLOW_138_in_datatype3617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal455_tree = (Object)adaptor.create(string_literal455);
                    adaptor.addChild(root_0, string_literal455_tree);
                    }

                    }
                    break;
                case 16 :
                    // RPIExprAST.g:336:9: 'SMALLINT'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal456=(Token)match(input,139,FOLLOW_139_in_datatype3627); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal456_tree = (Object)adaptor.create(string_literal456);
                    adaptor.addChild(root_0, string_literal456_tree);
                    }

                    }
                    break;
                case 17 :
                    // RPIExprAST.g:337:9: 'FLOAT' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal457=(Token)match(input,140,FOLLOW_140_in_datatype3637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal457_tree = (Object)adaptor.create(string_literal457);
                    adaptor.addChild(root_0, string_literal457_tree);
                    }
                    // RPIExprAST.g:337:17: ( LPAREN NUMBER RPAREN )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==LPAREN) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // RPIExprAST.g:337:19: LPAREN NUMBER RPAREN
                            {
                            LPAREN458=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3641); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN458_tree = (Object)adaptor.create(LPAREN458);
                            adaptor.addChild(root_0, LPAREN458_tree);
                            }
                            NUMBER459=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3643); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER459_tree = (Object)adaptor.create(NUMBER459);
                            adaptor.addChild(root_0, NUMBER459_tree);
                            }
                            RPAREN460=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3645); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN460_tree = (Object)adaptor.create(RPAREN460);
                            adaptor.addChild(root_0, RPAREN460_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 18 :
                    // RPIExprAST.g:338:9: 'REAL'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal461=(Token)match(input,141,FOLLOW_141_in_datatype3658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal461_tree = (Object)adaptor.create(string_literal461);
                    adaptor.addChild(root_0, string_literal461_tree);
                    }

                    }
                    break;
                case 19 :
                    // RPIExprAST.g:339:9: 'DOUBLE' keyPRECISION
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal462=(Token)match(input,142,FOLLOW_142_in_datatype3668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal462_tree = (Object)adaptor.create(string_literal462);
                    adaptor.addChild(root_0, string_literal462_tree);
                    }
                    pushFollow(FOLLOW_keyPRECISION_in_datatype3670);
                    keyPRECISION463=keyPRECISION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRECISION463.getTree());

                    }
                    break;
                case 20 :
                    // RPIExprAST.g:340:9: 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal464=(Token)match(input,143,FOLLOW_143_in_datatype3680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal464_tree = (Object)adaptor.create(string_literal464);
                    adaptor.addChild(root_0, string_literal464_tree);
                    }
                    // RPIExprAST.g:340:21: ( keyVARYING )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt71=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA71_7 = input.LA(4);

                                        if ( (LA71_7==ID||LA71_7==SEMICOLON||LA71_7==NOT||(LA71_7>=DOT && LA71_7<=SQL_ASSIGN)||(LA71_7>=TYPE_ATTR && LA71_7<=ROWTYPE_ATTR)||LA71_7==AT_SIGN||LA71_7==111||LA71_7==117||LA71_7==136||LA71_7==220) ) {
                                            alt71=1;
                                        }
                                        else if ( (LA71_7==LPAREN) ) {
                                            int LA71_9 = input.LA(5);

                                            if ( (LA71_9==NUMBER) ) {
                                                int LA71_11 = input.LA(6);

                                                if ( (LA71_11==RPAREN) ) {
                                                    int LA71_12 = input.LA(7);

                                                    if ( (LA71_12==SEMICOLON||LA71_12==NOT||LA71_12==SQL_ASSIGN||LA71_12==111||LA71_12==117||LA71_12==136) ) {
                                                        alt71=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA71_9==ID||LA71_9==DOUBLEQUOTED_STRING) ) {
                                                alt71=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA71_8 = input.LA(4);

                                        if ( (LA71_8==ID||LA71_8==DOUBLEQUOTED_STRING) ) {
                                            int LA71_10 = input.LA(5);

                                            if ( (LA71_10==119) ) {
                                                alt71=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case 144:
                                {
                                int LA71_4 = input.LA(3);

                                if ( (LA71_4==145) ) {
                                    alt71=1;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA71_5 = input.LA(3);

                                if ( (LA71_5==DOT) ) {
                                    int LA71_8 = input.LA(4);

                                    if ( (LA71_8==ID||LA71_8==DOUBLEQUOTED_STRING) ) {
                                        int LA71_10 = input.LA(5);

                                        if ( (LA71_10==119) ) {
                                            alt71=1;
                                        }
                                    }
                                }
                                else if ( (LA71_5==ID||LA71_5==DOUBLEQUOTED_STRING||LA71_5==115||LA71_5==119||(LA71_5>=122 && LA71_5<=134)||(LA71_5>=137 && LA71_5<=144)||(LA71_5>=146 && LA71_5<=159)) ) {
                                    alt71=1;
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt71=1;
                                }
                                break;
                        }

                    }
                    switch (alt71) {
                        case 1 :
                            // RPIExprAST.g:340:23: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3689);
                            keyVARYING465=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING465.getTree());

                            }
                            break;

                    }

                    // RPIExprAST.g:340:37: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==LPAREN) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // RPIExprAST.g:340:39: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3696); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN466_tree = (Object)adaptor.create(LPAREN466);
                            adaptor.addChild(root_0, LPAREN466_tree);
                            }
                            NUMBER467=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3698); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER467_tree = (Object)adaptor.create(NUMBER467);
                            adaptor.addChild(root_0, NUMBER467_tree);
                            }
                            // RPIExprAST.g:340:53: ( keyBYTE | 'CHAR' )?
                            int alt72=3;
                            int LA72_0 = input.LA(1);

                            if ( (LA72_0==ID) ) {
                                alt72=1;
                            }
                            else if ( (LA72_0==143) ) {
                                alt72=2;
                            }
                            switch (alt72) {
                                case 1 :
                                    // RPIExprAST.g:340:55: keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3702);
                                    keyBYTE468=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE468.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:340:65: 'CHAR'
                                    {
                                    string_literal469=(Token)match(input,143,FOLLOW_143_in_datatype3706); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal469_tree = (Object)adaptor.create(string_literal469);
                                    adaptor.addChild(root_0, string_literal469_tree);
                                    }

                                    }
                                    break;

                            }

                            RPAREN470=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3711); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN470_tree = (Object)adaptor.create(RPAREN470);
                            adaptor.addChild(root_0, RPAREN470_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:340:85: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==144) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // RPIExprAST.g:340:87: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal471=(Token)match(input,144,FOLLOW_144_in_datatype3718); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal471_tree = (Object)adaptor.create(string_literal471);
                            adaptor.addChild(root_0, string_literal471_tree);
                            }
                            string_literal472=(Token)match(input,145,FOLLOW_145_in_datatype3720); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal472_tree = (Object)adaptor.create(string_literal472);
                            adaptor.addChild(root_0, string_literal472_tree);
                            }
                            // RPIExprAST.g:340:105: ( identifier | column_spec CHARSET_ATTR )
                            int alt74=2;
                            int LA74_0 = input.LA(1);

                            if ( (LA74_0==ID||LA74_0==DOUBLEQUOTED_STRING) ) {
                                int LA74_1 = input.LA(2);

                                if ( (LA74_1==EOF||LA74_1==ID||LA74_1==RPAREN||(LA74_1>=SEMICOLON && LA74_1<=COMMA)||LA74_1==NOT||LA74_1==SQL_ASSIGN||LA74_1==DOUBLEQUOTED_STRING||(LA74_1>=110 && LA74_1<=114)||LA74_1==117||(LA74_1>=161 && LA74_1<=162)||LA74_1==165||LA74_1==217) ) {
                                    alt74=1;
                                }
                                else if ( (LA74_1==DOT||LA74_1==CHARSET_ATTR) ) {
                                    alt74=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 74, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA74_0==158) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 0, input);

                                throw nvae;
                            }
                            switch (alt74) {
                                case 1 :
                                    // RPIExprAST.g:340:107: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3724);
                                    identifier473=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier473.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:340:120: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3728);
                                    column_spec474=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec474.getTree());
                                    CHARSET_ATTR475=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3730); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR475_tree = (Object)adaptor.create(CHARSET_ATTR475);
                                    adaptor.addChild(root_0, CHARSET_ATTR475_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 21 :
                    // RPIExprAST.g:341:9: 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal476=(Token)match(input,146,FOLLOW_146_in_datatype3745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal476_tree = (Object)adaptor.create(string_literal476);
                    adaptor.addChild(root_0, string_literal476_tree);
                    }
                    // RPIExprAST.g:341:37: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==LPAREN) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // RPIExprAST.g:341:39: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            LPAREN477=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3767); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN477_tree = (Object)adaptor.create(LPAREN477);
                            adaptor.addChild(root_0, LPAREN477_tree);
                            }
                            NUMBER478=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3769); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER478_tree = (Object)adaptor.create(NUMBER478);
                            adaptor.addChild(root_0, NUMBER478_tree);
                            }
                            // RPIExprAST.g:341:53: ( keyBYTE | 'CHAR' )?
                            int alt76=3;
                            int LA76_0 = input.LA(1);

                            if ( (LA76_0==ID) ) {
                                alt76=1;
                            }
                            else if ( (LA76_0==143) ) {
                                alt76=2;
                            }
                            switch (alt76) {
                                case 1 :
                                    // RPIExprAST.g:341:55: keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3773);
                                    keyBYTE479=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE479.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:341:65: 'CHAR'
                                    {
                                    string_literal480=(Token)match(input,143,FOLLOW_143_in_datatype3777); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal480_tree = (Object)adaptor.create(string_literal480);
                                    adaptor.addChild(root_0, string_literal480_tree);
                                    }

                                    }
                                    break;

                            }

                            RPAREN481=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3782); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN481_tree = (Object)adaptor.create(RPAREN481);
                            adaptor.addChild(root_0, RPAREN481_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:341:85: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==144) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // RPIExprAST.g:341:87: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal482=(Token)match(input,144,FOLLOW_144_in_datatype3789); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal482_tree = (Object)adaptor.create(string_literal482);
                            adaptor.addChild(root_0, string_literal482_tree);
                            }
                            string_literal483=(Token)match(input,145,FOLLOW_145_in_datatype3791); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal483_tree = (Object)adaptor.create(string_literal483);
                            adaptor.addChild(root_0, string_literal483_tree);
                            }
                            // RPIExprAST.g:341:105: ( identifier | column_spec CHARSET_ATTR )
                            int alt78=2;
                            int LA78_0 = input.LA(1);

                            if ( (LA78_0==ID||LA78_0==DOUBLEQUOTED_STRING) ) {
                                int LA78_1 = input.LA(2);

                                if ( (LA78_1==EOF||LA78_1==ID||LA78_1==RPAREN||(LA78_1>=SEMICOLON && LA78_1<=COMMA)||LA78_1==NOT||LA78_1==SQL_ASSIGN||LA78_1==DOUBLEQUOTED_STRING||(LA78_1>=110 && LA78_1<=114)||LA78_1==117||(LA78_1>=161 && LA78_1<=162)||LA78_1==165||LA78_1==217) ) {
                                    alt78=1;
                                }
                                else if ( (LA78_1==DOT||LA78_1==CHARSET_ATTR) ) {
                                    alt78=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 78, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA78_0==158) ) {
                                alt78=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 78, 0, input);

                                throw nvae;
                            }
                            switch (alt78) {
                                case 1 :
                                    // RPIExprAST.g:341:107: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3795);
                                    identifier484=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier484.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:341:120: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3799);
                                    column_spec485=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec485.getTree());
                                    CHARSET_ATTR486=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3801); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR486_tree = (Object)adaptor.create(CHARSET_ATTR486);
                                    adaptor.addChild(root_0, CHARSET_ATTR486_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // RPIExprAST.g:342:9: 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal487=(Token)match(input,147,FOLLOW_147_in_datatype3816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal487_tree = (Object)adaptor.create(string_literal487);
                    adaptor.addChild(root_0, string_literal487_tree);
                    }
                    // RPIExprAST.g:342:37: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==LPAREN) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // RPIExprAST.g:342:39: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            LPAREN488=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3837); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN488_tree = (Object)adaptor.create(LPAREN488);
                            adaptor.addChild(root_0, LPAREN488_tree);
                            }
                            NUMBER489=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3839); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER489_tree = (Object)adaptor.create(NUMBER489);
                            adaptor.addChild(root_0, NUMBER489_tree);
                            }
                            // RPIExprAST.g:342:53: ( keyBYTE | 'CHAR' )?
                            int alt80=3;
                            int LA80_0 = input.LA(1);

                            if ( (LA80_0==ID) ) {
                                alt80=1;
                            }
                            else if ( (LA80_0==143) ) {
                                alt80=2;
                            }
                            switch (alt80) {
                                case 1 :
                                    // RPIExprAST.g:342:55: keyBYTE
                                    {
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3843);
                                    keyBYTE490=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBYTE490.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:342:65: 'CHAR'
                                    {
                                    string_literal491=(Token)match(input,143,FOLLOW_143_in_datatype3847); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal491_tree = (Object)adaptor.create(string_literal491);
                                    adaptor.addChild(root_0, string_literal491_tree);
                                    }

                                    }
                                    break;

                            }

                            RPAREN492=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3852); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN492_tree = (Object)adaptor.create(RPAREN492);
                            adaptor.addChild(root_0, RPAREN492_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:342:85: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==144) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // RPIExprAST.g:342:87: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal493=(Token)match(input,144,FOLLOW_144_in_datatype3859); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal493_tree = (Object)adaptor.create(string_literal493);
                            adaptor.addChild(root_0, string_literal493_tree);
                            }
                            string_literal494=(Token)match(input,145,FOLLOW_145_in_datatype3861); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal494_tree = (Object)adaptor.create(string_literal494);
                            adaptor.addChild(root_0, string_literal494_tree);
                            }
                            // RPIExprAST.g:342:105: ( identifier | column_spec CHARSET_ATTR )
                            int alt82=2;
                            int LA82_0 = input.LA(1);

                            if ( (LA82_0==ID||LA82_0==DOUBLEQUOTED_STRING) ) {
                                int LA82_1 = input.LA(2);

                                if ( (LA82_1==DOT||LA82_1==CHARSET_ATTR) ) {
                                    alt82=2;
                                }
                                else if ( (LA82_1==EOF||LA82_1==ID||LA82_1==RPAREN||(LA82_1>=SEMICOLON && LA82_1<=COMMA)||LA82_1==NOT||LA82_1==SQL_ASSIGN||LA82_1==DOUBLEQUOTED_STRING||(LA82_1>=110 && LA82_1<=114)||LA82_1==117||(LA82_1>=161 && LA82_1<=162)||LA82_1==165||LA82_1==217) ) {
                                    alt82=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 82, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA82_0==158) ) {
                                alt82=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 0, input);

                                throw nvae;
                            }
                            switch (alt82) {
                                case 1 :
                                    // RPIExprAST.g:342:107: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype3865);
                                    identifier495=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier495.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:342:120: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype3869);
                                    column_spec496=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec496.getTree());
                                    CHARSET_ATTR497=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3871); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR497_tree = (Object)adaptor.create(CHARSET_ATTR497);
                                    adaptor.addChild(root_0, CHARSET_ATTR497_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 23 :
                    // RPIExprAST.g:343:9: 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal498=(Token)match(input,144,FOLLOW_144_in_datatype3886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal498_tree = (Object)adaptor.create(string_literal498);
                    adaptor.addChild(root_0, string_literal498_tree);
                    }
                    // RPIExprAST.g:343:21: ( keyVARYING )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt84=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA84_6 = input.LA(4);

                                        if ( (LA84_6==ID||LA84_6==SEMICOLON||LA84_6==NOT||(LA84_6>=DOT && LA84_6<=SQL_ASSIGN)||(LA84_6>=TYPE_ATTR && LA84_6<=ROWTYPE_ATTR)||LA84_6==AT_SIGN||LA84_6==111||LA84_6==117||LA84_6==136||LA84_6==220) ) {
                                            alt84=1;
                                        }
                                        else if ( (LA84_6==LPAREN) ) {
                                            int LA84_8 = input.LA(5);

                                            if ( (LA84_8==NUMBER) ) {
                                                int LA84_10 = input.LA(6);

                                                if ( (LA84_10==RPAREN) ) {
                                                    int LA84_11 = input.LA(7);

                                                    if ( (LA84_11==SEMICOLON||LA84_11==NOT||LA84_11==SQL_ASSIGN||LA84_11==111||LA84_11==117||LA84_11==136) ) {
                                                        alt84=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA84_8==ID||LA84_8==DOUBLEQUOTED_STRING) ) {
                                                alt84=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA84_7 = input.LA(4);

                                        if ( (LA84_7==ID||LA84_7==DOUBLEQUOTED_STRING) ) {
                                            int LA84_9 = input.LA(5);

                                            if ( (LA84_9==119) ) {
                                                alt84=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA84_4 = input.LA(3);

                                if ( (LA84_4==ID||LA84_4==DOUBLEQUOTED_STRING||LA84_4==115||LA84_4==119||(LA84_4>=122 && LA84_4<=134)||(LA84_4>=137 && LA84_4<=144)||(LA84_4>=146 && LA84_4<=159)) ) {
                                    alt84=1;
                                }
                                else if ( (LA84_4==DOT) ) {
                                    int LA84_7 = input.LA(4);

                                    if ( (LA84_7==ID||LA84_7==DOUBLEQUOTED_STRING) ) {
                                        int LA84_9 = input.LA(5);

                                        if ( (LA84_9==119) ) {
                                            alt84=1;
                                        }
                                    }
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt84=1;
                                }
                                break;
                        }

                    }
                    switch (alt84) {
                        case 1 :
                            // RPIExprAST.g:343:23: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3890);
                            keyVARYING499=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING499.getTree());

                            }
                            break;

                    }

                    // RPIExprAST.g:343:37: ( LPAREN NUMBER RPAREN )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==LPAREN) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // RPIExprAST.g:343:39: LPAREN NUMBER RPAREN
                            {
                            LPAREN500=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3897); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN500_tree = (Object)adaptor.create(LPAREN500);
                            adaptor.addChild(root_0, LPAREN500_tree);
                            }
                            NUMBER501=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3899); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER501_tree = (Object)adaptor.create(NUMBER501);
                            adaptor.addChild(root_0, NUMBER501_tree);
                            }
                            RPAREN502=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3901); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN502_tree = (Object)adaptor.create(RPAREN502);
                            adaptor.addChild(root_0, RPAREN502_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 24 :
                    // RPIExprAST.g:344:9: 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal503=(Token)match(input,148,FOLLOW_148_in_datatype3914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal503_tree = (Object)adaptor.create(string_literal503);
                    adaptor.addChild(root_0, string_literal503_tree);
                    }
                    // RPIExprAST.g:344:21: ( keyVARYING )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt86=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA86_6 = input.LA(4);

                                        if ( (LA86_6==ID||LA86_6==SEMICOLON||LA86_6==NOT||(LA86_6>=DOT && LA86_6<=SQL_ASSIGN)||(LA86_6>=TYPE_ATTR && LA86_6<=ROWTYPE_ATTR)||LA86_6==AT_SIGN||LA86_6==111||LA86_6==117||LA86_6==136||LA86_6==220) ) {
                                            alt86=1;
                                        }
                                        else if ( (LA86_6==LPAREN) ) {
                                            int LA86_8 = input.LA(5);

                                            if ( (LA86_8==NUMBER) ) {
                                                int LA86_10 = input.LA(6);

                                                if ( (LA86_10==RPAREN) ) {
                                                    int LA86_11 = input.LA(7);

                                                    if ( (LA86_11==SEMICOLON||LA86_11==NOT||LA86_11==SQL_ASSIGN||LA86_11==111||LA86_11==117||LA86_11==136) ) {
                                                        alt86=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA86_8==ID||LA86_8==DOUBLEQUOTED_STRING) ) {
                                                alt86=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA86_7 = input.LA(4);

                                        if ( (LA86_7==ID||LA86_7==DOUBLEQUOTED_STRING) ) {
                                            int LA86_9 = input.LA(5);

                                            if ( (LA86_9==119) ) {
                                                alt86=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA86_4 = input.LA(3);

                                if ( (LA86_4==DOT) ) {
                                    int LA86_7 = input.LA(4);

                                    if ( (LA86_7==ID||LA86_7==DOUBLEQUOTED_STRING) ) {
                                        int LA86_9 = input.LA(5);

                                        if ( (LA86_9==119) ) {
                                            alt86=1;
                                        }
                                    }
                                }
                                else if ( (LA86_4==ID||LA86_4==DOUBLEQUOTED_STRING||LA86_4==115||LA86_4==119||(LA86_4>=122 && LA86_4<=134)||(LA86_4>=137 && LA86_4<=144)||(LA86_4>=146 && LA86_4<=159)) ) {
                                    alt86=1;
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt86=1;
                                }
                                break;
                        }

                    }
                    switch (alt86) {
                        case 1 :
                            // RPIExprAST.g:344:23: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype3922);
                            keyVARYING504=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING504.getTree());

                            }
                            break;

                    }

                    // RPIExprAST.g:344:37: ( LPAREN NUMBER RPAREN )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==LPAREN) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // RPIExprAST.g:344:39: LPAREN NUMBER RPAREN
                            {
                            LPAREN505=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3929); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN505_tree = (Object)adaptor.create(LPAREN505);
                            adaptor.addChild(root_0, LPAREN505_tree);
                            }
                            NUMBER506=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3931); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER506_tree = (Object)adaptor.create(NUMBER506);
                            adaptor.addChild(root_0, NUMBER506_tree);
                            }
                            RPAREN507=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3933); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN507_tree = (Object)adaptor.create(RPAREN507);
                            adaptor.addChild(root_0, RPAREN507_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 25 :
                    // RPIExprAST.g:345:9: 'NVARCHAR' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal508=(Token)match(input,149,FOLLOW_149_in_datatype3946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal508_tree = (Object)adaptor.create(string_literal508);
                    adaptor.addChild(root_0, string_literal508_tree);
                    }
                    // RPIExprAST.g:345:21: ( LPAREN NUMBER RPAREN )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==LPAREN) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // RPIExprAST.g:345:23: LPAREN NUMBER RPAREN
                            {
                            LPAREN509=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3951); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN509_tree = (Object)adaptor.create(LPAREN509);
                            adaptor.addChild(root_0, LPAREN509_tree);
                            }
                            NUMBER510=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3953); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER510_tree = (Object)adaptor.create(NUMBER510);
                            adaptor.addChild(root_0, NUMBER510_tree);
                            }
                            RPAREN511=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3955); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN511_tree = (Object)adaptor.create(RPAREN511);
                            adaptor.addChild(root_0, RPAREN511_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 26 :
                    // RPIExprAST.g:346:9: 'NVARCHAR2' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal512=(Token)match(input,150,FOLLOW_150_in_datatype3968); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal512_tree = (Object)adaptor.create(string_literal512);
                    adaptor.addChild(root_0, string_literal512_tree);
                    }
                    // RPIExprAST.g:346:21: ( LPAREN NUMBER RPAREN )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==LPAREN) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // RPIExprAST.g:346:23: LPAREN NUMBER RPAREN
                            {
                            LPAREN513=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3972); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN513_tree = (Object)adaptor.create(LPAREN513);
                            adaptor.addChild(root_0, LPAREN513_tree);
                            }
                            NUMBER514=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3974); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER514_tree = (Object)adaptor.create(NUMBER514);
                            adaptor.addChild(root_0, NUMBER514_tree);
                            }
                            RPAREN515=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3976); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN515_tree = (Object)adaptor.create(RPAREN515);
                            adaptor.addChild(root_0, RPAREN515_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 27 :
                    // RPIExprAST.g:347:9: 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal516=(Token)match(input,151,FOLLOW_151_in_datatype3989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal516_tree = (Object)adaptor.create(string_literal516);
                    adaptor.addChild(root_0, string_literal516_tree);
                    }
                    set517=(Token)input.LT(1);
                    if ( (input.LA(1)>=143 && input.LA(1)<=144) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set517));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprAST.g:347:46: ( keyVARYING )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt90=1;
                                        }
                                        break;
                                    case ID:
                                        {
                                        int LA90_6 = input.LA(4);

                                        if ( (LA90_6==ID||LA90_6==SEMICOLON||LA90_6==NOT||(LA90_6>=DOT && LA90_6<=SQL_ASSIGN)||(LA90_6>=TYPE_ATTR && LA90_6<=ROWTYPE_ATTR)||LA90_6==AT_SIGN||LA90_6==111||LA90_6==117||LA90_6==136||LA90_6==220) ) {
                                            alt90=1;
                                        }
                                        else if ( (LA90_6==LPAREN) ) {
                                            int LA90_8 = input.LA(5);

                                            if ( (LA90_8==NUMBER) ) {
                                                int LA90_10 = input.LA(6);

                                                if ( (LA90_10==RPAREN) ) {
                                                    int LA90_11 = input.LA(7);

                                                    if ( (LA90_11==SEMICOLON||LA90_11==NOT||LA90_11==SQL_ASSIGN||LA90_11==111||LA90_11==117||LA90_11==136) ) {
                                                        alt90=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA90_8==ID||LA90_8==DOUBLEQUOTED_STRING) ) {
                                                alt90=1;
                                            }
                                        }
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA90_7 = input.LA(4);

                                        if ( (LA90_7==ID||LA90_7==DOUBLEQUOTED_STRING) ) {
                                            int LA90_9 = input.LA(5);

                                            if ( (LA90_9==119) ) {
                                                alt90=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA90_4 = input.LA(3);

                                if ( (LA90_4==DOT) ) {
                                    int LA90_7 = input.LA(4);

                                    if ( (LA90_7==ID||LA90_7==DOUBLEQUOTED_STRING) ) {
                                        int LA90_9 = input.LA(5);

                                        if ( (LA90_9==119) ) {
                                            alt90=1;
                                        }
                                    }
                                }
                                else if ( (LA90_4==ID||LA90_4==DOUBLEQUOTED_STRING||LA90_4==115||LA90_4==119||(LA90_4>=122 && LA90_4<=134)||(LA90_4>=137 && LA90_4<=144)||(LA90_4>=146 && LA90_4<=159)) ) {
                                    alt90=1;
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt90=1;
                                }
                                break;
                        }

                    }
                    switch (alt90) {
                        case 1 :
                            // RPIExprAST.g:347:48: keyVARYING
                            {
                            pushFollow(FOLLOW_keyVARYING_in_datatype4004);
                            keyVARYING518=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING518.getTree());

                            }
                            break;

                    }

                    // RPIExprAST.g:347:62: ( LPAREN NUMBER RPAREN )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==LPAREN) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // RPIExprAST.g:347:64: LPAREN NUMBER RPAREN
                            {
                            LPAREN519=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype4011); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN519_tree = (Object)adaptor.create(LPAREN519);
                            adaptor.addChild(root_0, LPAREN519_tree);
                            }
                            NUMBER520=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype4013); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER520_tree = (Object)adaptor.create(NUMBER520);
                            adaptor.addChild(root_0, NUMBER520_tree);
                            }
                            RPAREN521=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype4015); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN521_tree = (Object)adaptor.create(RPAREN521);
                            adaptor.addChild(root_0, RPAREN521_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 28 :
                    // RPIExprAST.g:348:9: 'MLSLABEL'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal522=(Token)match(input,152,FOLLOW_152_in_datatype4028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal522_tree = (Object)adaptor.create(string_literal522);
                    adaptor.addChild(root_0, string_literal522_tree);
                    }

                    }
                    break;
                case 29 :
                    // RPIExprAST.g:349:9: 'PLS_INTEGER'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal523=(Token)match(input,153,FOLLOW_153_in_datatype4038); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal523_tree = (Object)adaptor.create(string_literal523);
                    adaptor.addChild(root_0, string_literal523_tree);
                    }

                    }
                    break;
                case 30 :
                    // RPIExprAST.g:350:9: 'BLOB'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal524=(Token)match(input,154,FOLLOW_154_in_datatype4048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal524_tree = (Object)adaptor.create(string_literal524);
                    adaptor.addChild(root_0, string_literal524_tree);
                    }

                    }
                    break;
                case 31 :
                    // RPIExprAST.g:351:9: 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal525=(Token)match(input,155,FOLLOW_155_in_datatype4058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal525_tree = (Object)adaptor.create(string_literal525);
                    adaptor.addChild(root_0, string_literal525_tree);
                    }
                    // RPIExprAST.g:351:16: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==144) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // RPIExprAST.g:351:18: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            string_literal526=(Token)match(input,144,FOLLOW_144_in_datatype4062); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal526_tree = (Object)adaptor.create(string_literal526);
                            adaptor.addChild(root_0, string_literal526_tree);
                            }
                            string_literal527=(Token)match(input,145,FOLLOW_145_in_datatype4064); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal527_tree = (Object)adaptor.create(string_literal527);
                            adaptor.addChild(root_0, string_literal527_tree);
                            }
                            // RPIExprAST.g:351:36: ( identifier | column_spec CHARSET_ATTR )
                            int alt92=2;
                            int LA92_0 = input.LA(1);

                            if ( (LA92_0==ID||LA92_0==DOUBLEQUOTED_STRING) ) {
                                int LA92_1 = input.LA(2);

                                if ( (LA92_1==EOF||LA92_1==ID||LA92_1==RPAREN||(LA92_1>=SEMICOLON && LA92_1<=COMMA)||LA92_1==NOT||LA92_1==SQL_ASSIGN||LA92_1==DOUBLEQUOTED_STRING||(LA92_1>=110 && LA92_1<=114)||LA92_1==117||(LA92_1>=161 && LA92_1<=162)||LA92_1==165||LA92_1==217) ) {
                                    alt92=1;
                                }
                                else if ( (LA92_1==DOT||LA92_1==CHARSET_ATTR) ) {
                                    alt92=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 92, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA92_0==158) ) {
                                alt92=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 92, 0, input);

                                throw nvae;
                            }
                            switch (alt92) {
                                case 1 :
                                    // RPIExprAST.g:351:38: identifier
                                    {
                                    pushFollow(FOLLOW_identifier_in_datatype4068);
                                    identifier528=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier528.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:351:51: column_spec CHARSET_ATTR
                                    {
                                    pushFollow(FOLLOW_column_spec_in_datatype4072);
                                    column_spec529=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec529.getTree());
                                    CHARSET_ATTR530=(Token)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype4074); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR530_tree = (Object)adaptor.create(CHARSET_ATTR530);
                                    adaptor.addChild(root_0, CHARSET_ATTR530_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 32 :
                    // RPIExprAST.g:352:9: 'NCLOB'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal531=(Token)match(input,156,FOLLOW_156_in_datatype4089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal531_tree = (Object)adaptor.create(string_literal531);
                    adaptor.addChild(root_0, string_literal531_tree);
                    }

                    }
                    break;
                case 33 :
                    // RPIExprAST.g:353:9: 'BFILE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal532=(Token)match(input,157,FOLLOW_157_in_datatype4099); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal532_tree = (Object)adaptor.create(string_literal532);
                    adaptor.addChild(root_0, string_literal532_tree);
                    }

                    }
                    break;
                case 34 :
                    // RPIExprAST.g:354:9: 'ROWID'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal533=(Token)match(input,158,FOLLOW_158_in_datatype4109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal533_tree = (Object)adaptor.create(string_literal533);
                    adaptor.addChild(root_0, string_literal533_tree);
                    }

                    }
                    break;
                case 35 :
                    // RPIExprAST.g:355:9: 'UROWID' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal534=(Token)match(input,159,FOLLOW_159_in_datatype4120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal534_tree = (Object)adaptor.create(string_literal534);
                    adaptor.addChild(root_0, string_literal534_tree);
                    }
                    // RPIExprAST.g:355:18: ( LPAREN NUMBER RPAREN )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==LPAREN) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // RPIExprAST.g:355:20: LPAREN NUMBER RPAREN
                            {
                            LPAREN535=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_datatype4124); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN535_tree = (Object)adaptor.create(LPAREN535);
                            adaptor.addChild(root_0, LPAREN535_tree);
                            }
                            NUMBER536=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_datatype4126); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER536_tree = (Object)adaptor.create(NUMBER536);
                            adaptor.addChild(root_0, NUMBER536_tree);
                            }
                            RPAREN537=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_datatype4128); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN537_tree = (Object)adaptor.create(RPAREN537);
                            adaptor.addChild(root_0, RPAREN537_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "datatype"

    public static class type_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec"
    // RPIExprAST.g:358:1: type_spec : ( datatype | column_spec TYPE_ATTR | table_spec ROWTYPE_ATTR | type_name ( LPAREN NUMBER RPAREN )? );
    public final RPIExprASTParser.type_spec_return type_spec() throws RecognitionException {
        RPIExprASTParser.type_spec_return retval = new RPIExprASTParser.type_spec_return();
        retval.start = input.LT(1);
        int type_spec_StartIndex = input.index();
        Object root_0 = null;

        Token TYPE_ATTR540=null;
        Token ROWTYPE_ATTR542=null;
        Token LPAREN544=null;
        Token NUMBER545=null;
        Token RPAREN546=null;
        RPIExprASTParser.datatype_return datatype538 = null;

        RPIExprASTParser.column_spec_return column_spec539 = null;

        RPIExprASTParser.table_spec_return table_spec541 = null;

        RPIExprASTParser.type_name_return type_name543 = null;


        Object TYPE_ATTR540_tree=null;
        Object ROWTYPE_ATTR542_tree=null;
        Object LPAREN544_tree=null;
        Object NUMBER545_tree=null;
        Object RPAREN546_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // RPIExprAST.g:359:5: ( datatype | column_spec TYPE_ATTR | table_spec ROWTYPE_ATTR | type_name ( LPAREN NUMBER RPAREN )? )
            int alt97=4;
            switch ( input.LA(1) ) {
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
                {
                alt97=1;
                }
                break;
            case ID:
                {
                int LA97_2 = input.LA(2);

                if ( (LA97_2==ROWTYPE_ATTR||LA97_2==AT_SIGN) ) {
                    alt97=3;
                }
                else if ( (LA97_2==DOT) ) {
                    int LA97_6 = input.LA(3);

                    if ( (LA97_6==ID||LA97_6==DOUBLEQUOTED_STRING) ) {
                        int LA97_10 = input.LA(4);

                        if ( (LA97_10==ROWTYPE_ATTR||LA97_10==AT_SIGN) ) {
                            alt97=3;
                        }
                        else if ( (LA97_10==DOT||LA97_10==TYPE_ATTR) ) {
                            alt97=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 97, 10, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA97_6==158) ) {
                        int LA97_11 = input.LA(4);

                        if ( (LA97_11==ROWTYPE_ATTR||LA97_11==AT_SIGN) ) {
                            alt97=3;
                        }
                        else if ( (LA97_11==DOT||LA97_11==TYPE_ATTR) ) {
                            alt97=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 97, 11, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA97_2==TYPE_ATTR) ) {
                    alt97=2;
                }
                else if ( (((synpred218_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))||(synpred218_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIME")))||(synpred218_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))||(synpred218_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))))) ) {
                    alt97=1;
                }
                else if ( (true) ) {
                    alt97=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 2, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                switch ( input.LA(2) ) {
                case ROWTYPE_ATTR:
                case AT_SIGN:
                    {
                    alt97=3;
                    }
                    break;
                case DOT:
                    {
                    int LA97_6 = input.LA(3);

                    if ( (LA97_6==ID||LA97_6==DOUBLEQUOTED_STRING) ) {
                        int LA97_10 = input.LA(4);

                        if ( (LA97_10==ROWTYPE_ATTR||LA97_10==AT_SIGN) ) {
                            alt97=3;
                        }
                        else if ( (LA97_10==DOT||LA97_10==TYPE_ATTR) ) {
                            alt97=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 97, 10, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA97_6==158) ) {
                        int LA97_11 = input.LA(4);

                        if ( (LA97_11==ROWTYPE_ATTR||LA97_11==AT_SIGN) ) {
                            alt97=3;
                        }
                        else if ( (LA97_11==DOT||LA97_11==TYPE_ATTR) ) {
                            alt97=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 97, 11, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 6, input);

                        throw nvae;
                    }
                    }
                    break;
                case TYPE_ATTR:
                    {
                    alt97=2;
                    }
                    break;
                case EOF:
                case ID:
                case RPAREN:
                case SEMICOLON:
                case COMMA:
                case NOT:
                case SQL_ASSIGN:
                case DOUBLEQUOTED_STRING:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 117:
                case 161:
                case 162:
                case 165:
                case 217:
                    {
                    alt97=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 3, input);

                    throw nvae;
                }

                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                switch ( input.LA(2) ) {
                case ROWTYPE_ATTR:
                case AT_SIGN:
                    {
                    alt97=3;
                    }
                    break;
                case DOT:
                    {
                    int LA97_9 = input.LA(3);

                    if ( (LA97_9==ID||LA97_9==DOUBLEQUOTED_STRING) ) {
                        switch ( input.LA(4) ) {
                        case EOF:
                        case ID:
                        case LPAREN:
                        case RPAREN:
                        case SEMICOLON:
                        case COMMA:
                        case NOT:
                        case SQL_ASSIGN:
                        case DOUBLEQUOTED_STRING:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 117:
                        case 161:
                        case 162:
                        case 165:
                        case 217:
                            {
                            alt97=4;
                            }
                            break;
                        case DOT:
                            {
                            int LA97_13 = input.LA(5);

                            if ( (LA97_13==ID||LA97_13==DOUBLEQUOTED_STRING) ) {
                                int LA97_14 = input.LA(6);

                                if ( (LA97_14==EOF||(LA97_14>=ID && LA97_14<=RPAREN)||(LA97_14>=SEMICOLON && LA97_14<=COMMA)||LA97_14==NOT||(LA97_14>=DOT && LA97_14<=SQL_ASSIGN)||LA97_14==DOUBLEQUOTED_STRING||(LA97_14>=110 && LA97_14<=114)||LA97_14==117||(LA97_14>=161 && LA97_14<=162)||LA97_14==165||LA97_14==217) ) {
                                    alt97=4;
                                }
                                else if ( (LA97_14==TYPE_ATTR) ) {
                                    alt97=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 97, 14, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA97_13==158) ) {
                                alt97=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 97, 13, input);

                                throw nvae;
                            }
                            }
                            break;
                        case ROWTYPE_ATTR:
                        case AT_SIGN:
                            {
                            alt97=3;
                            }
                            break;
                        case TYPE_ATTR:
                            {
                            alt97=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 97, 12, input);

                            throw nvae;
                        }

                    }
                    else if ( (LA97_9==158) ) {
                        int LA97_11 = input.LA(4);

                        if ( (LA97_11==ROWTYPE_ATTR||LA97_11==AT_SIGN) ) {
                            alt97=3;
                        }
                        else if ( (LA97_11==DOT||LA97_11==TYPE_ATTR) ) {
                            alt97=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 97, 11, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 97, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case TYPE_ATTR:
                    {
                    alt97=2;
                    }
                    break;
                case EOF:
                case ID:
                case LPAREN:
                case RPAREN:
                case SEMICOLON:
                case COMMA:
                case NOT:
                case SQL_ASSIGN:
                case DOUBLEQUOTED_STRING:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 117:
                case 161:
                case 162:
                case 165:
                case 217:
                    {
                    alt97=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 97, 4, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;
            }

            switch (alt97) {
                case 1 :
                    // RPIExprAST.g:359:9: datatype
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_datatype_in_type_spec4150);
                    datatype538=datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, datatype538.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:361:9: column_spec TYPE_ATTR
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_column_spec_in_type_spec4162);
                    column_spec539=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec539.getTree());
                    TYPE_ATTR540=(Token)match(input,TYPE_ATTR,FOLLOW_TYPE_ATTR_in_type_spec4164); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE_ATTR540_tree = (Object)adaptor.create(TYPE_ATTR540);
                    adaptor.addChild(root_0, TYPE_ATTR540_tree);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:363:9: table_spec ROWTYPE_ATTR
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_table_spec_in_type_spec4175);
                    table_spec541=table_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec541.getTree());
                    ROWTYPE_ATTR542=(Token)match(input,ROWTYPE_ATTR,FOLLOW_ROWTYPE_ATTR_in_type_spec4177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWTYPE_ATTR542_tree = (Object)adaptor.create(ROWTYPE_ATTR542);
                    adaptor.addChild(root_0, ROWTYPE_ATTR542_tree);
                    }

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:365:9: type_name ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_name_in_type_spec4188);
                    type_name543=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name543.getTree());
                    // RPIExprAST.g:365:19: ( LPAREN NUMBER RPAREN )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==LPAREN) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // RPIExprAST.g:365:21: LPAREN NUMBER RPAREN
                            {
                            LPAREN544=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_type_spec4192); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN544_tree = (Object)adaptor.create(LPAREN544);
                            adaptor.addChild(root_0, LPAREN544_tree);
                            }
                            NUMBER545=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_type_spec4194); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER545_tree = (Object)adaptor.create(NUMBER545);
                            adaptor.addChild(root_0, NUMBER545_tree);
                            }
                            RPAREN546=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_type_spec4196); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN546_tree = (Object)adaptor.create(RPAREN546);
                            adaptor.addChild(root_0, RPAREN546_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, type_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec"

    public static class type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_name"
    // RPIExprAST.g:368:1: type_name : identifier ( DOT identifier )* ;
    public final RPIExprASTParser.type_name_return type_name() throws RecognitionException {
        RPIExprASTParser.type_name_return retval = new RPIExprASTParser.type_name_return();
        retval.start = input.LT(1);
        int type_name_StartIndex = input.index();
        Object root_0 = null;

        Token DOT548=null;
        RPIExprASTParser.identifier_return identifier547 = null;

        RPIExprASTParser.identifier_return identifier549 = null;


        Object DOT548_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // RPIExprAST.g:369:5: ( identifier ( DOT identifier )* )
            // RPIExprAST.g:369:9: identifier ( DOT identifier )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_type_name4218);
            identifier547=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier547.getTree());
            // RPIExprAST.g:369:20: ( DOT identifier )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==DOT) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // RPIExprAST.g:369:22: DOT identifier
            	    {
            	    DOT548=(Token)match(input,DOT,FOLLOW_DOT_in_type_name4222); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT548_tree = (Object)adaptor.create(DOT548);
            	    adaptor.addChild(root_0, DOT548_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_type_name4224);
            	    identifier549=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier549.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public static class parameter_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_specs"
    // RPIExprAST.g:372:1: parameter_specs : parameter_spec ( COMMA parameter_spec )* ;
    public final RPIExprASTParser.parameter_specs_return parameter_specs() throws RecognitionException {
        RPIExprASTParser.parameter_specs_return retval = new RPIExprASTParser.parameter_specs_return();
        retval.start = input.LT(1);
        int parameter_specs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA551=null;
        RPIExprASTParser.parameter_spec_return parameter_spec550 = null;

        RPIExprASTParser.parameter_spec_return parameter_spec552 = null;


        Object COMMA551_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // RPIExprAST.g:373:5: ( parameter_spec ( COMMA parameter_spec )* )
            // RPIExprAST.g:373:9: parameter_spec ( COMMA parameter_spec )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_parameter_spec_in_parameter_specs4246);
            parameter_spec550=parameter_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_spec550.getTree());
            // RPIExprAST.g:373:24: ( COMMA parameter_spec )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==COMMA) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // RPIExprAST.g:373:26: COMMA parameter_spec
            	    {
            	    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_parameter_specs4250); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA551_tree = (Object)adaptor.create(COMMA551);
            	    adaptor.addChild(root_0, COMMA551_tree);
            	    }
            	    pushFollow(FOLLOW_parameter_spec_in_parameter_specs4252);
            	    parameter_spec552=parameter_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_spec552.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, parameter_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_specs"

    public static class parameter_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_spec"
    // RPIExprAST.g:376:1: parameter_spec : parameter_name ( 'IN' )? ( type_spec )? ;
    public final RPIExprASTParser.parameter_spec_return parameter_spec() throws RecognitionException {
        RPIExprASTParser.parameter_spec_return retval = new RPIExprASTParser.parameter_spec_return();
        retval.start = input.LT(1);
        int parameter_spec_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal554=null;
        RPIExprASTParser.parameter_name_return parameter_name553 = null;

        RPIExprASTParser.type_spec_return type_spec555 = null;


        Object string_literal554_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // RPIExprAST.g:377:5: ( parameter_name ( 'IN' )? ( type_spec )? )
            // RPIExprAST.g:377:9: parameter_name ( 'IN' )? ( type_spec )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_parameter_name_in_parameter_spec4274);
            parameter_name553=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_name553.getTree());
            // RPIExprAST.g:377:24: ( 'IN' )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==160) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // RPIExprAST.g:377:26: 'IN'
                    {
                    string_literal554=(Token)match(input,160,FOLLOW_160_in_parameter_spec4278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal554_tree = (Object)adaptor.create(string_literal554);
                    adaptor.addChild(root_0, string_literal554_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:377:34: ( type_spec )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==ID||LA101_0==DOUBLEQUOTED_STRING||(LA101_0>=122 && LA101_0<=134)||(LA101_0>=137 && LA101_0<=144)||(LA101_0>=146 && LA101_0<=159)) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // RPIExprAST.g:377:36: type_spec
                    {
                    pushFollow(FOLLOW_type_spec_in_parameter_spec4285);
                    type_spec555=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec555.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, parameter_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_spec"

    public static class parameter_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_name"
    // RPIExprAST.g:380:1: parameter_name : identifier ;
    public final RPIExprASTParser.parameter_name_return parameter_name() throws RecognitionException {
        RPIExprASTParser.parameter_name_return retval = new RPIExprASTParser.parameter_name_return();
        retval.start = input.LT(1);
        int parameter_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier556 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // RPIExprAST.g:381:5: ( identifier )
            // RPIExprAST.g:381:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_parameter_name4310);
            identifier556=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier556.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, parameter_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_name"

    public static class cursor_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_spec"
    // RPIExprAST.g:384:1: cursor_spec : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMICOLON ;
    public final RPIExprASTParser.cursor_spec_return cursor_spec() throws RecognitionException {
        RPIExprASTParser.cursor_spec_return retval = new RPIExprASTParser.cursor_spec_return();
        retval.start = input.LT(1);
        int cursor_spec_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN559=null;
        Token RPAREN561=null;
        Token SEMICOLON564=null;
        RPIExprASTParser.keyCURSOR_return keyCURSOR557 = null;

        RPIExprASTParser.cursor_name_return cursor_name558 = null;

        RPIExprASTParser.parameter_specs_return parameter_specs560 = null;

        RPIExprASTParser.keyRETURN_return keyRETURN562 = null;

        RPIExprASTParser.return_type_return return_type563 = null;


        Object LPAREN559_tree=null;
        Object RPAREN561_tree=null;
        Object SEMICOLON564_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // RPIExprAST.g:385:5: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMICOLON )
            // RPIExprAST.g:385:9: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyCURSOR_in_cursor_spec4329);
            keyCURSOR557=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR557.getTree());
            pushFollow(FOLLOW_cursor_name_in_cursor_spec4331);
            cursor_name558=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name558.getTree());
            // RPIExprAST.g:386:9: ( LPAREN parameter_specs RPAREN )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==LPAREN) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // RPIExprAST.g:386:11: LPAREN parameter_specs RPAREN
                    {
                    LPAREN559=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_spec4344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN559_tree = (Object)adaptor.create(LPAREN559);
                    adaptor.addChild(root_0, LPAREN559_tree);
                    }
                    pushFollow(FOLLOW_parameter_specs_in_cursor_spec4346);
                    parameter_specs560=parameter_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_specs560.getTree());
                    RPAREN561=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_spec4348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN561_tree = (Object)adaptor.create(RPAREN561);
                    adaptor.addChild(root_0, RPAREN561_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keyRETURN_in_cursor_spec4361);
            keyRETURN562=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN562.getTree());
            pushFollow(FOLLOW_return_type_in_cursor_spec4363);
            return_type563=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type563.getTree());
            SEMICOLON564=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_cursor_spec4365); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, cursor_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_spec"

    public static class procedure_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // RPIExprAST.g:390:1: procedure_spec : 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMICOLON ;
    public final RPIExprASTParser.procedure_spec_return procedure_spec() throws RecognitionException {
        RPIExprASTParser.procedure_spec_return retval = new RPIExprASTParser.procedure_spec_return();
        retval.start = input.LT(1);
        int procedure_spec_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal565=null;
        Token LPAREN567=null;
        Token RPAREN569=null;
        Token SEMICOLON570=null;
        RPIExprASTParser.procedure_name_return procedure_name566 = null;

        RPIExprASTParser.arguments_return arguments568 = null;


        Object string_literal565_tree=null;
        Object LPAREN567_tree=null;
        Object RPAREN569_tree=null;
        Object SEMICOLON570_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // RPIExprAST.g:390:15: ( 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMICOLON )
            // RPIExprAST.g:391:5: 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            string_literal565=(Token)match(input,161,FOLLOW_161_in_procedure_spec4384); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal565_tree = (Object)adaptor.create(string_literal565);
            adaptor.addChild(root_0, string_literal565_tree);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_spec4386);
            procedure_name566=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name566.getTree());
            // RPIExprAST.g:392:5: ( LPAREN arguments RPAREN )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==LPAREN) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // RPIExprAST.g:392:7: LPAREN arguments RPAREN
                    {
                    LPAREN567=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_spec4395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN567_tree = (Object)adaptor.create(LPAREN567);
                    adaptor.addChild(root_0, LPAREN567_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_procedure_spec4397);
                    arguments568=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments568.getTree());
                    RPAREN569=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_spec4399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN569_tree = (Object)adaptor.create(RPAREN569);
                    adaptor.addChild(root_0, RPAREN569_tree);
                    }

                    }
                    break;

            }

            SEMICOLON570=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_spec4404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON570_tree = (Object)adaptor.create(SEMICOLON570);
            adaptor.addChild(root_0, SEMICOLON570_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, procedure_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class function_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // RPIExprAST.g:395:1: function_spec : 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMICOLON ;
    public final RPIExprASTParser.function_spec_return function_spec() throws RecognitionException {
        RPIExprASTParser.function_spec_return retval = new RPIExprASTParser.function_spec_return();
        retval.start = input.LT(1);
        int function_spec_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal571=null;
        Token LPAREN573=null;
        Token RPAREN575=null;
        Token SEMICOLON578=null;
        RPIExprASTParser.function_name_return function_name572 = null;

        RPIExprASTParser.arguments_return arguments574 = null;

        RPIExprASTParser.keyRETURN_return keyRETURN576 = null;

        RPIExprASTParser.return_type_return return_type577 = null;


        Object string_literal571_tree=null;
        Object LPAREN573_tree=null;
        Object RPAREN575_tree=null;
        Object SEMICOLON578_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // RPIExprAST.g:396:5: ( 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMICOLON )
            // RPIExprAST.g:396:9: 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            string_literal571=(Token)match(input,162,FOLLOW_162_in_function_spec4423); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal571_tree = (Object)adaptor.create(string_literal571);
            adaptor.addChild(root_0, string_literal571_tree);
            }
            pushFollow(FOLLOW_function_name_in_function_spec4425);
            function_name572=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name572.getTree());
            // RPIExprAST.g:397:9: ( LPAREN arguments RPAREN )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==LPAREN) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // RPIExprAST.g:397:11: LPAREN arguments RPAREN
                    {
                    LPAREN573=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_spec4438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN573_tree = (Object)adaptor.create(LPAREN573);
                    adaptor.addChild(root_0, LPAREN573_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_function_spec4440);
                    arguments574=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments574.getTree());
                    RPAREN575=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_spec4442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN575_tree = (Object)adaptor.create(RPAREN575);
                    adaptor.addChild(root_0, RPAREN575_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keyRETURN_in_function_spec4455);
            keyRETURN576=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN576.getTree());
            pushFollow(FOLLOW_return_type_in_function_spec4457);
            return_type577=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type577.getTree());
            SEMICOLON578=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_spec4459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON578_tree = (Object)adaptor.create(SEMICOLON578);
            adaptor.addChild(root_0, SEMICOLON578_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class exception_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_declaration"
    // RPIExprAST.g:401:1: exception_declaration : exception_name 'EXCEPTION' SEMICOLON ;
    public final RPIExprASTParser.exception_declaration_return exception_declaration() throws RecognitionException {
        RPIExprASTParser.exception_declaration_return retval = new RPIExprASTParser.exception_declaration_return();
        retval.start = input.LT(1);
        int exception_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal580=null;
        Token SEMICOLON581=null;
        RPIExprASTParser.exception_name_return exception_name579 = null;


        Object string_literal580_tree=null;
        Object SEMICOLON581_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // RPIExprAST.g:402:5: ( exception_name 'EXCEPTION' SEMICOLON )
            // RPIExprAST.g:402:9: exception_name 'EXCEPTION' SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exception_name_in_exception_declaration4478);
            exception_name579=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name579.getTree());
            string_literal580=(Token)match(input,119,FOLLOW_119_in_exception_declaration4480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal580_tree = (Object)adaptor.create(string_literal580);
            adaptor.addChild(root_0, string_literal580_tree);
            }
            SEMICOLON581=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_exception_declaration4482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON581_tree = (Object)adaptor.create(SEMICOLON581);
            adaptor.addChild(root_0, SEMICOLON581_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, exception_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_declaration"

    public static class exception_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_names"
    // RPIExprAST.g:405:1: exception_names : exception_name ( 'OR' exception_name )* ;
    public final RPIExprASTParser.exception_names_return exception_names() throws RecognitionException {
        RPIExprASTParser.exception_names_return retval = new RPIExprASTParser.exception_names_return();
        retval.start = input.LT(1);
        int exception_names_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal583=null;
        RPIExprASTParser.exception_name_return exception_name582 = null;

        RPIExprASTParser.exception_name_return exception_name584 = null;


        Object string_literal583_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // RPIExprAST.g:406:5: ( exception_name ( 'OR' exception_name )* )
            // RPIExprAST.g:406:9: exception_name ( 'OR' exception_name )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exception_name_in_exception_names4501);
            exception_name582=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name582.getTree());
            // RPIExprAST.g:406:24: ( 'OR' exception_name )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==OR) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // RPIExprAST.g:406:26: 'OR' exception_name
            	    {
            	    string_literal583=(Token)match(input,OR,FOLLOW_OR_in_exception_names4505); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal583_tree = (Object)adaptor.create(string_literal583);
            	    adaptor.addChild(root_0, string_literal583_tree);
            	    }
            	    pushFollow(FOLLOW_exception_name_in_exception_names4507);
            	    exception_name584=exception_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name584.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, exception_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_names"

    public static class exception_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_name"
    // RPIExprAST.g:409:1: exception_name : ( exception_package_name DOT )? identifier ;
    public final RPIExprASTParser.exception_name_return exception_name() throws RecognitionException {
        RPIExprASTParser.exception_name_return retval = new RPIExprASTParser.exception_name_return();
        retval.start = input.LT(1);
        int exception_name_StartIndex = input.index();
        Object root_0 = null;

        Token DOT586=null;
        RPIExprASTParser.exception_package_name_return exception_package_name585 = null;

        RPIExprASTParser.identifier_return identifier587 = null;


        Object DOT586_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // RPIExprAST.g:410:5: ( ( exception_package_name DOT )? identifier )
            // RPIExprAST.g:410:9: ( exception_package_name DOT )? identifier
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:410:9: ( exception_package_name DOT )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==ID||LA106_0==DOUBLEQUOTED_STRING) ) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==DOT) ) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // RPIExprAST.g:410:11: exception_package_name DOT
                    {
                    pushFollow(FOLLOW_exception_package_name_in_exception_name4531);
                    exception_package_name585=exception_package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_package_name585.getTree());
                    DOT586=(Token)match(input,DOT,FOLLOW_DOT_in_exception_name4533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT586_tree = (Object)adaptor.create(DOT586);
                    adaptor.addChild(root_0, DOT586_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_identifier_in_exception_name4538);
            identifier587=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier587.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, exception_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_name"

    public static class exception_package_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_package_name"
    // RPIExprAST.g:413:1: exception_package_name : identifier ;
    public final RPIExprASTParser.exception_package_name_return exception_package_name() throws RecognitionException {
        RPIExprASTParser.exception_package_name_return retval = new RPIExprASTParser.exception_package_name_return();
        retval.start = input.LT(1);
        int exception_package_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier588 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // RPIExprAST.g:414:5: ( identifier )
            // RPIExprAST.g:414:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_exception_package_name4557);
            identifier588=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier588.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, exception_package_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_package_name"

    public static class record_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_declaration"
    // RPIExprAST.g:423:1: record_declaration : record_type_dec ;
    public final RPIExprASTParser.record_declaration_return record_declaration() throws RecognitionException {
        RPIExprASTParser.record_declaration_return retval = new RPIExprASTParser.record_declaration_return();
        retval.start = input.LT(1);
        int record_declaration_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.record_type_dec_return record_type_dec589 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // RPIExprAST.g:424:5: ( record_type_dec )
            // RPIExprAST.g:424:9: record_type_dec
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_record_type_dec_in_record_declaration4590);
            record_type_dec589=record_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_type_dec589.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, record_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_declaration"

    public static class record_type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_type_dec"
    // RPIExprAST.g:428:1: record_type_dec : keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMICOLON ;
    public final RPIExprASTParser.record_type_dec_return record_type_dec() throws RecognitionException {
        RPIExprASTParser.record_type_dec_return retval = new RPIExprASTParser.record_type_dec_return();
        retval.start = input.LT(1);
        int record_type_dec_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal592=null;
        Token LPAREN594=null;
        Token RPAREN596=null;
        Token SEMICOLON597=null;
        RPIExprASTParser.keyTYPE_return keyTYPE590 = null;

        RPIExprASTParser.type_name_return type_name591 = null;

        RPIExprASTParser.keyRECORD_return keyRECORD593 = null;

        RPIExprASTParser.field_specs_return field_specs595 = null;


        Object string_literal592_tree=null;
        Object LPAREN594_tree=null;
        Object RPAREN596_tree=null;
        Object SEMICOLON597_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // RPIExprAST.g:429:5: ( keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMICOLON )
            // RPIExprAST.g:429:9: keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyTYPE_in_record_type_dec4611);
            keyTYPE590=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE590.getTree());
            pushFollow(FOLLOW_type_name_in_record_type_dec4613);
            type_name591=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name591.getTree());
            string_literal592=(Token)match(input,111,FOLLOW_111_in_record_type_dec4615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal592_tree = (Object)adaptor.create(string_literal592);
            adaptor.addChild(root_0, string_literal592_tree);
            }
            pushFollow(FOLLOW_keyRECORD_in_record_type_dec4617);
            keyRECORD593=keyRECORD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRECORD593.getTree());
            LPAREN594=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_record_type_dec4628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN594_tree = (Object)adaptor.create(LPAREN594);
            adaptor.addChild(root_0, LPAREN594_tree);
            }
            pushFollow(FOLLOW_field_specs_in_record_type_dec4630);
            field_specs595=field_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_specs595.getTree());
            RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_record_type_dec4632); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN596_tree = (Object)adaptor.create(RPAREN596);
            adaptor.addChild(root_0, RPAREN596_tree);
            }
            SEMICOLON597=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_type_dec4634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON597_tree = (Object)adaptor.create(SEMICOLON597);
            adaptor.addChild(root_0, SEMICOLON597_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, record_type_dec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_type_dec"

    public static class field_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_specs"
    // RPIExprAST.g:437:1: field_specs : field_spec ( COMMA field_spec )* ;
    public final RPIExprASTParser.field_specs_return field_specs() throws RecognitionException {
        RPIExprASTParser.field_specs_return retval = new RPIExprASTParser.field_specs_return();
        retval.start = input.LT(1);
        int field_specs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA599=null;
        RPIExprASTParser.field_spec_return field_spec598 = null;

        RPIExprASTParser.field_spec_return field_spec600 = null;


        Object COMMA599_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // RPIExprAST.g:438:5: ( field_spec ( COMMA field_spec )* )
            // RPIExprAST.g:438:9: field_spec ( COMMA field_spec )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_field_spec_in_field_specs4657);
            field_spec598=field_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_spec598.getTree());
            // RPIExprAST.g:438:20: ( COMMA field_spec )*
            loop107:
            do {
                int alt107=2;
                int LA107_0 = input.LA(1);

                if ( (LA107_0==COMMA) ) {
                    alt107=1;
                }


                switch (alt107) {
            	case 1 :
            	    // RPIExprAST.g:438:22: COMMA field_spec
            	    {
            	    COMMA599=(Token)match(input,COMMA,FOLLOW_COMMA_in_field_specs4661); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA599_tree = (Object)adaptor.create(COMMA599);
            	    adaptor.addChild(root_0, COMMA599_tree);
            	    }
            	    pushFollow(FOLLOW_field_spec_in_field_specs4663);
            	    field_spec600=field_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_spec600.getTree());

            	    }
            	    break;

            	default :
            	    break loop107;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, field_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_specs"

    public static class field_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_spec"
    // RPIExprAST.g:440:1: field_spec : column_name type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final RPIExprASTParser.field_spec_return field_spec() throws RecognitionException {
        RPIExprASTParser.field_spec_return retval = new RPIExprASTParser.field_spec_return();
        retval.start = input.LT(1);
        int field_spec_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal603=null;
        Token string_literal604=null;
        Token set605=null;
        RPIExprASTParser.column_name_return column_name601 = null;

        RPIExprASTParser.type_spec_return type_spec602 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression606 = null;


        Object string_literal603_tree=null;
        Object string_literal604_tree=null;
        Object set605_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // RPIExprAST.g:441:5: ( column_name type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // RPIExprAST.g:441:9: column_name type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_column_name_in_field_spec4684);
            column_name601=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name601.getTree());
            pushFollow(FOLLOW_type_spec_in_field_spec4686);
            type_spec602=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec602.getTree());
            // RPIExprAST.g:442:9: ( 'NOT' 'NULL' )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==NOT) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // RPIExprAST.g:442:10: 'NOT' 'NULL'
                    {
                    string_literal603=(Token)match(input,NOT,FOLLOW_NOT_in_field_spec4697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal603_tree = (Object)adaptor.create(string_literal603);
                    adaptor.addChild(root_0, string_literal603_tree);
                    }
                    string_literal604=(Token)match(input,116,FOLLOW_116_in_field_spec4699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal604_tree = (Object)adaptor.create(string_literal604);
                    adaptor.addChild(root_0, string_literal604_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:443:9: ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==SQL_ASSIGN||LA109_0==117) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // RPIExprAST.g:443:11: ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    set605=(Token)input.LT(1);
                    if ( input.LA(1)==SQL_ASSIGN||input.LA(1)==117 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set605));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    pushFollow(FOLLOW_plsql_expression_in_field_spec4724);
                    plsql_expression606=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression606.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, field_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_spec"

    public static class plsql_table_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_table_declaration"
    // RPIExprAST.g:446:1: plsql_table_declaration : table_type_dec ;
    public final RPIExprASTParser.plsql_table_declaration_return plsql_table_declaration() throws RecognitionException {
        RPIExprASTParser.plsql_table_declaration_return retval = new RPIExprASTParser.plsql_table_declaration_return();
        retval.start = input.LT(1);
        int plsql_table_declaration_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.table_type_dec_return table_type_dec607 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // RPIExprAST.g:447:5: ( table_type_dec )
            // RPIExprAST.g:447:9: table_type_dec
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_table_type_dec_in_plsql_table_declaration4745);
            table_type_dec607=table_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_type_dec607.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, plsql_table_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_table_declaration"

    public static class table_type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_type_dec"
    // RPIExprAST.g:451:1: table_type_dec : keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMICOLON ;
    public final RPIExprASTParser.table_type_dec_return table_type_dec() throws RecognitionException {
        RPIExprASTParser.table_type_dec_return retval = new RPIExprASTParser.table_type_dec_return();
        retval.start = input.LT(1);
        int table_type_dec_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal610=null;
        Token string_literal611=null;
        Token string_literal612=null;
        Token string_literal614=null;
        Token string_literal615=null;
        Token string_literal616=null;
        Token string_literal617=null;
        Token string_literal618=null;
        Token string_literal619=null;
        Token string_literal620=null;
        Token LPAREN621=null;
        Token RPAREN623=null;
        Token SEMICOLON624=null;
        RPIExprASTParser.keyTYPE_return keyTYPE608 = null;

        RPIExprASTParser.type_name_return type_name609 = null;

        RPIExprASTParser.type_spec_return type_spec613 = null;

        RPIExprASTParser.integer_return integer622 = null;


        Object string_literal610_tree=null;
        Object string_literal611_tree=null;
        Object string_literal612_tree=null;
        Object string_literal614_tree=null;
        Object string_literal615_tree=null;
        Object string_literal616_tree=null;
        Object string_literal617_tree=null;
        Object string_literal618_tree=null;
        Object string_literal619_tree=null;
        Object string_literal620_tree=null;
        Object LPAREN621_tree=null;
        Object RPAREN623_tree=null;
        Object SEMICOLON624_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // RPIExprAST.g:452:5: ( keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMICOLON )
            // RPIExprAST.g:452:9: keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyTYPE_in_table_type_dec4765);
            keyTYPE608=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE608.getTree());
            pushFollow(FOLLOW_type_name_in_table_type_dec4767);
            type_name609=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name609.getTree());
            string_literal610=(Token)match(input,111,FOLLOW_111_in_table_type_dec4769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal610_tree = (Object)adaptor.create(string_literal610);
            adaptor.addChild(root_0, string_literal610_tree);
            }
            string_literal611=(Token)match(input,163,FOLLOW_163_in_table_type_dec4771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal611_tree = (Object)adaptor.create(string_literal611);
            adaptor.addChild(root_0, string_literal611_tree);
            }
            string_literal612=(Token)match(input,164,FOLLOW_164_in_table_type_dec4782); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal612_tree = (Object)adaptor.create(string_literal612);
            adaptor.addChild(root_0, string_literal612_tree);
            }
            pushFollow(FOLLOW_type_spec_in_table_type_dec4784);
            type_spec613=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec613.getTree());
            // RPIExprAST.g:453:24: ( 'NOT' 'NULL' )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NOT) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // RPIExprAST.g:453:26: 'NOT' 'NULL'
                    {
                    string_literal614=(Token)match(input,NOT,FOLLOW_NOT_in_table_type_dec4788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal614_tree = (Object)adaptor.create(string_literal614);
                    adaptor.addChild(root_0, string_literal614_tree);
                    }
                    string_literal615=(Token)match(input,116,FOLLOW_116_in_table_type_dec4790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal615_tree = (Object)adaptor.create(string_literal615);
                    adaptor.addChild(root_0, string_literal615_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:454:9: ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==165) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // RPIExprAST.g:454:13: 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                    {
                    string_literal616=(Token)match(input,165,FOLLOW_165_in_table_type_dec4807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal616_tree = (Object)adaptor.create(string_literal616);
                    adaptor.addChild(root_0, string_literal616_tree);
                    }
                    string_literal617=(Token)match(input,166,FOLLOW_166_in_table_type_dec4809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal617_tree = (Object)adaptor.create(string_literal617);
                    adaptor.addChild(root_0, string_literal617_tree);
                    }
                    // RPIExprAST.g:455:13: ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                    int alt111=3;
                    switch ( input.LA(1) ) {
                    case 122:
                        {
                        alt111=1;
                        }
                        break;
                    case 153:
                        {
                        alt111=2;
                        }
                        break;
                    case 147:
                        {
                        alt111=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }

                    switch (alt111) {
                        case 1 :
                            // RPIExprAST.g:455:17: 'BINARY_INTEGER'
                            {
                            string_literal618=(Token)match(input,122,FOLLOW_122_in_table_type_dec4828); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal618_tree = (Object)adaptor.create(string_literal618);
                            adaptor.addChild(root_0, string_literal618_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:456:17: 'PLS_INTEGER'
                            {
                            string_literal619=(Token)match(input,153,FOLLOW_153_in_table_type_dec4846); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal619_tree = (Object)adaptor.create(string_literal619);
                            adaptor.addChild(root_0, string_literal619_tree);
                            }

                            }
                            break;
                        case 3 :
                            // RPIExprAST.g:457:17: 'VARCHAR2' LPAREN integer RPAREN
                            {
                            string_literal620=(Token)match(input,147,FOLLOW_147_in_table_type_dec4864); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal620_tree = (Object)adaptor.create(string_literal620);
                            adaptor.addChild(root_0, string_literal620_tree);
                            }
                            LPAREN621=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_table_type_dec4866); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN621_tree = (Object)adaptor.create(LPAREN621);
                            adaptor.addChild(root_0, LPAREN621_tree);
                            }
                            pushFollow(FOLLOW_integer_in_table_type_dec4868);
                            integer622=integer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer622.getTree());
                            RPAREN623=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_table_type_dec4870); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN623_tree = (Object)adaptor.create(RPAREN623);
                            adaptor.addChild(root_0, RPAREN623_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            SEMICOLON624=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_table_type_dec4905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON624_tree = (Object)adaptor.create(SEMICOLON624);
            adaptor.addChild(root_0, SEMICOLON624_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, table_type_dec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_type_dec"

    public static class table_var_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_var_dec"
    // RPIExprAST.g:463:1: table_var_dec : plsql_table_name type_name SEMICOLON ;
    public final RPIExprASTParser.table_var_dec_return table_var_dec() throws RecognitionException {
        RPIExprASTParser.table_var_dec_return retval = new RPIExprASTParser.table_var_dec_return();
        retval.start = input.LT(1);
        int table_var_dec_StartIndex = input.index();
        Object root_0 = null;

        Token SEMICOLON627=null;
        RPIExprASTParser.plsql_table_name_return plsql_table_name625 = null;

        RPIExprASTParser.type_name_return type_name626 = null;


        Object SEMICOLON627_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // RPIExprAST.g:464:5: ( plsql_table_name type_name SEMICOLON )
            // RPIExprAST.g:464:9: plsql_table_name type_name SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_plsql_table_name_in_table_var_dec4924);
            plsql_table_name625=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name625.getTree());
            pushFollow(FOLLOW_type_name_in_table_var_dec4926);
            type_name626=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name626.getTree());
            SEMICOLON627=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_table_var_dec4928); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON627_tree = (Object)adaptor.create(SEMICOLON627);
            adaptor.addChild(root_0, SEMICOLON627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, table_var_dec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_var_dec"

    public static class plsql_table_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_table_name"
    // RPIExprAST.g:467:1: plsql_table_name : identifier ( DOT identifier )* ;
    public final RPIExprASTParser.plsql_table_name_return plsql_table_name() throws RecognitionException {
        RPIExprASTParser.plsql_table_name_return retval = new RPIExprASTParser.plsql_table_name_return();
        retval.start = input.LT(1);
        int plsql_table_name_StartIndex = input.index();
        Object root_0 = null;

        Token DOT629=null;
        RPIExprASTParser.identifier_return identifier628 = null;

        RPIExprASTParser.identifier_return identifier630 = null;


        Object DOT629_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // RPIExprAST.g:468:5: ( identifier ( DOT identifier )* )
            // RPIExprAST.g:468:9: identifier ( DOT identifier )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_plsql_table_name4947);
            identifier628=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier628.getTree());
            // RPIExprAST.g:468:20: ( DOT identifier )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==DOT) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // RPIExprAST.g:468:22: DOT identifier
            	    {
            	    DOT629=(Token)match(input,DOT,FOLLOW_DOT_in_plsql_table_name4951); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT629_tree = (Object)adaptor.create(DOT629);
            	    adaptor.addChild(root_0, DOT629_tree);
            	    }
            	    pushFollow(FOLLOW_identifier_in_plsql_table_name4953);
            	    identifier630=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier630.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, plsql_table_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_table_name"

    public static class varray_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_declaration"
    // RPIExprAST.g:471:1: varray_declaration : keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? ;
    public final RPIExprASTParser.varray_declaration_return varray_declaration() throws RecognitionException {
        RPIExprASTParser.varray_declaration_return retval = new RPIExprASTParser.varray_declaration_return();
        retval.start = input.LT(1);
        int varray_declaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal633=null;
        Token LPAREN637=null;
        Token RPAREN639=null;
        Token string_literal640=null;
        Token string_literal642=null;
        Token string_literal643=null;
        RPIExprASTParser.keyTYPE_return keyTYPE631 = null;

        RPIExprASTParser.type_name_return type_name632 = null;

        RPIExprASTParser.keyVARRAY_return keyVARRAY634 = null;

        RPIExprASTParser.keyVARYING_return keyVARYING635 = null;

        RPIExprASTParser.keyARRAY_return keyARRAY636 = null;

        RPIExprASTParser.integer_return integer638 = null;

        RPIExprASTParser.type_spec_return type_spec641 = null;


        Object string_literal633_tree=null;
        Object LPAREN637_tree=null;
        Object RPAREN639_tree=null;
        Object string_literal640_tree=null;
        Object string_literal642_tree=null;
        Object string_literal643_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // RPIExprAST.g:472:5: ( keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? )
            // RPIExprAST.g:472:9: keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyTYPE_in_varray_declaration4975);
            keyTYPE631=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE631.getTree());
            pushFollow(FOLLOW_type_name_in_varray_declaration4977);
            type_name632=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name632.getTree());
            string_literal633=(Token)match(input,111,FOLLOW_111_in_varray_declaration4979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal633_tree = (Object)adaptor.create(string_literal633);
            adaptor.addChild(root_0, string_literal633_tree);
            }
            // RPIExprAST.g:473:9: ( keyVARRAY | keyVARYING keyARRAY )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==ID) ) {
                int LA114_1 = input.LA(2);

                if ( (LA114_1==LPAREN) ) {
                    alt114=1;
                }
                else if ( (LA114_1==ID) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // RPIExprAST.g:473:11: keyVARRAY
                    {
                    pushFollow(FOLLOW_keyVARRAY_in_varray_declaration4992);
                    keyVARRAY634=keyVARRAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARRAY634.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:473:23: keyVARYING keyARRAY
                    {
                    pushFollow(FOLLOW_keyVARYING_in_varray_declaration4996);
                    keyVARYING635=keyVARYING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyVARYING635.getTree());
                    pushFollow(FOLLOW_keyARRAY_in_varray_declaration4998);
                    keyARRAY636=keyARRAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyARRAY636.getTree());

                    }
                    break;

            }

            LPAREN637=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_varray_declaration5002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN637_tree = (Object)adaptor.create(LPAREN637);
            adaptor.addChild(root_0, LPAREN637_tree);
            }
            pushFollow(FOLLOW_integer_in_varray_declaration5004);
            integer638=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer638.getTree());
            RPAREN639=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_varray_declaration5006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN639_tree = (Object)adaptor.create(RPAREN639);
            adaptor.addChild(root_0, RPAREN639_tree);
            }
            string_literal640=(Token)match(input,164,FOLLOW_164_in_varray_declaration5016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal640_tree = (Object)adaptor.create(string_literal640);
            adaptor.addChild(root_0, string_literal640_tree);
            }
            pushFollow(FOLLOW_type_spec_in_varray_declaration5018);
            type_spec641=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec641.getTree());
            // RPIExprAST.g:474:24: ( 'NOT' 'NULL' )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==NOT) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // RPIExprAST.g:474:26: 'NOT' 'NULL'
                    {
                    string_literal642=(Token)match(input,NOT,FOLLOW_NOT_in_varray_declaration5022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal642_tree = (Object)adaptor.create(string_literal642);
                    adaptor.addChild(root_0, string_literal642_tree);
                    }
                    string_literal643=(Token)match(input,116,FOLLOW_116_in_varray_declaration5024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal643_tree = (Object)adaptor.create(string_literal643);
                    adaptor.addChild(root_0, string_literal643_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, varray_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_declaration"

    public static class procedure_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // RPIExprAST.g:477:1: procedure_declaration : procedure_body ;
    public final RPIExprASTParser.procedure_declaration_return procedure_declaration() throws RecognitionException {
        RPIExprASTParser.procedure_declaration_return retval = new RPIExprASTParser.procedure_declaration_return();
        retval.start = input.LT(1);
        int procedure_declaration_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.procedure_body_return procedure_body644 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // RPIExprAST.g:478:5: ( procedure_body )
            // RPIExprAST.g:478:9: procedure_body
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_procedure_body_in_procedure_declaration5046);
            procedure_body644=procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_body644.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, procedure_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class procedure_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_body"
    // RPIExprAST.g:481:1: procedure_body : ( proc_fun_start )? 'PROCEDURE' procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMICOLON ;
    public final RPIExprASTParser.procedure_body_return procedure_body() throws RecognitionException {
        RPIExprASTParser.procedure_body_return retval = new RPIExprASTParser.procedure_body_return();
        retval.start = input.LT(1);
        int procedure_body_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal646=null;
        Token LPAREN648=null;
        Token COMMA650=null;
        Token RPAREN652=null;
        Token set653=null;
        Token string_literal655=null;
        Token string_literal657=null;
        Token string_literal659=null;
        Token SEMICOLON661=null;
        RPIExprASTParser.proc_fun_start_return proc_fun_start645 = null;

        RPIExprASTParser.procedure_name_return procedure_name647 = null;

        RPIExprASTParser.argument_return argument649 = null;

        RPIExprASTParser.argument_return argument651 = null;

        RPIExprASTParser.declare_spec_return declare_spec654 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements656 = null;

        RPIExprASTParser.exception_handler_return exception_handler658 = null;

        RPIExprASTParser.procedure_name_return procedure_name660 = null;


        Object string_literal646_tree=null;
        Object LPAREN648_tree=null;
        Object COMMA650_tree=null;
        Object RPAREN652_tree=null;
        Object set653_tree=null;
        Object string_literal655_tree=null;
        Object string_literal657_tree=null;
        Object string_literal659_tree=null;
        Object SEMICOLON661_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // RPIExprAST.g:482:5: ( ( proc_fun_start )? 'PROCEDURE' procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMICOLON )
            // RPIExprAST.g:482:9: ( proc_fun_start )? 'PROCEDURE' procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:482:9: ( proc_fun_start )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==110) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // RPIExprAST.g:482:11: proc_fun_start
                    {
                    pushFollow(FOLLOW_proc_fun_start_in_procedure_body5067);
                    proc_fun_start645=proc_fun_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_fun_start645.getTree());

                    }
                    break;

            }

            string_literal646=(Token)match(input,161,FOLLOW_161_in_procedure_body5072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal646_tree = (Object)adaptor.create(string_literal646);
            root_0 = (Object)adaptor.becomeRoot(string_literal646_tree, root_0);
            }
            pushFollow(FOLLOW_procedure_name_in_procedure_body5075);
            procedure_name647=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name647.getTree());
            // RPIExprAST.g:483:9: ( LPAREN argument ( COMMA argument )* RPAREN )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==LPAREN) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // RPIExprAST.g:483:11: LPAREN argument ( COMMA argument )* RPAREN
                    {
                    LPAREN648=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_body5088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN648_tree = (Object)adaptor.create(LPAREN648);
                    adaptor.addChild(root_0, LPAREN648_tree);
                    }
                    pushFollow(FOLLOW_argument_in_procedure_body5090);
                    argument649=argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument649.getTree());
                    // RPIExprAST.g:483:27: ( COMMA argument )*
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( (LA117_0==COMMA) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    // RPIExprAST.g:483:29: COMMA argument
                    	    {
                    	    COMMA650=(Token)match(input,COMMA,FOLLOW_COMMA_in_procedure_body5094); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA650_tree = (Object)adaptor.create(COMMA650);
                    	    adaptor.addChild(root_0, COMMA650_tree);
                    	    }
                    	    pushFollow(FOLLOW_argument_in_procedure_body5096);
                    	    argument651=argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument651.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop117;
                        }
                    } while (true);

                    RPAREN652=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_body5101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN652_tree = (Object)adaptor.create(RPAREN652);
                    adaptor.addChild(root_0, RPAREN652_tree);
                    }

                    }
                    break;

            }

            set653=(Token)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set653));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprAST.g:486:9: ( ( declare_spec )=> ( declare_spec )* )
            // RPIExprAST.g:486:11: ( declare_spec )=> ( declare_spec )*
            {
            // RPIExprAST.g:486:31: ( declare_spec )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==ID||LA119_0==DOUBLEQUOTED_STRING||LA119_0==110||(LA119_0>=161 && LA119_0<=162)||LA119_0==217) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // RPIExprAST.g:486:33: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_procedure_body5154);
            	    declare_spec654=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec654.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            }

            // RPIExprAST.g:487:9: ( 'BEGIN' )
            // RPIExprAST.g:487:11: 'BEGIN'
            {
            string_literal655=(Token)match(input,114,FOLLOW_114_in_procedure_body5171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal655_tree = (Object)adaptor.create(string_literal655);
            adaptor.addChild(root_0, string_literal655_tree);
            }

            }

            // RPIExprAST.g:488:9: ( seq_of_statements )
            // RPIExprAST.g:488:11: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_procedure_body5185);
            seq_of_statements656=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements656.getTree());

            }

            // RPIExprAST.g:489:9: ( 'EXCEPTION' ( exception_handler )* )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==119) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // RPIExprAST.g:489:11: 'EXCEPTION' ( exception_handler )*
                    {
                    string_literal657=(Token)match(input,119,FOLLOW_119_in_procedure_body5199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal657_tree = (Object)adaptor.create(string_literal657);
                    adaptor.addChild(root_0, string_literal657_tree);
                    }
                    // RPIExprAST.g:489:23: ( exception_handler )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==121) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // RPIExprAST.g:489:25: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_procedure_body5203);
                    	    exception_handler658=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler658.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);


                    }
                    break;

            }

            string_literal659=(Token)match(input,113,FOLLOW_113_in_procedure_body5219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal659_tree = (Object)adaptor.create(string_literal659);
            adaptor.addChild(root_0, string_literal659_tree);
            }
            // RPIExprAST.g:490:15: ( procedure_name )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==ID||LA122_0==QUOTED_STRING||LA122_0==DOUBLEQUOTED_STRING) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // RPIExprAST.g:490:17: procedure_name
                    {
                    pushFollow(FOLLOW_procedure_name_in_procedure_body5223);
                    procedure_name660=procedure_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, procedure_name660.getTree());

                    }
                    break;

            }

            SEMICOLON661=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_body5228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON661_tree = (Object)adaptor.create(SEMICOLON661);
            adaptor.addChild(root_0, SEMICOLON661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, procedure_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_body"

    public static class begin_block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_block"
    // RPIExprAST.g:493:1: begin_block : 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ;
    public final RPIExprASTParser.begin_block_return begin_block() throws RecognitionException {
        RPIExprASTParser.begin_block_return retval = new RPIExprASTParser.begin_block_return();
        retval.start = input.LT(1);
        int begin_block_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal662=null;
        Token string_literal664=null;
        Token string_literal666=null;
        RPIExprASTParser.seq_of_statements_return seq_of_statements663 = null;

        RPIExprASTParser.exception_handler_return exception_handler665 = null;


        Object string_literal662_tree=null;
        Object string_literal664_tree=null;
        Object string_literal666_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // RPIExprAST.g:494:5: ( 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' )
            // RPIExprAST.g:494:9: 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END'
            {
            root_0 = (Object)adaptor.nil();

            string_literal662=(Token)match(input,114,FOLLOW_114_in_begin_block5247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal662_tree = (Object)adaptor.create(string_literal662);
            adaptor.addChild(root_0, string_literal662_tree);
            }
            // RPIExprAST.g:495:9: ( seq_of_statements )
            // RPIExprAST.g:495:11: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_begin_block5259);
            seq_of_statements663=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements663.getTree());

            }

            // RPIExprAST.g:496:9: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==119) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // RPIExprAST.g:496:11: 'EXCEPTION' ( exception_handler )+
                    {
                    string_literal664=(Token)match(input,119,FOLLOW_119_in_begin_block5273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal664_tree = (Object)adaptor.create(string_literal664);
                    adaptor.addChild(root_0, string_literal664_tree);
                    }
                    // RPIExprAST.g:496:23: ( exception_handler )+
                    int cnt123=0;
                    loop123:
                    do {
                        int alt123=2;
                        int LA123_0 = input.LA(1);

                        if ( (LA123_0==121) ) {
                            alt123=1;
                        }


                        switch (alt123) {
                    	case 1 :
                    	    // RPIExprAST.g:496:25: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_begin_block5277);
                    	    exception_handler665=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler665.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt123 >= 1 ) break loop123;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(123, input);
                                throw eee;
                        }
                        cnt123++;
                    } while (true);


                    }
                    break;

            }

            string_literal666=(Token)match(input,113,FOLLOW_113_in_begin_block5293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal666_tree = (Object)adaptor.create(string_literal666);
            adaptor.addChild(root_0, string_literal666_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, begin_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "begin_block"

    public static class exception_handler_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // RPIExprAST.g:501:1: exception_handler : 'WHEN' exception_names 'THEN' seq_of_statements ;
    public final RPIExprASTParser.exception_handler_return exception_handler() throws RecognitionException {
        RPIExprASTParser.exception_handler_return retval = new RPIExprASTParser.exception_handler_return();
        retval.start = input.LT(1);
        int exception_handler_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal667=null;
        Token string_literal669=null;
        RPIExprASTParser.exception_names_return exception_names668 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements670 = null;


        Object string_literal667_tree=null;
        Object string_literal669_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // RPIExprAST.g:502:5: ( 'WHEN' exception_names 'THEN' seq_of_statements )
            // RPIExprAST.g:502:9: 'WHEN' exception_names 'THEN' seq_of_statements
            {
            root_0 = (Object)adaptor.nil();

            string_literal667=(Token)match(input,121,FOLLOW_121_in_exception_handler5313); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal667_tree = (Object)adaptor.create(string_literal667);
            adaptor.addChild(root_0, string_literal667_tree);
            }
            pushFollow(FOLLOW_exception_names_in_exception_handler5315);
            exception_names668=exception_names();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_names668.getTree());
            string_literal669=(Token)match(input,167,FOLLOW_167_in_exception_handler5317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal669_tree = (Object)adaptor.create(string_literal669);
            adaptor.addChild(root_0, string_literal669_tree);
            }
            pushFollow(FOLLOW_seq_of_statements_in_exception_handler5327);
            seq_of_statements670=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements670.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, exception_handler_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    public static class proc_fun_start_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proc_fun_start"
    // RPIExprAST.g:506:1: proc_fun_start : 'CREATE' ( 'OR' keyREPLACE )? ;
    public final RPIExprASTParser.proc_fun_start_return proc_fun_start() throws RecognitionException {
        RPIExprASTParser.proc_fun_start_return retval = new RPIExprASTParser.proc_fun_start_return();
        retval.start = input.LT(1);
        int proc_fun_start_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal671=null;
        Token string_literal672=null;
        RPIExprASTParser.keyREPLACE_return keyREPLACE673 = null;


        Object string_literal671_tree=null;
        Object string_literal672_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // RPIExprAST.g:507:5: ( 'CREATE' ( 'OR' keyREPLACE )? )
            // RPIExprAST.g:507:9: 'CREATE' ( 'OR' keyREPLACE )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal671=(Token)match(input,110,FOLLOW_110_in_proc_fun_start5346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal671_tree = (Object)adaptor.create(string_literal671);
            adaptor.addChild(root_0, string_literal671_tree);
            }
            // RPIExprAST.g:507:18: ( 'OR' keyREPLACE )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==OR) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // RPIExprAST.g:507:20: 'OR' keyREPLACE
                    {
                    string_literal672=(Token)match(input,OR,FOLLOW_OR_in_proc_fun_start5350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal672_tree = (Object)adaptor.create(string_literal672);
                    adaptor.addChild(root_0, string_literal672_tree);
                    }
                    pushFollow(FOLLOW_keyREPLACE_in_proc_fun_start5352);
                    keyREPLACE673=keyREPLACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREPLACE673.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, proc_fun_start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "proc_fun_start"

    public static class function_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_body"
    // RPIExprAST.g:510:1: function_body : ( proc_fun_start )? 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMICOLON ;
    public final RPIExprASTParser.function_body_return function_body() throws RecognitionException {
        RPIExprASTParser.function_body_return retval = new RPIExprASTParser.function_body_return();
        retval.start = input.LT(1);
        int function_body_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal675=null;
        Token LPAREN677=null;
        Token RPAREN679=null;
        Token set682=null;
        Token string_literal684=null;
        Token string_literal686=null;
        Token string_literal688=null;
        Token SEMICOLON690=null;
        RPIExprASTParser.proc_fun_start_return proc_fun_start674 = null;

        RPIExprASTParser.function_name_return function_name676 = null;

        RPIExprASTParser.arguments_return arguments678 = null;

        RPIExprASTParser.keyRETURN_return keyRETURN680 = null;

        RPIExprASTParser.return_type_return return_type681 = null;

        RPIExprASTParser.declare_spec_return declare_spec683 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements685 = null;

        RPIExprASTParser.exception_handler_return exception_handler687 = null;

        RPIExprASTParser.function_name_return function_name689 = null;


        Object string_literal675_tree=null;
        Object LPAREN677_tree=null;
        Object RPAREN679_tree=null;
        Object set682_tree=null;
        Object string_literal684_tree=null;
        Object string_literal686_tree=null;
        Object string_literal688_tree=null;
        Object SEMICOLON690_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // RPIExprAST.g:511:5: ( ( proc_fun_start )? 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMICOLON )
            // RPIExprAST.g:511:9: ( proc_fun_start )? 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMICOLON
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:511:9: ( proc_fun_start )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==110) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // RPIExprAST.g:511:11: proc_fun_start
                    {
                    pushFollow(FOLLOW_proc_fun_start_in_function_body5376);
                    proc_fun_start674=proc_fun_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, proc_fun_start674.getTree());

                    }
                    break;

            }

            string_literal675=(Token)match(input,162,FOLLOW_162_in_function_body5381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal675_tree = (Object)adaptor.create(string_literal675);
            root_0 = (Object)adaptor.becomeRoot(string_literal675_tree, root_0);
            }
            pushFollow(FOLLOW_function_name_in_function_body5384);
            function_name676=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name676.getTree());
            // RPIExprAST.g:512:9: ( LPAREN arguments RPAREN )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==LPAREN) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // RPIExprAST.g:512:11: LPAREN arguments RPAREN
                    {
                    LPAREN677=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_body5397); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN677_tree = (Object)adaptor.create(LPAREN677);
                    adaptor.addChild(root_0, LPAREN677_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_function_body5399);
                    arguments678=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments678.getTree());
                    RPAREN679=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_body5401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN679_tree = (Object)adaptor.create(RPAREN679);
                    adaptor.addChild(root_0, RPAREN679_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keyRETURN_in_function_body5415);
            keyRETURN680=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN680.getTree());
            pushFollow(FOLLOW_return_type_in_function_body5417);
            return_type681=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, return_type681.getTree());
            set682=(Token)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set682));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprAST.g:515:9: ( ( declare_spec )=> ( declare_spec )* )
            // RPIExprAST.g:515:11: ( declare_spec )=> ( declare_spec )*
            {
            // RPIExprAST.g:515:31: ( declare_spec )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==ID||LA128_0==DOUBLEQUOTED_STRING||LA128_0==110||(LA128_0>=161 && LA128_0<=162)||LA128_0==217) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // RPIExprAST.g:515:33: declare_spec
            	    {
            	    pushFollow(FOLLOW_declare_spec_in_function_body5458);
            	    declare_spec683=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declare_spec683.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            // RPIExprAST.g:516:9: ( 'BEGIN' )
            // RPIExprAST.g:516:11: 'BEGIN'
            {
            string_literal684=(Token)match(input,114,FOLLOW_114_in_function_body5475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal684_tree = (Object)adaptor.create(string_literal684);
            adaptor.addChild(root_0, string_literal684_tree);
            }

            }

            // RPIExprAST.g:517:9: ( seq_of_statements )
            // RPIExprAST.g:517:11: seq_of_statements
            {
            pushFollow(FOLLOW_seq_of_statements_in_function_body5489);
            seq_of_statements685=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements685.getTree());

            }

            // RPIExprAST.g:518:9: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==119) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    // RPIExprAST.g:518:11: 'EXCEPTION' ( exception_handler )+
                    {
                    string_literal686=(Token)match(input,119,FOLLOW_119_in_function_body5503); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal686_tree = (Object)adaptor.create(string_literal686);
                    adaptor.addChild(root_0, string_literal686_tree);
                    }
                    // RPIExprAST.g:518:23: ( exception_handler )+
                    int cnt129=0;
                    loop129:
                    do {
                        int alt129=2;
                        int LA129_0 = input.LA(1);

                        if ( (LA129_0==121) ) {
                            alt129=1;
                        }


                        switch (alt129) {
                    	case 1 :
                    	    // RPIExprAST.g:518:25: exception_handler
                    	    {
                    	    pushFollow(FOLLOW_exception_handler_in_function_body5507);
                    	    exception_handler687=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_handler687.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt129 >= 1 ) break loop129;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(129, input);
                                throw eee;
                        }
                        cnt129++;
                    } while (true);


                    }
                    break;

            }

            string_literal688=(Token)match(input,113,FOLLOW_113_in_function_body5523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (Object)adaptor.create(string_literal688);
            adaptor.addChild(root_0, string_literal688_tree);
            }
            // RPIExprAST.g:519:15: ( function_name )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ID||LA131_0==QUOTED_STRING||LA131_0==DOUBLEQUOTED_STRING) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // RPIExprAST.g:519:17: function_name
                    {
                    pushFollow(FOLLOW_function_name_in_function_body5527);
                    function_name689=function_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_name689.getTree());

                    }
                    break;

            }

            SEMICOLON690=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_body5532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON690_tree = (Object)adaptor.create(SEMICOLON690);
            adaptor.addChild(root_0, SEMICOLON690_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, function_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_body"

    public static class function_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // RPIExprAST.g:522:1: function_name : ( identifier | QUOTED_STRING );
    public final RPIExprASTParser.function_name_return function_name() throws RecognitionException {
        RPIExprASTParser.function_name_return retval = new RPIExprASTParser.function_name_return();
        retval.start = input.LT(1);
        int function_name_StartIndex = input.index();
        Object root_0 = null;

        Token QUOTED_STRING692=null;
        RPIExprASTParser.identifier_return identifier691 = null;


        Object QUOTED_STRING692_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // RPIExprAST.g:523:5: ( identifier | QUOTED_STRING )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==ID||LA132_0==DOUBLEQUOTED_STRING) ) {
                alt132=1;
            }
            else if ( (LA132_0==QUOTED_STRING) ) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // RPIExprAST.g:523:9: identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_function_name5551);
                    identifier691=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier691.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:523:22: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    QUOTED_STRING692=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_function_name5555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING692_tree = (Object)adaptor.create(QUOTED_STRING692);
                    adaptor.addChild(root_0, QUOTED_STRING692_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, function_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class procedure_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // RPIExprAST.g:526:1: procedure_name : ( identifier | QUOTED_STRING );
    public final RPIExprASTParser.procedure_name_return procedure_name() throws RecognitionException {
        RPIExprASTParser.procedure_name_return retval = new RPIExprASTParser.procedure_name_return();
        retval.start = input.LT(1);
        int procedure_name_StartIndex = input.index();
        Object root_0 = null;

        Token QUOTED_STRING694=null;
        RPIExprASTParser.identifier_return identifier693 = null;


        Object QUOTED_STRING694_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // RPIExprAST.g:527:5: ( identifier | QUOTED_STRING )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ID||LA133_0==DOUBLEQUOTED_STRING) ) {
                alt133=1;
            }
            else if ( (LA133_0==QUOTED_STRING) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }
            switch (alt133) {
                case 1 :
                    // RPIExprAST.g:527:9: identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_procedure_name5575);
                    identifier693=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier693.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:527:22: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    QUOTED_STRING694=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_procedure_name5579); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING694_tree = (Object)adaptor.create(QUOTED_STRING694);
                    adaptor.addChild(root_0, QUOTED_STRING694_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, procedure_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // RPIExprAST.g:530:1: arguments : argument ( COMMA argument )* ;
    public final RPIExprASTParser.arguments_return arguments() throws RecognitionException {
        RPIExprASTParser.arguments_return retval = new RPIExprASTParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA696=null;
        RPIExprASTParser.argument_return argument695 = null;

        RPIExprASTParser.argument_return argument697 = null;


        Object COMMA696_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // RPIExprAST.g:531:5: ( argument ( COMMA argument )* )
            // RPIExprAST.g:531:9: argument ( COMMA argument )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_argument_in_arguments5599);
            argument695=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument695.getTree());
            // RPIExprAST.g:531:18: ( COMMA argument )*
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( (LA134_0==COMMA) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    // RPIExprAST.g:531:20: COMMA argument
            	    {
            	    COMMA696=(Token)match(input,COMMA,FOLLOW_COMMA_in_arguments5603); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA696_tree = (Object)adaptor.create(COMMA696);
            	    adaptor.addChild(root_0, COMMA696_tree);
            	    }
            	    pushFollow(FOLLOW_argument_in_arguments5605);
            	    argument697=argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument697.getTree());

            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class argument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // RPIExprAST.g:534:1: argument : argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final RPIExprASTParser.argument_return argument() throws RecognitionException {
        RPIExprASTParser.argument_return retval = new RPIExprASTParser.argument_return();
        retval.start = input.LT(1);
        int argument_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal700=null;
        Token string_literal702=null;
        Token set704=null;
        RPIExprASTParser.argument_name_return argument_name698 = null;

        RPIExprASTParser.keyOUT_return keyOUT699 = null;

        RPIExprASTParser.keyOUT_return keyOUT701 = null;

        RPIExprASTParser.argument_type_return argument_type703 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression705 = null;


        Object string_literal700_tree=null;
        Object string_literal702_tree=null;
        Object set704_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // RPIExprAST.g:535:5: ( argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // RPIExprAST.g:535:9: argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_argument_name_in_argument5627);
            argument_name698=argument_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_name698.getTree());
            // RPIExprAST.g:535:23: ( keyOUT | 'IN' keyOUT | 'IN' )?
            int alt135=4;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==215) ) {
                alt135=1;
            }
            else if ( (LA135_0==160) ) {
                int LA135_2 = input.LA(2);

                if ( (LA135_2==215) ) {
                    alt135=2;
                }
                else if ( (LA135_2==EOF||LA135_2==ID||LA135_2==RPAREN||LA135_2==COMMA||LA135_2==SQL_ASSIGN||LA135_2==DOUBLEQUOTED_STRING||LA135_2==117||(LA135_2>=122 && LA135_2<=134)||(LA135_2>=137 && LA135_2<=144)||(LA135_2>=146 && LA135_2<=159)) ) {
                    alt135=3;
                }
            }
            switch (alt135) {
                case 1 :
                    // RPIExprAST.g:535:25: keyOUT
                    {
                    pushFollow(FOLLOW_keyOUT_in_argument5631);
                    keyOUT699=keyOUT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUT699.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:535:34: 'IN' keyOUT
                    {
                    string_literal700=(Token)match(input,160,FOLLOW_160_in_argument5635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal700_tree = (Object)adaptor.create(string_literal700);
                    adaptor.addChild(root_0, string_literal700_tree);
                    }
                    pushFollow(FOLLOW_keyOUT_in_argument5637);
                    keyOUT701=keyOUT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUT701.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:535:48: 'IN'
                    {
                    string_literal702=(Token)match(input,160,FOLLOW_160_in_argument5641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal702_tree = (Object)adaptor.create(string_literal702);
                    adaptor.addChild(root_0, string_literal702_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:535:56: ( argument_type )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==ID||LA136_0==DOUBLEQUOTED_STRING||(LA136_0>=122 && LA136_0<=134)||(LA136_0>=137 && LA136_0<=144)||(LA136_0>=146 && LA136_0<=159)) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // RPIExprAST.g:535:57: argument_type
                    {
                    pushFollow(FOLLOW_argument_type_in_argument5647);
                    argument_type703=argument_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument_type703.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:536:9: ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==SQL_ASSIGN||LA137_0==117) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // RPIExprAST.g:536:11: ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    set704=(Token)input.LT(1);
                    if ( input.LA(1)==SQL_ASSIGN||input.LA(1)==117 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set704));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    pushFollow(FOLLOW_plsql_expression_in_argument5672);
                    plsql_expression705=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression705.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, argument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class argument_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_name"
    // RPIExprAST.g:539:1: argument_name : identifier ;
    public final RPIExprASTParser.argument_name_return argument_name() throws RecognitionException {
        RPIExprASTParser.argument_name_return retval = new RPIExprASTParser.argument_name_return();
        retval.start = input.LT(1);
        int argument_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier706 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // RPIExprAST.g:540:5: ( identifier )
            // RPIExprAST.g:540:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_argument_name5694);
            identifier706=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier706.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, argument_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_name"

    public static class argument_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_type"
    // RPIExprAST.g:543:1: argument_type : type_spec ;
    public final RPIExprASTParser.argument_type_return argument_type() throws RecognitionException {
        RPIExprASTParser.argument_type_return retval = new RPIExprASTParser.argument_type_return();
        retval.start = input.LT(1);
        int argument_type_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.type_spec_return type_spec707 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // RPIExprAST.g:544:5: ( type_spec )
            // RPIExprAST.g:544:9: type_spec
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_spec_in_argument_type5713);
            type_spec707=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec707.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, argument_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_type"

    public static class value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "value"
    // RPIExprAST.g:547:1: value : ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' );
    public final RPIExprASTParser.value_return value() throws RecognitionException {
        RPIExprASTParser.value_return retval = new RPIExprASTParser.value_return();
        retval.start = input.LT(1);
        int value_StartIndex = input.index();
        Object root_0 = null;

        Token set708=null;
        Token NUMBER709=null;
        Token string_literal711=null;
        Token string_literal712=null;
        Token string_literal713=null;
        RPIExprASTParser.quoted_string_return quoted_string710 = null;


        Object set708_tree=null;
        Object NUMBER709_tree=null;
        Object string_literal711_tree=null;
        Object string_literal712_tree=null;
        Object string_literal713_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // RPIExprAST.g:548:5: ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' )
            int alt139=5;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
            case NUMBER:
                {
                alt139=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt139=2;
                }
                break;
            case 168:
                {
                alt139=3;
                }
                break;
            case 169:
                {
                alt139=4;
                }
                break;
            case 116:
                {
                alt139=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 139, 0, input);

                throw nvae;
            }

            switch (alt139) {
                case 1 :
                    // RPIExprAST.g:548:9: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:548:9: ( PLUS | MINUS )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( ((LA138_0>=PLUS && LA138_0<=MINUS)) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // RPIExprAST.g:
                            {
                            set708=(Token)input.LT(1);
                            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set708));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER709=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_value5743); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER709_tree = (Object)adaptor.create(NUMBER709);
                    adaptor.addChild(root_0, NUMBER709_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:549:9: quoted_string
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_quoted_string_in_value5753);
                    quoted_string710=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string710.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:550:9: 'TRUE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal711=(Token)match(input,168,FOLLOW_168_in_value5763); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal711_tree = (Object)adaptor.create(string_literal711);
                    adaptor.addChild(root_0, string_literal711_tree);
                    }

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:550:18: 'FALSE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal712=(Token)match(input,169,FOLLOW_169_in_value5767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal712_tree = (Object)adaptor.create(string_literal712);
                    adaptor.addChild(root_0, string_literal712_tree);
                    }

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:551:9: 'NULL'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal713=(Token)match(input,116,FOLLOW_116_in_value5777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal713_tree = (Object)adaptor.create(string_literal713);
                    adaptor.addChild(root_0, string_literal713_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, value_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "value"

    public static class return_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_type"
    // RPIExprAST.g:554:1: return_type : type_spec ;
    public final RPIExprASTParser.return_type_return return_type() throws RecognitionException {
        RPIExprASTParser.return_type_return retval = new RPIExprASTParser.return_type_return();
        retval.start = input.LT(1);
        int return_type_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.type_spec_return type_spec714 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // RPIExprAST.g:555:5: ( type_spec )
            // RPIExprAST.g:555:9: type_spec
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_spec_in_return_type5796);
            type_spec714=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_spec714.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, return_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_type"

    public static class function_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // RPIExprAST.g:558:1: function_declaration : function_body ;
    public final RPIExprASTParser.function_declaration_return function_declaration() throws RecognitionException {
        RPIExprASTParser.function_declaration_return retval = new RPIExprASTParser.function_declaration_return();
        retval.start = input.LT(1);
        int function_declaration_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.function_body_return function_body715 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // RPIExprAST.g:559:5: ( function_body )
            // RPIExprAST.g:559:9: function_body
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_function_body_in_function_declaration5815);
            function_body715=function_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, function_body715.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, function_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_call"
    // RPIExprAST.g:562:1: function_call : user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? ;
    public final RPIExprASTParser.function_call_return function_call() throws RecognitionException {
        RPIExprASTParser.function_call_return retval = new RPIExprASTParser.function_call_return();
        retval.start = input.LT(1);
        int function_call_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN717=null;
        Token RPAREN719=null;
        RPIExprASTParser.user_defined_function_return user_defined_function716 = null;

        RPIExprASTParser.call_parameters_return call_parameters718 = null;


        Object LPAREN717_tree=null;
        Object RPAREN719_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // RPIExprAST.g:563:5: ( user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? )
            // RPIExprAST.g:563:9: user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_user_defined_function_in_function_call5834);
            user_defined_function716=user_defined_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, user_defined_function716.getTree());
            // RPIExprAST.g:563:31: ({...}? LPAREN ( call_parameters )? RPAREN )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==LPAREN) ) {
                int LA141_1 = input.LA(2);

                if ( ((synpred278_RPIExprAST()&&( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ))) ) {
                    alt141=1;
                }
            }
            switch (alt141) {
                case 1 :
                    // RPIExprAST.g:563:33: {...}? LPAREN ( call_parameters )? RPAREN
                    {
                    if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_call", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
                    }
                    LPAREN717=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_call5840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN717_tree = (Object)adaptor.create(LPAREN717);
                    adaptor.addChild(root_0, LPAREN717_tree);
                    }
                    // RPIExprAST.g:563:115: ( call_parameters )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( ((LA140_0>=ID && LA140_0<=LPAREN)||(LA140_0>=SQL && LA140_0<=MINUS)||LA140_0==NUMBER||LA140_0==NOT||LA140_0==QUOTED_STRING||LA140_0==DOUBLEQUOTED_STRING||LA140_0==116||LA140_0==158||(LA140_0>=168 && LA140_0<=169)||(LA140_0>=174 && LA140_0<=175)||LA140_0==198) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // RPIExprAST.g:563:117: call_parameters
                            {
                            pushFollow(FOLLOW_call_parameters_in_function_call5844);
                            call_parameters718=call_parameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameters718.getTree());

                            }
                            break;

                    }

                    RPAREN719=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_call5849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN719_tree = (Object)adaptor.create(RPAREN719);
                    adaptor.addChild(root_0, RPAREN719_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, function_call_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_call"

    public static class collection_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_function_call"
    // RPIExprAST.g:571:1: collection_function_call : plsql_table_name ;
    public final RPIExprASTParser.collection_function_call_return collection_function_call() throws RecognitionException {
        RPIExprASTParser.collection_function_call_return retval = new RPIExprASTParser.collection_function_call_return();
        retval.start = input.LT(1);
        int collection_function_call_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.plsql_table_name_return plsql_table_name720 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // RPIExprAST.g:572:5: ( plsql_table_name )
            // RPIExprAST.g:572:9: plsql_table_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_plsql_table_name_in_collection_function_call5876);
            plsql_table_name720=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_table_name720.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, collection_function_call_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_function_call"

    public static class variable_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_names"
    // RPIExprAST.g:575:1: variable_names : variable_name ( COMMA variable_name )* ;
    public final RPIExprASTParser.variable_names_return variable_names() throws RecognitionException {
        RPIExprASTParser.variable_names_return retval = new RPIExprASTParser.variable_names_return();
        retval.start = input.LT(1);
        int variable_names_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA722=null;
        RPIExprASTParser.variable_name_return variable_name721 = null;

        RPIExprASTParser.variable_name_return variable_name723 = null;


        Object COMMA722_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // RPIExprAST.g:576:5: ( variable_name ( COMMA variable_name )* )
            // RPIExprAST.g:576:9: variable_name ( COMMA variable_name )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variable_name_in_variable_names5895);
            variable_name721=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name721.getTree());
            // RPIExprAST.g:576:23: ( COMMA variable_name )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==COMMA) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // RPIExprAST.g:576:25: COMMA variable_name
            	    {
            	    COMMA722=(Token)match(input,COMMA,FOLLOW_COMMA_in_variable_names5899); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA722_tree = (Object)adaptor.create(COMMA722);
            	    adaptor.addChild(root_0, COMMA722_tree);
            	    }
            	    pushFollow(FOLLOW_variable_name_in_variable_names5901);
            	    variable_name723=variable_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_name723.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, variable_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_names"

    public static class variable_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_name"
    // RPIExprAST.g:578:1: variable_name : identifier ;
    public final RPIExprASTParser.variable_name_return variable_name() throws RecognitionException {
        RPIExprASTParser.variable_name_return retval = new RPIExprASTParser.variable_name_return();
        retval.start = input.LT(1);
        int variable_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier724 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // RPIExprAST.g:579:5: ( identifier )
            // RPIExprAST.g:579:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_variable_name5922);
            identifier724=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier724.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, variable_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_name"

    public static class null_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "null_statement"
    // RPIExprAST.g:582:1: null_statement : 'NULL' ;
    public final RPIExprASTParser.null_statement_return null_statement() throws RecognitionException {
        RPIExprASTParser.null_statement_return retval = new RPIExprASTParser.null_statement_return();
        retval.start = input.LT(1);
        int null_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal725=null;

        Object string_literal725_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // RPIExprAST.g:583:5: ( 'NULL' )
            // RPIExprAST.g:583:9: 'NULL'
            {
            root_0 = (Object)adaptor.nil();

            string_literal725=(Token)match(input,116,FOLLOW_116_in_null_statement5941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal725_tree = (Object)adaptor.create(string_literal725);
            adaptor.addChild(root_0, string_literal725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, null_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "null_statement"

    public static class raise_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // RPIExprAST.g:586:1: raise_statement : keyRAISE ( exception_name )? ;
    public final RPIExprASTParser.raise_statement_return raise_statement() throws RecognitionException {
        RPIExprASTParser.raise_statement_return retval = new RPIExprASTParser.raise_statement_return();
        retval.start = input.LT(1);
        int raise_statement_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyRAISE_return keyRAISE726 = null;

        RPIExprASTParser.exception_name_return exception_name727 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // RPIExprAST.g:587:5: ( keyRAISE ( exception_name )? )
            // RPIExprAST.g:587:9: keyRAISE ( exception_name )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyRAISE_in_raise_statement5961);
            keyRAISE726=keyRAISE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRAISE726.getTree());
            // RPIExprAST.g:587:18: ( exception_name )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==ID||LA143_0==DOUBLEQUOTED_STRING) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // RPIExprAST.g:587:20: exception_name
                    {
                    pushFollow(FOLLOW_exception_name_in_raise_statement5965);
                    exception_name727=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exception_name727.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, raise_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class return_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // RPIExprAST.g:590:1: return_statement : keyRETURN ( plsql_expression )? ;
    public final RPIExprASTParser.return_statement_return return_statement() throws RecognitionException {
        RPIExprASTParser.return_statement_return retval = new RPIExprASTParser.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyRETURN_return keyRETURN728 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression729 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // RPIExprAST.g:591:5: ( keyRETURN ( plsql_expression )? )
            // RPIExprAST.g:591:9: keyRETURN ( plsql_expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyRETURN_in_return_statement5991);
            keyRETURN728=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN728.getTree());
            // RPIExprAST.g:591:19: ( plsql_expression )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( ((LA144_0>=ID && LA144_0<=LPAREN)||(LA144_0>=SQL && LA144_0<=MINUS)||LA144_0==NUMBER||LA144_0==NOT||LA144_0==QUOTED_STRING||LA144_0==DOUBLEQUOTED_STRING||LA144_0==116||LA144_0==158||(LA144_0>=168 && LA144_0<=169)||(LA144_0>=174 && LA144_0<=175)||LA144_0==198) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // RPIExprAST.g:591:21: plsql_expression
                    {
                    pushFollow(FOLLOW_plsql_expression_in_return_statement5995);
                    plsql_expression729=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression729.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class loop_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // RPIExprAST.g:594:1: loop_statement : ( LLABEL label_name RLABEL )? ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? ;
    public final RPIExprASTParser.loop_statement_return loop_statement() throws RecognitionException {
        RPIExprASTParser.loop_statement_return retval = new RPIExprASTParser.loop_statement_return();
        retval.start = input.LT(1);
        int loop_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LLABEL730=null;
        Token RLABEL732=null;
        Token string_literal735=null;
        Token string_literal740=null;
        RPIExprASTParser.label_name_return label_name731 = null;

        RPIExprASTParser.keyWHILE_return keyWHILE733 = null;

        RPIExprASTParser.plsql_condition_return plsql_condition734 = null;

        RPIExprASTParser.numeric_loop_param_return numeric_loop_param736 = null;

        RPIExprASTParser.cursor_loop_param_return cursor_loop_param737 = null;

        RPIExprASTParser.keyLOOP_return keyLOOP738 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements739 = null;

        RPIExprASTParser.keyLOOP_return keyLOOP741 = null;

        RPIExprASTParser.label_name_return label_name742 = null;


        Object LLABEL730_tree=null;
        Object RLABEL732_tree=null;
        Object string_literal735_tree=null;
        Object string_literal740_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // RPIExprAST.g:595:5: ( ( LLABEL label_name RLABEL )? ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? )
            // RPIExprAST.g:595:9: ( LLABEL label_name RLABEL )? ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:595:9: ( LLABEL label_name RLABEL )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==LLABEL) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // RPIExprAST.g:595:11: LLABEL label_name RLABEL
                    {
                    LLABEL730=(Token)match(input,LLABEL,FOLLOW_LLABEL_in_loop_statement6019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLABEL730_tree = (Object)adaptor.create(LLABEL730);
                    adaptor.addChild(root_0, LLABEL730_tree);
                    }
                    pushFollow(FOLLOW_label_name_in_loop_statement6021);
                    label_name731=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name731.getTree());
                    RLABEL732=(Token)match(input,RLABEL,FOLLOW_RLABEL_in_loop_statement6023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RLABEL732_tree = (Object)adaptor.create(RLABEL732);
                    adaptor.addChild(root_0, RLABEL732_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:596:9: ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )?
            int alt147=3;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==223) ) {
                alt147=1;
            }
            else if ( (LA147_0==170) ) {
                alt147=2;
            }
            switch (alt147) {
                case 1 :
                    // RPIExprAST.g:596:13: keyWHILE plsql_condition
                    {
                    pushFollow(FOLLOW_keyWHILE_in_loop_statement6040);
                    keyWHILE733=keyWHILE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (Object)adaptor.becomeRoot(keyWHILE733.getTree(), root_0);
                    pushFollow(FOLLOW_plsql_condition_in_loop_statement6043);
                    plsql_condition734=plsql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition734.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:597:13: ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                    {
                    // RPIExprAST.g:597:13: ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                    // RPIExprAST.g:597:17: 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                    {
                    string_literal735=(Token)match(input,170,FOLLOW_170_in_loop_statement6061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal735_tree = (Object)adaptor.create(string_literal735);
                    root_0 = (Object)adaptor.becomeRoot(string_literal735_tree, root_0);
                    }
                    // RPIExprAST.g:598:17: ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==ID||LA146_0==DOUBLEQUOTED_STRING) ) {
                        int LA146_1 = input.LA(2);

                        if ( (synpred284_RPIExprAST()) ) {
                            alt146=1;
                        }
                        else if ( (synpred285_RPIExprAST()) ) {
                            alt146=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 146, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 0, input);

                        throw nvae;
                    }
                    switch (alt146) {
                        case 1 :
                            // RPIExprAST.g:598:21: ( numeric_loop_param )=> numeric_loop_param
                            {
                            pushFollow(FOLLOW_numeric_loop_param_in_loop_statement6092);
                            numeric_loop_param736=numeric_loop_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, numeric_loop_param736.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:599:21: ( cursor_loop_param )=> cursor_loop_param
                            {
                            pushFollow(FOLLOW_cursor_loop_param_in_loop_statement6122);
                            cursor_loop_param737=cursor_loop_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_loop_param737.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_keyLOOP_in_loop_statement6176);
            keyLOOP738=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOOP738.getTree());
            pushFollow(FOLLOW_seq_of_statements_in_loop_statement6186);
            seq_of_statements739=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements739.getTree());
            string_literal740=(Token)match(input,113,FOLLOW_113_in_loop_statement6196); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal740_tree = (Object)adaptor.create(string_literal740);
            adaptor.addChild(root_0, string_literal740_tree);
            }
            pushFollow(FOLLOW_keyLOOP_in_loop_statement6198);
            keyLOOP741=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOOP741.getTree());
            // RPIExprAST.g:606:9: ( label_name )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==ID||LA148_0==DOUBLEQUOTED_STRING) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // RPIExprAST.g:606:11: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_loop_statement6211);
                    label_name742=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name742.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class numeric_loop_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric_loop_param"
    // RPIExprAST.g:609:1: numeric_loop_param : index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr ;
    public final RPIExprASTParser.numeric_loop_param_return numeric_loop_param() throws RecognitionException {
        RPIExprASTParser.numeric_loop_param_return retval = new RPIExprASTParser.numeric_loop_param_return();
        retval.start = input.LT(1);
        int numeric_loop_param_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal744=null;
        Token DOUBLEDOT747=null;
        RPIExprASTParser.index_name_return index_name743 = null;

        RPIExprASTParser.keyREVERSE_return keyREVERSE745 = null;

        RPIExprASTParser.integer_expr_return integer_expr746 = null;

        RPIExprASTParser.integer_expr_return integer_expr748 = null;


        Object string_literal744_tree=null;
        Object DOUBLEDOT747_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // RPIExprAST.g:610:5: ( index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr )
            // RPIExprAST.g:610:9: index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_index_name_in_numeric_loop_param6233);
            index_name743=index_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, index_name743.getTree());
            string_literal744=(Token)match(input,160,FOLLOW_160_in_numeric_loop_param6235); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal744_tree = (Object)adaptor.create(string_literal744);
            adaptor.addChild(root_0, string_literal744_tree);
            }
            // RPIExprAST.g:610:25: ( keyREVERSE )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID) ) {
                int LA149_1 = input.LA(2);

                if ( ((synpred288_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REVERSE")))) ) {
                    alt149=1;
                }
            }
            switch (alt149) {
                case 1 :
                    // RPIExprAST.g:610:27: keyREVERSE
                    {
                    pushFollow(FOLLOW_keyREVERSE_in_numeric_loop_param6239);
                    keyREVERSE745=keyREVERSE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREVERSE745.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param6244);
            integer_expr746=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer_expr746.getTree());
            DOUBLEDOT747=(Token)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_numeric_loop_param6246); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLEDOT747_tree = (Object)adaptor.create(DOUBLEDOT747);
            adaptor.addChild(root_0, DOUBLEDOT747_tree);
            }
            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param6248);
            integer_expr748=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer_expr748.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, numeric_loop_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric_loop_param"

    public static class index_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_name"
    // RPIExprAST.g:613:1: index_name : identifier ;
    public final RPIExprASTParser.index_name_return index_name() throws RecognitionException {
        RPIExprASTParser.index_name_return retval = new RPIExprASTParser.index_name_return();
        retval.start = input.LT(1);
        int index_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier749 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // RPIExprAST.g:614:5: ( identifier )
            // RPIExprAST.g:614:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_index_name6267);
            identifier749=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier749.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, index_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_name"

    public static class integer_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer_expr"
    // RPIExprAST.g:618:1: integer_expr : sql_expression ;
    public final RPIExprASTParser.integer_expr_return integer_expr() throws RecognitionException {
        RPIExprASTParser.integer_expr_return retval = new RPIExprASTParser.integer_expr_return();
        retval.start = input.LT(1);
        int integer_expr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_expression_return sql_expression750 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // RPIExprAST.g:619:5: ( sql_expression )
            // RPIExprAST.g:619:9: sql_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_integer_expr6287);
            sql_expression750=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression750.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, integer_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integer_expr"

    public static class cursor_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_name"
    // RPIExprAST.g:622:1: cursor_name : identifier ;
    public final RPIExprASTParser.cursor_name_return cursor_name() throws RecognitionException {
        RPIExprASTParser.cursor_name_return retval = new RPIExprASTParser.cursor_name_return();
        retval.start = input.LT(1);
        int cursor_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier751 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // RPIExprAST.g:623:5: ( identifier )
            // RPIExprAST.g:623:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_cursor_name6306);
            identifier751=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier751.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, cursor_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_name"

    public static class cursor_loop_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_loop_param"
    // RPIExprAST.g:626:1: cursor_loop_param : record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) ;
    public final RPIExprASTParser.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
        RPIExprASTParser.cursor_loop_param_return retval = new RPIExprASTParser.cursor_loop_param_return();
        retval.start = input.LT(1);
        int cursor_loop_param_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal753=null;
        Token LPAREN755=null;
        Token RPAREN757=null;
        Token LPAREN758=null;
        Token RPAREN760=null;
        RPIExprASTParser.record_name_return record_name752 = null;

        RPIExprASTParser.cursor_name_return cursor_name754 = null;

        RPIExprASTParser.plsql_expressions_return plsql_expressions756 = null;

        RPIExprASTParser.select_statement_return select_statement759 = null;


        Object string_literal753_tree=null;
        Object LPAREN755_tree=null;
        Object RPAREN757_tree=null;
        Object LPAREN758_tree=null;
        Object RPAREN760_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // RPIExprAST.g:627:5: ( record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) )
            // RPIExprAST.g:627:9: record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_record_name_in_cursor_loop_param6325);
            record_name752=record_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name752.getTree());
            string_literal753=(Token)match(input,160,FOLLOW_160_in_cursor_loop_param6327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal753_tree = (Object)adaptor.create(string_literal753);
            adaptor.addChild(root_0, string_literal753_tree);
            }
            // RPIExprAST.g:628:9: ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ID||LA151_0==DOUBLEQUOTED_STRING) ) {
                alt151=1;
            }
            else if ( (LA151_0==LPAREN) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    // RPIExprAST.g:628:13: cursor_name ( LPAREN plsql_expressions RPAREN )?
                    {
                    pushFollow(FOLLOW_cursor_name_in_cursor_loop_param6341);
                    cursor_name754=cursor_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name754.getTree());
                    // RPIExprAST.g:628:25: ( LPAREN plsql_expressions RPAREN )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==LPAREN) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // RPIExprAST.g:628:27: LPAREN plsql_expressions RPAREN
                            {
                            LPAREN755=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param6345); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN755_tree = (Object)adaptor.create(LPAREN755);
                            adaptor.addChild(root_0, LPAREN755_tree);
                            }
                            pushFollow(FOLLOW_plsql_expressions_in_cursor_loop_param6347);
                            plsql_expressions756=plsql_expressions();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions756.getTree());
                            RPAREN757=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param6349); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN757_tree = (Object)adaptor.create(RPAREN757);
                            adaptor.addChild(root_0, RPAREN757_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:629:13: LPAREN select_statement RPAREN
                    {
                    LPAREN758=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param6366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN758_tree = (Object)adaptor.create(LPAREN758);
                    adaptor.addChild(root_0, LPAREN758_tree);
                    }
                    pushFollow(FOLLOW_select_statement_in_cursor_loop_param6368);
                    select_statement759=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement759.getTree());
                    RPAREN760=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param6370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN760_tree = (Object)adaptor.create(RPAREN760);
                    adaptor.addChild(root_0, RPAREN760_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, cursor_loop_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_loop_param"

    public static class record_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_name"
    // RPIExprAST.g:633:1: record_name : identifier ;
    public final RPIExprASTParser.record_name_return record_name() throws RecognitionException {
        RPIExprASTParser.record_name_return retval = new RPIExprASTParser.record_name_return();
        retval.start = input.LT(1);
        int record_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier761 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // RPIExprAST.g:634:5: ( identifier )
            // RPIExprAST.g:634:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_record_name6399);
            identifier761=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier761.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, record_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_name"

    public static class commit_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // RPIExprAST.g:637:1: commit_statement : 'COMMIT' ;
    public final RPIExprASTParser.commit_statement_return commit_statement() throws RecognitionException {
        RPIExprASTParser.commit_statement_return retval = new RPIExprASTParser.commit_statement_return();
        retval.start = input.LT(1);
        int commit_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal762=null;

        Object string_literal762_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // RPIExprAST.g:638:5: ( 'COMMIT' )
            // RPIExprAST.g:638:9: 'COMMIT'
            {
            root_0 = (Object)adaptor.nil();

            string_literal762=(Token)match(input,171,FOLLOW_171_in_commit_statement6418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal762_tree = (Object)adaptor.create(string_literal762);
            adaptor.addChild(root_0, string_literal762_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, commit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class if_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // RPIExprAST.g:641:1: if_statement : 'IF' plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' ;
    public final RPIExprASTParser.if_statement_return if_statement() throws RecognitionException {
        RPIExprASTParser.if_statement_return retval = new RPIExprASTParser.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal763=null;
        Token string_literal765=null;
        Token string_literal769=null;
        Token string_literal771=null;
        Token string_literal773=null;
        Token string_literal774=null;
        RPIExprASTParser.plsql_condition_return plsql_condition764 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements766 = null;

        RPIExprASTParser.keyELSIF_return keyELSIF767 = null;

        RPIExprASTParser.plsql_condition_return plsql_condition768 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements770 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements772 = null;


        Object string_literal763_tree=null;
        Object string_literal765_tree=null;
        Object string_literal769_tree=null;
        Object string_literal771_tree=null;
        Object string_literal773_tree=null;
        Object string_literal774_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // RPIExprAST.g:642:5: ( 'IF' plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' )
            // RPIExprAST.g:642:9: 'IF' plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF'
            {
            root_0 = (Object)adaptor.nil();

            string_literal763=(Token)match(input,172,FOLLOW_172_in_if_statement6437); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal763_tree = (Object)adaptor.create(string_literal763);
            root_0 = (Object)adaptor.becomeRoot(string_literal763_tree, root_0);
            }
            pushFollow(FOLLOW_plsql_condition_in_if_statement6440);
            plsql_condition764=plsql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition764.getTree());
            string_literal765=(Token)match(input,167,FOLLOW_167_in_if_statement6442); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal765_tree = (Object)adaptor.create(string_literal765);
            adaptor.addChild(root_0, string_literal765_tree);
            }
            pushFollow(FOLLOW_seq_of_statements_in_if_statement6444);
            seq_of_statements766=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements766.getTree());
            // RPIExprAST.g:643:9: ( keyELSIF plsql_condition 'THEN' seq_of_statements )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==213) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // RPIExprAST.g:644:13: keyELSIF plsql_condition 'THEN' seq_of_statements
            	    {
            	    pushFollow(FOLLOW_keyELSIF_in_if_statement6471);
            	    keyELSIF767=keyELSIF();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyELSIF767.getTree());
            	    pushFollow(FOLLOW_plsql_condition_in_if_statement6473);
            	    plsql_condition768=plsql_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_condition768.getTree());
            	    string_literal769=(Token)match(input,167,FOLLOW_167_in_if_statement6475); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal769_tree = (Object)adaptor.create(string_literal769);
            	    adaptor.addChild(root_0, string_literal769_tree);
            	    }
            	    pushFollow(FOLLOW_seq_of_statements_in_if_statement6477);
            	    seq_of_statements770=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements770.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);

            // RPIExprAST.g:646:9: ( 'ELSE' seq_of_statements )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==173) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // RPIExprAST.g:646:11: 'ELSE' seq_of_statements
                    {
                    string_literal771=(Token)match(input,173,FOLLOW_173_in_if_statement6500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal771_tree = (Object)adaptor.create(string_literal771);
                    adaptor.addChild(root_0, string_literal771_tree);
                    }
                    pushFollow(FOLLOW_seq_of_statements_in_if_statement6502);
                    seq_of_statements772=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements772.getTree());

                    }
                    break;

            }

            string_literal773=(Token)match(input,113,FOLLOW_113_in_if_statement6515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal773_tree = (Object)adaptor.create(string_literal773);
            adaptor.addChild(root_0, string_literal773_tree);
            }
            string_literal774=(Token)match(input,172,FOLLOW_172_in_if_statement6517); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal774_tree = (Object)adaptor.create(string_literal774);
            adaptor.addChild(root_0, string_literal774_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class sql_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statement"
    // RPIExprAST.g:650:1: sql_statement : sql_command ;
    public final RPIExprASTParser.sql_statement_return sql_statement() throws RecognitionException {
        RPIExprASTParser.sql_statement_return retval = new RPIExprASTParser.sql_statement_return();
        retval.start = input.LT(1);
        int sql_statement_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_command_return sql_command775 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // RPIExprAST.g:651:5: ( sql_command )
            // RPIExprAST.g:651:9: sql_command
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_command_in_sql_statement6536);
            sql_command775=sql_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_command775.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, sql_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_statement"

    public static class sql_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_command"
    // RPIExprAST.g:654:1: sql_command : ( to_modify_data | to_control_data );
    public final RPIExprASTParser.sql_command_return sql_command() throws RecognitionException {
        RPIExprASTParser.sql_command_return retval = new RPIExprASTParser.sql_command_return();
        retval.start = input.LT(1);
        int sql_command_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.to_modify_data_return to_modify_data776 = null;

        RPIExprASTParser.to_control_data_return to_control_data777 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // RPIExprAST.g:655:5: ( to_modify_data | to_control_data )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==145||LA154_0==174||LA154_0==190||LA154_0==201||LA154_0==203) ) {
                alt154=1;
            }
            else if ( (LA154_0==ID||LA154_0==171||(LA154_0>=205 && LA154_0<=206)||LA154_0==211||LA154_0==222) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // RPIExprAST.g:655:9: to_modify_data
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_modify_data_in_sql_command6555);
                    to_modify_data776=to_modify_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to_modify_data776.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:656:9: to_control_data
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_to_control_data_in_sql_command6565);
                    to_control_data777=to_control_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, to_control_data777.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, sql_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_command"

    public static class to_modify_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_modify_data"
    // RPIExprAST.g:659:1: to_modify_data : ( select_command | insert_command | update_command | delete_command | set_transaction_command );
    public final RPIExprASTParser.to_modify_data_return to_modify_data() throws RecognitionException {
        RPIExprASTParser.to_modify_data_return retval = new RPIExprASTParser.to_modify_data_return();
        retval.start = input.LT(1);
        int to_modify_data_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.select_command_return select_command778 = null;

        RPIExprASTParser.insert_command_return insert_command779 = null;

        RPIExprASTParser.update_command_return update_command780 = null;

        RPIExprASTParser.delete_command_return delete_command781 = null;

        RPIExprASTParser.set_transaction_command_return set_transaction_command782 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // RPIExprAST.g:660:5: ( select_command | insert_command | update_command | delete_command | set_transaction_command )
            int alt155=5;
            switch ( input.LA(1) ) {
            case 174:
                {
                alt155=1;
                }
                break;
            case 203:
                {
                alt155=2;
                }
                break;
            case 190:
                {
                alt155=3;
                }
                break;
            case 201:
                {
                alt155=4;
                }
                break;
            case 145:
                {
                alt155=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // RPIExprAST.g:660:9: select_command
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_select_command_in_to_modify_data6584);
                    select_command778=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command778.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:661:9: insert_command
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_insert_command_in_to_modify_data6594);
                    insert_command779=insert_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insert_command779.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:662:9: update_command
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_update_command_in_to_modify_data6604);
                    update_command780=update_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_command780.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:663:9: delete_command
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_delete_command_in_to_modify_data6614);
                    delete_command781=delete_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, delete_command781.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:664:9: set_transaction_command
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_set_transaction_command_in_to_modify_data6624);
                    set_transaction_command782=set_transaction_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, set_transaction_command782.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, to_modify_data_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_modify_data"

    public static class to_control_data_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_control_data"
    // RPIExprAST.g:667:1: to_control_data : ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement );
    public final RPIExprASTParser.to_control_data_return to_control_data() throws RecognitionException {
        RPIExprASTParser.to_control_data_return retval = new RPIExprASTParser.to_control_data_return();
        retval.start = input.LT(1);
        int to_control_data_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.close_statement_return close_statement783 = null;

        RPIExprASTParser.commit_statement_return commit_statement784 = null;

        RPIExprASTParser.fetch_statement_return fetch_statement785 = null;

        RPIExprASTParser.lock_table_statement_return lock_table_statement786 = null;

        RPIExprASTParser.open_statement_return open_statement787 = null;

        RPIExprASTParser.rollback_statement_return rollback_statement788 = null;

        RPIExprASTParser.savepoint_statement_return savepoint_statement789 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // RPIExprAST.g:668:5: ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement )
            int alt156=7;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==ID||LA156_1==DOUBLEQUOTED_STRING) ) {
                    int LA156_7 = input.LA(3);

                    if ( ((synpred298_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE")))) ) {
                        alt156=1;
                    }
                    else if ( ((synpred302_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OPEN")))) ) {
                        alt156=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 7, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;
                }
                }
                break;
            case 171:
                {
                alt156=2;
                }
                break;
            case 205:
                {
                alt156=3;
                }
                break;
            case 206:
                {
                alt156=4;
                }
                break;
            case 222:
                {
                alt156=6;
                }
                break;
            case 211:
                {
                alt156=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;
            }

            switch (alt156) {
                case 1 :
                    // RPIExprAST.g:668:9: close_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_close_statement_in_to_control_data6643);
                    close_statement783=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, close_statement783.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:669:9: commit_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_commit_statement_in_to_control_data6653);
                    commit_statement784=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, commit_statement784.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:670:9: fetch_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fetch_statement_in_to_control_data6663);
                    fetch_statement785=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fetch_statement785.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:671:9: lock_table_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_lock_table_statement_in_to_control_data6673);
                    lock_table_statement786=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_table_statement786.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:672:9: open_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_open_statement_in_to_control_data6683);
                    open_statement787=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, open_statement787.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:673:9: rollback_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollback_statement_in_to_control_data6693);
                    rollback_statement788=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollback_statement788.getTree());

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:674:9: savepoint_statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_savepoint_statement_in_to_control_data6703);
                    savepoint_statement789=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_statement789.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, to_control_data_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_control_data"

    public static class select_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_command"
    // RPIExprAST.g:677:1: select_command : select_statement ;
    public final RPIExprASTParser.select_command_return select_command() throws RecognitionException {
        RPIExprASTParser.select_command_return retval = new RPIExprASTParser.select_command_return();
        retval.start = input.LT(1);
        int select_command_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.select_statement_return select_statement790 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // RPIExprAST.g:678:5: ( select_statement )
            // RPIExprAST.g:678:9: select_statement
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_select_statement_in_select_command6722);
            select_statement790=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement790.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, select_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_command"

    public static class select_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // RPIExprAST.g:681:1: select_statement : select_expression ;
    public final RPIExprASTParser.select_statement_return select_statement() throws RecognitionException {
        RPIExprASTParser.select_statement_return retval = new RPIExprASTParser.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.select_expression_return select_expression791 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // RPIExprAST.g:682:5: ( select_expression )
            // RPIExprAST.g:683:9: select_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_select_expression_in_select_statement6750);
            select_expression791=select_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression791.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class select_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_expression"
    // RPIExprAST.g:686:1: select_expression : 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( table_reference_list | join_clause | LPAREN join_clause RPAREN ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )? ;
    public final RPIExprASTParser.select_expression_return select_expression() throws RecognitionException {
        RPIExprASTParser.select_expression_return retval = new RPIExprASTParser.select_expression_return();
        retval.start = input.LT(1);
        int select_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal792=null;
        Token set793=null;
        Token string_literal797=null;
        Token string_literal799=null;
        Token LPAREN802=null;
        Token RPAREN804=null;
        Token string_literal808=null;
        Token string_literal811=null;
        Token string_literal812=null;
        Token string_literal813=null;
        Token string_literal814=null;
        RPIExprASTParser.select_list_return select_list794 = null;

        RPIExprASTParser.keyBULK_return keyBULK795 = null;

        RPIExprASTParser.keyCOLLECT_return keyCOLLECT796 = null;

        RPIExprASTParser.lvalues_return lvalues798 = null;

        RPIExprASTParser.table_reference_list_return table_reference_list800 = null;

        RPIExprASTParser.join_clause_return join_clause801 = null;

        RPIExprASTParser.join_clause_return join_clause803 = null;

        RPIExprASTParser.where_clause_return where_clause805 = null;

        RPIExprASTParser.hierarchical_query_clause_return hierarchical_query_clause806 = null;

        RPIExprASTParser.group_by_clause_return group_by_clause807 = null;

        RPIExprASTParser.sql_condition_return sql_condition809 = null;

        RPIExprASTParser.model_clause_return model_clause810 = null;

        RPIExprASTParser.select_expression_return select_expression815 = null;

        RPIExprASTParser.subquery_return subquery816 = null;

        RPIExprASTParser.order_by_clause_return order_by_clause817 = null;


        Object string_literal792_tree=null;
        Object set793_tree=null;
        Object string_literal797_tree=null;
        Object string_literal799_tree=null;
        Object LPAREN802_tree=null;
        Object RPAREN804_tree=null;
        Object string_literal808_tree=null;
        Object string_literal811_tree=null;
        Object string_literal812_tree=null;
        Object string_literal813_tree=null;
        Object string_literal814_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // RPIExprAST.g:687:5: ( 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( table_reference_list | join_clause | LPAREN join_clause RPAREN ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )? )
            // RPIExprAST.g:688:9: 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( table_reference_list | join_clause | LPAREN join_clause RPAREN ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )? ( order_by_clause )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal792=(Token)match(input,174,FOLLOW_174_in_select_expression6779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal792_tree = (Object)adaptor.create(string_literal792);
            adaptor.addChild(root_0, string_literal792_tree);
            }
            // RPIExprAST.g:688:32: ( 'DISTINCT' | 'UNIQUE' | 'ALL' )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==175) ) {
                int LA157_1 = input.LA(2);

                if ( (!((( is_sql )))) ) {
                    alt157=1;
                }
            }
            else if ( ((LA157_0>=176 && LA157_0<=177)) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // RPIExprAST.g:
                    {
                    set793=(Token)input.LT(1);
                    if ( (input.LA(1)>=175 && input.LA(1)<=177) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set793));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_select_list_in_select_expression6798);
            select_list794=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list794.getTree());
            // RPIExprAST.g:689:9: ( keyBULK keyCOLLECT )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==ID) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // RPIExprAST.g:689:11: keyBULK keyCOLLECT
                    {
                    pushFollow(FOLLOW_keyBULK_in_select_expression6810);
                    keyBULK795=keyBULK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBULK795.getTree());
                    pushFollow(FOLLOW_keyCOLLECT_in_select_expression6812);
                    keyCOLLECT796=keyCOLLECT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOLLECT796.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:690:9: ( 'INTO' lvalues )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==178) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // RPIExprAST.g:690:11: 'INTO' lvalues
                    {
                    string_literal797=(Token)match(input,178,FOLLOW_178_in_select_expression6827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal797_tree = (Object)adaptor.create(string_literal797);
                    adaptor.addChild(root_0, string_literal797_tree);
                    }
                    pushFollow(FOLLOW_lvalues_in_select_expression6829);
                    lvalues798=lvalues();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalues798.getTree());

                    }
                    break;

            }

            string_literal799=(Token)match(input,179,FOLLOW_179_in_select_expression6842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal799_tree = (Object)adaptor.create(string_literal799);
            adaptor.addChild(root_0, string_literal799_tree);
            }
            // RPIExprAST.g:691:16: ( table_reference_list | join_clause | LPAREN join_clause RPAREN )
            int alt160=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA160_1 = input.LA(2);

                if ( ((synpred309_RPIExprAST()||(synpred309_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "THE"))))) ) {
                    alt160=1;
                }
                else if ( (synpred310_RPIExprAST()) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 1, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA160_2 = input.LA(2);

                if ( (synpred309_RPIExprAST()) ) {
                    alt160=1;
                }
                else if ( (synpred310_RPIExprAST()) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 2, input);

                    throw nvae;
                }
                }
                break;
            case 163:
                {
                alt160=1;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA160_4 = input.LA(2);

                if ( (synpred309_RPIExprAST()) ) {
                    alt160=1;
                }
                else if ( (synpred310_RPIExprAST()) ) {
                    alt160=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 4, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA160_5 = input.LA(2);

                if ( (LA160_5==ID||LA160_5==DOUBLEQUOTED_STRING||LA160_5==158) ) {
                    alt160=3;
                }
                else if ( (LA160_5==174) ) {
                    alt160=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 160, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // RPIExprAST.g:691:18: table_reference_list
                    {
                    pushFollow(FOLLOW_table_reference_list_in_select_expression6846);
                    table_reference_list800=table_reference_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list800.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:691:41: join_clause
                    {
                    pushFollow(FOLLOW_join_clause_in_select_expression6850);
                    join_clause801=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause801.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:691:55: LPAREN join_clause RPAREN
                    {
                    LPAREN802=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_select_expression6854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN802_tree = (Object)adaptor.create(LPAREN802);
                    adaptor.addChild(root_0, LPAREN802_tree);
                    }
                    pushFollow(FOLLOW_join_clause_in_select_expression6856);
                    join_clause803=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, join_clause803.getTree());
                    RPAREN804=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_select_expression6858); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN804_tree = (Object)adaptor.create(RPAREN804);
                    adaptor.addChild(root_0, RPAREN804_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:692:9: ( where_clause )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==185) ) {
                int LA161_1 = input.LA(2);

                if ( (synpred311_RPIExprAST()) ) {
                    alt161=1;
                }
            }
            switch (alt161) {
                case 1 :
                    // RPIExprAST.g:692:11: where_clause
                    {
                    pushFollow(FOLLOW_where_clause_in_select_expression6872);
                    where_clause805=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, where_clause805.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:692:27: ( hierarchical_query_clause )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==186) ) {
                int LA162_1 = input.LA(2);

                if ( (synpred312_RPIExprAST()) ) {
                    alt162=1;
                }
            }
            else if ( (LA162_0==187) ) {
                int LA162_2 = input.LA(2);

                if ( (synpred312_RPIExprAST()) ) {
                    alt162=1;
                }
            }
            switch (alt162) {
                case 1 :
                    // RPIExprAST.g:692:29: hierarchical_query_clause
                    {
                    pushFollow(FOLLOW_hierarchical_query_clause_in_select_expression6879);
                    hierarchical_query_clause806=hierarchical_query_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, hierarchical_query_clause806.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:692:58: ( group_by_clause )?
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==188) ) {
                int LA163_1 = input.LA(2);

                if ( (synpred313_RPIExprAST()) ) {
                    alt163=1;
                }
            }
            switch (alt163) {
                case 1 :
                    // RPIExprAST.g:692:60: group_by_clause
                    {
                    pushFollow(FOLLOW_group_by_clause_in_select_expression6886);
                    group_by_clause807=group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_clause807.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:693:9: ( 'HAVING' sql_condition )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==180) ) {
                int LA164_1 = input.LA(2);

                if ( (synpred314_RPIExprAST()) ) {
                    alt164=1;
                }
            }
            switch (alt164) {
                case 1 :
                    // RPIExprAST.g:693:11: 'HAVING' sql_condition
                    {
                    string_literal808=(Token)match(input,180,FOLLOW_180_in_select_expression6901); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal808_tree = (Object)adaptor.create(string_literal808);
                    adaptor.addChild(root_0, string_literal808_tree);
                    }
                    pushFollow(FOLLOW_sql_condition_in_select_expression6903);
                    sql_condition809=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition809.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:693:37: ( model_clause )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ID) ) {
                int LA165_1 = input.LA(2);

                if ( ((synpred315_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "MODEL")))) ) {
                    alt165=1;
                }
            }
            switch (alt165) {
                case 1 :
                    // RPIExprAST.g:693:39: model_clause
                    {
                    pushFollow(FOLLOW_model_clause_in_select_expression6910);
                    model_clause810=model_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_clause810.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:694:9: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )?
            int alt169=2;
            switch ( input.LA(1) ) {
                case 181:
                    {
                    int LA169_1 = input.LA(2);

                    if ( (synpred320_RPIExprAST()) ) {
                        alt169=1;
                    }
                    }
                    break;
                case 182:
                    {
                    int LA169_2 = input.LA(2);

                    if ( (synpred320_RPIExprAST()) ) {
                        alt169=1;
                    }
                    }
                    break;
                case 183:
                    {
                    int LA169_3 = input.LA(2);

                    if ( (synpred320_RPIExprAST()) ) {
                        alt169=1;
                    }
                    }
                    break;
            }

            switch (alt169) {
                case 1 :
                    // RPIExprAST.g:694:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
                    {
                    // RPIExprAST.g:694:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
                    int alt167=3;
                    switch ( input.LA(1) ) {
                    case 181:
                        {
                        alt167=1;
                        }
                        break;
                    case 182:
                        {
                        alt167=2;
                        }
                        break;
                    case 183:
                        {
                        alt167=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 167, 0, input);

                        throw nvae;
                    }

                    switch (alt167) {
                        case 1 :
                            // RPIExprAST.g:694:17: 'UNION' ( 'ALL' )?
                            {
                            string_literal811=(Token)match(input,181,FOLLOW_181_in_select_expression6931); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal811_tree = (Object)adaptor.create(string_literal811);
                            adaptor.addChild(root_0, string_literal811_tree);
                            }
                            // RPIExprAST.g:694:25: ( 'ALL' )?
                            int alt166=2;
                            int LA166_0 = input.LA(1);

                            if ( (LA166_0==177) ) {
                                alt166=1;
                            }
                            switch (alt166) {
                                case 1 :
                                    // RPIExprAST.g:694:27: 'ALL'
                                    {
                                    string_literal812=(Token)match(input,177,FOLLOW_177_in_select_expression6935); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal812_tree = (Object)adaptor.create(string_literal812);
                                    adaptor.addChild(root_0, string_literal812_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:695:17: 'INTERSECT'
                            {
                            string_literal813=(Token)match(input,182,FOLLOW_182_in_select_expression6956); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal813_tree = (Object)adaptor.create(string_literal813);
                            adaptor.addChild(root_0, string_literal813_tree);
                            }

                            }
                            break;
                        case 3 :
                            // RPIExprAST.g:696:17: 'MINUS'
                            {
                            string_literal814=(Token)match(input,183,FOLLOW_183_in_select_expression6974); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal814_tree = (Object)adaptor.create(string_literal814);
                            adaptor.addChild(root_0, string_literal814_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:698:13: ( select_expression | subquery )
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==174) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==LPAREN) ) {
                        alt168=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 0, input);

                        throw nvae;
                    }
                    switch (alt168) {
                        case 1 :
                            // RPIExprAST.g:698:17: select_expression
                            {
                            pushFollow(FOLLOW_select_expression_in_select_expression7006);
                            select_expression815=select_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression815.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:699:17: subquery
                            {
                            pushFollow(FOLLOW_subquery_in_select_expression7025);
                            subquery816=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery816.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // RPIExprAST.g:702:9: ( order_by_clause )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==191) ) {
                int LA170_1 = input.LA(2);

                if ( (synpred321_RPIExprAST()) ) {
                    alt170=1;
                }
            }
            switch (alt170) {
                case 1 :
                    // RPIExprAST.g:702:11: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_select_expression7062);
                    order_by_clause817=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause817.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, select_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_expression"

    public static class select_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_list"
    // RPIExprAST.g:705:1: select_list : ( ASTERISK | displayed_column ( COMMA displayed_column )* );
    public final RPIExprASTParser.select_list_return select_list() throws RecognitionException {
        RPIExprASTParser.select_list_return retval = new RPIExprASTParser.select_list_return();
        retval.start = input.LT(1);
        int select_list_StartIndex = input.index();
        Object root_0 = null;

        Token ASTERISK818=null;
        Token COMMA820=null;
        RPIExprASTParser.displayed_column_return displayed_column819 = null;

        RPIExprASTParser.displayed_column_return displayed_column821 = null;


        Object ASTERISK818_tree=null;
        Object COMMA820_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // RPIExprAST.g:706:5: ( ASTERISK | displayed_column ( COMMA displayed_column )* )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==ASTERISK) ) {
                alt172=1;
            }
            else if ( ((LA172_0>=ID && LA172_0<=LPAREN)||(LA172_0>=SQL && LA172_0<=MINUS)||LA172_0==NUMBER||LA172_0==QUOTED_STRING||LA172_0==DOUBLEQUOTED_STRING||LA172_0==116||LA172_0==158||(LA172_0>=168 && LA172_0<=169)||(LA172_0>=174 && LA172_0<=175)||LA172_0==198) ) {
                alt172=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // RPIExprAST.g:706:9: ASTERISK
                    {
                    root_0 = (Object)adaptor.nil();

                    ASTERISK818=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list7084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK818_tree = (Object)adaptor.create(ASTERISK818);
                    adaptor.addChild(root_0, ASTERISK818_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:707:9: displayed_column ( COMMA displayed_column )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_displayed_column_in_select_list7094);
                    displayed_column819=displayed_column();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column819.getTree());
                    // RPIExprAST.g:707:26: ( COMMA displayed_column )*
                    loop171:
                    do {
                        int alt171=2;
                        int LA171_0 = input.LA(1);

                        if ( (LA171_0==COMMA) ) {
                            alt171=1;
                        }


                        switch (alt171) {
                    	case 1 :
                    	    // RPIExprAST.g:707:28: COMMA displayed_column
                    	    {
                    	    COMMA820=(Token)match(input,COMMA,FOLLOW_COMMA_in_select_list7098); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA820_tree = (Object)adaptor.create(COMMA820);
                    	    adaptor.addChild(root_0, COMMA820_tree);
                    	    }
                    	    pushFollow(FOLLOW_displayed_column_in_select_list7100);
                    	    displayed_column821=displayed_column();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, displayed_column821.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop171;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, select_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_list"

    public static class table_reference_list_from_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_reference_list_from"
    // RPIExprAST.g:710:1: table_reference_list_from : 'FROM' table_reference_list ;
    public final RPIExprASTParser.table_reference_list_from_return table_reference_list_from() throws RecognitionException {
        RPIExprASTParser.table_reference_list_from_return retval = new RPIExprASTParser.table_reference_list_from_return();
        retval.start = input.LT(1);
        int table_reference_list_from_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal822=null;
        RPIExprASTParser.table_reference_list_return table_reference_list823 = null;


        Object string_literal822_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // RPIExprAST.g:711:5: ( 'FROM' table_reference_list )
            // RPIExprAST.g:711:9: 'FROM' table_reference_list
            {
            root_0 = (Object)adaptor.nil();

            string_literal822=(Token)match(input,179,FOLLOW_179_in_table_reference_list_from7122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal822_tree = (Object)adaptor.create(string_literal822);
            adaptor.addChild(root_0, string_literal822_tree);
            }
            pushFollow(FOLLOW_table_reference_list_in_table_reference_list_from7124);
            table_reference_list823=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list823.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, table_reference_list_from_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_reference_list_from"

    public static class table_reference_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_reference_list"
    // RPIExprAST.g:714:1: table_reference_list : selected_table ( COMMA selected_table )* ;
    public final RPIExprASTParser.table_reference_list_return table_reference_list() throws RecognitionException {
        RPIExprASTParser.table_reference_list_return retval = new RPIExprASTParser.table_reference_list_return();
        retval.start = input.LT(1);
        int table_reference_list_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA825=null;
        RPIExprASTParser.selected_table_return selected_table824 = null;

        RPIExprASTParser.selected_table_return selected_table826 = null;


        Object COMMA825_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // RPIExprAST.g:715:5: ( selected_table ( COMMA selected_table )* )
            // RPIExprAST.g:715:9: selected_table ( COMMA selected_table )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_selected_table_in_table_reference_list7143);
            selected_table824=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table824.getTree());
            // RPIExprAST.g:715:24: ( COMMA selected_table )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==COMMA) ) {
                    int LA173_34 = input.LA(2);

                    if ( (synpred324_RPIExprAST()) ) {
                        alt173=1;
                    }


                }


                switch (alt173) {
            	case 1 :
            	    // RPIExprAST.g:715:26: COMMA selected_table
            	    {
            	    COMMA825=(Token)match(input,COMMA,FOLLOW_COMMA_in_table_reference_list7147); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA825_tree = (Object)adaptor.create(COMMA825);
            	    adaptor.addChild(root_0, COMMA825_tree);
            	    }
            	    pushFollow(FOLLOW_selected_table_in_table_reference_list7149);
            	    selected_table826=selected_table();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table826.getTree());

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, table_reference_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_reference_list"

    public static class join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_clause"
    // RPIExprAST.g:718:1: join_clause : table_name ( inner_cross_join_clause | outer_join_clause )+ ;
    public final RPIExprASTParser.join_clause_return join_clause() throws RecognitionException {
        RPIExprASTParser.join_clause_return retval = new RPIExprASTParser.join_clause_return();
        retval.start = input.LT(1);
        int join_clause_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.table_name_return table_name827 = null;

        RPIExprASTParser.inner_cross_join_clause_return inner_cross_join_clause828 = null;

        RPIExprASTParser.outer_join_clause_return outer_join_clause829 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // RPIExprAST.g:719:5: ( table_name ( inner_cross_join_clause | outer_join_clause )+ )
            // RPIExprAST.g:719:9: table_name ( inner_cross_join_clause | outer_join_clause )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_table_name_in_join_clause7171);
            table_name827=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name827.getTree());
            // RPIExprAST.g:719:20: ( inner_cross_join_clause | outer_join_clause )+
            int cnt174=0;
            loop174:
            do {
                int alt174=3;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==ID) ) {
                    int LA174_2 = input.LA(2);

                    if ( (((synpred325_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL")))||(synpred325_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "JOIN")))||(synpred325_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INNER")))||(synpred325_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CROSS"))))) ) {
                        alt174=1;
                    }
                    else if ( (((synpred326_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred326_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred326_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred326_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL")))||(synpred326_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION"))))) ) {
                        alt174=2;
                    }


                }


                switch (alt174) {
            	case 1 :
            	    // RPIExprAST.g:719:22: inner_cross_join_clause
            	    {
            	    pushFollow(FOLLOW_inner_cross_join_clause_in_join_clause7175);
            	    inner_cross_join_clause828=inner_cross_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, inner_cross_join_clause828.getTree());

            	    }
            	    break;
            	case 2 :
            	    // RPIExprAST.g:719:48: outer_join_clause
            	    {
            	    pushFollow(FOLLOW_outer_join_clause_in_join_clause7179);
            	    outer_join_clause829=outer_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_clause829.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt174 >= 1 ) break loop174;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(174, input);
                        throw eee;
                }
                cnt174++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_clause"

    public static class inner_cross_join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inner_cross_join_clause"
    // RPIExprAST.g:721:1: inner_cross_join_clause : ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name );
    public final RPIExprASTParser.inner_cross_join_clause_return inner_cross_join_clause() throws RecognitionException {
        RPIExprASTParser.inner_cross_join_clause_return retval = new RPIExprASTParser.inner_cross_join_clause_return();
        retval.start = input.LT(1);
        int inner_cross_join_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal833=null;
        Token LPAREN836=null;
        Token RPAREN838=null;
        RPIExprASTParser.keyINNER_return keyINNER830 = null;

        RPIExprASTParser.keyJOIN_return keyJOIN831 = null;

        RPIExprASTParser.table_name_return table_name832 = null;

        RPIExprASTParser.sql_condition_return sql_condition834 = null;

        RPIExprASTParser.keyUSING_return keyUSING835 = null;

        RPIExprASTParser.column_specs_return column_specs837 = null;

        RPIExprASTParser.keyCROSS_return keyCROSS839 = null;

        RPIExprASTParser.keyNATURAL_return keyNATURAL840 = null;

        RPIExprASTParser.keyINNER_return keyINNER841 = null;

        RPIExprASTParser.keyJOIN_return keyJOIN842 = null;

        RPIExprASTParser.table_name_return table_name843 = null;


        Object string_literal833_tree=null;
        Object LPAREN836_tree=null;
        Object RPAREN838_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // RPIExprAST.g:722:5: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name )
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ID) ) {
                int LA178_1 = input.LA(2);

                if ( (((synpred329_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "JOIN")))||(synpred329_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INNER"))))) ) {
                    alt178=1;
                }
                else if ( (((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))||(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                    alt178=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 178, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }
            switch (alt178) {
                case 1 :
                    // RPIExprAST.g:722:9: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:722:9: ( keyINNER )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==ID) ) {
                        int LA175_1 = input.LA(2);

                        if ( (LA175_1==ID) ) {
                            int LA175_2 = input.LA(3);

                            if ( (LA175_2==ID) ) {
                                int LA175_4 = input.LA(4);

                                if ( (LA175_4==ID||LA175_4==184) ) {
                                    alt175=1;
                                }
                            }
                            else if ( (LA175_2==DOUBLEQUOTED_STRING||LA175_2==158) ) {
                                alt175=1;
                            }
                        }
                    }
                    switch (alt175) {
                        case 1 :
                            // RPIExprAST.g:722:11: keyINNER
                            {
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause7202);
                            keyINNER830=keyINNER();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINNER830.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause7207);
                    keyJOIN831=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN831.getTree());
                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause7209);
                    table_name832=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name832.getTree());
                    // RPIExprAST.g:722:42: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==184) ) {
                        alt176=1;
                    }
                    else if ( (LA176_0==ID) ) {
                        alt176=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 176, 0, input);

                        throw nvae;
                    }
                    switch (alt176) {
                        case 1 :
                            // RPIExprAST.g:722:44: 'ON' sql_condition
                            {
                            string_literal833=(Token)match(input,184,FOLLOW_184_in_inner_cross_join_clause7213); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal833_tree = (Object)adaptor.create(string_literal833);
                            adaptor.addChild(root_0, string_literal833_tree);
                            }
                            pushFollow(FOLLOW_sql_condition_in_inner_cross_join_clause7215);
                            sql_condition834=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition834.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:722:65: keyUSING LPAREN column_specs RPAREN
                            {
                            pushFollow(FOLLOW_keyUSING_in_inner_cross_join_clause7219);
                            keyUSING835=keyUSING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUSING835.getTree());
                            LPAREN836=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_inner_cross_join_clause7221); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN836_tree = (Object)adaptor.create(LPAREN836);
                            adaptor.addChild(root_0, LPAREN836_tree);
                            }
                            pushFollow(FOLLOW_column_specs_in_inner_cross_join_clause7223);
                            column_specs837=column_specs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs837.getTree());
                            RPAREN838=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_inner_cross_join_clause7225); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN838_tree = (Object)adaptor.create(RPAREN838);
                            adaptor.addChild(root_0, RPAREN838_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:723:9: ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:723:9: ( keyCROSS | keyNATURAL ( keyINNER ) )
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==ID) ) {
                        int LA177_1 = input.LA(2);

                        if ( (LA177_1==ID) ) {
                            int LA177_2 = input.LA(3);

                            if ( (LA177_2==ID) ) {
                                switch ( input.LA(4) ) {
                                case ID:
                                    {
                                    int LA177_5 = input.LA(5);

                                    if ( ((synpred330_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                                        alt177=1;
                                    }
                                    else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                                        alt177=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 177, 5, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case 158:
                                    {
                                    int LA177_6 = input.LA(5);

                                    if ( ((synpred330_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                                        alt177=1;
                                    }
                                    else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                                        alt177=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 177, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case EOF:
                                case LPAREN:
                                case RPAREN:
                                case EQ:
                                case SEMICOLON:
                                case COMMA:
                                case SQL:
                                case PLUS:
                                case MINUS:
                                case ASTERISK:
                                case DIV:
                                case NUMBER:
                                case RBRACK:
                                case AND:
                                case OR:
                                case NOT:
                                case BOOLOP_LT:
                                case BOOLOP_GT:
                                case BOOLOP_GE:
                                case BOOLOP_LE:
                                case DOUBLEDOT:
                                case QUOTED_STRING:
                                case FOUND_ATTR:
                                case NOTFOUND_ATTR:
                                case ISOPEN_ATTR:
                                case ROWCOUNT_ATTR:
                                case BULK_ROWCOUNT_ATTR:
                                case DOUBLEVERTBAR:
                                case EXPONENT:
                                case NOT_EQ:
                                case 111:
                                case 112:
                                case 113:
                                case 116:
                                case 121:
                                case 160:
                                case 167:
                                case 168:
                                case 169:
                                case 173:
                                case 174:
                                case 175:
                                case 178:
                                case 179:
                                case 180:
                                case 181:
                                case 182:
                                case 183:
                                case 184:
                                case 185:
                                case 186:
                                case 187:
                                case 188:
                                case 191:
                                case 192:
                                case 193:
                                case 194:
                                case 196:
                                case 197:
                                case 198:
                                case 199:
                                case 200:
                                case 202:
                                case 214:
                                case 220:
                                case 221:
                                    {
                                    alt177=1;
                                    }
                                    break;
                                case DOUBLEQUOTED_STRING:
                                    {
                                    int LA177_7 = input.LA(5);

                                    if ( ((synpred330_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                                        alt177=1;
                                    }
                                    else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                                        alt177=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 177, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 177, 3, input);

                                    throw nvae;
                                }

                            }
                            else if ( (LA177_2==DOUBLEQUOTED_STRING||LA177_2==158) ) {
                                alt177=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 177, 2, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 177, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 177, 0, input);

                        throw nvae;
                    }
                    switch (alt177) {
                        case 1 :
                            // RPIExprAST.g:723:11: keyCROSS
                            {
                            pushFollow(FOLLOW_keyCROSS_in_inner_cross_join_clause7239);
                            keyCROSS839=keyCROSS();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCROSS839.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:723:22: keyNATURAL ( keyINNER )
                            {
                            pushFollow(FOLLOW_keyNATURAL_in_inner_cross_join_clause7243);
                            keyNATURAL840=keyNATURAL();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNATURAL840.getTree());
                            // RPIExprAST.g:723:33: ( keyINNER )
                            // RPIExprAST.g:723:35: keyINNER
                            {
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause7247);
                            keyINNER841=keyINNER();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINNER841.getTree());

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause7253);
                    keyJOIN842=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN842.getTree());
                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause7255);
                    table_name843=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name843.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, inner_cross_join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inner_cross_join_clause"

    public static class outer_join_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_clause"
    // RPIExprAST.g:725:1: outer_join_clause : ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) table_name ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? ;
    public final RPIExprASTParser.outer_join_clause_return outer_join_clause() throws RecognitionException {
        RPIExprASTParser.outer_join_clause_return retval = new RPIExprASTParser.outer_join_clause_return();
        retval.start = input.LT(1);
        int outer_join_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal852=null;
        Token LPAREN855=null;
        Token RPAREN857=null;
        RPIExprASTParser.query_partition_clause_return query_partition_clause844 = null;

        RPIExprASTParser.outer_join_type_return outer_join_type845 = null;

        RPIExprASTParser.keyJOIN_return keyJOIN846 = null;

        RPIExprASTParser.keyNATURAL_return keyNATURAL847 = null;

        RPIExprASTParser.outer_join_type_return outer_join_type848 = null;

        RPIExprASTParser.keyJOIN_return keyJOIN849 = null;

        RPIExprASTParser.table_name_return table_name850 = null;

        RPIExprASTParser.query_partition_clause_return query_partition_clause851 = null;

        RPIExprASTParser.sql_condition_return sql_condition853 = null;

        RPIExprASTParser.keyUSING_return keyUSING854 = null;

        RPIExprASTParser.column_specs_return column_specs856 = null;


        Object string_literal852_tree=null;
        Object LPAREN855_tree=null;
        Object RPAREN857_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // RPIExprAST.g:726:5: ( ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) table_name ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? )
            // RPIExprAST.g:726:9: ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) table_name ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:726:9: ( query_partition_clause )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==ID) ) {
                int LA179_1 = input.LA(2);

                if ( (LA179_1==166) ) {
                    alt179=1;
                }
            }
            switch (alt179) {
                case 1 :
                    // RPIExprAST.g:726:11: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause7275);
                    query_partition_clause844=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause844.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:727:9: ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN )
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==ID) ) {
                int LA181_1 = input.LA(2);

                if ( (LA181_1==ID) ) {
                    int LA181_2 = input.LA(3);

                    if ( (((synpred332_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred332_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred332_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL"))))) ) {
                        alt181=1;
                    }
                    else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                        alt181=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 181, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }
            switch (alt181) {
                case 1 :
                    // RPIExprAST.g:727:13: outer_join_type keyJOIN
                    {
                    pushFollow(FOLLOW_outer_join_type_in_outer_join_clause7292);
                    outer_join_type845=outer_join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type845.getTree());
                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause7294);
                    keyJOIN846=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN846.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:728:13: keyNATURAL ( outer_join_type )? keyJOIN
                    {
                    pushFollow(FOLLOW_keyNATURAL_in_outer_join_clause7308);
                    keyNATURAL847=keyNATURAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNATURAL847.getTree());
                    // RPIExprAST.g:728:24: ( outer_join_type )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==ID) ) {
                        int LA180_1 = input.LA(2);

                        if ( (LA180_1==ID) ) {
                            switch ( input.LA(3) ) {
                                case ID:
                                    {
                                    int LA180_4 = input.LA(4);

                                    if ( (((synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT"))))) ) {
                                        alt180=1;
                                    }
                                    }
                                    break;
                                case DOUBLEQUOTED_STRING:
                                    {
                                    int LA180_5 = input.LA(4);

                                    if ( (((synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT"))))) ) {
                                        alt180=1;
                                    }
                                    }
                                    break;
                                case 158:
                                    {
                                    int LA180_6 = input.LA(4);

                                    if ( (((synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred333_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT"))))) ) {
                                        alt180=1;
                                    }
                                    }
                                    break;
                            }

                        }
                    }
                    switch (alt180) {
                        case 1 :
                            // RPIExprAST.g:728:26: outer_join_type
                            {
                            pushFollow(FOLLOW_outer_join_type_in_outer_join_clause7312);
                            outer_join_type848=outer_join_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_type848.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause7317);
                    keyJOIN849=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyJOIN849.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_outer_join_clause7337);
            table_name850=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name850.getTree());
            // RPIExprAST.g:730:20: ( query_partition_clause )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==ID) ) {
                int LA182_1 = input.LA(2);

                if ( ((synpred334_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION")))) ) {
                    alt182=1;
                }
            }
            switch (alt182) {
                case 1 :
                    // RPIExprAST.g:730:22: query_partition_clause
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause7341);
                    query_partition_clause851=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause851.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:731:9: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            int alt183=3;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==184) ) {
                int LA183_1 = input.LA(2);

                if ( (synpred335_RPIExprAST()) ) {
                    alt183=1;
                }
            }
            else if ( (LA183_0==ID) ) {
                int LA183_2 = input.LA(2);

                if ( ((synpred336_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "USING")))) ) {
                    alt183=2;
                }
            }
            switch (alt183) {
                case 1 :
                    // RPIExprAST.g:731:11: 'ON' sql_condition
                    {
                    string_literal852=(Token)match(input,184,FOLLOW_184_in_outer_join_clause7356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal852_tree = (Object)adaptor.create(string_literal852);
                    adaptor.addChild(root_0, string_literal852_tree);
                    }
                    pushFollow(FOLLOW_sql_condition_in_outer_join_clause7358);
                    sql_condition853=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition853.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:731:32: keyUSING LPAREN column_specs RPAREN
                    {
                    pushFollow(FOLLOW_keyUSING_in_outer_join_clause7362);
                    keyUSING854=keyUSING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUSING854.getTree());
                    LPAREN855=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_clause7364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN855_tree = (Object)adaptor.create(LPAREN855);
                    adaptor.addChild(root_0, LPAREN855_tree);
                    }
                    pushFollow(FOLLOW_column_specs_in_outer_join_clause7366);
                    column_specs856=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs856.getTree());
                    RPAREN857=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_clause7368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN857_tree = (Object)adaptor.create(RPAREN857);
                    adaptor.addChild(root_0, RPAREN857_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, outer_join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_clause"

    public static class query_partition_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_partition_clause"
    // RPIExprAST.g:733:1: query_partition_clause : keyPARTITION 'BY' expression_list ;
    public final RPIExprASTParser.query_partition_clause_return query_partition_clause() throws RecognitionException {
        RPIExprASTParser.query_partition_clause_return retval = new RPIExprASTParser.query_partition_clause_return();
        retval.start = input.LT(1);
        int query_partition_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal859=null;
        RPIExprASTParser.keyPARTITION_return keyPARTITION858 = null;

        RPIExprASTParser.expression_list_return expression_list860 = null;


        Object string_literal859_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // RPIExprAST.g:734:5: ( keyPARTITION 'BY' expression_list )
            // RPIExprAST.g:734:9: keyPARTITION 'BY' expression_list
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyPARTITION_in_query_partition_clause7389);
            keyPARTITION858=keyPARTITION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPARTITION858.getTree());
            string_literal859=(Token)match(input,166,FOLLOW_166_in_query_partition_clause7391); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal859_tree = (Object)adaptor.create(string_literal859);
            adaptor.addChild(root_0, string_literal859_tree);
            }
            pushFollow(FOLLOW_expression_list_in_query_partition_clause7393);
            expression_list860=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list860.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, query_partition_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_partition_clause"

    public static class outer_join_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_type"
    // RPIExprAST.g:736:1: outer_join_type : ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? ;
    public final RPIExprASTParser.outer_join_type_return outer_join_type() throws RecognitionException {
        RPIExprASTParser.outer_join_type_return retval = new RPIExprASTParser.outer_join_type_return();
        retval.start = input.LT(1);
        int outer_join_type_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyFULL_return keyFULL861 = null;

        RPIExprASTParser.keyLEFT_return keyLEFT862 = null;

        RPIExprASTParser.keyRIGHT_return keyRIGHT863 = null;

        RPIExprASTParser.keyOUTER_return keyOUTER864 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // RPIExprAST.g:737:5: ( ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? )
            // RPIExprAST.g:737:9: ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:737:9: ( keyFULL | keyLEFT | keyRIGHT )
            int alt184=3;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID) ) {
                int LA184_1 = input.LA(2);

                if ( ((synpred337_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))) ) {
                    alt184=1;
                }
                else if ( ((synpred338_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))) ) {
                    alt184=2;
                }
                else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))) ) {
                    alt184=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 184, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // RPIExprAST.g:737:11: keyFULL
                    {
                    pushFollow(FOLLOW_keyFULL_in_outer_join_type7413);
                    keyFULL861=keyFULL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFULL861.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:737:21: keyLEFT
                    {
                    pushFollow(FOLLOW_keyLEFT_in_outer_join_type7417);
                    keyLEFT862=keyLEFT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLEFT862.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:737:31: keyRIGHT
                    {
                    pushFollow(FOLLOW_keyRIGHT_in_outer_join_type7421);
                    keyRIGHT863=keyRIGHT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRIGHT863.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:737:42: ( keyOUTER )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==ID) ) {
                int LA185_1 = input.LA(2);

                if ( (LA185_1==ID) ) {
                    switch ( input.LA(3) ) {
                        case EOF:
                            {
                            alt185=1;
                            }
                            break;
                        case ID:
                            {
                            int LA185_6 = input.LA(4);

                            if ( ((synpred339_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OUTER")))) ) {
                                alt185=1;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            int LA185_7 = input.LA(4);

                            if ( ((synpred339_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OUTER")))) ) {
                                alt185=1;
                            }
                            }
                            break;
                        case 158:
                            {
                            int LA185_8 = input.LA(4);

                            if ( ((synpred339_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OUTER")))) ) {
                                alt185=1;
                            }
                            }
                            break;
                    }

                }
                else if ( (LA185_1==EOF) ) {
                    alt185=1;
                }
            }
            switch (alt185) {
                case 1 :
                    // RPIExprAST.g:737:44: keyOUTER
                    {
                    pushFollow(FOLLOW_keyOUTER_in_outer_join_type7427);
                    keyOUTER864=keyOUTER();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOUTER864.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, outer_join_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_type"

    public static class outer_join_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_sign"
    // RPIExprAST.g:739:1: outer_join_sign : LPAREN PLUS RPAREN ;
    public final RPIExprASTParser.outer_join_sign_return outer_join_sign() throws RecognitionException {
        RPIExprASTParser.outer_join_sign_return retval = new RPIExprASTParser.outer_join_sign_return();
        retval.start = input.LT(1);
        int outer_join_sign_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN865=null;
        Token PLUS866=null;
        Token RPAREN867=null;

        Object LPAREN865_tree=null;
        Object PLUS866_tree=null;
        Object RPAREN867_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // RPIExprAST.g:740:5: ( LPAREN PLUS RPAREN )
            // RPIExprAST.g:740:9: LPAREN PLUS RPAREN
            {
            root_0 = (Object)adaptor.nil();

            LPAREN865=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_sign7448); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN865_tree = (Object)adaptor.create(LPAREN865);
            adaptor.addChild(root_0, LPAREN865_tree);
            }
            PLUS866=(Token)match(input,PLUS,FOLLOW_PLUS_in_outer_join_sign7450); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLUS866_tree = (Object)adaptor.create(PLUS866);
            adaptor.addChild(root_0, PLUS866_tree);
            }
            RPAREN867=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_sign7452); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN867_tree = (Object)adaptor.create(RPAREN867);
            adaptor.addChild(root_0, RPAREN867_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, outer_join_sign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_sign"

    public static class where_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_clause"
    // RPIExprAST.g:742:1: where_clause : 'WHERE' sql_condition ;
    public final RPIExprASTParser.where_clause_return where_clause() throws RecognitionException {
        RPIExprASTParser.where_clause_return retval = new RPIExprASTParser.where_clause_return();
        retval.start = input.LT(1);
        int where_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal868=null;
        RPIExprASTParser.sql_condition_return sql_condition869 = null;


        Object string_literal868_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // RPIExprAST.g:743:5: ( 'WHERE' sql_condition )
            // RPIExprAST.g:743:9: 'WHERE' sql_condition
            {
            root_0 = (Object)adaptor.nil();

            string_literal868=(Token)match(input,185,FOLLOW_185_in_where_clause7470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal868_tree = (Object)adaptor.create(string_literal868);
            adaptor.addChild(root_0, string_literal868_tree);
            }
            pushFollow(FOLLOW_sql_condition_in_where_clause7472);
            sql_condition869=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition869.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, where_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class hierarchical_query_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hierarchical_query_clause"
    // RPIExprAST.g:745:1: hierarchical_query_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition ;
    public final RPIExprASTParser.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
        RPIExprASTParser.hierarchical_query_clause_return retval = new RPIExprASTParser.hierarchical_query_clause_return();
        retval.start = input.LT(1);
        int hierarchical_query_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal870=null;
        Token string_literal871=null;
        Token string_literal873=null;
        Token string_literal874=null;
        RPIExprASTParser.sql_condition_return sql_condition872 = null;

        RPIExprASTParser.keyNOCYCLE_return keyNOCYCLE875 = null;

        RPIExprASTParser.sql_condition_return sql_condition876 = null;


        Object string_literal870_tree=null;
        Object string_literal871_tree=null;
        Object string_literal873_tree=null;
        Object string_literal874_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // RPIExprAST.g:746:5: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition )
            // RPIExprAST.g:746:9: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:746:9: ( 'START' 'WITH' sql_condition )?
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==186) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    // RPIExprAST.g:746:11: 'START' 'WITH' sql_condition
                    {
                    string_literal870=(Token)match(input,186,FOLLOW_186_in_hierarchical_query_clause7492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal870_tree = (Object)adaptor.create(string_literal870);
                    adaptor.addChild(root_0, string_literal870_tree);
                    }
                    string_literal871=(Token)match(input,136,FOLLOW_136_in_hierarchical_query_clause7494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal871_tree = (Object)adaptor.create(string_literal871);
                    adaptor.addChild(root_0, string_literal871_tree);
                    }
                    pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause7496);
                    sql_condition872=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition872.getTree());

                    }
                    break;

            }

            string_literal873=(Token)match(input,187,FOLLOW_187_in_hierarchical_query_clause7501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal873_tree = (Object)adaptor.create(string_literal873);
            adaptor.addChild(root_0, string_literal873_tree);
            }
            string_literal874=(Token)match(input,166,FOLLOW_166_in_hierarchical_query_clause7503); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal874_tree = (Object)adaptor.create(string_literal874);
            adaptor.addChild(root_0, string_literal874_tree);
            }
            // RPIExprAST.g:746:58: ( keyNOCYCLE )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ID) ) {
                int LA187_1 = input.LA(2);

                if ( ((synpred341_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NOCYCLE")))) ) {
                    alt187=1;
                }
            }
            switch (alt187) {
                case 1 :
                    // RPIExprAST.g:746:60: keyNOCYCLE
                    {
                    pushFollow(FOLLOW_keyNOCYCLE_in_hierarchical_query_clause7507);
                    keyNOCYCLE875=keyNOCYCLE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNOCYCLE875.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause7512);
            sql_condition876=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition876.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, hierarchical_query_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hierarchical_query_clause"

    public static class group_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_clause"
    // RPIExprAST.g:748:1: group_by_clause : 'GROUP' 'BY' group_by_exprs ;
    public final RPIExprASTParser.group_by_clause_return group_by_clause() throws RecognitionException {
        RPIExprASTParser.group_by_clause_return retval = new RPIExprASTParser.group_by_clause_return();
        retval.start = input.LT(1);
        int group_by_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal877=null;
        Token string_literal878=null;
        RPIExprASTParser.group_by_exprs_return group_by_exprs879 = null;


        Object string_literal877_tree=null;
        Object string_literal878_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // RPIExprAST.g:749:5: ( 'GROUP' 'BY' group_by_exprs )
            // RPIExprAST.g:749:9: 'GROUP' 'BY' group_by_exprs
            {
            root_0 = (Object)adaptor.nil();

            string_literal877=(Token)match(input,188,FOLLOW_188_in_group_by_clause7530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal877_tree = (Object)adaptor.create(string_literal877);
            adaptor.addChild(root_0, string_literal877_tree);
            }
            string_literal878=(Token)match(input,166,FOLLOW_166_in_group_by_clause7532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal878_tree = (Object)adaptor.create(string_literal878);
            adaptor.addChild(root_0, string_literal878_tree);
            }
            pushFollow(FOLLOW_group_by_exprs_in_group_by_clause7534);
            group_by_exprs879=group_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_exprs879.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, group_by_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_clause"

    public static class group_by_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_exprs"
    // RPIExprAST.g:751:1: group_by_exprs : group_by_expr ( COMMA group_by_expr )* ;
    public final RPIExprASTParser.group_by_exprs_return group_by_exprs() throws RecognitionException {
        RPIExprASTParser.group_by_exprs_return retval = new RPIExprASTParser.group_by_exprs_return();
        retval.start = input.LT(1);
        int group_by_exprs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA881=null;
        RPIExprASTParser.group_by_expr_return group_by_expr880 = null;

        RPIExprASTParser.group_by_expr_return group_by_expr882 = null;


        Object COMMA881_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // RPIExprAST.g:752:5: ( group_by_expr ( COMMA group_by_expr )* )
            // RPIExprAST.g:752:9: group_by_expr ( COMMA group_by_expr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_group_by_expr_in_group_by_exprs7552);
            group_by_expr880=group_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_expr880.getTree());
            // RPIExprAST.g:752:23: ( COMMA group_by_expr )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==COMMA) ) {
                    int LA188_2 = input.LA(2);

                    if ( (synpred342_RPIExprAST()) ) {
                        alt188=1;
                    }


                }


                switch (alt188) {
            	case 1 :
            	    // RPIExprAST.g:752:25: COMMA group_by_expr
            	    {
            	    COMMA881=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_by_exprs7556); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA881_tree = (Object)adaptor.create(COMMA881);
            	    adaptor.addChild(root_0, COMMA881_tree);
            	    }
            	    pushFollow(FOLLOW_group_by_expr_in_group_by_exprs7558);
            	    group_by_expr882=group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, group_by_expr882.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, group_by_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_exprs"

    public static class group_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_expr"
    // RPIExprAST.g:754:1: group_by_expr : ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list );
    public final RPIExprASTParser.group_by_expr_return group_by_expr() throws RecognitionException {
        RPIExprASTParser.group_by_expr_return retval = new RPIExprASTParser.group_by_expr_return();
        retval.start = input.LT(1);
        int group_by_expr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.rollup_cube_clause_return rollup_cube_clause883 = null;

        RPIExprASTParser.grouping_sets_clause_return grouping_sets_clause884 = null;

        RPIExprASTParser.grouping_expression_list_return grouping_expression_list885 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // RPIExprAST.g:755:5: ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list )
            int alt189=3;
            int LA189_0 = input.LA(1);

            if ( (LA189_0==ID) ) {
                int LA189_1 = input.LA(2);

                if ( (((synpred343_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP")))||(synpred343_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CUBE"))))) ) {
                    alt189=1;
                }
                else if ( ((synpred344_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "GROUPING")))) ) {
                    alt189=2;
                }
                else if ( (true) ) {
                    alt189=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 189, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA189_0==LPAREN||(LA189_0>=SQL && LA189_0<=MINUS)||LA189_0==NUMBER||LA189_0==QUOTED_STRING||LA189_0==DOUBLEQUOTED_STRING||LA189_0==116||LA189_0==158||(LA189_0>=168 && LA189_0<=169)||(LA189_0>=174 && LA189_0<=175)||LA189_0==198) ) {
                alt189=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 189, 0, input);

                throw nvae;
            }
            switch (alt189) {
                case 1 :
                    // RPIExprAST.g:755:9: rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_expr7579);
                    rollup_cube_clause883=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause883.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:756:9: grouping_sets_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_expr7589);
                    grouping_sets_clause884=grouping_sets_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_clause884.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:757:9: grouping_expression_list
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_grouping_expression_list_in_group_by_expr7599);
                    grouping_expression_list885=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list885.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, group_by_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_expr"

    public static class rollup_cube_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollup_cube_clause"
    // RPIExprAST.g:759:1: rollup_cube_clause : ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN ;
    public final RPIExprASTParser.rollup_cube_clause_return rollup_cube_clause() throws RecognitionException {
        RPIExprASTParser.rollup_cube_clause_return retval = new RPIExprASTParser.rollup_cube_clause_return();
        retval.start = input.LT(1);
        int rollup_cube_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN888=null;
        Token RPAREN890=null;
        RPIExprASTParser.keyROLLUP_return keyROLLUP886 = null;

        RPIExprASTParser.keyCUBE_return keyCUBE887 = null;

        RPIExprASTParser.grouping_expression_list_return grouping_expression_list889 = null;


        Object LPAREN888_tree=null;
        Object RPAREN890_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // RPIExprAST.g:760:5: ( ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN )
            // RPIExprAST.g:760:9: ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:760:9: ( keyROLLUP | keyCUBE )
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==ID) ) {
                int LA190_1 = input.LA(2);

                if ( ((synpred345_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP")))) ) {
                    alt190=1;
                }
                else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CUBE"))) ) {
                    alt190=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 190, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 190, 0, input);

                throw nvae;
            }
            switch (alt190) {
                case 1 :
                    // RPIExprAST.g:760:11: keyROLLUP
                    {
                    pushFollow(FOLLOW_keyROLLUP_in_rollup_cube_clause7619);
                    keyROLLUP886=keyROLLUP();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyROLLUP886.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:760:23: keyCUBE
                    {
                    pushFollow(FOLLOW_keyCUBE_in_rollup_cube_clause7623);
                    keyCUBE887=keyCUBE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCUBE887.getTree());

                    }
                    break;

            }

            LPAREN888=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_rollup_cube_clause7627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN888_tree = (Object)adaptor.create(LPAREN888);
            adaptor.addChild(root_0, LPAREN888_tree);
            }
            pushFollow(FOLLOW_grouping_expression_list_in_rollup_cube_clause7629);
            grouping_expression_list889=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list889.getTree());
            RPAREN890=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_rollup_cube_clause7631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN890_tree = (Object)adaptor.create(RPAREN890);
            adaptor.addChild(root_0, RPAREN890_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, rollup_cube_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollup_cube_clause"

    public static class grouping_sets_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_clause"
    // RPIExprAST.g:762:1: grouping_sets_clause : keyGROUPING keySETS LPAREN grouping_expression_list RPAREN ;
    public final RPIExprASTParser.grouping_sets_clause_return grouping_sets_clause() throws RecognitionException {
        RPIExprASTParser.grouping_sets_clause_return retval = new RPIExprASTParser.grouping_sets_clause_return();
        retval.start = input.LT(1);
        int grouping_sets_clause_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN893=null;
        Token RPAREN895=null;
        RPIExprASTParser.keyGROUPING_return keyGROUPING891 = null;

        RPIExprASTParser.keySETS_return keySETS892 = null;

        RPIExprASTParser.grouping_expression_list_return grouping_expression_list894 = null;


        Object LPAREN893_tree=null;
        Object RPAREN895_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // RPIExprAST.g:763:5: ( keyGROUPING keySETS LPAREN grouping_expression_list RPAREN )
            // RPIExprAST.g:763:9: keyGROUPING keySETS LPAREN grouping_expression_list RPAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyGROUPING_in_grouping_sets_clause7649);
            keyGROUPING891=keyGROUPING();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyGROUPING891.getTree());
            pushFollow(FOLLOW_keySETS_in_grouping_sets_clause7651);
            keySETS892=keySETS();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySETS892.getTree());
            LPAREN893=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_grouping_sets_clause7653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN893_tree = (Object)adaptor.create(LPAREN893);
            adaptor.addChild(root_0, LPAREN893_tree);
            }
            pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_clause7655);
            grouping_expression_list894=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list894.getTree());
            RPAREN895=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_grouping_sets_clause7657); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN895_tree = (Object)adaptor.create(RPAREN895);
            adaptor.addChild(root_0, RPAREN895_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, grouping_sets_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_clause"

    public static class grouping_sets_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_exprs"
    // RPIExprAST.g:765:1: grouping_sets_exprs : grouping_sets_expr ( COMMA grouping_sets_expr )* ;
    public final RPIExprASTParser.grouping_sets_exprs_return grouping_sets_exprs() throws RecognitionException {
        RPIExprASTParser.grouping_sets_exprs_return retval = new RPIExprASTParser.grouping_sets_exprs_return();
        retval.start = input.LT(1);
        int grouping_sets_exprs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA897=null;
        RPIExprASTParser.grouping_sets_expr_return grouping_sets_expr896 = null;

        RPIExprASTParser.grouping_sets_expr_return grouping_sets_expr898 = null;


        Object COMMA897_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // RPIExprAST.g:766:5: ( grouping_sets_expr ( COMMA grouping_sets_expr )* )
            // RPIExprAST.g:766:9: grouping_sets_expr ( COMMA grouping_sets_expr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7675);
            grouping_sets_expr896=grouping_sets_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_expr896.getTree());
            // RPIExprAST.g:766:28: ( COMMA grouping_sets_expr )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==COMMA) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // RPIExprAST.g:766:30: COMMA grouping_sets_expr
            	    {
            	    COMMA897=(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_sets_exprs7679); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA897_tree = (Object)adaptor.create(COMMA897);
            	    adaptor.addChild(root_0, COMMA897_tree);
            	    }
            	    pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7681);
            	    grouping_sets_expr898=grouping_sets_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_sets_expr898.getTree());

            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, grouping_sets_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_exprs"

    public static class grouping_sets_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_expr"
    // RPIExprAST.g:768:1: grouping_sets_expr : ( rollup_cube_clause | grouping_expression_list );
    public final RPIExprASTParser.grouping_sets_expr_return grouping_sets_expr() throws RecognitionException {
        RPIExprASTParser.grouping_sets_expr_return retval = new RPIExprASTParser.grouping_sets_expr_return();
        retval.start = input.LT(1);
        int grouping_sets_expr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.rollup_cube_clause_return rollup_cube_clause899 = null;

        RPIExprASTParser.grouping_expression_list_return grouping_expression_list900 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // RPIExprAST.g:769:5: ( rollup_cube_clause | grouping_expression_list )
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==ID) ) {
                int LA192_1 = input.LA(2);

                if ( (((synpred347_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CUBE")))||(synpred347_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP"))))) ) {
                    alt192=1;
                }
                else if ( (true) ) {
                    alt192=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 192, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA192_0==LPAREN||(LA192_0>=SQL && LA192_0<=MINUS)||LA192_0==NUMBER||LA192_0==QUOTED_STRING||LA192_0==DOUBLEQUOTED_STRING||LA192_0==116||LA192_0==158||(LA192_0>=168 && LA192_0<=169)||(LA192_0>=174 && LA192_0<=175)||LA192_0==198) ) {
                alt192=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }
            switch (alt192) {
                case 1 :
                    // RPIExprAST.g:769:9: rollup_cube_clause
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_rollup_cube_clause_in_grouping_sets_expr7702);
                    rollup_cube_clause899=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rollup_cube_clause899.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:769:30: grouping_expression_list
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_expr7706);
                    grouping_expression_list900=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list900.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, grouping_sets_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_expr"

    public static class model_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_clause"
    // RPIExprAST.g:771:1: model_clause : keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model ;
    public final RPIExprASTParser.model_clause_return model_clause() throws RecognitionException {
        RPIExprASTParser.model_clause_return retval = new RPIExprASTParser.model_clause_return();
        retval.start = input.LT(1);
        int model_clause_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyMODEL_return keyMODEL901 = null;

        RPIExprASTParser.cell_reference_options_return cell_reference_options902 = null;

        RPIExprASTParser.return_rows_clause_return return_rows_clause903 = null;

        RPIExprASTParser.reference_model_return reference_model904 = null;

        RPIExprASTParser.main_model_return main_model905 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // RPIExprAST.g:772:5: ( keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model )
            // RPIExprAST.g:772:9: keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyMODEL_in_model_clause7724);
            keyMODEL901=keyMODEL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMODEL901.getTree());
            // RPIExprAST.g:772:18: ( cell_reference_options )
            // RPIExprAST.g:772:20: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_model_clause7728);
            cell_reference_options902=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options902.getTree());

            }

            // RPIExprAST.g:773:9: ( return_rows_clause )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==220) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // RPIExprAST.g:773:11: return_rows_clause
                    {
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause7742);
                    return_rows_clause903=return_rows_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_rows_clause903.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:774:9: ( reference_model )+
            int cnt194=0;
            loop194:
            do {
                int alt194=2;
                int LA194_0 = input.LA(1);

                if ( (LA194_0==ID) ) {
                    int LA194_1 = input.LA(2);

                    if ( (LA194_1==ID||LA194_1==DOUBLEQUOTED_STRING) ) {
                        int LA194_2 = input.LA(3);

                        if ( (LA194_2==184) ) {
                            alt194=1;
                        }


                    }


                }


                switch (alt194) {
            	case 1 :
            	    // RPIExprAST.g:774:11: reference_model
            	    {
            	    pushFollow(FOLLOW_reference_model_in_model_clause7757);
            	    reference_model904=reference_model();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model904.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt194 >= 1 ) break loop194;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(194, input);
                        throw eee;
                }
                cnt194++;
            } while (true);

            pushFollow(FOLLOW_main_model_in_model_clause7762);
            main_model905=main_model();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, main_model905.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, model_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_clause"

    public static class cell_reference_options_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_reference_options"
    // RPIExprAST.g:776:1: cell_reference_options : ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? ;
    public final RPIExprASTParser.cell_reference_options_return cell_reference_options() throws RecognitionException {
        RPIExprASTParser.cell_reference_options_return retval = new RPIExprASTParser.cell_reference_options_return();
        retval.start = input.LT(1);
        int cell_reference_options_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal909=null;
        RPIExprASTParser.keyIGNORE_return keyIGNORE906 = null;

        RPIExprASTParser.keyKEEP_return keyKEEP907 = null;

        RPIExprASTParser.keyNAV_return keyNAV908 = null;

        RPIExprASTParser.keyDIMENSION_return keyDIMENSION910 = null;

        RPIExprASTParser.keySINGLE_return keySINGLE911 = null;

        RPIExprASTParser.keyREFERENCE_return keyREFERENCE912 = null;


        Object string_literal909_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // RPIExprAST.g:777:5: ( ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? )
            // RPIExprAST.g:777:9: ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:777:9: ( ( keyIGNORE | keyKEEP ) keyNAV )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==ID) ) {
                int LA196_1 = input.LA(2);

                if ( (LA196_1==ID) ) {
                    int LA196_3 = input.LA(3);

                    if ( (((synpred351_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE")))||(synpred351_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))))) ) {
                        alt196=1;
                    }
                }
            }
            switch (alt196) {
                case 1 :
                    // RPIExprAST.g:777:11: ( keyIGNORE | keyKEEP ) keyNAV
                    {
                    // RPIExprAST.g:777:11: ( keyIGNORE | keyKEEP )
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==ID) ) {
                        int LA195_1 = input.LA(2);

                        if ( ((synpred350_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE")))) ) {
                            alt195=1;
                        }
                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))) ) {
                            alt195=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 195, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 0, input);

                        throw nvae;
                    }
                    switch (alt195) {
                        case 1 :
                            // RPIExprAST.g:777:13: keyIGNORE
                            {
                            pushFollow(FOLLOW_keyIGNORE_in_cell_reference_options7784);
                            keyIGNORE906=keyIGNORE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyIGNORE906.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:777:25: keyKEEP
                            {
                            pushFollow(FOLLOW_keyKEEP_in_cell_reference_options7788);
                            keyKEEP907=keyKEEP();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyKEEP907.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_keyNAV_in_cell_reference_options7792);
                    keyNAV908=keyNAV();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNAV908.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:778:9: ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==176) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // RPIExprAST.g:778:11: 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE )
                    {
                    string_literal909=(Token)match(input,176,FOLLOW_176_in_cell_reference_options7807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal909_tree = (Object)adaptor.create(string_literal909);
                    adaptor.addChild(root_0, string_literal909_tree);
                    }
                    // RPIExprAST.g:778:20: ( keyDIMENSION | keySINGLE keyREFERENCE )
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==ID) ) {
                        int LA197_1 = input.LA(2);

                        if ( (LA197_1==ID) ) {
                            int LA197_2 = input.LA(3);

                            if ( ((synpred352_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DIMENSION")))) ) {
                                alt197=1;
                            }
                            else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SINGLE"))) ) {
                                alt197=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 197, 2, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA197_1==EOF||LA197_1==LPAREN||LA197_1==220) ) {
                            alt197=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 197, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 197, 0, input);

                        throw nvae;
                    }
                    switch (alt197) {
                        case 1 :
                            // RPIExprAST.g:778:22: keyDIMENSION
                            {
                            pushFollow(FOLLOW_keyDIMENSION_in_cell_reference_options7811);
                            keyDIMENSION910=keyDIMENSION();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDIMENSION910.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:778:37: keySINGLE keyREFERENCE
                            {
                            pushFollow(FOLLOW_keySINGLE_in_cell_reference_options7815);
                            keySINGLE911=keySINGLE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySINGLE911.getTree());
                            pushFollow(FOLLOW_keyREFERENCE_in_cell_reference_options7817);
                            keyREFERENCE912=keyREFERENCE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREFERENCE912.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, cell_reference_options_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_reference_options"

    public static class return_rows_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_rows_clause"
    // RPIExprAST.g:780:1: return_rows_clause : keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' ;
    public final RPIExprASTParser.return_rows_clause_return return_rows_clause() throws RecognitionException {
        RPIExprASTParser.return_rows_clause_return retval = new RPIExprASTParser.return_rows_clause_return();
        retval.start = input.LT(1);
        int return_rows_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal915=null;
        Token string_literal916=null;
        RPIExprASTParser.keyRETURN_return keyRETURN913 = null;

        RPIExprASTParser.keyUPDATED_return keyUPDATED914 = null;


        Object string_literal915_tree=null;
        Object string_literal916_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // RPIExprAST.g:781:5: ( keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' )
            // RPIExprAST.g:781:9: keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyRETURN_in_return_rows_clause7840);
            keyRETURN913=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN913.getTree());
            // RPIExprAST.g:781:19: ( keyUPDATED | 'ALL' )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==ID) ) {
                alt199=1;
            }
            else if ( (LA199_0==177) ) {
                alt199=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    // RPIExprAST.g:781:21: keyUPDATED
                    {
                    pushFollow(FOLLOW_keyUPDATED_in_return_rows_clause7844);
                    keyUPDATED914=keyUPDATED();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPDATED914.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:781:34: 'ALL'
                    {
                    string_literal915=(Token)match(input,177,FOLLOW_177_in_return_rows_clause7848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal915_tree = (Object)adaptor.create(string_literal915);
                    adaptor.addChild(root_0, string_literal915_tree);
                    }

                    }
                    break;

            }

            string_literal916=(Token)match(input,189,FOLLOW_189_in_return_rows_clause7852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal916_tree = (Object)adaptor.create(string_literal916);
            adaptor.addChild(root_0, string_literal916_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, return_rows_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_rows_clause"

    public static class reference_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_model"
    // RPIExprAST.g:783:1: reference_model : keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) ;
    public final RPIExprASTParser.reference_model_return reference_model() throws RecognitionException {
        RPIExprASTParser.reference_model_return retval = new RPIExprASTParser.reference_model_return();
        retval.start = input.LT(1);
        int reference_model_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal919=null;
        Token LPAREN920=null;
        Token RPAREN922=null;
        RPIExprASTParser.keyREFERENCE_return keyREFERENCE917 = null;

        RPIExprASTParser.reference_model_name_return reference_model_name918 = null;

        RPIExprASTParser.subquery_return subquery921 = null;

        RPIExprASTParser.model_column_clauses_return model_column_clauses923 = null;

        RPIExprASTParser.cell_reference_options_return cell_reference_options924 = null;


        Object string_literal919_tree=null;
        Object LPAREN920_tree=null;
        Object RPAREN922_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // RPIExprAST.g:784:5: ( keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) )
            // RPIExprAST.g:784:9: keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyREFERENCE_in_reference_model7870);
            keyREFERENCE917=keyREFERENCE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREFERENCE917.getTree());
            pushFollow(FOLLOW_reference_model_name_in_reference_model7872);
            reference_model_name918=reference_model_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, reference_model_name918.getTree());
            string_literal919=(Token)match(input,184,FOLLOW_184_in_reference_model7874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal919_tree = (Object)adaptor.create(string_literal919);
            adaptor.addChild(root_0, string_literal919_tree);
            }
            LPAREN920=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_reference_model7876); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN920_tree = (Object)adaptor.create(LPAREN920);
            adaptor.addChild(root_0, LPAREN920_tree);
            }
            pushFollow(FOLLOW_subquery_in_reference_model7878);
            subquery921=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery921.getTree());
            RPAREN922=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_reference_model7880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN922_tree = (Object)adaptor.create(RPAREN922);
            adaptor.addChild(root_0, RPAREN922_tree);
            }
            pushFollow(FOLLOW_model_column_clauses_in_reference_model7890);
            model_column_clauses923=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses923.getTree());
            // RPIExprAST.g:785:30: ( cell_reference_options )
            // RPIExprAST.g:785:32: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_reference_model7894);
            cell_reference_options924=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options924.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, reference_model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_model"

    public static class reference_model_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_model_name"
    // RPIExprAST.g:787:1: reference_model_name : identifier ;
    public final RPIExprASTParser.reference_model_name_return reference_model_name() throws RecognitionException {
        RPIExprASTParser.reference_model_name_return retval = new RPIExprASTParser.reference_model_name_return();
        retval.start = input.LT(1);
        int reference_model_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier925 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // RPIExprAST.g:788:5: ( identifier )
            // RPIExprAST.g:788:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_reference_model_name7914);
            identifier925=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier925.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, reference_model_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_model_name"

    public static class main_model_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "main_model"
    // RPIExprAST.g:790:1: main_model : ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause ;
    public final RPIExprASTParser.main_model_return main_model() throws RecognitionException {
        RPIExprASTParser.main_model_return retval = new RPIExprASTParser.main_model_return();
        retval.start = input.LT(1);
        int main_model_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyMAIN_return keyMAIN926 = null;

        RPIExprASTParser.main_model_name_return main_model_name927 = null;

        RPIExprASTParser.model_column_clauses_return model_column_clauses928 = null;

        RPIExprASTParser.cell_reference_options_return cell_reference_options929 = null;

        RPIExprASTParser.model_rules_clause_return model_rules_clause930 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // RPIExprAST.g:791:5: ( ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause )
            // RPIExprAST.g:791:9: ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:791:9: ( keyMAIN main_model_name )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==ID) ) {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==ID||LA200_1==DOUBLEQUOTED_STRING) ) {
                    alt200=1;
                }
            }
            switch (alt200) {
                case 1 :
                    // RPIExprAST.g:791:11: keyMAIN main_model_name
                    {
                    pushFollow(FOLLOW_keyMAIN_in_main_model7934);
                    keyMAIN926=keyMAIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMAIN926.getTree());
                    pushFollow(FOLLOW_main_model_name_in_main_model7936);
                    main_model_name927=main_model_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, main_model_name927.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_model_column_clauses_in_main_model7941);
            model_column_clauses928=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column_clauses928.getTree());
            // RPIExprAST.g:792:9: ( cell_reference_options )
            // RPIExprAST.g:792:11: cell_reference_options
            {
            pushFollow(FOLLOW_cell_reference_options_in_main_model7953);
            cell_reference_options929=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference_options929.getTree());

            }

            pushFollow(FOLLOW_model_rules_clause_in_main_model7957);
            model_rules_clause930=model_rules_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_clause930.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, main_model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "main_model"

    public static class main_model_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "main_model_name"
    // RPIExprAST.g:794:1: main_model_name : identifier ;
    public final RPIExprASTParser.main_model_name_return main_model_name() throws RecognitionException {
        RPIExprASTParser.main_model_name_return retval = new RPIExprASTParser.main_model_name_return();
        retval.start = input.LT(1);
        int main_model_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier931 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // RPIExprAST.g:795:5: ( identifier )
            // RPIExprAST.g:795:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_main_model_name7975);
            identifier931=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier931.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, main_model_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "main_model_name"

    public static class model_column_clauses_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column_clauses"
    // RPIExprAST.g:797:1: model_column_clauses : ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN ;
    public final RPIExprASTParser.model_column_clauses_return model_column_clauses() throws RecognitionException {
        RPIExprASTParser.model_column_clauses_return retval = new RPIExprASTParser.model_column_clauses_return();
        retval.start = input.LT(1);
        int model_column_clauses_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal935=null;
        Token LPAREN936=null;
        Token RPAREN938=null;
        Token LPAREN940=null;
        Token RPAREN942=null;
        RPIExprASTParser.query_partition_clause_return query_partition_clause932 = null;

        RPIExprASTParser.column_spec_return column_spec933 = null;

        RPIExprASTParser.keyDIMENSION_return keyDIMENSION934 = null;

        RPIExprASTParser.model_columns_return model_columns937 = null;

        RPIExprASTParser.keyMEASURES_return keyMEASURES939 = null;

        RPIExprASTParser.model_columns_return model_columns941 = null;


        Object string_literal935_tree=null;
        Object LPAREN936_tree=null;
        Object RPAREN938_tree=null;
        Object LPAREN940_tree=null;
        Object RPAREN942_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // RPIExprAST.g:798:5: ( ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN )
            // RPIExprAST.g:798:9: ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:798:9: ( query_partition_clause ( column_spec )? )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==ID) ) {
                int LA202_1 = input.LA(2);

                if ( ((synpred357_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION")))) ) {
                    alt202=1;
                }
            }
            switch (alt202) {
                case 1 :
                    // RPIExprAST.g:798:11: query_partition_clause ( column_spec )?
                    {
                    pushFollow(FOLLOW_query_partition_clause_in_model_column_clauses7995);
                    query_partition_clause932=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, query_partition_clause932.getTree());
                    // RPIExprAST.g:798:34: ( column_spec )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==ID) ) {
                        int LA201_1 = input.LA(2);

                        if ( (LA201_1==ID||LA201_1==DOT) ) {
                            alt201=1;
                        }
                    }
                    else if ( (LA201_0==DOUBLEQUOTED_STRING||LA201_0==158) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // RPIExprAST.g:798:36: column_spec
                            {
                            pushFollow(FOLLOW_column_spec_in_model_column_clauses7999);
                            column_spec933=column_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec933.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_keyDIMENSION_in_model_column_clauses8015);
            keyDIMENSION934=keyDIMENSION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDIMENSION934.getTree());
            string_literal935=(Token)match(input,166,FOLLOW_166_in_model_column_clauses8017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal935_tree = (Object)adaptor.create(string_literal935);
            adaptor.addChild(root_0, string_literal935_tree);
            }
            LPAREN936=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses8019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN936_tree = (Object)adaptor.create(LPAREN936);
            adaptor.addChild(root_0, LPAREN936_tree);
            }
            pushFollow(FOLLOW_model_columns_in_model_column_clauses8021);
            model_columns937=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_columns937.getTree());
            RPAREN938=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses8023); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN938_tree = (Object)adaptor.create(RPAREN938);
            adaptor.addChild(root_0, RPAREN938_tree);
            }
            pushFollow(FOLLOW_keyMEASURES_in_model_column_clauses8033);
            keyMEASURES939=keyMEASURES();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMEASURES939.getTree());
            LPAREN940=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses8035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN940_tree = (Object)adaptor.create(LPAREN940);
            adaptor.addChild(root_0, LPAREN940_tree);
            }
            pushFollow(FOLLOW_model_columns_in_model_column_clauses8037);
            model_columns941=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_columns941.getTree());
            RPAREN942=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses8039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN942_tree = (Object)adaptor.create(RPAREN942);
            adaptor.addChild(root_0, RPAREN942_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, model_column_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column_clauses"

    public static class model_columns_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_columns"
    // RPIExprAST.g:802:1: model_columns : model_column ( COMMA model_column )* ;
    public final RPIExprASTParser.model_columns_return model_columns() throws RecognitionException {
        RPIExprASTParser.model_columns_return retval = new RPIExprASTParser.model_columns_return();
        retval.start = input.LT(1);
        int model_columns_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA944=null;
        RPIExprASTParser.model_column_return model_column943 = null;

        RPIExprASTParser.model_column_return model_column945 = null;


        Object COMMA944_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // RPIExprAST.g:803:5: ( model_column ( COMMA model_column )* )
            // RPIExprAST.g:803:9: model_column ( COMMA model_column )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_model_column_in_model_columns8057);
            model_column943=model_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column943.getTree());
            // RPIExprAST.g:803:22: ( COMMA model_column )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==COMMA) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // RPIExprAST.g:803:24: COMMA model_column
            	    {
            	    COMMA944=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_columns8061); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA944_tree = (Object)adaptor.create(COMMA944);
            	    adaptor.addChild(root_0, COMMA944_tree);
            	    }
            	    pushFollow(FOLLOW_model_column_in_model_columns8063);
            	    model_column945=model_column();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_column945.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, model_columns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_columns"

    public static class model_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column"
    // RPIExprAST.g:805:1: model_column : sql_expression ( ( 'AS' )? column_spec )? ;
    public final RPIExprASTParser.model_column_return model_column() throws RecognitionException {
        RPIExprASTParser.model_column_return retval = new RPIExprASTParser.model_column_return();
        retval.start = input.LT(1);
        int model_column_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal947=null;
        RPIExprASTParser.sql_expression_return sql_expression946 = null;

        RPIExprASTParser.column_spec_return column_spec948 = null;


        Object string_literal947_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // RPIExprAST.g:806:5: ( sql_expression ( ( 'AS' )? column_spec )? )
            // RPIExprAST.g:806:9: sql_expression ( ( 'AS' )? column_spec )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_model_column8084);
            sql_expression946=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression946.getTree());
            // RPIExprAST.g:806:24: ( ( 'AS' )? column_spec )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==ID||LA205_0==DOUBLEQUOTED_STRING||LA205_0==112||LA205_0==158) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // RPIExprAST.g:806:26: ( 'AS' )? column_spec
                    {
                    // RPIExprAST.g:806:26: ( 'AS' )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==112) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            // RPIExprAST.g:806:28: 'AS'
                            {
                            string_literal947=(Token)match(input,112,FOLLOW_112_in_model_column8090); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal947_tree = (Object)adaptor.create(string_literal947);
                            adaptor.addChild(root_0, string_literal947_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_column_spec_in_model_column8095);
                    column_spec948=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec948.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, model_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column"

    public static class model_rules_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_clause"
    // RPIExprAST.g:808:1: model_rules_clause : ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN ;
    public final RPIExprASTParser.model_rules_clause_return model_rules_clause() throws RecognitionException {
        RPIExprASTParser.model_rules_clause_return retval = new RPIExprASTParser.model_rules_clause_return();
        retval.start = input.LT(1);
        int model_rules_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal950=null;
        Token string_literal952=null;
        Token string_literal955=null;
        Token LPAREN957=null;
        Token NUMBER958=null;
        Token RPAREN959=null;
        Token LPAREN961=null;
        Token RPAREN963=null;
        Token LPAREN964=null;
        Token RPAREN966=null;
        RPIExprASTParser.keyRULES_return keyRULES949 = null;

        RPIExprASTParser.keyUPSERT_return keyUPSERT951 = null;

        RPIExprASTParser.keyAUTOMATIC_return keyAUTOMATIC953 = null;

        RPIExprASTParser.keySEQUENTIAL_return keySEQUENTIAL954 = null;

        RPIExprASTParser.keyITERATE_return keyITERATE956 = null;

        RPIExprASTParser.keyUNTIL_return keyUNTIL960 = null;

        RPIExprASTParser.sql_condition_return sql_condition962 = null;

        RPIExprASTParser.model_rules_exprs_return model_rules_exprs965 = null;


        Object string_literal950_tree=null;
        Object string_literal952_tree=null;
        Object string_literal955_tree=null;
        Object LPAREN957_tree=null;
        Object NUMBER958_tree=null;
        Object RPAREN959_tree=null;
        Object LPAREN961_tree=null;
        Object RPAREN963_tree=null;
        Object LPAREN964_tree=null;
        Object RPAREN966_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // RPIExprAST.g:809:5: ( ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN )
            // RPIExprAST.g:809:9: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:809:9: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==ID) ) {
                int LA210_1 = input.LA(2);

                if ( (LA210_1==ID||LA210_1==190) ) {
                    alt210=1;
                }
                else if ( (LA210_1==LPAREN) ) {
                    int LA210_4 = input.LA(3);

                    if ( (LA210_4==ID||LA210_4==DOUBLEQUOTED_STRING||LA210_4==158||LA210_4==190) ) {
                        alt210=1;
                    }
                }
            }
            switch (alt210) {
                case 1 :
                    // RPIExprAST.g:809:11: keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                    {
                    pushFollow(FOLLOW_keyRULES_in_model_rules_clause8118);
                    keyRULES949=keyRULES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRULES949.getTree());
                    // RPIExprAST.g:809:20: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
                    int alt207=3;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==190) ) {
                        alt207=1;
                    }
                    else if ( (LA207_0==ID) ) {
                        int LA207_2 = input.LA(2);

                        if ( (LA207_2==ID||LA207_2==177) ) {
                            alt207=2;
                        }
                        else if ( (LA207_2==LPAREN) ) {
                            int LA207_5 = input.LA(3);

                            if ( (LA207_5==ID||LA207_5==DOUBLEQUOTED_STRING||LA207_5==158||LA207_5==190) ) {
                                alt207=2;
                            }
                        }
                    }
                    switch (alt207) {
                        case 1 :
                            // RPIExprAST.g:809:22: 'UPDATE'
                            {
                            string_literal950=(Token)match(input,190,FOLLOW_190_in_model_rules_clause8122); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal950_tree = (Object)adaptor.create(string_literal950);
                            adaptor.addChild(root_0, string_literal950_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:809:33: keyUPSERT ( 'ALL' )?
                            {
                            pushFollow(FOLLOW_keyUPSERT_in_model_rules_clause8126);
                            keyUPSERT951=keyUPSERT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPSERT951.getTree());
                            // RPIExprAST.g:809:43: ( 'ALL' )?
                            int alt206=2;
                            int LA206_0 = input.LA(1);

                            if ( (LA206_0==177) ) {
                                alt206=1;
                            }
                            switch (alt206) {
                                case 1 :
                                    // RPIExprAST.g:809:45: 'ALL'
                                    {
                                    string_literal952=(Token)match(input,177,FOLLOW_177_in_model_rules_clause8130); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal952_tree = (Object)adaptor.create(string_literal952);
                                    adaptor.addChild(root_0, string_literal952_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    // RPIExprAST.g:809:57: ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==ID) ) {
                        int LA209_1 = input.LA(2);

                        if ( (LA209_1==191) ) {
                            alt209=1;
                        }
                    }
                    switch (alt209) {
                        case 1 :
                            // RPIExprAST.g:809:59: ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER'
                            {
                            // RPIExprAST.g:809:59: ( keyAUTOMATIC | keySEQUENTIAL )
                            int alt208=2;
                            int LA208_0 = input.LA(1);

                            if ( (LA208_0==ID) ) {
                                int LA208_1 = input.LA(2);

                                if ( ((synpred364_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "AUTOMATIC")))) ) {
                                    alt208=1;
                                }
                                else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SEQUENTIAL"))) ) {
                                    alt208=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 208, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 208, 0, input);

                                throw nvae;
                            }
                            switch (alt208) {
                                case 1 :
                                    // RPIExprAST.g:809:61: keyAUTOMATIC
                                    {
                                    pushFollow(FOLLOW_keyAUTOMATIC_in_model_rules_clause8142);
                                    keyAUTOMATIC953=keyAUTOMATIC();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyAUTOMATIC953.getTree());

                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:809:76: keySEQUENTIAL
                                    {
                                    pushFollow(FOLLOW_keySEQUENTIAL_in_model_rules_clause8146);
                                    keySEQUENTIAL954=keySEQUENTIAL();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySEQUENTIAL954.getTree());

                                    }
                                    break;

                            }

                            string_literal955=(Token)match(input,191,FOLLOW_191_in_model_rules_clause8150); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal955_tree = (Object)adaptor.create(string_literal955);
                            adaptor.addChild(root_0, string_literal955_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            // RPIExprAST.g:810:9: ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==ID) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // RPIExprAST.g:810:11: keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )?
                    {
                    pushFollow(FOLLOW_keyITERATE_in_model_rules_clause8168);
                    keyITERATE956=keyITERATE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyITERATE956.getTree());
                    LPAREN957=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause8170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN957_tree = (Object)adaptor.create(LPAREN957);
                    adaptor.addChild(root_0, LPAREN957_tree);
                    }
                    NUMBER958=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_model_rules_clause8172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER958_tree = (Object)adaptor.create(NUMBER958);
                    adaptor.addChild(root_0, NUMBER958_tree);
                    }
                    RPAREN959=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause8174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN959_tree = (Object)adaptor.create(RPAREN959);
                    adaptor.addChild(root_0, RPAREN959_tree);
                    }
                    // RPIExprAST.g:810:43: ( keyUNTIL LPAREN sql_condition RPAREN )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==ID) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // RPIExprAST.g:810:45: keyUNTIL LPAREN sql_condition RPAREN
                            {
                            pushFollow(FOLLOW_keyUNTIL_in_model_rules_clause8178);
                            keyUNTIL960=keyUNTIL();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUNTIL960.getTree());
                            LPAREN961=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause8180); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN961_tree = (Object)adaptor.create(LPAREN961);
                            adaptor.addChild(root_0, LPAREN961_tree);
                            }
                            pushFollow(FOLLOW_sql_condition_in_model_rules_clause8182);
                            sql_condition962=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition962.getTree());
                            RPAREN963=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause8184); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN963_tree = (Object)adaptor.create(RPAREN963);
                            adaptor.addChild(root_0, RPAREN963_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            LPAREN964=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause8200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN964_tree = (Object)adaptor.create(LPAREN964);
            adaptor.addChild(root_0, LPAREN964_tree);
            }
            pushFollow(FOLLOW_model_rules_exprs_in_model_rules_clause8202);
            model_rules_exprs965=model_rules_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_exprs965.getTree());
            RPAREN966=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause8204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN966_tree = (Object)adaptor.create(RPAREN966);
            adaptor.addChild(root_0, RPAREN966_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, model_rules_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_clause"

    public static class model_rules_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_exprs"
    // RPIExprAST.g:813:1: model_rules_exprs : model_rules_expr ( COMMA model_rules_expr )* ;
    public final RPIExprASTParser.model_rules_exprs_return model_rules_exprs() throws RecognitionException {
        RPIExprASTParser.model_rules_exprs_return retval = new RPIExprASTParser.model_rules_exprs_return();
        retval.start = input.LT(1);
        int model_rules_exprs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA968=null;
        RPIExprASTParser.model_rules_expr_return model_rules_expr967 = null;

        RPIExprASTParser.model_rules_expr_return model_rules_expr969 = null;


        Object COMMA968_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // RPIExprAST.g:814:5: ( model_rules_expr ( COMMA model_rules_expr )* )
            // RPIExprAST.g:814:9: model_rules_expr ( COMMA model_rules_expr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs8222);
            model_rules_expr967=model_rules_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_expr967.getTree());
            // RPIExprAST.g:814:26: ( COMMA model_rules_expr )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==COMMA) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // RPIExprAST.g:814:28: COMMA model_rules_expr
            	    {
            	    COMMA968=(Token)match(input,COMMA,FOLLOW_COMMA_in_model_rules_exprs8226); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA968_tree = (Object)adaptor.create(COMMA968);
            	    adaptor.addChild(root_0, COMMA968_tree);
            	    }
            	    pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs8228);
            	    model_rules_expr969=model_rules_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, model_rules_expr969.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, model_rules_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_exprs"

    public static class model_rules_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_expr"
    // RPIExprAST.g:816:1: model_rules_expr : ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression ;
    public final RPIExprASTParser.model_rules_expr_return model_rules_expr() throws RecognitionException {
        RPIExprASTParser.model_rules_expr_return retval = new RPIExprASTParser.model_rules_expr_return();
        retval.start = input.LT(1);
        int model_rules_expr_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal970=null;
        Token string_literal972=null;
        Token EQ975=null;
        RPIExprASTParser.keyUPSERT_return keyUPSERT971 = null;

        RPIExprASTParser.cell_assignment_return cell_assignment973 = null;

        RPIExprASTParser.order_by_clause_return order_by_clause974 = null;

        RPIExprASTParser.sql_expression_return sql_expression976 = null;


        Object string_literal970_tree=null;
        Object string_literal972_tree=null;
        Object EQ975_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // RPIExprAST.g:817:5: ( ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression )
            // RPIExprAST.g:817:9: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:817:9: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
            int alt215=3;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==190) ) {
                alt215=1;
            }
            else if ( (LA215_0==ID) ) {
                int LA215_2 = input.LA(2);

                if ( (LA215_2==ID||LA215_2==DOUBLEQUOTED_STRING||LA215_2==158||LA215_2==177) ) {
                    alt215=2;
                }
            }
            switch (alt215) {
                case 1 :
                    // RPIExprAST.g:817:11: 'UPDATE'
                    {
                    string_literal970=(Token)match(input,190,FOLLOW_190_in_model_rules_expr8251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal970_tree = (Object)adaptor.create(string_literal970);
                    adaptor.addChild(root_0, string_literal970_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:817:22: keyUPSERT ( 'ALL' )?
                    {
                    pushFollow(FOLLOW_keyUPSERT_in_model_rules_expr8255);
                    keyUPSERT971=keyUPSERT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUPSERT971.getTree());
                    // RPIExprAST.g:817:32: ( 'ALL' )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==177) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // RPIExprAST.g:817:34: 'ALL'
                            {
                            string_literal972=(Token)match(input,177,FOLLOW_177_in_model_rules_expr8259); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal972_tree = (Object)adaptor.create(string_literal972);
                            adaptor.addChild(root_0, string_literal972_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_cell_assignment_in_model_rules_expr8267);
            cell_assignment973=cell_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment973.getTree());
            // RPIExprAST.g:817:62: ( order_by_clause )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==191) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // RPIExprAST.g:817:64: order_by_clause
                    {
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_expr8271);
                    order_by_clause974=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_clause974.getTree());

                    }
                    break;

            }

            EQ975=(Token)match(input,EQ,FOLLOW_EQ_in_model_rules_expr8276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ975_tree = (Object)adaptor.create(EQ975);
            adaptor.addChild(root_0, EQ975_tree);
            }
            pushFollow(FOLLOW_sql_expression_in_model_rules_expr8278);
            sql_expression976=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression976.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, model_rules_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_expr"

    public static class cell_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment"
    // RPIExprAST.g:819:1: cell_assignment : measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK ;
    public final RPIExprASTParser.cell_assignment_return cell_assignment() throws RecognitionException {
        RPIExprASTParser.cell_assignment_return retval = new RPIExprASTParser.cell_assignment_return();
        retval.start = input.LT(1);
        int cell_assignment_StartIndex = input.index();
        Object root_0 = null;

        Token LBRACK978=null;
        Token RBRACK981=null;
        RPIExprASTParser.measure_column_return measure_column977 = null;

        RPIExprASTParser.multi_column_for_loop_return multi_column_for_loop979 = null;

        RPIExprASTParser.cell_assignment_exprs_return cell_assignment_exprs980 = null;


        Object LBRACK978_tree=null;
        Object RBRACK981_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // RPIExprAST.g:820:5: ( measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK )
            // RPIExprAST.g:820:9: measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_measure_column_in_cell_assignment8296);
            measure_column977=measure_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, measure_column977.getTree());
            LBRACK978=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_cell_assignment8298); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACK978_tree = (Object)adaptor.create(LBRACK978);
            adaptor.addChild(root_0, LBRACK978_tree);
            }
            // RPIExprAST.g:820:31: ( multi_column_for_loop | cell_assignment_exprs )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==170) ) {
                int LA217_1 = input.LA(2);

                if ( (LA217_1==LPAREN) ) {
                    alt217=1;
                }
                else if ( (LA217_1==ID||LA217_1==DOUBLEQUOTED_STRING||LA217_1==158) ) {
                    alt217=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 217, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA217_0>=ID && LA217_0<=LPAREN)||(LA217_0>=SQL && LA217_0<=MINUS)||LA217_0==NUMBER||LA217_0==NOT||LA217_0==QUOTED_STRING||LA217_0==DOUBLEQUOTED_STRING||LA217_0==116||LA217_0==158||(LA217_0>=168 && LA217_0<=169)||(LA217_0>=174 && LA217_0<=175)||(LA217_0>=197 && LA217_0<=198)||LA217_0==200||LA217_0==202) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // RPIExprAST.g:820:33: multi_column_for_loop
                    {
                    pushFollow(FOLLOW_multi_column_for_loop_in_cell_assignment8302);
                    multi_column_for_loop979=multi_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_column_for_loop979.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:820:57: cell_assignment_exprs
                    {
                    pushFollow(FOLLOW_cell_assignment_exprs_in_cell_assignment8306);
                    cell_assignment_exprs980=cell_assignment_exprs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_exprs980.getTree());

                    }
                    break;

            }

            RBRACK981=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_cell_assignment8310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACK981_tree = (Object)adaptor.create(RBRACK981);
            adaptor.addChild(root_0, RBRACK981_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, cell_assignment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment"

    public static class cell_assignment_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment_exprs"
    // RPIExprAST.g:822:1: cell_assignment_exprs : cell_assignment_expr ( COMMA cell_assignment_expr )* ;
    public final RPIExprASTParser.cell_assignment_exprs_return cell_assignment_exprs() throws RecognitionException {
        RPIExprASTParser.cell_assignment_exprs_return retval = new RPIExprASTParser.cell_assignment_exprs_return();
        retval.start = input.LT(1);
        int cell_assignment_exprs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA983=null;
        RPIExprASTParser.cell_assignment_expr_return cell_assignment_expr982 = null;

        RPIExprASTParser.cell_assignment_expr_return cell_assignment_expr984 = null;


        Object COMMA983_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // RPIExprAST.g:823:5: ( cell_assignment_expr ( COMMA cell_assignment_expr )* )
            // RPIExprAST.g:823:9: cell_assignment_expr ( COMMA cell_assignment_expr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8328);
            cell_assignment_expr982=cell_assignment_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_expr982.getTree());
            // RPIExprAST.g:823:30: ( COMMA cell_assignment_expr )*
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0==COMMA) ) {
                    alt218=1;
                }


                switch (alt218) {
            	case 1 :
            	    // RPIExprAST.g:823:32: COMMA cell_assignment_expr
            	    {
            	    COMMA983=(Token)match(input,COMMA,FOLLOW_COMMA_in_cell_assignment_exprs8332); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA983_tree = (Object)adaptor.create(COMMA983);
            	    adaptor.addChild(root_0, COMMA983_tree);
            	    }
            	    pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8334);
            	    cell_assignment_expr984=cell_assignment_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_assignment_expr984.getTree());

            	    }
            	    break;

            	default :
            	    break loop218;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, cell_assignment_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment_exprs"

    public static class cell_assignment_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment_expr"
    // RPIExprAST.g:825:1: cell_assignment_expr : ( sql_condition | sql_expression | single_column_for_loop );
    public final RPIExprASTParser.cell_assignment_expr_return cell_assignment_expr() throws RecognitionException {
        RPIExprASTParser.cell_assignment_expr_return retval = new RPIExprASTParser.cell_assignment_expr_return();
        retval.start = input.LT(1);
        int cell_assignment_expr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_condition_return sql_condition985 = null;

        RPIExprASTParser.sql_expression_return sql_expression986 = null;

        RPIExprASTParser.single_column_for_loop_return single_column_for_loop987 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // RPIExprAST.g:826:5: ( sql_condition | sql_expression | single_column_for_loop )
            int alt219=3;
            switch ( input.LA(1) ) {
            case NOT:
            case 197:
            case 200:
            case 202:
                {
                alt219=1;
                }
                break;
            case PLUS:
            case MINUS:
                {
                int LA219_3 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 3, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA219_4 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 4, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA219_5 = input.LA(2);

                if ( ((((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(synpred376_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(synpred376_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred376_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||synpred376_RPIExprAST()||(synpred376_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred376_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR"))))) ) {
                    alt219=1;
                }
                else if ( ((synpred377_RPIExprAST()||((synpred377_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred377_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred377_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred377_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred377_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR"))))) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 5, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA219_6 = input.LA(2);

                if ( (((synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql ))||(synpred376_RPIExprAST()&&( is_sql )))) ) {
                    alt219=1;
                }
                else if ( ((synpred377_RPIExprAST()&&( is_sql ))) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 6, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA219_7 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 7, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA219_8 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 8, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA219_9 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 9, input);

                    throw nvae;
                }
                }
                break;
            case 168:
            case 169:
                {
                int LA219_10 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 10, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA219_11 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 11, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA219_12 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 12, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA219_13 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 13, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA219_14 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 14, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA219_15 = input.LA(2);

                if ( (synpred376_RPIExprAST()) ) {
                    alt219=1;
                }
                else if ( (synpred377_RPIExprAST()) ) {
                    alt219=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 15, input);

                    throw nvae;
                }
                }
                break;
            case 170:
                {
                alt219=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // RPIExprAST.g:826:9: sql_condition
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_condition_in_cell_assignment_expr8355);
                    sql_condition985=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition985.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:826:25: sql_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_expression_in_cell_assignment_expr8359);
                    sql_expression986=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression986.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:826:42: single_column_for_loop
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_single_column_for_loop_in_cell_assignment_expr8363);
                    single_column_for_loop987=single_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_column_for_loop987.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, cell_assignment_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment_expr"

    public static class measure_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measure_column"
    // RPIExprAST.g:828:1: measure_column : column_name ;
    public final RPIExprASTParser.measure_column_return measure_column() throws RecognitionException {
        RPIExprASTParser.measure_column_return retval = new RPIExprASTParser.measure_column_return();
        retval.start = input.LT(1);
        int measure_column_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.column_name_return column_name988 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // RPIExprAST.g:829:5: ( column_name )
            // RPIExprAST.g:829:9: column_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_column_name_in_measure_column8381);
            column_name988=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name988.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, measure_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measure_column"

    public static class single_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_column_for_loop"
    // RPIExprAST.g:831:1: single_column_for_loop : 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) ;
    public final RPIExprASTParser.single_column_for_loop_return single_column_for_loop() throws RecognitionException {
        RPIExprASTParser.single_column_for_loop_return retval = new RPIExprASTParser.single_column_for_loop_return();
        retval.start = input.LT(1);
        int single_column_for_loop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal989=null;
        Token string_literal991=null;
        Token LPAREN992=null;
        Token RPAREN995=null;
        Token string_literal996=null;
        Token string_literal998=null;
        Token string_literal1000=null;
        RPIExprASTParser.column_name_return column_name990 = null;

        RPIExprASTParser.literals_return literals993 = null;

        RPIExprASTParser.subquery_return subquery994 = null;

        RPIExprASTParser.pattern_return pattern997 = null;

        RPIExprASTParser.literal_return literal999 = null;

        RPIExprASTParser.literal_return literal1001 = null;

        RPIExprASTParser.keyINCREMENT_return keyINCREMENT1002 = null;

        RPIExprASTParser.keyDECREMENT_return keyDECREMENT1003 = null;

        RPIExprASTParser.literal_return literal1004 = null;


        Object string_literal989_tree=null;
        Object string_literal991_tree=null;
        Object LPAREN992_tree=null;
        Object RPAREN995_tree=null;
        Object string_literal996_tree=null;
        Object string_literal998_tree=null;
        Object string_literal1000_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // RPIExprAST.g:832:5: ( 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) )
            // RPIExprAST.g:832:9: 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            {
            root_0 = (Object)adaptor.nil();

            string_literal989=(Token)match(input,170,FOLLOW_170_in_single_column_for_loop8399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal989_tree = (Object)adaptor.create(string_literal989);
            adaptor.addChild(root_0, string_literal989_tree);
            }
            pushFollow(FOLLOW_column_name_in_single_column_for_loop8401);
            column_name990=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name990.getTree());
            // RPIExprAST.g:833:9: ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==160) ) {
                alt223=1;
            }
            else if ( (LA223_0==179||LA223_0==192) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // RPIExprAST.g:833:13: 'IN' LPAREN ( literals | subquery ) RPAREN
                    {
                    string_literal991=(Token)match(input,160,FOLLOW_160_in_single_column_for_loop8415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal991_tree = (Object)adaptor.create(string_literal991);
                    adaptor.addChild(root_0, string_literal991_tree);
                    }
                    LPAREN992=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_single_column_for_loop8417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN992_tree = (Object)adaptor.create(LPAREN992);
                    adaptor.addChild(root_0, LPAREN992_tree);
                    }
                    // RPIExprAST.g:833:25: ( literals | subquery )
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( ((LA220_0>=PLUS && LA220_0<=MINUS)||LA220_0==NUMBER||LA220_0==QUOTED_STRING) ) {
                        alt220=1;
                    }
                    else if ( (LA220_0==LPAREN) ) {
                        alt220=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 0, input);

                        throw nvae;
                    }
                    switch (alt220) {
                        case 1 :
                            // RPIExprAST.g:833:27: literals
                            {
                            pushFollow(FOLLOW_literals_in_single_column_for_loop8421);
                            literals993=literals();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, literals993.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:833:38: subquery
                            {
                            pushFollow(FOLLOW_subquery_in_single_column_for_loop8425);
                            subquery994=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery994.getTree());

                            }
                            break;

                    }

                    RPAREN995=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_single_column_for_loop8429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN995_tree = (Object)adaptor.create(RPAREN995);
                    adaptor.addChild(root_0, RPAREN995_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:834:13: ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal
                    {
                    // RPIExprAST.g:834:13: ( 'LIKE' pattern )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==192) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // RPIExprAST.g:834:15: 'LIKE' pattern
                            {
                            string_literal996=(Token)match(input,192,FOLLOW_192_in_single_column_for_loop8445); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal996_tree = (Object)adaptor.create(string_literal996);
                            adaptor.addChild(root_0, string_literal996_tree);
                            }
                            pushFollow(FOLLOW_pattern_in_single_column_for_loop8447);
                            pattern997=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, pattern997.getTree());

                            }
                            break;

                    }

                    string_literal998=(Token)match(input,179,FOLLOW_179_in_single_column_for_loop8452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal998_tree = (Object)adaptor.create(string_literal998);
                    adaptor.addChild(root_0, string_literal998_tree);
                    }
                    pushFollow(FOLLOW_literal_in_single_column_for_loop8454);
                    literal999=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal999.getTree());
                    string_literal1000=(Token)match(input,135,FOLLOW_135_in_single_column_for_loop8456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1000_tree = (Object)adaptor.create(string_literal1000);
                    adaptor.addChild(root_0, string_literal1000_tree);
                    }
                    pushFollow(FOLLOW_literal_in_single_column_for_loop8458);
                    literal1001=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal1001.getTree());
                    // RPIExprAST.g:834:61: ( keyINCREMENT | keyDECREMENT )
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==ID) ) {
                        int LA222_1 = input.LA(2);

                        if ( ((synpred381_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INCREMENT")))) ) {
                            alt222=1;
                        }
                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DECREMENT"))) ) {
                            alt222=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 222, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 222, 0, input);

                        throw nvae;
                    }
                    switch (alt222) {
                        case 1 :
                            // RPIExprAST.g:834:63: keyINCREMENT
                            {
                            pushFollow(FOLLOW_keyINCREMENT_in_single_column_for_loop8462);
                            keyINCREMENT1002=keyINCREMENT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINCREMENT1002.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:834:78: keyDECREMENT
                            {
                            pushFollow(FOLLOW_keyDECREMENT_in_single_column_for_loop8466);
                            keyDECREMENT1003=keyDECREMENT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDECREMENT1003.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_literal_in_single_column_for_loop8470);
                    literal1004=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal1004.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, single_column_for_loop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "single_column_for_loop"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // RPIExprAST.g:837:1: literal : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING );
    public final RPIExprASTParser.literal_return literal() throws RecognitionException {
        RPIExprASTParser.literal_return retval = new RPIExprASTParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token set1005=null;
        Token NUMBER1006=null;
        Token QUOTED_STRING1007=null;

        Object set1005_tree=null;
        Object NUMBER1006_tree=null;
        Object QUOTED_STRING1007_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // RPIExprAST.g:838:5: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING )
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( ((LA225_0>=PLUS && LA225_0<=MINUS)||LA225_0==NUMBER) ) {
                alt225=1;
            }
            else if ( (LA225_0==QUOTED_STRING) ) {
                alt225=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);

                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    // RPIExprAST.g:838:9: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:838:9: ( PLUS | MINUS )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( ((LA224_0>=PLUS && LA224_0<=MINUS)) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // RPIExprAST.g:
                            {
                            set1005=(Token)input.LT(1);
                            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1005));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    NUMBER1006=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_literal8509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER1006_tree = (Object)adaptor.create(NUMBER1006);
                    adaptor.addChild(root_0, NUMBER1006_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:839:9: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    QUOTED_STRING1007=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_literal8519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING1007_tree = (Object)adaptor.create(QUOTED_STRING1007);
                    adaptor.addChild(root_0, QUOTED_STRING1007_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class literals_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literals"
    // RPIExprAST.g:841:1: literals : literal ( COMMA literal )* ;
    public final RPIExprASTParser.literals_return literals() throws RecognitionException {
        RPIExprASTParser.literals_return retval = new RPIExprASTParser.literals_return();
        retval.start = input.LT(1);
        int literals_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1009=null;
        RPIExprASTParser.literal_return literal1008 = null;

        RPIExprASTParser.literal_return literal1010 = null;


        Object COMMA1009_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // RPIExprAST.g:842:5: ( literal ( COMMA literal )* )
            // RPIExprAST.g:842:9: literal ( COMMA literal )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_literal_in_literals8537);
            literal1008=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literal1008.getTree());
            // RPIExprAST.g:842:17: ( COMMA literal )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==COMMA) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // RPIExprAST.g:842:19: COMMA literal
            	    {
            	    COMMA1009=(Token)match(input,COMMA,FOLLOW_COMMA_in_literals8541); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1009_tree = (Object)adaptor.create(COMMA1009);
            	    adaptor.addChild(root_0, COMMA1009_tree);
            	    }
            	    pushFollow(FOLLOW_literal_in_literals8543);
            	    literal1010=literal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal1010.getTree());

            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, literals_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literals"

    public static class bracket_literals_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_literals"
    // RPIExprAST.g:844:1: bracket_literals : LPAREN literals RPAREN ;
    public final RPIExprASTParser.bracket_literals_return bracket_literals() throws RecognitionException {
        RPIExprASTParser.bracket_literals_return retval = new RPIExprASTParser.bracket_literals_return();
        retval.start = input.LT(1);
        int bracket_literals_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1011=null;
        Token RPAREN1013=null;
        RPIExprASTParser.literals_return literals1012 = null;


        Object LPAREN1011_tree=null;
        Object RPAREN1013_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // RPIExprAST.g:845:5: ( LPAREN literals RPAREN )
            // RPIExprAST.g:845:9: LPAREN literals RPAREN
            {
            root_0 = (Object)adaptor.nil();

            LPAREN1011=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_bracket_literals8564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1011_tree = (Object)adaptor.create(LPAREN1011);
            adaptor.addChild(root_0, LPAREN1011_tree);
            }
            pushFollow(FOLLOW_literals_in_bracket_literals8566);
            literals1012=literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, literals1012.getTree());
            RPAREN1013=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_bracket_literals8568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1013_tree = (Object)adaptor.create(RPAREN1013);
            adaptor.addChild(root_0, RPAREN1013_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, bracket_literals_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracket_literals"

    public static class bracket_literals_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_literals_list"
    // RPIExprAST.g:847:1: bracket_literals_list : bracket_literals ( COMMA bracket_literals )* ;
    public final RPIExprASTParser.bracket_literals_list_return bracket_literals_list() throws RecognitionException {
        RPIExprASTParser.bracket_literals_list_return retval = new RPIExprASTParser.bracket_literals_list_return();
        retval.start = input.LT(1);
        int bracket_literals_list_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1015=null;
        RPIExprASTParser.bracket_literals_return bracket_literals1014 = null;

        RPIExprASTParser.bracket_literals_return bracket_literals1016 = null;


        Object COMMA1015_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // RPIExprAST.g:848:5: ( bracket_literals ( COMMA bracket_literals )* )
            // RPIExprAST.g:848:9: bracket_literals ( COMMA bracket_literals )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list8586);
            bracket_literals1014=bracket_literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals1014.getTree());
            // RPIExprAST.g:848:26: ( COMMA bracket_literals )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==COMMA) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // RPIExprAST.g:848:28: COMMA bracket_literals
            	    {
            	    COMMA1015=(Token)match(input,COMMA,FOLLOW_COMMA_in_bracket_literals_list8590); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1015_tree = (Object)adaptor.create(COMMA1015);
            	    adaptor.addChild(root_0, COMMA1015_tree);
            	    }
            	    pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list8592);
            	    bracket_literals1016=bracket_literals();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals1016.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, bracket_literals_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracket_literals_list"

    public static class pattern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // RPIExprAST.g:850:1: pattern : QUOTED_STRING ;
    public final RPIExprASTParser.pattern_return pattern() throws RecognitionException {
        RPIExprASTParser.pattern_return retval = new RPIExprASTParser.pattern_return();
        retval.start = input.LT(1);
        int pattern_StartIndex = input.index();
        Object root_0 = null;

        Token QUOTED_STRING1017=null;

        Object QUOTED_STRING1017_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // RPIExprAST.g:851:5: ( QUOTED_STRING )
            // RPIExprAST.g:851:9: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();

            QUOTED_STRING1017=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pattern8613); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1017_tree = (Object)adaptor.create(QUOTED_STRING1017);
            adaptor.addChild(root_0, QUOTED_STRING1017_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, pattern_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class multi_column_for_loop_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multi_column_for_loop"
    // RPIExprAST.g:853:1: multi_column_for_loop : 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN ;
    public final RPIExprASTParser.multi_column_for_loop_return multi_column_for_loop() throws RecognitionException {
        RPIExprASTParser.multi_column_for_loop_return retval = new RPIExprASTParser.multi_column_for_loop_return();
        retval.start = input.LT(1);
        int multi_column_for_loop_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1018=null;
        Token LPAREN1019=null;
        Token RPAREN1021=null;
        Token string_literal1022=null;
        Token LPAREN1023=null;
        Token RPAREN1026=null;
        RPIExprASTParser.column_specs_return column_specs1020 = null;

        RPIExprASTParser.bracket_literals_list_return bracket_literals_list1024 = null;

        RPIExprASTParser.subquery_return subquery1025 = null;


        Object string_literal1018_tree=null;
        Object LPAREN1019_tree=null;
        Object RPAREN1021_tree=null;
        Object string_literal1022_tree=null;
        Object LPAREN1023_tree=null;
        Object RPAREN1026_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // RPIExprAST.g:854:5: ( 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN )
            // RPIExprAST.g:854:9: 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN
            {
            root_0 = (Object)adaptor.nil();

            string_literal1018=(Token)match(input,170,FOLLOW_170_in_multi_column_for_loop8631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1018_tree = (Object)adaptor.create(string_literal1018);
            adaptor.addChild(root_0, string_literal1018_tree);
            }
            LPAREN1019=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop8633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1019_tree = (Object)adaptor.create(LPAREN1019);
            adaptor.addChild(root_0, LPAREN1019_tree);
            }
            pushFollow(FOLLOW_column_specs_in_multi_column_for_loop8635);
            column_specs1020=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1020.getTree());
            RPAREN1021=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop8637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1021_tree = (Object)adaptor.create(RPAREN1021);
            adaptor.addChild(root_0, RPAREN1021_tree);
            }
            string_literal1022=(Token)match(input,160,FOLLOW_160_in_multi_column_for_loop8639); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1022_tree = (Object)adaptor.create(string_literal1022);
            adaptor.addChild(root_0, string_literal1022_tree);
            }
            LPAREN1023=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop8641); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1023_tree = (Object)adaptor.create(LPAREN1023);
            adaptor.addChild(root_0, LPAREN1023_tree);
            }
            // RPIExprAST.g:854:54: ( bracket_literals_list | subquery )
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==LPAREN) ) {
                int LA228_1 = input.LA(2);

                if ( ((LA228_1>=PLUS && LA228_1<=MINUS)||LA228_1==NUMBER||LA228_1==QUOTED_STRING) ) {
                    alt228=1;
                }
                else if ( (LA228_1==174) ) {
                    alt228=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 228, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 228, 0, input);

                throw nvae;
            }
            switch (alt228) {
                case 1 :
                    // RPIExprAST.g:854:56: bracket_literals_list
                    {
                    pushFollow(FOLLOW_bracket_literals_list_in_multi_column_for_loop8645);
                    bracket_literals_list1024=bracket_literals_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bracket_literals_list1024.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:854:80: subquery
                    {
                    pushFollow(FOLLOW_subquery_in_multi_column_for_loop8649);
                    subquery1025=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1025.getTree());

                    }
                    break;

            }

            RPAREN1026=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop8653); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1026_tree = (Object)adaptor.create(RPAREN1026);
            adaptor.addChild(root_0, RPAREN1026_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, multi_column_for_loop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multi_column_for_loop"

    public static class order_by_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_clause"
    // RPIExprAST.g:856:1: order_by_clause : 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs ;
    public final RPIExprASTParser.order_by_clause_return order_by_clause() throws RecognitionException {
        RPIExprASTParser.order_by_clause_return retval = new RPIExprASTParser.order_by_clause_return();
        retval.start = input.LT(1);
        int order_by_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1027=null;
        Token string_literal1029=null;
        RPIExprASTParser.keySIBLINGS_return keySIBLINGS1028 = null;

        RPIExprASTParser.order_by_exprs_return order_by_exprs1030 = null;


        Object string_literal1027_tree=null;
        Object string_literal1029_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // RPIExprAST.g:857:5: ( 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs )
            // RPIExprAST.g:857:9: 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs
            {
            root_0 = (Object)adaptor.nil();

            string_literal1027=(Token)match(input,191,FOLLOW_191_in_order_by_clause8671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1027_tree = (Object)adaptor.create(string_literal1027);
            adaptor.addChild(root_0, string_literal1027_tree);
            }
            // RPIExprAST.g:857:17: ( keySIBLINGS )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==ID) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // RPIExprAST.g:857:19: keySIBLINGS
                    {
                    pushFollow(FOLLOW_keySIBLINGS_in_order_by_clause8675);
                    keySIBLINGS1028=keySIBLINGS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySIBLINGS1028.getTree());

                    }
                    break;

            }

            string_literal1029=(Token)match(input,166,FOLLOW_166_in_order_by_clause8680); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1029_tree = (Object)adaptor.create(string_literal1029);
            adaptor.addChild(root_0, string_literal1029_tree);
            }
            pushFollow(FOLLOW_order_by_exprs_in_order_by_clause8682);
            order_by_exprs1030=order_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_exprs1030.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, order_by_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"

    public static class order_by_exprs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_exprs"
    // RPIExprAST.g:859:1: order_by_exprs : order_by_expr ( COMMA order_by_expr )* ;
    public final RPIExprASTParser.order_by_exprs_return order_by_exprs() throws RecognitionException {
        RPIExprASTParser.order_by_exprs_return retval = new RPIExprASTParser.order_by_exprs_return();
        retval.start = input.LT(1);
        int order_by_exprs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1032=null;
        RPIExprASTParser.order_by_expr_return order_by_expr1031 = null;

        RPIExprASTParser.order_by_expr_return order_by_expr1033 = null;


        Object COMMA1032_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // RPIExprAST.g:860:5: ( order_by_expr ( COMMA order_by_expr )* )
            // RPIExprAST.g:860:9: order_by_expr ( COMMA order_by_expr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_order_by_expr_in_order_by_exprs8700);
            order_by_expr1031=order_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_expr1031.getTree());
            // RPIExprAST.g:860:23: ( COMMA order_by_expr )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    int LA230_2 = input.LA(2);

                    if ( (synpred389_RPIExprAST()) ) {
                        alt230=1;
                    }


                }


                switch (alt230) {
            	case 1 :
            	    // RPIExprAST.g:860:25: COMMA order_by_expr
            	    {
            	    COMMA1032=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_by_exprs8704); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1032_tree = (Object)adaptor.create(COMMA1032);
            	    adaptor.addChild(root_0, COMMA1032_tree);
            	    }
            	    pushFollow(FOLLOW_order_by_expr_in_order_by_exprs8706);
            	    order_by_expr1033=order_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, order_by_expr1033.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, order_by_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_exprs"

    public static class order_by_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_expr"
    // RPIExprAST.g:862:1: order_by_expr : ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? ;
    public final RPIExprASTParser.order_by_expr_return order_by_expr() throws RecognitionException {
        RPIExprASTParser.order_by_expr_return retval = new RPIExprASTParser.order_by_expr_return();
        retval.start = input.LT(1);
        int order_by_expr_StartIndex = input.index();
        Object root_0 = null;

        Token set1035=null;
        RPIExprASTParser.sql_expression_return sql_expression1034 = null;

        RPIExprASTParser.keyNULLS_return keyNULLS1036 = null;

        RPIExprASTParser.keyFIRST_return keyFIRST1037 = null;

        RPIExprASTParser.keyNULLS_return keyNULLS1038 = null;

        RPIExprASTParser.keyLAST_return keyLAST1039 = null;


        Object set1035_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // RPIExprAST.g:863:5: ( ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? )
            // RPIExprAST.g:863:9: ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:863:9: ( sql_expression )
            // RPIExprAST.g:863:13: sql_expression
            {
            pushFollow(FOLLOW_sql_expression_in_order_by_expr8731);
            sql_expression1034=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1034.getTree());

            }

            // RPIExprAST.g:867:9: ( 'ASC' | 'DESC' )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( ((LA231_0>=193 && LA231_0<=194)) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    // RPIExprAST.g:
                    {
                    set1035=(Token)input.LT(1);
                    if ( (input.LA(1)>=193 && input.LA(1)<=194) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1035));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // RPIExprAST.g:867:29: ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            int alt232=3;
            int LA232_0 = input.LA(1);

            if ( (LA232_0==ID) ) {
                int LA232_1 = input.LA(2);

                if ( ((synpred392_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NULLS")))) ) {
                    alt232=1;
                }
                else if ( ((synpred393_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NULLS")))) ) {
                    alt232=2;
                }
            }
            switch (alt232) {
                case 1 :
                    // RPIExprAST.g:867:31: keyNULLS keyFIRST
                    {
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr8766);
                    keyNULLS1036=keyNULLS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNULLS1036.getTree());
                    pushFollow(FOLLOW_keyFIRST_in_order_by_expr8768);
                    keyFIRST1037=keyFIRST();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyFIRST1037.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:867:51: keyNULLS keyLAST
                    {
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr8772);
                    keyNULLS1038=keyNULLS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNULLS1038.getTree());
                    pushFollow(FOLLOW_keyLAST_in_order_by_expr8774);
                    keyLAST1039=keyLAST();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLAST1039.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, order_by_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_expr"

    public static class for_update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_update_clause"
    // RPIExprAST.g:869:1: for_update_clause : 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? ;
    public final RPIExprASTParser.for_update_clause_return for_update_clause() throws RecognitionException {
        RPIExprASTParser.for_update_clause_return retval = new RPIExprASTParser.for_update_clause_return();
        retval.start = input.LT(1);
        int for_update_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1040=null;
        Token string_literal1041=null;
        Token string_literal1042=null;
        Token string_literal1046=null;
        RPIExprASTParser.column_specs_return column_specs1043 = null;

        RPIExprASTParser.keyWAIT_return keyWAIT1044 = null;

        RPIExprASTParser.integer_return integer1045 = null;


        Object string_literal1040_tree=null;
        Object string_literal1041_tree=null;
        Object string_literal1042_tree=null;
        Object string_literal1046_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // RPIExprAST.g:870:5: ( 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? )
            // RPIExprAST.g:870:9: 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1040=(Token)match(input,170,FOLLOW_170_in_for_update_clause8795); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1040_tree = (Object)adaptor.create(string_literal1040);
            adaptor.addChild(root_0, string_literal1040_tree);
            }
            string_literal1041=(Token)match(input,190,FOLLOW_190_in_for_update_clause8797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1041_tree = (Object)adaptor.create(string_literal1041);
            adaptor.addChild(root_0, string_literal1041_tree);
            }
            // RPIExprAST.g:870:24: ( 'OF' column_specs )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==164) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // RPIExprAST.g:870:26: 'OF' column_specs
                    {
                    string_literal1042=(Token)match(input,164,FOLLOW_164_in_for_update_clause8801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1042_tree = (Object)adaptor.create(string_literal1042);
                    adaptor.addChild(root_0, string_literal1042_tree);
                    }
                    pushFollow(FOLLOW_column_specs_in_for_update_clause8803);
                    column_specs1043=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1043.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:870:47: ( keyWAIT integer | 'NOWAIT' )?
            int alt234=3;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==ID) ) {
                alt234=1;
            }
            else if ( (LA234_0==195) ) {
                alt234=2;
            }
            switch (alt234) {
                case 1 :
                    // RPIExprAST.g:870:49: keyWAIT integer
                    {
                    pushFollow(FOLLOW_keyWAIT_in_for_update_clause8810);
                    keyWAIT1044=keyWAIT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyWAIT1044.getTree());
                    pushFollow(FOLLOW_integer_in_for_update_clause8812);
                    integer1045=integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1045.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:870:67: 'NOWAIT'
                    {
                    string_literal1046=(Token)match(input,195,FOLLOW_195_in_for_update_clause8816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1046_tree = (Object)adaptor.create(string_literal1046);
                    adaptor.addChild(root_0, string_literal1046_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, for_update_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_update_clause"

    public static class where_condition_whole_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_condition_whole"
    // RPIExprAST.g:873:1: where_condition_whole : 'WHERE' sql_condition ;
    public final RPIExprASTParser.where_condition_whole_return where_condition_whole() throws RecognitionException {
        RPIExprASTParser.where_condition_whole_return retval = new RPIExprASTParser.where_condition_whole_return();
        retval.start = input.LT(1);
        int where_condition_whole_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1047=null;
        RPIExprASTParser.sql_condition_return sql_condition1048 = null;


        Object string_literal1047_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // RPIExprAST.g:874:5: ( 'WHERE' sql_condition )
            // RPIExprAST.g:874:9: 'WHERE' sql_condition
            {
            root_0 = (Object)adaptor.nil();

            string_literal1047=(Token)match(input,185,FOLLOW_185_in_where_condition_whole8838); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1047_tree = (Object)adaptor.create(string_literal1047);
            adaptor.addChild(root_0, string_literal1047_tree);
            }
            pushFollow(FOLLOW_sql_condition_in_where_condition_whole8840);
            sql_condition1048=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1048.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, where_condition_whole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_condition_whole"

    public static class where_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_condition"
    // RPIExprAST.g:877:1: where_condition : sql_condition ;
    public final RPIExprASTParser.where_condition_return where_condition() throws RecognitionException {
        RPIExprASTParser.where_condition_return retval = new RPIExprASTParser.where_condition_return();
        retval.start = input.LT(1);
        int where_condition_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_condition_return sql_condition1049 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // RPIExprAST.g:878:5: ( sql_condition )
            // RPIExprAST.g:878:9: sql_condition
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_condition_in_where_condition8859);
            sql_condition1049=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1049.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, where_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_condition"

    public static class displayed_column_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "displayed_column"
    // RPIExprAST.g:881:1: displayed_column : ( column_spec DOT ASTERISK | sql_expression ) ( alias )? ;
    public final RPIExprASTParser.displayed_column_return displayed_column() throws RecognitionException {
        RPIExprASTParser.displayed_column_return retval = new RPIExprASTParser.displayed_column_return();
        retval.start = input.LT(1);
        int displayed_column_StartIndex = input.index();
        Object root_0 = null;

        Token DOT1051=null;
        Token ASTERISK1052=null;
        RPIExprASTParser.column_spec_return column_spec1050 = null;

        RPIExprASTParser.sql_expression_return sql_expression1053 = null;

        RPIExprASTParser.alias_return alias1054 = null;


        Object DOT1051_tree=null;
        Object ASTERISK1052_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // RPIExprAST.g:882:5: ( ( column_spec DOT ASTERISK | sql_expression ) ( alias )? )
            // RPIExprAST.g:882:9: ( column_spec DOT ASTERISK | sql_expression ) ( alias )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:882:9: ( column_spec DOT ASTERISK | sql_expression )
            int alt235=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA235_1 = input.LA(2);

                if ( (LA235_1==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt235=1;
                        }
                        break;
                    case LPAREN:
                    case SQL:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case NOT:
                    case QUOTED_STRING:
                    case 116:
                    case 168:
                    case 169:
                    case 174:
                    case 175:
                    case 197:
                    case 198:
                    case 200:
                    case 201:
                        {
                        alt235=2;
                        }
                        break;
                    case ID:
                        {
                        int LA235_7 = input.LA(4);

                        if ( (LA235_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_7==EOF||(LA235_7>=ID && LA235_7<=LPAREN)||LA235_7==EQ||LA235_7==COMMA||(LA235_7>=PLUS && LA235_7<=DIV)||(LA235_7>=AND && LA235_7<=NOT)||(LA235_7>=BOOLOP_LT && LA235_7<=BOOLOP_LE)||(LA235_7>=FOUND_ATTR && LA235_7<=EXPONENT)||LA235_7==NOT_EQ||LA235_7==DOUBLEQUOTED_STRING||(LA235_7>=111 && LA235_7<=112)||LA235_7==158||LA235_7==160||(LA235_7>=178 && LA235_7<=179)||LA235_7==192||LA235_7==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA235_8 = input.LA(4);

                        if ( (LA235_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_8==EOF||(LA235_8>=ID && LA235_8<=LPAREN)||LA235_8==EQ||LA235_8==COMMA||(LA235_8>=PLUS && LA235_8<=DIV)||(LA235_8>=AND && LA235_8<=NOT)||(LA235_8>=BOOLOP_LT && LA235_8<=BOOLOP_LE)||(LA235_8>=FOUND_ATTR && LA235_8<=EXPONENT)||LA235_8==NOT_EQ||LA235_8==DOUBLEQUOTED_STRING||(LA235_8>=111 && LA235_8<=112)||LA235_8==158||LA235_8==160||(LA235_8>=178 && LA235_8<=179)||LA235_8==192||LA235_8==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA235_9 = input.LA(4);

                        if ( (LA235_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_9==EOF||(LA235_9>=ID && LA235_9<=LPAREN)||LA235_9==EQ||LA235_9==COMMA||(LA235_9>=PLUS && LA235_9<=DIV)||(LA235_9>=AND && LA235_9<=NOT)||(LA235_9>=BOOLOP_LT && LA235_9<=BOOLOP_LE)||(LA235_9>=FOUND_ATTR && LA235_9<=EXPONENT)||LA235_9==NOT_EQ||LA235_9==DOUBLEQUOTED_STRING||(LA235_9>=111 && LA235_9<=112)||LA235_9==158||LA235_9==160||(LA235_9>=178 && LA235_9<=179)||LA235_9==192||LA235_9==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 235, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA235_1==EOF||(LA235_1>=ID && LA235_1<=LPAREN)||LA235_1==COMMA||(LA235_1>=PLUS && LA235_1<=DIV)||(LA235_1>=DOUBLEVERTBAR && LA235_1<=EXPONENT)||LA235_1==DOUBLEQUOTED_STRING||LA235_1==112||LA235_1==158||(LA235_1>=178 && LA235_1<=179)) ) {
                    alt235=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 235, 1, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA235_2 = input.LA(2);

                if ( (LA235_2==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt235=1;
                        }
                        break;
                    case LPAREN:
                    case SQL:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case NOT:
                    case QUOTED_STRING:
                    case 116:
                    case 168:
                    case 169:
                    case 174:
                    case 175:
                    case 197:
                    case 198:
                    case 200:
                    case 201:
                        {
                        alt235=2;
                        }
                        break;
                    case ID:
                        {
                        int LA235_7 = input.LA(4);

                        if ( (LA235_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_7==EOF||(LA235_7>=ID && LA235_7<=LPAREN)||LA235_7==EQ||LA235_7==COMMA||(LA235_7>=PLUS && LA235_7<=DIV)||(LA235_7>=AND && LA235_7<=NOT)||(LA235_7>=BOOLOP_LT && LA235_7<=BOOLOP_LE)||(LA235_7>=FOUND_ATTR && LA235_7<=EXPONENT)||LA235_7==NOT_EQ||LA235_7==DOUBLEQUOTED_STRING||(LA235_7>=111 && LA235_7<=112)||LA235_7==158||LA235_7==160||(LA235_7>=178 && LA235_7<=179)||LA235_7==192||LA235_7==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA235_8 = input.LA(4);

                        if ( (LA235_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_8==EOF||(LA235_8>=ID && LA235_8<=LPAREN)||LA235_8==EQ||LA235_8==COMMA||(LA235_8>=PLUS && LA235_8<=DIV)||(LA235_8>=AND && LA235_8<=NOT)||(LA235_8>=BOOLOP_LT && LA235_8<=BOOLOP_LE)||(LA235_8>=FOUND_ATTR && LA235_8<=EXPONENT)||LA235_8==NOT_EQ||LA235_8==DOUBLEQUOTED_STRING||(LA235_8>=111 && LA235_8<=112)||LA235_8==158||LA235_8==160||(LA235_8>=178 && LA235_8<=179)||LA235_8==192||LA235_8==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA235_9 = input.LA(4);

                        if ( (LA235_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_9==EOF||(LA235_9>=ID && LA235_9<=LPAREN)||LA235_9==EQ||LA235_9==COMMA||(LA235_9>=PLUS && LA235_9<=DIV)||(LA235_9>=AND && LA235_9<=NOT)||(LA235_9>=BOOLOP_LT && LA235_9<=BOOLOP_LE)||(LA235_9>=FOUND_ATTR && LA235_9<=EXPONENT)||LA235_9==NOT_EQ||LA235_9==DOUBLEQUOTED_STRING||(LA235_9>=111 && LA235_9<=112)||LA235_9==158||LA235_9==160||(LA235_9>=178 && LA235_9<=179)||LA235_9==192||LA235_9==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 235, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA235_2==EOF||(LA235_2>=ID && LA235_2<=LPAREN)||LA235_2==COMMA||(LA235_2>=PLUS && LA235_2<=DIV)||(LA235_2>=DOUBLEVERTBAR && LA235_2<=EXPONENT)||LA235_2==DOUBLEQUOTED_STRING||LA235_2==112||LA235_2==158||(LA235_2>=178 && LA235_2<=179)) ) {
                    alt235=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 235, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
            case SQL:
            case PLUS:
            case MINUS:
            case NUMBER:
            case QUOTED_STRING:
            case 116:
            case 168:
            case 169:
            case 174:
            case 175:
            case 198:
                {
                alt235=2;
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA235_4 = input.LA(2);

                if ( (LA235_4==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt235=1;
                        }
                        break;
                    case LPAREN:
                    case SQL:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case NOT:
                    case QUOTED_STRING:
                    case 116:
                    case 168:
                    case 169:
                    case 174:
                    case 175:
                    case 197:
                    case 198:
                    case 200:
                    case 201:
                        {
                        alt235=2;
                        }
                        break;
                    case ID:
                        {
                        int LA235_7 = input.LA(4);

                        if ( (LA235_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_7==EOF||(LA235_7>=ID && LA235_7<=LPAREN)||LA235_7==EQ||LA235_7==COMMA||(LA235_7>=PLUS && LA235_7<=DIV)||(LA235_7>=AND && LA235_7<=NOT)||(LA235_7>=BOOLOP_LT && LA235_7<=BOOLOP_LE)||(LA235_7>=FOUND_ATTR && LA235_7<=EXPONENT)||LA235_7==NOT_EQ||LA235_7==DOUBLEQUOTED_STRING||(LA235_7>=111 && LA235_7<=112)||LA235_7==158||LA235_7==160||(LA235_7>=178 && LA235_7<=179)||LA235_7==192||LA235_7==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA235_8 = input.LA(4);

                        if ( (LA235_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_8==EOF||(LA235_8>=ID && LA235_8<=LPAREN)||LA235_8==EQ||LA235_8==COMMA||(LA235_8>=PLUS && LA235_8<=DIV)||(LA235_8>=AND && LA235_8<=NOT)||(LA235_8>=BOOLOP_LT && LA235_8<=BOOLOP_LE)||(LA235_8>=FOUND_ATTR && LA235_8<=EXPONENT)||LA235_8==NOT_EQ||LA235_8==DOUBLEQUOTED_STRING||(LA235_8>=111 && LA235_8<=112)||LA235_8==158||LA235_8==160||(LA235_8>=178 && LA235_8<=179)||LA235_8==192||LA235_8==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA235_9 = input.LA(4);

                        if ( (LA235_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt235=2;
                                }
                                break;
                            case ASTERISK:
                                {
                                alt235=1;
                                }
                                break;
                            case ID:
                                {
                                int LA235_11 = input.LA(6);

                                if ( (LA235_11==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_11==EOF||(LA235_11>=ID && LA235_11<=LPAREN)||LA235_11==EQ||LA235_11==COMMA||(LA235_11>=PLUS && LA235_11<=DIV)||(LA235_11>=AND && LA235_11<=NOT)||(LA235_11>=BOOLOP_LT && LA235_11<=BOOLOP_LE)||(LA235_11>=FOUND_ATTR && LA235_11<=EXPONENT)||LA235_11==NOT_EQ||LA235_11==DOUBLEQUOTED_STRING||(LA235_11>=111 && LA235_11<=112)||LA235_11==158||LA235_11==160||(LA235_11>=178 && LA235_11<=179)||LA235_11==192||LA235_11==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA235_12 = input.LA(6);

                                if ( (LA235_12==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_12==EOF||(LA235_12>=ID && LA235_12<=LPAREN)||LA235_12==EQ||LA235_12==COMMA||(LA235_12>=PLUS && LA235_12<=DIV)||(LA235_12>=AND && LA235_12<=NOT)||(LA235_12>=BOOLOP_LT && LA235_12<=BOOLOP_LE)||(LA235_12>=FOUND_ATTR && LA235_12<=EXPONENT)||LA235_12==NOT_EQ||LA235_12==DOUBLEQUOTED_STRING||(LA235_12>=111 && LA235_12<=112)||LA235_12==158||LA235_12==160||(LA235_12>=178 && LA235_12<=179)||LA235_12==192||LA235_12==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA235_13 = input.LA(6);

                                if ( (LA235_13==DOT) ) {
                                    int LA235_14 = input.LA(7);

                                    if ( ((LA235_14>=ID && LA235_14<=LPAREN)||(LA235_14>=SQL && LA235_14<=MINUS)||LA235_14==NUMBER||LA235_14==NOT||LA235_14==QUOTED_STRING||LA235_14==DOUBLEQUOTED_STRING||LA235_14==116||LA235_14==158||(LA235_14>=168 && LA235_14<=169)||(LA235_14>=174 && LA235_14<=175)||(LA235_14>=197 && LA235_14<=198)||(LA235_14>=200 && LA235_14<=201)) ) {
                                        alt235=2;
                                    }
                                    else if ( (LA235_14==ASTERISK) ) {
                                        alt235=1;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 235, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA235_13==EOF||(LA235_13>=ID && LA235_13<=LPAREN)||LA235_13==EQ||LA235_13==COMMA||(LA235_13>=PLUS && LA235_13<=DIV)||(LA235_13>=AND && LA235_13<=NOT)||(LA235_13>=BOOLOP_LT && LA235_13<=BOOLOP_LE)||(LA235_13>=FOUND_ATTR && LA235_13<=EXPONENT)||LA235_13==NOT_EQ||LA235_13==DOUBLEQUOTED_STRING||(LA235_13>=111 && LA235_13<=112)||LA235_13==158||LA235_13==160||(LA235_13>=178 && LA235_13<=179)||LA235_13==192||LA235_13==196) ) {
                                    alt235=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 235, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 235, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA235_9==EOF||(LA235_9>=ID && LA235_9<=LPAREN)||LA235_9==EQ||LA235_9==COMMA||(LA235_9>=PLUS && LA235_9<=DIV)||(LA235_9>=AND && LA235_9<=NOT)||(LA235_9>=BOOLOP_LT && LA235_9<=BOOLOP_LE)||(LA235_9>=FOUND_ATTR && LA235_9<=EXPONENT)||LA235_9==NOT_EQ||LA235_9==DOUBLEQUOTED_STRING||(LA235_9>=111 && LA235_9<=112)||LA235_9==158||LA235_9==160||(LA235_9>=178 && LA235_9<=179)||LA235_9==192||LA235_9==196) ) {
                            alt235=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 235, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 235, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA235_4==EOF||(LA235_4>=ID && LA235_4<=LPAREN)||LA235_4==COMMA||(LA235_4>=PLUS && LA235_4<=DIV)||(LA235_4>=DOUBLEVERTBAR && LA235_4<=EXPONENT)||LA235_4==DOUBLEQUOTED_STRING||LA235_4==112||LA235_4==158||(LA235_4>=178 && LA235_4<=179)) ) {
                    alt235=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 235, 4, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // RPIExprAST.g:882:13: column_spec DOT ASTERISK
                    {
                    pushFollow(FOLLOW_column_spec_in_displayed_column8882);
                    column_spec1050=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1050.getTree());
                    DOT1051=(Token)match(input,DOT,FOLLOW_DOT_in_displayed_column8884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1051_tree = (Object)adaptor.create(DOT1051);
                    adaptor.addChild(root_0, DOT1051_tree);
                    }
                    ASTERISK1052=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column8886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK1052_tree = (Object)adaptor.create(ASTERISK1052);
                    adaptor.addChild(root_0, ASTERISK1052_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:885:13: sql_expression
                    {
                    pushFollow(FOLLOW_sql_expression_in_displayed_column8902);
                    sql_expression1053=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1053.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:887:9: ( alias )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==DOUBLEQUOTED_STRING||LA236_0==112||LA236_0==158) ) {
                alt236=1;
            }
            else if ( (LA236_0==ID) ) {
                int LA236_2 = input.LA(2);

                if ( (LA236_2==EOF||LA236_2==COMMA||(LA236_2>=178 && LA236_2<=179)) ) {
                    alt236=1;
                }
                else if ( (LA236_2==ID) ) {
                    int LA236_4 = input.LA(3);

                    if ( (LA236_4==ID) ) {
                        alt236=1;
                    }
                }
            }
            switch (alt236) {
                case 1 :
                    // RPIExprAST.g:887:11: alias
                    {
                    pushFollow(FOLLOW_alias_in_displayed_column8924);
                    alias1054=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias1054.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, displayed_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "displayed_column"

    public static class schema_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_name"
    // RPIExprAST.g:890:1: schema_name : sql_identifier ;
    public final RPIExprASTParser.schema_name_return schema_name() throws RecognitionException {
        RPIExprASTParser.schema_name_return retval = new RPIExprASTParser.schema_name_return();
        retval.start = input.LT(1);
        int schema_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1055 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // RPIExprAST.g:891:5: ( sql_identifier )
            // RPIExprAST.g:891:9: sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_schema_name8946);
            sql_identifier1055=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1055.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, schema_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_name"

    public static class table_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_name"
    // RPIExprAST.g:894:1: table_name : sql_identifier ;
    public final RPIExprASTParser.table_name_return table_name() throws RecognitionException {
        RPIExprASTParser.table_name_return retval = new RPIExprASTParser.table_name_return();
        retval.start = input.LT(1);
        int table_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1056 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // RPIExprAST.g:895:5: ( sql_identifier )
            // RPIExprAST.g:895:9: sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_table_name8965);
            sql_identifier1056=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1056.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, table_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_name"

    public static class nested_expressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_expressions"
    // RPIExprAST.g:898:1: nested_expressions : nested_expression ( COMMA nested_expression )* ;
    public final RPIExprASTParser.nested_expressions_return nested_expressions() throws RecognitionException {
        RPIExprASTParser.nested_expressions_return retval = new RPIExprASTParser.nested_expressions_return();
        retval.start = input.LT(1);
        int nested_expressions_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1058=null;
        RPIExprASTParser.nested_expression_return nested_expression1057 = null;

        RPIExprASTParser.nested_expression_return nested_expression1059 = null;


        Object COMMA1058_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // RPIExprAST.g:899:5: ( nested_expression ( COMMA nested_expression )* )
            // RPIExprAST.g:899:9: nested_expression ( COMMA nested_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nested_expression_in_nested_expressions8984);
            nested_expression1057=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1057.getTree());
            // RPIExprAST.g:899:27: ( COMMA nested_expression )*
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);

                if ( (LA237_0==COMMA) ) {
                    alt237=1;
                }


                switch (alt237) {
            	case 1 :
            	    // RPIExprAST.g:899:29: COMMA nested_expression
            	    {
            	    COMMA1058=(Token)match(input,COMMA,FOLLOW_COMMA_in_nested_expressions8988); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1058_tree = (Object)adaptor.create(COMMA1058);
            	    adaptor.addChild(root_0, COMMA1058_tree);
            	    }
            	    pushFollow(FOLLOW_nested_expression_in_nested_expressions8990);
            	    nested_expression1059=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1059.getTree());

            	    }
            	    break;

            	default :
            	    break loop237;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, nested_expressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_expressions"

    public static class nested_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_expression"
    // RPIExprAST.g:902:1: nested_expression : ({...}? sql_expression | {...}? plsql_expression );
    public final RPIExprASTParser.nested_expression_return nested_expression() throws RecognitionException {
        RPIExprASTParser.nested_expression_return retval = new RPIExprASTParser.nested_expression_return();
        retval.start = input.LT(1);
        int nested_expression_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_expression_return sql_expression1060 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression1061 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // RPIExprAST.g:903:5: ({...}? sql_expression | {...}? plsql_expression )
            int alt238=2;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
                {
                int LA238_1 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 1, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA238_2 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 2, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA238_3 = input.LA(2);

                if ( (((synpred400_RPIExprAST()&&(  is_sql ))||(((synpred400_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(((synpred400_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred400_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred400_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred400_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR"))))) ) {
                    alt238=1;
                }
                else if ( ((((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(( !is_sql )&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||( !is_sql )||((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT"))))) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 3, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA238_4 = input.LA(2);

                if ( (((synpred400_RPIExprAST()&&(  is_sql ))&&( is_sql ))) ) {
                    alt238=1;
                }
                else if ( ((( !is_sql )&&( is_sql ))) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 4, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA238_5 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 5, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA238_6 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 6, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA238_7 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 7, input);

                    throw nvae;
                }
                }
                break;
            case 168:
            case 169:
                {
                int LA238_8 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 8, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA238_9 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 9, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA238_10 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 10, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA238_11 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 11, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA238_12 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 12, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA238_13 = input.LA(2);

                if ( ((synpred400_RPIExprAST()&&(  is_sql ))) ) {
                    alt238=1;
                }
                else if ( (( !is_sql )) ) {
                    alt238=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 238, 13, input);

                    throw nvae;
                }
                }
                break;
            case NOT:
                {
                alt238=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);

                throw nvae;
            }

            switch (alt238) {
                case 1 :
                    // RPIExprAST.g:903:9: {...}? sql_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", "  is_sql ");
                    }
                    pushFollow(FOLLOW_sql_expression_in_nested_expression9014);
                    sql_expression1060=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1060.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:904:9: {...}? plsql_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", " !is_sql ");
                    }
                    pushFollow(FOLLOW_plsql_expression_in_nested_expression9026);
                    plsql_expression1061=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression1061.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, nested_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_expression"

    public static class plsql_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_condition"
    // RPIExprAST.g:906:1: plsql_condition : expr_bool ;
    public final RPIExprASTParser.plsql_condition_return plsql_condition() throws RecognitionException {
        RPIExprASTParser.plsql_condition_return retval = new RPIExprASTParser.plsql_condition_return();
        retval.start = input.LT(1);
        int plsql_condition_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.expr_bool_return expr_bool1062 = null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // RPIExprAST.g:908:5: ( expr_bool )
            // RPIExprAST.g:908:9: expr_bool
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_bool_in_plsql_condition9057);
            expr_bool1062=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool1062.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, plsql_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_condition"

    public static class plsql_expressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_expressions"
    // RPIExprAST.g:911:1: plsql_expressions : plsql_expression ( COMMA plsql_expression )* ;
    public final RPIExprASTParser.plsql_expressions_return plsql_expressions() throws RecognitionException {
        RPIExprASTParser.plsql_expressions_return retval = new RPIExprASTParser.plsql_expressions_return();
        retval.start = input.LT(1);
        int plsql_expressions_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1064=null;
        RPIExprASTParser.plsql_expression_return plsql_expression1063 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression1065 = null;


        Object COMMA1064_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // RPIExprAST.g:912:5: ( plsql_expression ( COMMA plsql_expression )* )
            // RPIExprAST.g:912:9: plsql_expression ( COMMA plsql_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_plsql_expression_in_plsql_expressions9076);
            plsql_expression1063=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression1063.getTree());
            // RPIExprAST.g:912:26: ( COMMA plsql_expression )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==COMMA) ) {
                    alt239=1;
                }


                switch (alt239) {
            	case 1 :
            	    // RPIExprAST.g:912:28: COMMA plsql_expression
            	    {
            	    COMMA1064=(Token)match(input,COMMA,FOLLOW_COMMA_in_plsql_expressions9080); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1064_tree = (Object)adaptor.create(COMMA1064);
            	    adaptor.addChild(root_0, COMMA1064_tree);
            	    }
            	    pushFollow(FOLLOW_plsql_expression_in_plsql_expressions9082);
            	    plsql_expression1065=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression1065.getTree());

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, plsql_expressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_expressions"

    public static class plsql_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_expression"
    // RPIExprAST.g:915:1: plsql_expression : expr_bool ;
    public final RPIExprASTParser.plsql_expression_return plsql_expression() throws RecognitionException {
        RPIExprASTParser.plsql_expression_return retval = new RPIExprASTParser.plsql_expression_return();
        retval.start = input.LT(1);
        int plsql_expression_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.expr_bool_return expr_bool1066 = null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // RPIExprAST.g:917:5: ( expr_bool )
            // RPIExprAST.g:917:9: expr_bool
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_bool_in_plsql_expression9117);
            expr_bool1066=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool1066.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, plsql_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_expression"

    public static class expr_bool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_bool"
    // RPIExprAST.g:921:1: expr_bool : expr_or ( 'OR' expr_or )* ;
    public final RPIExprASTParser.expr_bool_return expr_bool() throws RecognitionException {
        RPIExprASTParser.expr_bool_return retval = new RPIExprASTParser.expr_bool_return();
        retval.start = input.LT(1);
        int expr_bool_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1068=null;
        RPIExprASTParser.expr_or_return expr_or1067 = null;

        RPIExprASTParser.expr_or_return expr_or1069 = null;


        Object string_literal1068_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // RPIExprAST.g:922:5: ( expr_or ( 'OR' expr_or )* )
            // RPIExprAST.g:922:9: expr_or ( 'OR' expr_or )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_or_in_expr_bool9137);
            expr_or1067=expr_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or1067.getTree());
            // RPIExprAST.g:922:17: ( 'OR' expr_or )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==OR) ) {
                    int LA240_2 = input.LA(2);

                    if ( (synpred402_RPIExprAST()) ) {
                        alt240=1;
                    }


                }


                switch (alt240) {
            	case 1 :
            	    // RPIExprAST.g:922:19: 'OR' expr_or
            	    {
            	    string_literal1068=(Token)match(input,OR,FOLLOW_OR_in_expr_bool9141); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1068_tree = (Object)adaptor.create(string_literal1068);
            	    adaptor.addChild(root_0, string_literal1068_tree);
            	    }
            	    pushFollow(FOLLOW_expr_or_in_expr_bool9143);
            	    expr_or1069=expr_or();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_or1069.getTree());

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, expr_bool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_bool"

    public static class expr_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or"
    // RPIExprAST.g:924:1: expr_or : expr_and ( 'AND' expr_and )* ;
    public final RPIExprASTParser.expr_or_return expr_or() throws RecognitionException {
        RPIExprASTParser.expr_or_return retval = new RPIExprASTParser.expr_or_return();
        retval.start = input.LT(1);
        int expr_or_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1071=null;
        RPIExprASTParser.expr_and_return expr_and1070 = null;

        RPIExprASTParser.expr_and_return expr_and1072 = null;


        Object string_literal1071_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // RPIExprAST.g:925:5: ( expr_and ( 'AND' expr_and )* )
            // RPIExprAST.g:925:9: expr_and ( 'AND' expr_and )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_and_in_expr_or9164);
            expr_and1070=expr_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_and1070.getTree());
            // RPIExprAST.g:925:18: ( 'AND' expr_and )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==AND) ) {
                    int LA241_2 = input.LA(2);

                    if ( (synpred403_RPIExprAST()) ) {
                        alt241=1;
                    }


                }


                switch (alt241) {
            	case 1 :
            	    // RPIExprAST.g:925:20: 'AND' expr_and
            	    {
            	    string_literal1071=(Token)match(input,AND,FOLLOW_AND_in_expr_or9168); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1071_tree = (Object)adaptor.create(string_literal1071);
            	    adaptor.addChild(root_0, string_literal1071_tree);
            	    }
            	    pushFollow(FOLLOW_expr_and_in_expr_or9170);
            	    expr_and1072=expr_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_and1072.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, expr_or_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_or"

    public static class expr_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_and"
    // RPIExprAST.g:927:1: expr_and : ( 'NOT' )? expr_not ;
    public final RPIExprASTParser.expr_and_return expr_and() throws RecognitionException {
        RPIExprASTParser.expr_and_return retval = new RPIExprASTParser.expr_and_return();
        retval.start = input.LT(1);
        int expr_and_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1073=null;
        RPIExprASTParser.expr_not_return expr_not1074 = null;


        Object string_literal1073_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // RPIExprAST.g:928:5: ( ( 'NOT' )? expr_not )
            // RPIExprAST.g:928:9: ( 'NOT' )? expr_not
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:928:9: ( 'NOT' )?
            int alt242=2;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==NOT) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    // RPIExprAST.g:928:11: 'NOT'
                    {
                    string_literal1073=(Token)match(input,NOT,FOLLOW_NOT_in_expr_and9193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1073_tree = (Object)adaptor.create(string_literal1073);
                    adaptor.addChild(root_0, string_literal1073_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expr_not_in_expr_and9198);
            expr_not1074=expr_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_not1074.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, expr_and_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_and"

    public static class expr_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_not"
    // RPIExprAST.g:930:1: expr_not : expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* ;
    public final RPIExprASTParser.expr_not_return expr_not() throws RecognitionException {
        RPIExprASTParser.expr_not_return retval = new RPIExprASTParser.expr_not_return();
        retval.start = input.LT(1);
        int expr_not_StartIndex = input.index();
        Object root_0 = null;

        Token FOUND_ATTR1078=null;
        Token NOTFOUND_ATTR1079=null;
        Token ISOPEN_ATTR1080=null;
        Token ROWCOUNT_ATTR1081=null;
        Token BULK_ROWCOUNT_ATTR1082=null;
        Token string_literal1083=null;
        Token string_literal1084=null;
        Token string_literal1085=null;
        Token string_literal1086=null;
        Token string_literal1087=null;
        Token string_literal1089=null;
        Token string_literal1090=null;
        Token string_literal1092=null;
        Token string_literal1094=null;
        Token string_literal1095=null;
        Token LPAREN1096=null;
        Token RPAREN1098=null;
        RPIExprASTParser.expr_add_return expr_add1075 = null;

        RPIExprASTParser.relational_op_return relational_op1076 = null;

        RPIExprASTParser.expr_add_return expr_add1077 = null;

        RPIExprASTParser.expr_add_return expr_add1088 = null;

        RPIExprASTParser.expr_add_return expr_add1091 = null;

        RPIExprASTParser.expr_add_return expr_add1093 = null;

        RPIExprASTParser.nested_expressions_return nested_expressions1097 = null;


        Object FOUND_ATTR1078_tree=null;
        Object NOTFOUND_ATTR1079_tree=null;
        Object ISOPEN_ATTR1080_tree=null;
        Object ROWCOUNT_ATTR1081_tree=null;
        Object BULK_ROWCOUNT_ATTR1082_tree=null;
        Object string_literal1083_tree=null;
        Object string_literal1084_tree=null;
        Object string_literal1085_tree=null;
        Object string_literal1086_tree=null;
        Object string_literal1087_tree=null;
        Object string_literal1089_tree=null;
        Object string_literal1090_tree=null;
        Object string_literal1092_tree=null;
        Object string_literal1094_tree=null;
        Object string_literal1095_tree=null;
        Object LPAREN1096_tree=null;
        Object RPAREN1098_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // RPIExprAST.g:931:5: ( expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* )
            // RPIExprAST.g:931:9: expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_add_in_expr_not9216);
            expr_add1075=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1075.getTree());
            // RPIExprAST.g:932:9: ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            loop247:
            do {
                int alt247=11;
                switch ( input.LA(1) ) {
                case EQ:
                    {
                    int LA247_2 = input.LA(2);

                    if ( (synpred405_RPIExprAST()) ) {
                        alt247=1;
                    }


                    }
                    break;
                case FOUND_ATTR:
                    {
                    int LA247_3 = input.LA(2);

                    if ( (synpred406_RPIExprAST()) ) {
                        alt247=2;
                    }


                    }
                    break;
                case NOTFOUND_ATTR:
                    {
                    int LA247_4 = input.LA(2);

                    if ( (synpred407_RPIExprAST()) ) {
                        alt247=3;
                    }


                    }
                    break;
                case ISOPEN_ATTR:
                    {
                    int LA247_5 = input.LA(2);

                    if ( (synpred408_RPIExprAST()) ) {
                        alt247=4;
                    }


                    }
                    break;
                case ROWCOUNT_ATTR:
                    {
                    int LA247_6 = input.LA(2);

                    if ( (synpred409_RPIExprAST()) ) {
                        alt247=5;
                    }


                    }
                    break;
                case BULK_ROWCOUNT_ATTR:
                    {
                    int LA247_7 = input.LA(2);

                    if ( (synpred410_RPIExprAST()) ) {
                        alt247=6;
                    }


                    }
                    break;
                case 111:
                    {
                    int LA247_8 = input.LA(2);

                    if ( (synpred412_RPIExprAST()) ) {
                        alt247=7;
                    }


                    }
                    break;
                case NOT:
                    {
                    int LA247_9 = input.LA(2);

                    if ( (synpred414_RPIExprAST()) ) {
                        alt247=8;
                    }
                    else if ( (synpred416_RPIExprAST()) ) {
                        alt247=9;
                    }
                    else if ( (synpred418_RPIExprAST()) ) {
                        alt247=10;
                    }


                    }
                    break;
                case 192:
                    {
                    int LA247_10 = input.LA(2);

                    if ( (synpred414_RPIExprAST()) ) {
                        alt247=8;
                    }


                    }
                    break;
                case 196:
                    {
                    int LA247_11 = input.LA(2);

                    if ( (synpred416_RPIExprAST()) ) {
                        alt247=9;
                    }


                    }
                    break;
                case 160:
                    {
                    int LA247_12 = input.LA(2);

                    if ( (synpred418_RPIExprAST()) ) {
                        alt247=10;
                    }


                    }
                    break;
                case BOOLOP_LT:
                case BOOLOP_GT:
                case BOOLOP_GE:
                case BOOLOP_LE:
                case NOT_EQ:
                    {
                    int LA247_13 = input.LA(2);

                    if ( (synpred405_RPIExprAST()) ) {
                        alt247=1;
                    }


                    }
                    break;

                }

                switch (alt247) {
            	case 1 :
            	    // RPIExprAST.g:932:13: relational_op expr_add
            	    {
            	    pushFollow(FOLLOW_relational_op_in_expr_not9231);
            	    relational_op1076=relational_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1076.getTree());
            	    pushFollow(FOLLOW_expr_add_in_expr_not9233);
            	    expr_add1077=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1077.getTree());

            	    }
            	    break;
            	case 2 :
            	    // RPIExprAST.g:933:13: FOUND_ATTR
            	    {
            	    FOUND_ATTR1078=(Token)match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_expr_not9247); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOUND_ATTR1078_tree = (Object)adaptor.create(FOUND_ATTR1078);
            	    adaptor.addChild(root_0, FOUND_ATTR1078_tree);
            	    }

            	    }
            	    break;
            	case 3 :
            	    // RPIExprAST.g:933:26: NOTFOUND_ATTR
            	    {
            	    NOTFOUND_ATTR1079=(Token)match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_expr_not9251); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOTFOUND_ATTR1079_tree = (Object)adaptor.create(NOTFOUND_ATTR1079);
            	    adaptor.addChild(root_0, NOTFOUND_ATTR1079_tree);
            	    }

            	    }
            	    break;
            	case 4 :
            	    // RPIExprAST.g:933:42: ISOPEN_ATTR
            	    {
            	    ISOPEN_ATTR1080=(Token)match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_expr_not9255); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ISOPEN_ATTR1080_tree = (Object)adaptor.create(ISOPEN_ATTR1080);
            	    adaptor.addChild(root_0, ISOPEN_ATTR1080_tree);
            	    }

            	    }
            	    break;
            	case 5 :
            	    // RPIExprAST.g:933:56: ROWCOUNT_ATTR
            	    {
            	    ROWCOUNT_ATTR1081=(Token)match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_expr_not9259); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ROWCOUNT_ATTR1081_tree = (Object)adaptor.create(ROWCOUNT_ATTR1081);
            	    adaptor.addChild(root_0, ROWCOUNT_ATTR1081_tree);
            	    }

            	    }
            	    break;
            	case 6 :
            	    // RPIExprAST.g:933:72: BULK_ROWCOUNT_ATTR
            	    {
            	    BULK_ROWCOUNT_ATTR1082=(Token)match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not9263); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BULK_ROWCOUNT_ATTR1082_tree = (Object)adaptor.create(BULK_ROWCOUNT_ATTR1082);
            	    adaptor.addChild(root_0, BULK_ROWCOUNT_ATTR1082_tree);
            	    }

            	    }
            	    break;
            	case 7 :
            	    // RPIExprAST.g:934:13: 'IS' ( 'NOT' )? 'NULL'
            	    {
            	    string_literal1083=(Token)match(input,111,FOLLOW_111_in_expr_not9277); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1083_tree = (Object)adaptor.create(string_literal1083);
            	    adaptor.addChild(root_0, string_literal1083_tree);
            	    }
            	    // RPIExprAST.g:934:18: ( 'NOT' )?
            	    int alt243=2;
            	    int LA243_0 = input.LA(1);

            	    if ( (LA243_0==NOT) ) {
            	        alt243=1;
            	    }
            	    switch (alt243) {
            	        case 1 :
            	            // RPIExprAST.g:934:20: 'NOT'
            	            {
            	            string_literal1084=(Token)match(input,NOT,FOLLOW_NOT_in_expr_not9281); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal1084_tree = (Object)adaptor.create(string_literal1084);
            	            adaptor.addChild(root_0, string_literal1084_tree);
            	            }

            	            }
            	            break;

            	    }

            	    string_literal1085=(Token)match(input,116,FOLLOW_116_in_expr_not9286); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1085_tree = (Object)adaptor.create(string_literal1085);
            	    adaptor.addChild(root_0, string_literal1085_tree);
            	    }

            	    }
            	    break;
            	case 8 :
            	    // RPIExprAST.g:935:13: ( 'NOT' )? 'LIKE' expr_add
            	    {
            	    // RPIExprAST.g:935:13: ( 'NOT' )?
            	    int alt244=2;
            	    int LA244_0 = input.LA(1);

            	    if ( (LA244_0==NOT) ) {
            	        alt244=1;
            	    }
            	    switch (alt244) {
            	        case 1 :
            	            // RPIExprAST.g:935:15: 'NOT'
            	            {
            	            string_literal1086=(Token)match(input,NOT,FOLLOW_NOT_in_expr_not9302); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal1086_tree = (Object)adaptor.create(string_literal1086);
            	            adaptor.addChild(root_0, string_literal1086_tree);
            	            }

            	            }
            	            break;

            	    }

            	    string_literal1087=(Token)match(input,192,FOLLOW_192_in_expr_not9307); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1087_tree = (Object)adaptor.create(string_literal1087);
            	    adaptor.addChild(root_0, string_literal1087_tree);
            	    }
            	    pushFollow(FOLLOW_expr_add_in_expr_not9309);
            	    expr_add1088=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1088.getTree());

            	    }
            	    break;
            	case 9 :
            	    // RPIExprAST.g:936:13: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
            	    {
            	    // RPIExprAST.g:936:13: ( 'NOT' )?
            	    int alt245=2;
            	    int LA245_0 = input.LA(1);

            	    if ( (LA245_0==NOT) ) {
            	        alt245=1;
            	    }
            	    switch (alt245) {
            	        case 1 :
            	            // RPIExprAST.g:936:15: 'NOT'
            	            {
            	            string_literal1089=(Token)match(input,NOT,FOLLOW_NOT_in_expr_not9325); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal1089_tree = (Object)adaptor.create(string_literal1089);
            	            adaptor.addChild(root_0, string_literal1089_tree);
            	            }

            	            }
            	            break;

            	    }

            	    string_literal1090=(Token)match(input,196,FOLLOW_196_in_expr_not9330); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1090_tree = (Object)adaptor.create(string_literal1090);
            	    adaptor.addChild(root_0, string_literal1090_tree);
            	    }
            	    pushFollow(FOLLOW_expr_add_in_expr_not9332);
            	    expr_add1091=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1091.getTree());
            	    string_literal1092=(Token)match(input,AND,FOLLOW_AND_in_expr_not9334); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1092_tree = (Object)adaptor.create(string_literal1092);
            	    adaptor.addChild(root_0, string_literal1092_tree);
            	    }
            	    pushFollow(FOLLOW_expr_add_in_expr_not9336);
            	    expr_add1093=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1093.getTree());

            	    }
            	    break;
            	case 10 :
            	    // RPIExprAST.g:937:13: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
            	    {
            	    // RPIExprAST.g:937:13: ( 'NOT' )?
            	    int alt246=2;
            	    int LA246_0 = input.LA(1);

            	    if ( (LA246_0==NOT) ) {
            	        alt246=1;
            	    }
            	    switch (alt246) {
            	        case 1 :
            	            // RPIExprAST.g:937:15: 'NOT'
            	            {
            	            string_literal1094=(Token)match(input,NOT,FOLLOW_NOT_in_expr_not9352); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal1094_tree = (Object)adaptor.create(string_literal1094);
            	            adaptor.addChild(root_0, string_literal1094_tree);
            	            }

            	            }
            	            break;

            	    }

            	    string_literal1095=(Token)match(input,160,FOLLOW_160_in_expr_not9357); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1095_tree = (Object)adaptor.create(string_literal1095);
            	    adaptor.addChild(root_0, string_literal1095_tree);
            	    }
            	    LPAREN1096=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expr_not9359); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN1096_tree = (Object)adaptor.create(LPAREN1096);
            	    adaptor.addChild(root_0, LPAREN1096_tree);
            	    }
            	    pushFollow(FOLLOW_nested_expressions_in_expr_not9361);
            	    nested_expressions1097=nested_expressions();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expressions1097.getTree());
            	    RPAREN1098=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expr_not9363); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN1098_tree = (Object)adaptor.create(RPAREN1098);
            	    adaptor.addChild(root_0, RPAREN1098_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop247;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, expr_not_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_not"

    public static class boolean_literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_literal"
    // RPIExprAST.g:941:1: boolean_literal : ( 'TRUE' | 'FALSE' );
    public final RPIExprASTParser.boolean_literal_return boolean_literal() throws RecognitionException {
        RPIExprASTParser.boolean_literal_return retval = new RPIExprASTParser.boolean_literal_return();
        retval.start = input.LT(1);
        int boolean_literal_StartIndex = input.index();
        Object root_0 = null;

        Token set1099=null;

        Object set1099_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // RPIExprAST.g:942:5: ( 'TRUE' | 'FALSE' )
            // RPIExprAST.g:
            {
            root_0 = (Object)adaptor.nil();

            set1099=(Token)input.LT(1);
            if ( (input.LA(1)>=168 && input.LA(1)<=169) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1099));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, boolean_literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolean_literal"

    public static class sql_expressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_expressions"
    // RPIExprAST.g:945:1: sql_expressions : sql_expression ( COMMA sql_expression )* ;
    public final RPIExprASTParser.sql_expressions_return sql_expressions() throws RecognitionException {
        RPIExprASTParser.sql_expressions_return retval = new RPIExprASTParser.sql_expressions_return();
        retval.start = input.LT(1);
        int sql_expressions_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1101=null;
        RPIExprASTParser.sql_expression_return sql_expression1100 = null;

        RPIExprASTParser.sql_expression_return sql_expression1102 = null;


        Object COMMA1101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // RPIExprAST.g:946:5: ( sql_expression ( COMMA sql_expression )* )
            // RPIExprAST.g:946:9: sql_expression ( COMMA sql_expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_sql_expressions9416);
            sql_expression1100=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1100.getTree());
            // RPIExprAST.g:946:24: ( COMMA sql_expression )*
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==COMMA) ) {
                    int LA248_2 = input.LA(2);

                    if ( (synpred420_RPIExprAST()) ) {
                        alt248=1;
                    }


                }


                switch (alt248) {
            	case 1 :
            	    // RPIExprAST.g:946:26: COMMA sql_expression
            	    {
            	    COMMA1101=(Token)match(input,COMMA,FOLLOW_COMMA_in_sql_expressions9420); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1101_tree = (Object)adaptor.create(COMMA1101);
            	    adaptor.addChild(root_0, COMMA1101_tree);
            	    }
            	    pushFollow(FOLLOW_sql_expression_in_sql_expressions9422);
            	    sql_expression1102=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1102.getTree());

            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, sql_expressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_expressions"

    public static class sql_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_expression"
    // RPIExprAST.g:948:1: sql_expression : expr_add ;
    public final RPIExprASTParser.sql_expression_return sql_expression() throws RecognitionException {
        RPIExprASTParser.sql_expression_return retval = new RPIExprASTParser.sql_expression_return();
        retval.start = input.LT(1);
        int sql_expression_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.expr_add_return expr_add1103 = null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // RPIExprAST.g:950:5: ( expr_add )
            // RPIExprAST.g:950:9: expr_add
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_add_in_sql_expression9456);
            expr_add1103=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1103.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, sql_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_expression"

    public static class expr_add_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_add"
    // RPIExprAST.g:952:1: expr_add : expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )* ;
    public final RPIExprASTParser.expr_add_return expr_add() throws RecognitionException {
        RPIExprASTParser.expr_add_return retval = new RPIExprASTParser.expr_add_return();
        retval.start = input.LT(1);
        int expr_add_StartIndex = input.index();
        Object root_0 = null;

        Token set1105=null;
        RPIExprASTParser.expr_mul_return expr_mul1104 = null;

        RPIExprASTParser.expr_mul_return expr_mul1106 = null;


        Object set1105_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // RPIExprAST.g:953:5: ( expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )* )
            // RPIExprAST.g:953:9: expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_mul_in_expr_add9474);
            expr_mul1104=expr_mul();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_mul1104.getTree());
            // RPIExprAST.g:953:18: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )*
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( ((LA249_0>=PLUS && LA249_0<=MINUS)) ) {
                    int LA249_2 = input.LA(2);

                    if ( (synpred423_RPIExprAST()) ) {
                        alt249=1;
                    }


                }
                else if ( (LA249_0==DOUBLEVERTBAR) ) {
                    int LA249_3 = input.LA(2);

                    if ( (synpred423_RPIExprAST()) ) {
                        alt249=1;
                    }


                }


                switch (alt249) {
            	case 1 :
            	    // RPIExprAST.g:953:20: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
            	    {
            	    set1105=(Token)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS)||input.LA(1)==DOUBLEVERTBAR ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1105));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_expr_mul_in_expr_add9492);
            	    expr_mul1106=expr_mul();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_mul1106.getTree());

            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, expr_add_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_add"

    public static class expr_mul_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_mul"
    // RPIExprAST.g:955:1: expr_mul : expr_sign ( ( ASTERISK | DIV ) expr_sign )* ;
    public final RPIExprASTParser.expr_mul_return expr_mul() throws RecognitionException {
        RPIExprASTParser.expr_mul_return retval = new RPIExprASTParser.expr_mul_return();
        retval.start = input.LT(1);
        int expr_mul_StartIndex = input.index();
        Object root_0 = null;

        Token set1108=null;
        RPIExprASTParser.expr_sign_return expr_sign1107 = null;

        RPIExprASTParser.expr_sign_return expr_sign1109 = null;


        Object set1108_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // RPIExprAST.g:956:5: ( expr_sign ( ( ASTERISK | DIV ) expr_sign )* )
            // RPIExprAST.g:956:9: expr_sign ( ( ASTERISK | DIV ) expr_sign )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_sign_in_expr_mul9513);
            expr_sign1107=expr_sign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_sign1107.getTree());
            // RPIExprAST.g:956:19: ( ( ASTERISK | DIV ) expr_sign )*
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( ((LA250_0>=ASTERISK && LA250_0<=DIV)) ) {
                    int LA250_2 = input.LA(2);

                    if ( (synpred425_RPIExprAST()) ) {
                        alt250=1;
                    }


                }


                switch (alt250) {
            	case 1 :
            	    // RPIExprAST.g:956:21: ( ASTERISK | DIV ) expr_sign
            	    {
            	    set1108=(Token)input.LT(1);
            	    if ( (input.LA(1)>=ASTERISK && input.LA(1)<=DIV) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1108));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_expr_sign_in_expr_mul9527);
            	    expr_sign1109=expr_sign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_sign1109.getTree());

            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, expr_mul_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_mul"

    public static class expr_sign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_sign"
    // RPIExprAST.g:958:1: expr_sign : ( PLUS | MINUS )? expr_pow ;
    public final RPIExprASTParser.expr_sign_return expr_sign() throws RecognitionException {
        RPIExprASTParser.expr_sign_return retval = new RPIExprASTParser.expr_sign_return();
        retval.start = input.LT(1);
        int expr_sign_StartIndex = input.index();
        Object root_0 = null;

        Token set1110=null;
        RPIExprASTParser.expr_pow_return expr_pow1111 = null;


        Object set1110_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // RPIExprAST.g:959:5: ( ( PLUS | MINUS )? expr_pow )
            // RPIExprAST.g:959:9: ( PLUS | MINUS )? expr_pow
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:959:9: ( PLUS | MINUS )?
            int alt251=2;
            int LA251_0 = input.LA(1);

            if ( ((LA251_0>=PLUS && LA251_0<=MINUS)) ) {
                alt251=1;
            }
            switch (alt251) {
                case 1 :
                    // RPIExprAST.g:
                    {
                    set1110=(Token)input.LT(1);
                    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1110));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_expr_pow_in_expr_sign9559);
            expr_pow1111=expr_pow();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_pow1111.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, expr_sign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_sign"

    public static class expr_pow_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_pow"
    // RPIExprAST.g:961:1: expr_pow : expr_expr ( EXPONENT expr_expr )* ;
    public final RPIExprASTParser.expr_pow_return expr_pow() throws RecognitionException {
        RPIExprASTParser.expr_pow_return retval = new RPIExprASTParser.expr_pow_return();
        retval.start = input.LT(1);
        int expr_pow_StartIndex = input.index();
        Object root_0 = null;

        Token EXPONENT1113=null;
        RPIExprASTParser.expr_expr_return expr_expr1112 = null;

        RPIExprASTParser.expr_expr_return expr_expr1114 = null;


        Object EXPONENT1113_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // RPIExprAST.g:962:5: ( expr_expr ( EXPONENT expr_expr )* )
            // RPIExprAST.g:962:9: expr_expr ( EXPONENT expr_expr )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_expr_in_expr_pow9577);
            expr_expr1112=expr_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_expr1112.getTree());
            // RPIExprAST.g:962:19: ( EXPONENT expr_expr )*
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==EXPONENT) ) {
                    int LA252_2 = input.LA(2);

                    if ( (synpred428_RPIExprAST()) ) {
                        alt252=1;
                    }


                }


                switch (alt252) {
            	case 1 :
            	    // RPIExprAST.g:962:21: EXPONENT expr_expr
            	    {
            	    EXPONENT1113=(Token)match(input,EXPONENT,FOLLOW_EXPONENT_in_expr_pow9581); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EXPONENT1113_tree = (Object)adaptor.create(EXPONENT1113);
            	    adaptor.addChild(root_0, EXPONENT1113_tree);
            	    }
            	    pushFollow(FOLLOW_expr_expr_in_expr_pow9583);
            	    expr_expr1114=expr_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_expr1114.getTree());

            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, expr_pow_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_pow"

    public static class expr_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_expr"
    // RPIExprAST.g:964:1: expr_expr : ( ( expr_paren )=> expr_paren | ()=> function_expression | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression );
    public final RPIExprASTParser.expr_expr_return expr_expr() throws RecognitionException {
        RPIExprASTParser.expr_expr_return retval = new RPIExprASTParser.expr_expr_return();
        retval.start = input.LT(1);
        int expr_expr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.expr_paren_return expr_paren1115 = null;

        RPIExprASTParser.function_expression_return function_expression1116 = null;

        RPIExprASTParser.case_expression_return case_expression1117 = null;

        RPIExprASTParser.cursor_expression_return cursor_expression1118 = null;

        RPIExprASTParser.simple_expression_return simple_expression1119 = null;

        RPIExprASTParser.select_expression_return select_expression1120 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // RPIExprAST.g:965:5: ( ( expr_paren )=> expr_paren | ()=> function_expression | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression )
            int alt253=6;
            int LA253_0 = input.LA(1);

            if ( (LA253_0==LPAREN) && (synpred429_RPIExprAST())) {
                alt253=1;
            }
            else if ( (LA253_0==ID) ) {
                int LA253_2 = input.LA(2);

                if ( (LA253_2==LPAREN) && (synpred432_RPIExprAST())) {
                    alt253=4;
                }
                else if ( ((((synpred430_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred430_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred430_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred430_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||synpred430_RPIExprAST())) ) {
                    alt253=2;
                }
                else if ( (synpred433_RPIExprAST()) ) {
                    alt253=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA253_0==175) && (synpred430_RPIExprAST())) {
                alt253=2;
            }
            else if ( (LA253_0==DOUBLEQUOTED_STRING) ) {
                int LA253_4 = input.LA(2);

                if ( (synpred430_RPIExprAST()) ) {
                    alt253=2;
                }
                else if ( (synpred433_RPIExprAST()) ) {
                    alt253=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA253_0==158) ) {
                int LA253_5 = input.LA(2);

                if ( (synpred430_RPIExprAST()) ) {
                    alt253=2;
                }
                else if ( (synpred433_RPIExprAST()) ) {
                    alt253=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 253, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA253_0==198) && (synpred431_RPIExprAST())) {
                alt253=3;
            }
            else if ( ((LA253_0>=168 && LA253_0<=169)) && (synpred433_RPIExprAST())) {
                alt253=5;
            }
            else if ( (LA253_0==SQL) && (synpred433_RPIExprAST())) {
                alt253=5;
            }
            else if ( (LA253_0==QUOTED_STRING) && (synpred433_RPIExprAST())) {
                alt253=5;
            }
            else if ( (LA253_0==NUMBER) && (synpred433_RPIExprAST())) {
                alt253=5;
            }
            else if ( (LA253_0==116) && (synpred433_RPIExprAST())) {
                alt253=5;
            }
            else if ( (LA253_0==174) && (synpred434_RPIExprAST())) {
                alt253=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    // RPIExprAST.g:965:9: ( expr_paren )=> expr_paren
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expr_paren_in_expr_expr9612);
                    expr_paren1115=expr_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_paren1115.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:966:9: ()=> function_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_expression_in_expr_expr9629);
                    function_expression1116=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_expression1116.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:968:9: ( case_expression )=> case_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_case_expression_in_expr_expr9648);
                    case_expression1117=case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_expression1117.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:969:9: ( cursor_expression )=> cursor_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_cursor_expression_in_expr_expr9666);
                    cursor_expression1118=cursor_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_expression1118.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:970:9: ( simple_expression )=> simple_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_simple_expression_in_expr_expr9684);
                    simple_expression1119=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression1119.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:971:9: ( select_expression )=> select_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_select_expression_in_expr_expr9702);
                    select_expression1120=select_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_expression1120.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, expr_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_expr"

    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expression"
    // RPIExprAST.g:982:1: simple_expression : ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | ( column_spec )=> column_spec | QUOTED_STRING | NUMBER | 'NULL' );
    public final RPIExprASTParser.simple_expression_return simple_expression() throws RecognitionException {
        RPIExprASTParser.simple_expression_return retval = new RPIExprASTParser.simple_expression_return();
        retval.start = input.LT(1);
        int simple_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1122=null;
        Token set1123=null;
        Token QUOTED_STRING1125=null;
        Token NUMBER1126=null;
        Token string_literal1127=null;
        RPIExprASTParser.boolean_literal_return boolean_literal1121 = null;

        RPIExprASTParser.column_spec_return column_spec1124 = null;


        Object string_literal1122_tree=null;
        Object set1123_tree=null;
        Object QUOTED_STRING1125_tree=null;
        Object NUMBER1126_tree=null;
        Object string_literal1127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // RPIExprAST.g:983:5: ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | ( column_spec )=> column_spec | QUOTED_STRING | NUMBER | 'NULL' )
            int alt254=6;
            int LA254_0 = input.LA(1);

            if ( ((LA254_0>=168 && LA254_0<=169)) ) {
                alt254=1;
            }
            else if ( (LA254_0==SQL) ) {
                alt254=2;
            }
            else if ( (LA254_0==ID||LA254_0==DOUBLEQUOTED_STRING) && (synpred441_RPIExprAST())) {
                alt254=3;
            }
            else if ( (LA254_0==158) && (synpred441_RPIExprAST())) {
                alt254=3;
            }
            else if ( (LA254_0==QUOTED_STRING) ) {
                alt254=4;
            }
            else if ( (LA254_0==NUMBER) ) {
                alt254=5;
            }
            else if ( (LA254_0==116) ) {
                alt254=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    // RPIExprAST.g:983:9: boolean_literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_boolean_literal_in_simple_expression9729);
                    boolean_literal1121=boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, boolean_literal1121.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:984:9: 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR )
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1122=(Token)match(input,SQL,FOLLOW_SQL_in_simple_expression9739); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1122_tree = (Object)adaptor.create(string_literal1122);
                    adaptor.addChild(root_0, string_literal1122_tree);
                    }
                    set1123=(Token)input.LT(1);
                    if ( (input.LA(1)>=FOUND_ATTR && input.LA(1)<=BULK_ROWCOUNT_ATTR) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1123));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;
                case 3 :
                    // RPIExprAST.g:985:9: ( column_spec )=> column_spec
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_column_spec_in_simple_expression9779);
                    column_spec1124=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1124.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:986:9: QUOTED_STRING
                    {
                    root_0 = (Object)adaptor.nil();

                    QUOTED_STRING1125=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_simple_expression9789); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING1125_tree = (Object)adaptor.create(QUOTED_STRING1125);
                    adaptor.addChild(root_0, QUOTED_STRING1125_tree);
                    }

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:987:9: NUMBER
                    {
                    root_0 = (Object)adaptor.nil();

                    NUMBER1126=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_simple_expression9799); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER1126_tree = (Object)adaptor.create(NUMBER1126);
                    adaptor.addChild(root_0, NUMBER1126_tree);
                    }

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:991:9: 'NULL'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1127=(Token)match(input,116,FOLLOW_116_in_simple_expression9812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1127_tree = (Object)adaptor.create(string_literal1127);
                    adaptor.addChild(root_0, string_literal1127_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, simple_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_expression"

    public static class compound_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_expression"
    // RPIExprAST.g:993:1: compound_expression : expr_prior ;
    public final RPIExprASTParser.compound_expression_return compound_expression() throws RecognitionException {
        RPIExprASTParser.compound_expression_return retval = new RPIExprASTParser.compound_expression_return();
        retval.start = input.LT(1);
        int compound_expression_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.expr_prior_return expr_prior1128 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // RPIExprAST.g:996:5: ( expr_prior )
            // RPIExprAST.g:996:9: expr_prior
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expr_prior_in_compound_expression9832);
            expr_prior1128=expr_prior();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_prior1128.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, compound_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_expression"

    public static class expr_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_paren"
    // RPIExprAST.g:1000:1: expr_paren : LPAREN nested_expression RPAREN ;
    public final RPIExprASTParser.expr_paren_return expr_paren() throws RecognitionException {
        RPIExprASTParser.expr_paren_return retval = new RPIExprASTParser.expr_paren_return();
        retval.start = input.LT(1);
        int expr_paren_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1129=null;
        Token RPAREN1131=null;
        RPIExprASTParser.nested_expression_return nested_expression1130 = null;


        Object LPAREN1129_tree=null;
        Object RPAREN1131_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // RPIExprAST.g:1001:5: ( LPAREN nested_expression RPAREN )
            // RPIExprAST.g:1001:9: LPAREN nested_expression RPAREN
            {
            root_0 = (Object)adaptor.nil();

            LPAREN1129=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expr_paren9852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1129_tree = (Object)adaptor.create(LPAREN1129);
            adaptor.addChild(root_0, LPAREN1129_tree);
            }
            pushFollow(FOLLOW_nested_expression_in_expr_paren9854);
            nested_expression1130=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1130.getTree());
            RPAREN1131=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expr_paren9856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1131_tree = (Object)adaptor.create(RPAREN1131);
            adaptor.addChild(root_0, RPAREN1131_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, expr_paren_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_paren"

    public static class expr_prior_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_prior"
    // RPIExprAST.g:1003:1: expr_prior : 'PRIOR' expr_add ;
    public final RPIExprASTParser.expr_prior_return expr_prior() throws RecognitionException {
        RPIExprASTParser.expr_prior_return retval = new RPIExprASTParser.expr_prior_return();
        retval.start = input.LT(1);
        int expr_prior_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1132=null;
        RPIExprASTParser.expr_add_return expr_add1133 = null;


        Object string_literal1132_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // RPIExprAST.g:1004:5: ( 'PRIOR' expr_add )
            // RPIExprAST.g:1004:9: 'PRIOR' expr_add
            {
            root_0 = (Object)adaptor.nil();

            string_literal1132=(Token)match(input,197,FOLLOW_197_in_expr_prior9874); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1132_tree = (Object)adaptor.create(string_literal1132);
            adaptor.addChild(root_0, string_literal1132_tree);
            }
            pushFollow(FOLLOW_expr_add_in_expr_prior9876);
            expr_add1133=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_add1133.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, expr_prior_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_prior"

    public static class case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expression"
    // RPIExprAST.g:1006:1: case_expression : 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' ;
    public final RPIExprASTParser.case_expression_return case_expression() throws RecognitionException {
        RPIExprASTParser.case_expression_return retval = new RPIExprASTParser.case_expression_return();
        retval.start = input.LT(1);
        int case_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1134=null;
        Token string_literal1138=null;
        RPIExprASTParser.simple_case_expression_return simple_case_expression1135 = null;

        RPIExprASTParser.searched_case_expression_return searched_case_expression1136 = null;

        RPIExprASTParser.else_case_expression_return else_case_expression1137 = null;


        Object string_literal1134_tree=null;
        Object string_literal1138_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // RPIExprAST.g:1007:5: ( 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' )
            // RPIExprAST.g:1007:9: 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1134=(Token)match(input,198,FOLLOW_198_in_case_expression9894); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1134_tree = (Object)adaptor.create(string_literal1134);
            adaptor.addChild(root_0, string_literal1134_tree);
            }
            // RPIExprAST.g:1007:16: ( simple_case_expression | searched_case_expression )
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( ((LA255_0>=ID && LA255_0<=LPAREN)||(LA255_0>=SQL && LA255_0<=MINUS)||LA255_0==NUMBER||LA255_0==NOT||LA255_0==QUOTED_STRING||LA255_0==DOUBLEQUOTED_STRING||LA255_0==116||LA255_0==158||(LA255_0>=168 && LA255_0<=169)||(LA255_0>=174 && LA255_0<=175)||LA255_0==198) ) {
                alt255=1;
            }
            else if ( (LA255_0==121) ) {
                alt255=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 255, 0, input);

                throw nvae;
            }
            switch (alt255) {
                case 1 :
                    // RPIExprAST.g:1007:18: simple_case_expression
                    {
                    pushFollow(FOLLOW_simple_case_expression_in_case_expression9898);
                    simple_case_expression1135=simple_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_expression1135.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1007:43: searched_case_expression
                    {
                    pushFollow(FOLLOW_searched_case_expression_in_case_expression9902);
                    searched_case_expression1136=searched_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_expression1136.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1007:70: ( else_case_expression )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==173) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // RPIExprAST.g:1007:72: else_case_expression
                    {
                    pushFollow(FOLLOW_else_case_expression_in_case_expression9908);
                    else_case_expression1137=else_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_case_expression1137.getTree());

                    }
                    break;

            }

            string_literal1138=(Token)match(input,113,FOLLOW_113_in_case_expression9913); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1138_tree = (Object)adaptor.create(string_literal1138);
            adaptor.addChild(root_0, string_literal1138_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_expression"

    public static class simple_case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_expression"
    // RPIExprAST.g:1009:1: simple_case_expression : nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ ;
    public final RPIExprASTParser.simple_case_expression_return simple_case_expression() throws RecognitionException {
        RPIExprASTParser.simple_case_expression_return retval = new RPIExprASTParser.simple_case_expression_return();
        retval.start = input.LT(1);
        int simple_case_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1140=null;
        Token string_literal1142=null;
        RPIExprASTParser.nested_expression_return nested_expression1139 = null;

        RPIExprASTParser.nested_expression_return nested_expression1141 = null;

        RPIExprASTParser.nested_expression_return nested_expression1143 = null;


        Object string_literal1140_tree=null;
        Object string_literal1142_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // RPIExprAST.g:1010:5: ( nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ )
            // RPIExprAST.g:1010:9: nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nested_expression_in_simple_case_expression9931);
            nested_expression1139=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1139.getTree());
            // RPIExprAST.g:1010:27: ( 'WHEN' nested_expression 'THEN' nested_expression )+
            int cnt257=0;
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==121) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // RPIExprAST.g:1010:29: 'WHEN' nested_expression 'THEN' nested_expression
            	    {
            	    string_literal1140=(Token)match(input,121,FOLLOW_121_in_simple_case_expression9935); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1140_tree = (Object)adaptor.create(string_literal1140);
            	    adaptor.addChild(root_0, string_literal1140_tree);
            	    }
            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression9937);
            	    nested_expression1141=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1141.getTree());
            	    string_literal1142=(Token)match(input,167,FOLLOW_167_in_simple_case_expression9939); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1142_tree = (Object)adaptor.create(string_literal1142);
            	    adaptor.addChild(root_0, string_literal1142_tree);
            	    }
            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression9941);
            	    nested_expression1143=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1143.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt257 >= 1 ) break loop257;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(257, input);
                        throw eee;
                }
                cnt257++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, simple_case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_expression"

    public static class searched_case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_expression"
    // RPIExprAST.g:1012:1: searched_case_expression : ( 'WHEN' nested_condition 'THEN' nested_expression )+ ;
    public final RPIExprASTParser.searched_case_expression_return searched_case_expression() throws RecognitionException {
        RPIExprASTParser.searched_case_expression_return retval = new RPIExprASTParser.searched_case_expression_return();
        retval.start = input.LT(1);
        int searched_case_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1144=null;
        Token string_literal1146=null;
        RPIExprASTParser.nested_condition_return nested_condition1145 = null;

        RPIExprASTParser.nested_expression_return nested_expression1147 = null;


        Object string_literal1144_tree=null;
        Object string_literal1146_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // RPIExprAST.g:1013:5: ( ( 'WHEN' nested_condition 'THEN' nested_expression )+ )
            // RPIExprAST.g:1013:9: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1013:9: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            int cnt258=0;
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==121) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // RPIExprAST.g:1013:11: 'WHEN' nested_condition 'THEN' nested_expression
            	    {
            	    string_literal1144=(Token)match(input,121,FOLLOW_121_in_searched_case_expression9964); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1144_tree = (Object)adaptor.create(string_literal1144);
            	    adaptor.addChild(root_0, string_literal1144_tree);
            	    }
            	    pushFollow(FOLLOW_nested_condition_in_searched_case_expression9966);
            	    nested_condition1145=nested_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_condition1145.getTree());
            	    string_literal1146=(Token)match(input,167,FOLLOW_167_in_searched_case_expression9968); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1146_tree = (Object)adaptor.create(string_literal1146);
            	    adaptor.addChild(root_0, string_literal1146_tree);
            	    }
            	    pushFollow(FOLLOW_nested_expression_in_searched_case_expression9970);
            	    nested_expression1147=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1147.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt258 >= 1 ) break loop258;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(258, input);
                        throw eee;
                }
                cnt258++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, searched_case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_expression"

    public static class else_case_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_case_expression"
    // RPIExprAST.g:1015:1: else_case_expression : 'ELSE' nested_expression ;
    public final RPIExprASTParser.else_case_expression_return else_case_expression() throws RecognitionException {
        RPIExprASTParser.else_case_expression_return retval = new RPIExprASTParser.else_case_expression_return();
        retval.start = input.LT(1);
        int else_case_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1148=null;
        RPIExprASTParser.nested_expression_return nested_expression1149 = null;


        Object string_literal1148_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // RPIExprAST.g:1016:5: ( 'ELSE' nested_expression )
            // RPIExprAST.g:1016:9: 'ELSE' nested_expression
            {
            root_0 = (Object)adaptor.nil();

            string_literal1148=(Token)match(input,173,FOLLOW_173_in_else_case_expression9991); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1148_tree = (Object)adaptor.create(string_literal1148);
            adaptor.addChild(root_0, string_literal1148_tree);
            }
            pushFollow(FOLLOW_nested_expression_in_else_case_expression9993);
            nested_expression1149=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1149.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, else_case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_case_expression"

    public static class case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement"
    // RPIExprAST.g:1018:1: case_statement : ( label_name )? 'CASE' ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? ;
    public final RPIExprASTParser.case_statement_return case_statement() throws RecognitionException {
        RPIExprASTParser.case_statement_return retval = new RPIExprASTParser.case_statement_return();
        retval.start = input.LT(1);
        int case_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1151=null;
        Token string_literal1155=null;
        Token string_literal1156=null;
        RPIExprASTParser.label_name_return label_name1150 = null;

        RPIExprASTParser.simple_case_statement_return simple_case_statement1152 = null;

        RPIExprASTParser.searched_case_statement_return searched_case_statement1153 = null;

        RPIExprASTParser.else_case_statement_return else_case_statement1154 = null;

        RPIExprASTParser.label_name_return label_name1157 = null;


        Object string_literal1151_tree=null;
        Object string_literal1155_tree=null;
        Object string_literal1156_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // RPIExprAST.g:1019:5: ( ( label_name )? 'CASE' ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? )
            // RPIExprAST.g:1019:9: ( label_name )? 'CASE' ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1019:9: ( label_name )?
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==ID||LA259_0==DOUBLEQUOTED_STRING) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    // RPIExprAST.g:1019:11: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_case_statement10013);
                    label_name1150=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name1150.getTree());

                    }
                    break;

            }

            string_literal1151=(Token)match(input,198,FOLLOW_198_in_case_statement10018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1151_tree = (Object)adaptor.create(string_literal1151);
            root_0 = (Object)adaptor.becomeRoot(string_literal1151_tree, root_0);
            }
            // RPIExprAST.g:1019:33: ( simple_case_statement | searched_case_statement )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( ((LA260_0>=ID && LA260_0<=LPAREN)||(LA260_0>=SQL && LA260_0<=MINUS)||LA260_0==NUMBER||LA260_0==NOT||LA260_0==QUOTED_STRING||LA260_0==DOUBLEQUOTED_STRING||LA260_0==116||LA260_0==158||(LA260_0>=168 && LA260_0<=169)||(LA260_0>=174 && LA260_0<=175)||LA260_0==198) ) {
                alt260=1;
            }
            else if ( (LA260_0==121) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // RPIExprAST.g:1019:35: simple_case_statement
                    {
                    pushFollow(FOLLOW_simple_case_statement_in_case_statement10023);
                    simple_case_statement1152=simple_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_case_statement1152.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1019:59: searched_case_statement
                    {
                    pushFollow(FOLLOW_searched_case_statement_in_case_statement10027);
                    searched_case_statement1153=searched_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, searched_case_statement1153.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1019:85: ( else_case_statement )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==173) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // RPIExprAST.g:1019:87: else_case_statement
                    {
                    pushFollow(FOLLOW_else_case_statement_in_case_statement10033);
                    else_case_statement1154=else_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_case_statement1154.getTree());

                    }
                    break;

            }

            string_literal1155=(Token)match(input,113,FOLLOW_113_in_case_statement10038); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1155_tree = (Object)adaptor.create(string_literal1155);
            adaptor.addChild(root_0, string_literal1155_tree);
            }
            string_literal1156=(Token)match(input,198,FOLLOW_198_in_case_statement10040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1156_tree = (Object)adaptor.create(string_literal1156);
            adaptor.addChild(root_0, string_literal1156_tree);
            }
            // RPIExprAST.g:1019:123: ( label_name )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==ID||LA262_0==DOUBLEQUOTED_STRING) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    // RPIExprAST.g:1019:125: label_name
                    {
                    pushFollow(FOLLOW_label_name_in_case_statement10044);
                    label_name1157=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, label_name1157.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_statement"

    public static class simple_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement"
    // RPIExprAST.g:1021:1: simple_case_statement : plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final RPIExprASTParser.simple_case_statement_return simple_case_statement() throws RecognitionException {
        RPIExprASTParser.simple_case_statement_return retval = new RPIExprASTParser.simple_case_statement_return();
        retval.start = input.LT(1);
        int simple_case_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1159=null;
        Token string_literal1161=null;
        RPIExprASTParser.plsql_expression_return plsql_expression1158 = null;

        RPIExprASTParser.plsql_expression_return plsql_expression1160 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements1162 = null;


        Object string_literal1159_tree=null;
        Object string_literal1161_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // RPIExprAST.g:1022:5: ( plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // RPIExprAST.g:1022:9: plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_plsql_expression_in_simple_case_statement10065);
            plsql_expression1158=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression1158.getTree());
            // RPIExprAST.g:1022:26: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt263=0;
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==121) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // RPIExprAST.g:1022:28: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    string_literal1159=(Token)match(input,121,FOLLOW_121_in_simple_case_statement10069); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1159_tree = (Object)adaptor.create(string_literal1159);
            	    adaptor.addChild(root_0, string_literal1159_tree);
            	    }
            	    pushFollow(FOLLOW_plsql_expression_in_simple_case_statement10071);
            	    plsql_expression1160=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression1160.getTree());
            	    string_literal1161=(Token)match(input,167,FOLLOW_167_in_simple_case_statement10073); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1161_tree = (Object)adaptor.create(string_literal1161);
            	    adaptor.addChild(root_0, string_literal1161_tree);
            	    }
            	    pushFollow(FOLLOW_seq_of_statements_in_simple_case_statement10075);
            	    seq_of_statements1162=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements1162.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt263 >= 1 ) break loop263;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(263, input);
                        throw eee;
                }
                cnt263++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, simple_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement"

    public static class searched_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement"
    // RPIExprAST.g:1024:1: searched_case_statement : ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final RPIExprASTParser.searched_case_statement_return searched_case_statement() throws RecognitionException {
        RPIExprASTParser.searched_case_statement_return retval = new RPIExprASTParser.searched_case_statement_return();
        retval.start = input.LT(1);
        int searched_case_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1163=null;
        Token string_literal1165=null;
        RPIExprASTParser.plsql_expression_return plsql_expression1164 = null;

        RPIExprASTParser.seq_of_statements_return seq_of_statements1166 = null;


        Object string_literal1163_tree=null;
        Object string_literal1165_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // RPIExprAST.g:1025:5: ( ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // RPIExprAST.g:1025:9: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1025:9: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt264=0;
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);

                if ( (LA264_0==121) ) {
                    alt264=1;
                }


                switch (alt264) {
            	case 1 :
            	    // RPIExprAST.g:1025:11: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    string_literal1163=(Token)match(input,121,FOLLOW_121_in_searched_case_statement10098); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1163_tree = (Object)adaptor.create(string_literal1163);
            	    adaptor.addChild(root_0, string_literal1163_tree);
            	    }
            	    pushFollow(FOLLOW_plsql_expression_in_searched_case_statement10100);
            	    plsql_expression1164=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expression1164.getTree());
            	    string_literal1165=(Token)match(input,167,FOLLOW_167_in_searched_case_statement10102); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1165_tree = (Object)adaptor.create(string_literal1165);
            	    adaptor.addChild(root_0, string_literal1165_tree);
            	    }
            	    pushFollow(FOLLOW_seq_of_statements_in_searched_case_statement10104);
            	    seq_of_statements1166=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements1166.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt264 >= 1 ) break loop264;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(264, input);
                        throw eee;
                }
                cnt264++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, searched_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement"

    public static class else_case_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_case_statement"
    // RPIExprAST.g:1027:1: else_case_statement : 'ELSE' seq_of_statements ;
    public final RPIExprASTParser.else_case_statement_return else_case_statement() throws RecognitionException {
        RPIExprASTParser.else_case_statement_return retval = new RPIExprASTParser.else_case_statement_return();
        retval.start = input.LT(1);
        int else_case_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1167=null;
        RPIExprASTParser.seq_of_statements_return seq_of_statements1168 = null;


        Object string_literal1167_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // RPIExprAST.g:1028:5: ( 'ELSE' seq_of_statements )
            // RPIExprAST.g:1028:9: 'ELSE' seq_of_statements
            {
            root_0 = (Object)adaptor.nil();

            string_literal1167=(Token)match(input,173,FOLLOW_173_in_else_case_statement10125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1167_tree = (Object)adaptor.create(string_literal1167);
            adaptor.addChild(root_0, string_literal1167_tree);
            }
            pushFollow(FOLLOW_seq_of_statements_in_else_case_statement10127);
            seq_of_statements1168=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, seq_of_statements1168.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, else_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_case_statement"

    public static class cursor_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_expression"
    // RPIExprAST.g:1030:1: cursor_expression : keyCURSOR LPAREN subquery RPAREN ;
    public final RPIExprASTParser.cursor_expression_return cursor_expression() throws RecognitionException {
        RPIExprASTParser.cursor_expression_return retval = new RPIExprASTParser.cursor_expression_return();
        retval.start = input.LT(1);
        int cursor_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1170=null;
        Token RPAREN1172=null;
        RPIExprASTParser.keyCURSOR_return keyCURSOR1169 = null;

        RPIExprASTParser.subquery_return subquery1171 = null;


        Object LPAREN1170_tree=null;
        Object RPAREN1172_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // RPIExprAST.g:1031:5: ( keyCURSOR LPAREN subquery RPAREN )
            // RPIExprAST.g:1031:9: keyCURSOR LPAREN subquery RPAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyCURSOR_in_cursor_expression10145);
            keyCURSOR1169=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURSOR1169.getTree());
            LPAREN1170=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_expression10147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1170_tree = (Object)adaptor.create(LPAREN1170);
            adaptor.addChild(root_0, LPAREN1170_tree);
            }
            pushFollow(FOLLOW_subquery_in_cursor_expression10149);
            subquery1171=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1171.getTree());
            RPAREN1172=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_expression10151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1172_tree = (Object)adaptor.create(RPAREN1172);
            adaptor.addChild(root_0, RPAREN1172_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, cursor_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_expression"

    public static class datetime_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datetime_expression"
    // RPIExprAST.g:1033:1: datetime_expression : sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) ;
    public final RPIExprASTParser.datetime_expression_return datetime_expression() throws RecognitionException {
        RPIExprASTParser.datetime_expression_return retval = new RPIExprASTParser.datetime_expression_return();
        retval.start = input.LT(1);
        int datetime_expression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1174=null;
        RPIExprASTParser.sql_expression_return sql_expression1173 = null;

        RPIExprASTParser.keyLOCAL_return keyLOCAL1175 = null;

        RPIExprASTParser.keyTIME_return keyTIME1176 = null;

        RPIExprASTParser.keyZONE_return keyZONE1177 = null;

        RPIExprASTParser.keyDBTIMEZONE_return keyDBTIMEZONE1178 = null;

        RPIExprASTParser.keySESSIONTIMEZONE_return keySESSIONTIMEZONE1179 = null;

        RPIExprASTParser.sql_expression_return sql_expression1180 = null;


        Object string_literal1174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // RPIExprAST.g:1034:5: ( sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) )
            // RPIExprAST.g:1034:9: sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_datetime_expression10169);
            sql_expression1173=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1173.getTree());
            string_literal1174=(Token)match(input,199,FOLLOW_199_in_datetime_expression10171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1174_tree = (Object)adaptor.create(string_literal1174);
            adaptor.addChild(root_0, string_literal1174_tree);
            }
            // RPIExprAST.g:1035:9: ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            int alt266=2;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==ID) ) {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==ID) ) {
                    alt266=2;
                }
                else if ( (LA266_1==EOF) ) {
                    alt266=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 266, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }
            switch (alt266) {
                case 1 :
                    // RPIExprAST.g:1035:13: keyLOCAL
                    {
                    pushFollow(FOLLOW_keyLOCAL_in_datetime_expression10185);
                    keyLOCAL1175=keyLOCAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLOCAL1175.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1036:13: keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                    {
                    pushFollow(FOLLOW_keyTIME_in_datetime_expression10199);
                    keyTIME1176=keyTIME();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTIME1176.getTree());
                    pushFollow(FOLLOW_keyZONE_in_datetime_expression10201);
                    keyZONE1177=keyZONE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyZONE1177.getTree());
                    // RPIExprAST.g:1036:29: ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                    int alt265=3;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==ID) ) {
                        int LA265_1 = input.LA(2);

                        if ( ((synpred455_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DBTIMEZONE")))) ) {
                            alt265=1;
                        }
                        else if ( ((synpred456_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SESSIONTIMEZONE")))) ) {
                            alt265=2;
                        }
                        else if ( (true) ) {
                            alt265=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 265, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA265_0==LPAREN||(LA265_0>=SQL && LA265_0<=MINUS)||LA265_0==NUMBER||LA265_0==QUOTED_STRING||LA265_0==DOUBLEQUOTED_STRING||LA265_0==116||LA265_0==158||(LA265_0>=168 && LA265_0<=169)||(LA265_0>=174 && LA265_0<=175)||LA265_0==198) ) {
                        alt265=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 265, 0, input);

                        throw nvae;
                    }
                    switch (alt265) {
                        case 1 :
                            // RPIExprAST.g:1036:31: keyDBTIMEZONE
                            {
                            pushFollow(FOLLOW_keyDBTIMEZONE_in_datetime_expression10205);
                            keyDBTIMEZONE1178=keyDBTIMEZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDBTIMEZONE1178.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1036:47: keySESSIONTIMEZONE
                            {
                            pushFollow(FOLLOW_keySESSIONTIMEZONE_in_datetime_expression10209);
                            keySESSIONTIMEZONE1179=keySESSIONTIMEZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySESSIONTIMEZONE1179.getTree());

                            }
                            break;
                        case 3 :
                            // RPIExprAST.g:1036:68: sql_expression
                            {
                            pushFollow(FOLLOW_sql_expression_in_datetime_expression10213);
                            sql_expression1180=sql_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1180.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, datetime_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "datetime_expression"

    public static class function_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_expression"
    // RPIExprAST.g:1039:1: function_expression : ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN -> ^( TO_CHAR nested_expression ( quoted_string )? ) | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN -> ^( SUBSTR nested_expression integer_expr ( integer_expr )? ) | keyTRIM LPAREN nested_expression RPAREN -> ^( TRIM nested_expression ) | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) ) | function_call ( DOT nested_expression )? );
    public final RPIExprASTParser.function_expression_return function_expression() throws RecognitionException {
        RPIExprASTParser.function_expression_return retval = new RPIExprASTParser.function_expression_return();
        retval.start = input.LT(1);
        int function_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1182=null;
        Token ASTERISK1183=null;
        Token RPAREN1185=null;
        Token LPAREN1187=null;
        Token COMMA1189=null;
        Token RPAREN1191=null;
        Token LPAREN1193=null;
        Token COMMA1195=null;
        Token COMMA1197=null;
        Token RPAREN1199=null;
        Token LPAREN1201=null;
        Token RPAREN1203=null;
        Token string_literal1204=null;
        Token LPAREN1205=null;
        Token RPAREN1207=null;
        Token DOT1210=null;
        RPIExprASTParser.keyCOUNT_return keyCOUNT1181 = null;

        RPIExprASTParser.nested_expression_return nested_expression1184 = null;

        RPIExprASTParser.keyTO_CHAR_return keyTO_CHAR1186 = null;

        RPIExprASTParser.nested_expression_return nested_expression1188 = null;

        RPIExprASTParser.quoted_string_return quoted_string1190 = null;

        RPIExprASTParser.keySUBSTR_return keySUBSTR1192 = null;

        RPIExprASTParser.nested_expression_return nested_expression1194 = null;

        RPIExprASTParser.integer_expr_return integer_expr1196 = null;

        RPIExprASTParser.integer_expr_return integer_expr1198 = null;

        RPIExprASTParser.keyTRIM_return keyTRIM1200 = null;

        RPIExprASTParser.nested_expression_return nested_expression1202 = null;

        RPIExprASTParser.nested_expression_return nested_expression1206 = null;

        RPIExprASTParser.nested_expression_return nested_expression1208 = null;

        RPIExprASTParser.function_call_return function_call1209 = null;

        RPIExprASTParser.nested_expression_return nested_expression1211 = null;


        Object LPAREN1182_tree=null;
        Object ASTERISK1183_tree=null;
        Object RPAREN1185_tree=null;
        Object LPAREN1187_tree=null;
        Object COMMA1189_tree=null;
        Object RPAREN1191_tree=null;
        Object LPAREN1193_tree=null;
        Object COMMA1195_tree=null;
        Object COMMA1197_tree=null;
        Object RPAREN1199_tree=null;
        Object LPAREN1201_tree=null;
        Object RPAREN1203_tree=null;
        Object string_literal1204_tree=null;
        Object LPAREN1205_tree=null;
        Object RPAREN1207_tree=null;
        Object DOT1210_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
        RewriteRuleSubtreeStream stream_integer_expr=new RewriteRuleSubtreeStream(adaptor,"rule integer_expr");
        RewriteRuleSubtreeStream stream_quoted_string=new RewriteRuleSubtreeStream(adaptor,"rule quoted_string");
        RewriteRuleSubtreeStream stream_keySUBSTR=new RewriteRuleSubtreeStream(adaptor,"rule keySUBSTR");
        RewriteRuleSubtreeStream stream_keyTRIM=new RewriteRuleSubtreeStream(adaptor,"rule keyTRIM");
        RewriteRuleSubtreeStream stream_nested_expression=new RewriteRuleSubtreeStream(adaptor,"rule nested_expression");
        RewriteRuleSubtreeStream stream_keyTO_CHAR=new RewriteRuleSubtreeStream(adaptor,"rule keyTO_CHAR");
        RewriteRuleSubtreeStream stream_keyCOUNT=new RewriteRuleSubtreeStream(adaptor,"rule keyCOUNT");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // RPIExprAST.g:1040:5: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN -> ^( TO_CHAR nested_expression ( quoted_string )? ) | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN -> ^( SUBSTR nested_expression integer_expr ( integer_expr )? ) | keyTRIM LPAREN nested_expression RPAREN -> ^( TRIM nested_expression ) | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) ) | function_call ( DOT nested_expression )? )
            int alt273=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA273_1 = input.LA(2);

                if ( ((((synpred465_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred465_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred465_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred465_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR"))))) ) {
                    alt273=1;
                }
                else if ( (true) ) {
                    alt273=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 273, 1, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                alt273=1;
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 158:
                {
                alt273=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }

            switch (alt273) {
                case 1 :
                    // RPIExprAST.g:1040:9: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN -> ^( TO_CHAR nested_expression ( quoted_string )? ) | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN -> ^( SUBSTR nested_expression integer_expr ( integer_expr )? ) | keyTRIM LPAREN nested_expression RPAREN -> ^( TRIM nested_expression ) | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) )
                    {
                    if ( !(( is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_expression", " is_sql ");
                    }
                    // RPIExprAST.g:1041:9: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN -> ^( TO_CHAR nested_expression ( quoted_string )? ) | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN -> ^( SUBSTR nested_expression integer_expr ( integer_expr )? ) | keyTRIM LPAREN nested_expression RPAREN -> ^( TRIM nested_expression ) | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) )
                    int alt271=5;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==ID) ) {
                        int LA271_1 = input.LA(2);

                        if ( ((synpred458_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))) ) {
                            alt271=1;
                        }
                        else if ( ((synpred460_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))) ) {
                            alt271=2;
                        }
                        else if ( ((synpred462_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))) ) {
                            alt271=3;
                        }
                        else if ( ((synpred463_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))) ) {
                            alt271=4;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 271, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA271_0==175) ) {
                        alt271=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 271, 0, input);

                        throw nvae;
                    }
                    switch (alt271) {
                        case 1 :
                            // RPIExprAST.g:1041:13: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                            {
                            pushFollow(FOLLOW_keyCOUNT_in_function_expression10257);
                            keyCOUNT1181=keyCOUNT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keyCOUNT.add(keyCOUNT1181.getTree());
                            LPAREN1182=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10259); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1182);

                            // RPIExprAST.g:1041:29: ( ASTERISK | nested_expression )
                            int alt267=2;
                            int LA267_0 = input.LA(1);

                            if ( (LA267_0==ASTERISK) ) {
                                alt267=1;
                            }
                            else if ( ((LA267_0>=ID && LA267_0<=LPAREN)||(LA267_0>=SQL && LA267_0<=MINUS)||LA267_0==NUMBER||LA267_0==NOT||LA267_0==QUOTED_STRING||LA267_0==DOUBLEQUOTED_STRING||LA267_0==116||LA267_0==158||(LA267_0>=168 && LA267_0<=169)||(LA267_0>=174 && LA267_0<=175)||LA267_0==198) ) {
                                alt267=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 267, 0, input);

                                throw nvae;
                            }
                            switch (alt267) {
                                case 1 :
                                    // RPIExprAST.g:1041:31: ASTERISK
                                    {
                                    ASTERISK1183=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_function_expression10263); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ASTERISK.add(ASTERISK1183);


                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:1041:42: nested_expression
                                    {
                                    pushFollow(FOLLOW_nested_expression_in_function_expression10267);
                                    nested_expression1184=nested_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_nested_expression.add(nested_expression1184.getTree());

                                    }
                                    break;

                            }

                            RPAREN1185=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10271); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1185);


                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1042:13: keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN
                            {
                            pushFollow(FOLLOW_keyTO_CHAR_in_function_expression10285);
                            keyTO_CHAR1186=keyTO_CHAR();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keyTO_CHAR.add(keyTO_CHAR1186.getTree());
                            LPAREN1187=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10287); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1187);

                            pushFollow(FOLLOW_nested_expression_in_function_expression10290);
                            nested_expression1188=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_expression.add(nested_expression1188.getTree());
                            // RPIExprAST.g:1042:51: ( COMMA quoted_string )?
                            int alt268=2;
                            int LA268_0 = input.LA(1);

                            if ( (LA268_0==COMMA) ) {
                                alt268=1;
                            }
                            switch (alt268) {
                                case 1 :
                                    // RPIExprAST.g:1042:52: COMMA quoted_string
                                    {
                                    COMMA1189=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_expression10294); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1189);

                                    pushFollow(FOLLOW_quoted_string_in_function_expression10296);
                                    quoted_string1190=quoted_string();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_quoted_string.add(quoted_string1190.getTree());

                                    }
                                    break;

                            }

                            RPAREN1191=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10300); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1191);



                            // AST REWRITE
                            // elements: nested_expression, quoted_string
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 1042:81: -> ^( TO_CHAR nested_expression ( quoted_string )? )
                            {
                                // RPIExprAST.g:1042:84: ^( TO_CHAR nested_expression ( quoted_string )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TO_CHAR, "TO_CHAR"), root_1);

                                adaptor.addChild(root_1, stream_nested_expression.nextTree());
                                // RPIExprAST.g:1042:112: ( quoted_string )?
                                if ( stream_quoted_string.hasNext() ) {
                                    adaptor.addChild(root_1, stream_quoted_string.nextTree());

                                }
                                stream_quoted_string.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // RPIExprAST.g:1043:13: keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN
                            {
                            pushFollow(FOLLOW_keySUBSTR_in_function_expression10326);
                            keySUBSTR1192=keySUBSTR();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keySUBSTR.add(keySUBSTR1192.getTree());
                            LPAREN1193=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10328); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1193);

                            pushFollow(FOLLOW_nested_expression_in_function_expression10330);
                            nested_expression1194=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_expression.add(nested_expression1194.getTree());
                            COMMA1195=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_expression10332); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(COMMA1195);

                            pushFollow(FOLLOW_integer_expr_in_function_expression10334);
                            integer_expr1196=integer_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_integer_expr.add(integer_expr1196.getTree());
                            // RPIExprAST.g:1043:67: ( COMMA integer_expr )?
                            int alt269=2;
                            int LA269_0 = input.LA(1);

                            if ( (LA269_0==COMMA) ) {
                                alt269=1;
                            }
                            switch (alt269) {
                                case 1 :
                                    // RPIExprAST.g:1043:68: COMMA integer_expr
                                    {
                                    COMMA1197=(Token)match(input,COMMA,FOLLOW_COMMA_in_function_expression10337); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA1197);

                                    pushFollow(FOLLOW_integer_expr_in_function_expression10339);
                                    integer_expr1198=integer_expr();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_integer_expr.add(integer_expr1198.getTree());

                                    }
                                    break;

                            }

                            RPAREN1199=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10343); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1199);



                            // AST REWRITE
                            // elements: integer_expr, integer_expr, nested_expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 1043:96: -> ^( SUBSTR nested_expression integer_expr ( integer_expr )? )
                            {
                                // RPIExprAST.g:1043:99: ^( SUBSTR nested_expression integer_expr ( integer_expr )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUBSTR, "SUBSTR"), root_1);

                                adaptor.addChild(root_1, stream_nested_expression.nextTree());
                                adaptor.addChild(root_1, stream_integer_expr.nextTree());
                                // RPIExprAST.g:1043:139: ( integer_expr )?
                                if ( stream_integer_expr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_integer_expr.nextTree());

                                }
                                stream_integer_expr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // RPIExprAST.g:1044:13: keyTRIM LPAREN nested_expression RPAREN
                            {
                            pushFollow(FOLLOW_keyTRIM_in_function_expression10370);
                            keyTRIM1200=keyTRIM();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keyTRIM.add(keyTRIM1200.getTree());
                            LPAREN1201=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10372); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1201);

                            pushFollow(FOLLOW_nested_expression_in_function_expression10375);
                            nested_expression1202=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nested_expression.add(nested_expression1202.getTree());
                            RPAREN1203=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10378); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1203);



                            // AST REWRITE
                            // elements: nested_expression
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 1044:56: -> ^( TRIM nested_expression )
                            {
                                // RPIExprAST.g:1044:59: ^( TRIM nested_expression )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRIM, "TRIM"), root_1);

                                adaptor.addChild(root_1, stream_nested_expression.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // RPIExprAST.g:1045:13: 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression )
                            {
                            string_literal1204=(Token)match(input,175,FOLLOW_175_in_function_expression10402); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_175.add(string_literal1204);

                            // RPIExprAST.g:1045:24: ( LPAREN nested_expression RPAREN | nested_expression )
                            int alt270=2;
                            int LA270_0 = input.LA(1);

                            if ( (LA270_0==LPAREN) ) {
                                int LA270_1 = input.LA(2);

                                if ( (synpred464_RPIExprAST()) ) {
                                    alt270=1;
                                }
                                else if ( ((( !is_sql )||(  is_sql ))) ) {
                                    alt270=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 270, 1, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA270_0==ID||(LA270_0>=SQL && LA270_0<=MINUS)||LA270_0==NUMBER||LA270_0==NOT||LA270_0==QUOTED_STRING||LA270_0==DOUBLEQUOTED_STRING||LA270_0==116||LA270_0==158||(LA270_0>=168 && LA270_0<=169)||(LA270_0>=174 && LA270_0<=175)||LA270_0==198) ) {
                                alt270=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 270, 0, input);

                                throw nvae;
                            }
                            switch (alt270) {
                                case 1 :
                                    // RPIExprAST.g:1045:26: LPAREN nested_expression RPAREN
                                    {
                                    LPAREN1205=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10406); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1205);

                                    pushFollow(FOLLOW_nested_expression_in_function_expression10408);
                                    nested_expression1206=nested_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_nested_expression.add(nested_expression1206.getTree());
                                    RPAREN1207=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10410); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1207);


                                    }
                                    break;
                                case 2 :
                                    // RPIExprAST.g:1045:60: nested_expression
                                    {
                                    pushFollow(FOLLOW_nested_expression_in_function_expression10414);
                                    nested_expression1208=nested_expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_nested_expression.add(nested_expression1208.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1048:10: function_call ( DOT nested_expression )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_function_call_in_function_expression10447);
                    function_call1209=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, function_call1209.getTree());
                    // RPIExprAST.g:1048:24: ( DOT nested_expression )?
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==DOT) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            // RPIExprAST.g:1048:26: DOT nested_expression
                            {
                            DOT1210=(Token)match(input,DOT,FOLLOW_DOT_in_function_expression10451); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT1210_tree = (Object)adaptor.create(DOT1210);
                            adaptor.addChild(root_0, DOT1210_tree);
                            }
                            pushFollow(FOLLOW_nested_expression_in_function_expression10453);
                            nested_expression1211=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1211.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, function_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_expression"

    public static class special_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_expression"
    // RPIExprAST.g:1050:1: special_expression : {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) ;
    public final RPIExprASTParser.special_expression_return special_expression() throws RecognitionException {
        RPIExprASTParser.special_expression_return retval = new RPIExprASTParser.special_expression_return();
        retval.start = input.LT(1);
        int special_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1213=null;
        Token ASTERISK1214=null;
        Token RPAREN1216=null;
        Token string_literal1217=null;
        Token LPAREN1218=null;
        Token RPAREN1220=null;
        RPIExprASTParser.keyCOUNT_return keyCOUNT1212 = null;

        RPIExprASTParser.nested_expression_return nested_expression1215 = null;

        RPIExprASTParser.nested_expression_return nested_expression1219 = null;


        Object LPAREN1213_tree=null;
        Object ASTERISK1214_tree=null;
        Object RPAREN1216_tree=null;
        Object string_literal1217_tree=null;
        Object LPAREN1218_tree=null;
        Object RPAREN1220_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // RPIExprAST.g:1051:5: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) )
            // RPIExprAST.g:1051:9: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            {
            root_0 = (Object)adaptor.nil();

            if ( !(( is_sql )) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "special_expression", " is_sql ");
            }
            // RPIExprAST.g:1052:9: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==ID) ) {
                alt275=1;
            }
            else if ( (LA275_0==175) ) {
                alt275=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;
            }
            switch (alt275) {
                case 1 :
                    // RPIExprAST.g:1052:13: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                    {
                    pushFollow(FOLLOW_keyCOUNT_in_special_expression10488);
                    keyCOUNT1212=keyCOUNT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOUNT1212.getTree());
                    LPAREN1213=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression10490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1213_tree = (Object)adaptor.create(LPAREN1213);
                    adaptor.addChild(root_0, LPAREN1213_tree);
                    }
                    // RPIExprAST.g:1052:29: ( ASTERISK | nested_expression )
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==ASTERISK) ) {
                        alt274=1;
                    }
                    else if ( ((LA274_0>=ID && LA274_0<=LPAREN)||(LA274_0>=SQL && LA274_0<=MINUS)||LA274_0==NUMBER||LA274_0==NOT||LA274_0==QUOTED_STRING||LA274_0==DOUBLEQUOTED_STRING||LA274_0==116||LA274_0==158||(LA274_0>=168 && LA274_0<=169)||(LA274_0>=174 && LA274_0<=175)||LA274_0==198) ) {
                        alt274=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 274, 0, input);

                        throw nvae;
                    }
                    switch (alt274) {
                        case 1 :
                            // RPIExprAST.g:1052:31: ASTERISK
                            {
                            ASTERISK1214=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_special_expression10494); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASTERISK1214_tree = (Object)adaptor.create(ASTERISK1214);
                            adaptor.addChild(root_0, ASTERISK1214_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1052:42: nested_expression
                            {
                            pushFollow(FOLLOW_nested_expression_in_special_expression10498);
                            nested_expression1215=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1215.getTree());

                            }
                            break;

                    }

                    RPAREN1216=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression10502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1216_tree = (Object)adaptor.create(RPAREN1216);
                    adaptor.addChild(root_0, RPAREN1216_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1053:13: 'DISTINCT' LPAREN nested_expression RPAREN
                    {
                    string_literal1217=(Token)match(input,175,FOLLOW_175_in_special_expression10516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1217_tree = (Object)adaptor.create(string_literal1217);
                    adaptor.addChild(root_0, string_literal1217_tree);
                    }
                    LPAREN1218=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression10518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1218_tree = (Object)adaptor.create(LPAREN1218);
                    adaptor.addChild(root_0, LPAREN1218_tree);
                    }
                    pushFollow(FOLLOW_nested_expression_in_special_expression10520);
                    nested_expression1219=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1219.getTree());
                    RPAREN1220=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression10522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1220_tree = (Object)adaptor.create(RPAREN1220);
                    adaptor.addChild(root_0, RPAREN1220_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, special_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_expression"

    public static class interval_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_expression"
    // RPIExprAST.g:1056:1: interval_expression : sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) ;
    public final RPIExprASTParser.interval_expression_return interval_expression() throws RecognitionException {
        RPIExprASTParser.interval_expression_return retval = new RPIExprASTParser.interval_expression_return();
        retval.start = input.LT(1);
        int interval_expression_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1223=null;
        Token RPAREN1225=null;
        Token string_literal1226=null;
        Token LPAREN1228=null;
        Token RPAREN1230=null;
        Token LPAREN1232=null;
        Token RPAREN1234=null;
        Token string_literal1235=null;
        RPIExprASTParser.sql_expression_return sql_expression1221 = null;

        RPIExprASTParser.keyDAY_return keyDAY1222 = null;

        RPIExprASTParser.leading_field_precision_return leading_field_precision1224 = null;

        RPIExprASTParser.keySECOND_return keySECOND1227 = null;

        RPIExprASTParser.fractional_second_precision_return fractional_second_precision1229 = null;

        RPIExprASTParser.keyYEAR_return keyYEAR1231 = null;

        RPIExprASTParser.leading_field_precision_return leading_field_precision1233 = null;

        RPIExprASTParser.keyMONTH_return keyMONTH1236 = null;


        Object LPAREN1223_tree=null;
        Object RPAREN1225_tree=null;
        Object string_literal1226_tree=null;
        Object LPAREN1228_tree=null;
        Object RPAREN1230_tree=null;
        Object LPAREN1232_tree=null;
        Object RPAREN1234_tree=null;
        Object string_literal1235_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // RPIExprAST.g:1057:5: ( sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) )
            // RPIExprAST.g:1057:9: sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_interval_expression10550);
            sql_expression1221=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1221.getTree());
            // RPIExprAST.g:1058:9: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==ID) ) {
                int LA279_1 = input.LA(2);

                if ( (LA279_1==LPAREN) ) {
                    int LA279_2 = input.LA(3);

                    if ( (LA279_2==NUMBER) ) {
                        int LA279_4 = input.LA(4);

                        if ( (LA279_4==RPAREN) ) {
                            int LA279_6 = input.LA(5);

                            if ( (LA279_6==135) ) {
                                int LA279_3 = input.LA(6);

                                if ( (LA279_3==ID) ) {
                                    int LA279_5 = input.LA(7);

                                    if ( ((synpred471_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DAY")))) ) {
                                        alt279=1;
                                    }
                                    else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "YEAR"))) ) {
                                        alt279=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 279, 5, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 279, 3, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 279, 6, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 279, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 279, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA279_1==135) ) {
                    int LA279_3 = input.LA(3);

                    if ( (LA279_3==ID) ) {
                        int LA279_5 = input.LA(4);

                        if ( ((synpred471_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DAY")))) ) {
                            alt279=1;
                        }
                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "YEAR"))) ) {
                            alt279=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 279, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 279, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 279, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;
            }
            switch (alt279) {
                case 1 :
                    // RPIExprAST.g:1058:13: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
                    {
                    pushFollow(FOLLOW_keyDAY_in_interval_expression10564);
                    keyDAY1222=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyDAY1222.getTree());
                    // RPIExprAST.g:1058:20: ( LPAREN leading_field_precision RPAREN )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==LPAREN) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // RPIExprAST.g:1058:22: LPAREN leading_field_precision RPAREN
                            {
                            LPAREN1223=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression10568); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1223_tree = (Object)adaptor.create(LPAREN1223);
                            adaptor.addChild(root_0, LPAREN1223_tree);
                            }
                            pushFollow(FOLLOW_leading_field_precision_in_interval_expression10570);
                            leading_field_precision1224=leading_field_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_field_precision1224.getTree());
                            RPAREN1225=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression10572); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1225_tree = (Object)adaptor.create(RPAREN1225);
                            adaptor.addChild(root_0, RPAREN1225_tree);
                            }

                            }
                            break;

                    }

                    string_literal1226=(Token)match(input,135,FOLLOW_135_in_interval_expression10577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1226_tree = (Object)adaptor.create(string_literal1226);
                    adaptor.addChild(root_0, string_literal1226_tree);
                    }
                    pushFollow(FOLLOW_keySECOND_in_interval_expression10579);
                    keySECOND1227=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keySECOND1227.getTree());
                    // RPIExprAST.g:1058:78: ( LPAREN fractional_second_precision RPAREN )?
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==LPAREN) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            // RPIExprAST.g:1058:80: LPAREN fractional_second_precision RPAREN
                            {
                            LPAREN1228=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression10583); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1228_tree = (Object)adaptor.create(LPAREN1228);
                            adaptor.addChild(root_0, LPAREN1228_tree);
                            }
                            pushFollow(FOLLOW_fractional_second_precision_in_interval_expression10585);
                            fractional_second_precision1229=fractional_second_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, fractional_second_precision1229.getTree());
                            RPAREN1230=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression10587); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1230_tree = (Object)adaptor.create(RPAREN1230);
                            adaptor.addChild(root_0, RPAREN1230_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1059:13: keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH
                    {
                    pushFollow(FOLLOW_keyYEAR_in_interval_expression10604);
                    keyYEAR1231=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyYEAR1231.getTree());
                    // RPIExprAST.g:1059:21: ( LPAREN leading_field_precision RPAREN )?
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==LPAREN) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            // RPIExprAST.g:1059:23: LPAREN leading_field_precision RPAREN
                            {
                            LPAREN1232=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression10608); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1232_tree = (Object)adaptor.create(LPAREN1232);
                            adaptor.addChild(root_0, LPAREN1232_tree);
                            }
                            pushFollow(FOLLOW_leading_field_precision_in_interval_expression10610);
                            leading_field_precision1233=leading_field_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, leading_field_precision1233.getTree());
                            RPAREN1234=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression10612); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1234_tree = (Object)adaptor.create(RPAREN1234);
                            adaptor.addChild(root_0, RPAREN1234_tree);
                            }

                            }
                            break;

                    }

                    string_literal1235=(Token)match(input,135,FOLLOW_135_in_interval_expression10617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1235_tree = (Object)adaptor.create(string_literal1235);
                    adaptor.addChild(root_0, string_literal1235_tree);
                    }
                    pushFollow(FOLLOW_keyMONTH_in_interval_expression10619);
                    keyMONTH1236=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMONTH1236.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, interval_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_expression"

    public static class leading_field_precision_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "leading_field_precision"
    // RPIExprAST.g:1062:1: leading_field_precision : integer ;
    public final RPIExprASTParser.leading_field_precision_return leading_field_precision() throws RecognitionException {
        RPIExprASTParser.leading_field_precision_return retval = new RPIExprASTParser.leading_field_precision_return();
        retval.start = input.LT(1);
        int leading_field_precision_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.integer_return integer1237 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // RPIExprAST.g:1063:5: ( integer )
            // RPIExprAST.g:1063:9: integer
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_integer_in_leading_field_precision10647);
            integer1237=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1237.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, leading_field_precision_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "leading_field_precision"

    public static class fractional_second_precision_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fractional_second_precision"
    // RPIExprAST.g:1065:1: fractional_second_precision : integer ;
    public final RPIExprASTParser.fractional_second_precision_return fractional_second_precision() throws RecognitionException {
        RPIExprASTParser.fractional_second_precision_return retval = new RPIExprASTParser.fractional_second_precision_return();
        retval.start = input.LT(1);
        int fractional_second_precision_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.integer_return integer1238 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // RPIExprAST.g:1066:5: ( integer )
            // RPIExprAST.g:1066:9: integer
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_integer_in_fractional_second_precision10666);
            integer1238=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1238.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, fractional_second_precision_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fractional_second_precision"

    public static class object_access_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_access_expression"
    // RPIExprAST.g:1068:1: object_access_expression : ;
    public final RPIExprASTParser.object_access_expression_return object_access_expression() throws RecognitionException {
        RPIExprASTParser.object_access_expression_return retval = new RPIExprASTParser.object_access_expression_return();
        retval.start = input.LT(1);
        int object_access_expression_StartIndex = input.index();
        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // RPIExprAST.g:1069:5: ()
            // RPIExprAST.g:1070:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, object_access_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_access_expression"

    public static class scalar_subquery_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scalar_subquery_expression"
    // RPIExprAST.g:1071:1: scalar_subquery_expression : ;
    public final RPIExprASTParser.scalar_subquery_expression_return scalar_subquery_expression() throws RecognitionException {
        RPIExprASTParser.scalar_subquery_expression_return retval = new RPIExprASTParser.scalar_subquery_expression_return();
        retval.start = input.LT(1);
        int scalar_subquery_expression_StartIndex = input.index();
        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // RPIExprAST.g:1072:5: ()
            // RPIExprAST.g:1073:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, scalar_subquery_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "scalar_subquery_expression"

    public static class model_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_expression"
    // RPIExprAST.g:1074:1: model_expression : ;
    public final RPIExprASTParser.model_expression_return model_expression() throws RecognitionException {
        RPIExprASTParser.model_expression_return retval = new RPIExprASTParser.model_expression_return();
        retval.start = input.LT(1);
        int model_expression_StartIndex = input.index();
        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // RPIExprAST.g:1075:5: ()
            // RPIExprAST.g:1076:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, model_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_expression"

    public static class type_constructor_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_constructor_expression"
    // RPIExprAST.g:1077:1: type_constructor_expression : ;
    public final RPIExprASTParser.type_constructor_expression_return type_constructor_expression() throws RecognitionException {
        RPIExprASTParser.type_constructor_expression_return retval = new RPIExprASTParser.type_constructor_expression_return();
        retval.start = input.LT(1);
        int type_constructor_expression_StartIndex = input.index();
        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // RPIExprAST.g:1078:5: ()
            // RPIExprAST.g:1079:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, type_constructor_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_constructor_expression"

    public static class variable_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_expression"
    // RPIExprAST.g:1080:1: variable_expression : ;
    public final RPIExprASTParser.variable_expression_return variable_expression() throws RecognitionException {
        RPIExprASTParser.variable_expression_return retval = new RPIExprASTParser.variable_expression_return();
        retval.start = input.LT(1);
        int variable_expression_StartIndex = input.index();
        Object root_0 = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // RPIExprAST.g:1081:5: ()
            // RPIExprAST.g:1082:5: 
            {
            root_0 = (Object)adaptor.nil();

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, variable_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_expression"

    public static class sequence_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sequence_name"
    // RPIExprAST.g:1083:1: sequence_name : identifier ;
    public final RPIExprASTParser.sequence_name_return sequence_name() throws RecognitionException {
        RPIExprASTParser.sequence_name_return retval = new RPIExprASTParser.sequence_name_return();
        retval.start = input.LT(1);
        int sequence_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier1239 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // RPIExprAST.g:1084:5: ( identifier )
            // RPIExprAST.g:1084:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_sequence_name10755);
            identifier1239=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1239.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, sequence_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sequence_name"

    public static class integer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer"
    // RPIExprAST.g:1086:1: integer : NUMBER ;
    public final RPIExprASTParser.integer_return integer() throws RecognitionException {
        RPIExprASTParser.integer_return retval = new RPIExprASTParser.integer_return();
        retval.start = input.LT(1);
        int integer_StartIndex = input.index();
        Object root_0 = null;

        Token NUMBER1240=null;

        Object NUMBER1240_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // RPIExprAST.g:1087:5: ( NUMBER )
            // RPIExprAST.g:1087:9: NUMBER
            {
            root_0 = (Object)adaptor.nil();

            NUMBER1240=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_integer10773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER1240_tree = (Object)adaptor.create(NUMBER1240);
            adaptor.addChild(root_0, NUMBER1240_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, integer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integer"

    public static class alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alias"
    // RPIExprAST.g:1091:1: alias : ( 'AS' )? sql_identifier ;
    public final RPIExprASTParser.alias_return alias() throws RecognitionException {
        RPIExprASTParser.alias_return retval = new RPIExprASTParser.alias_return();
        retval.start = input.LT(1);
        int alias_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1241=null;
        RPIExprASTParser.sql_identifier_return sql_identifier1242 = null;


        Object string_literal1241_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // RPIExprAST.g:1092:5: ( ( 'AS' )? sql_identifier )
            // RPIExprAST.g:1092:9: ( 'AS' )? sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1092:9: ( 'AS' )?
            int alt280=2;
            int LA280_0 = input.LA(1);

            if ( (LA280_0==112) ) {
                alt280=1;
            }
            switch (alt280) {
                case 1 :
                    // RPIExprAST.g:1092:11: 'AS'
                    {
                    string_literal1241=(Token)match(input,112,FOLLOW_112_in_alias10795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1241_tree = (Object)adaptor.create(string_literal1241);
                    adaptor.addChild(root_0, string_literal1241_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_identifier_in_alias10800);
            sql_identifier1242=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1242.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, alias_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alias"

    public static class column_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_specs"
    // RPIExprAST.g:1095:1: column_specs : column_spec ( COMMA column_spec )* ;
    public final RPIExprASTParser.column_specs_return column_specs() throws RecognitionException {
        RPIExprASTParser.column_specs_return retval = new RPIExprASTParser.column_specs_return();
        retval.start = input.LT(1);
        int column_specs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1244=null;
        RPIExprASTParser.column_spec_return column_spec1243 = null;

        RPIExprASTParser.column_spec_return column_spec1245 = null;


        Object COMMA1244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // RPIExprAST.g:1096:5: ( column_spec ( COMMA column_spec )* )
            // RPIExprAST.g:1096:9: column_spec ( COMMA column_spec )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_column_spec_in_column_specs10819);
            column_spec1243=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1243.getTree());
            // RPIExprAST.g:1096:21: ( COMMA column_spec )*
            loop281:
            do {
                int alt281=2;
                int LA281_0 = input.LA(1);

                if ( (LA281_0==COMMA) ) {
                    alt281=1;
                }


                switch (alt281) {
            	case 1 :
            	    // RPIExprAST.g:1096:23: COMMA column_spec
            	    {
            	    COMMA1244=(Token)match(input,COMMA,FOLLOW_COMMA_in_column_specs10823); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1244_tree = (Object)adaptor.create(COMMA1244);
            	    adaptor.addChild(root_0, COMMA1244_tree);
            	    }
            	    pushFollow(FOLLOW_column_spec_in_column_specs10825);
            	    column_spec1245=column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1245.getTree());

            	    }
            	    break;

            	default :
            	    break loop281;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, column_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_specs"

    public static class column_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_spec"
    // RPIExprAST.g:1099:1: column_spec : sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )? ;
    public final RPIExprASTParser.column_spec_return column_spec() throws RecognitionException {
        RPIExprASTParser.column_spec_return retval = new RPIExprASTParser.column_spec_return();
        retval.start = input.LT(1);
        int column_spec_StartIndex = input.index();
        Object root_0 = null;

        Token DOT1247=null;
        Token DOT1249=null;
        RPIExprASTParser.sql_identifier_return sql_identifier1246 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1248 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1250 = null;


        Object DOT1247_tree=null;
        Object DOT1249_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // RPIExprAST.g:1100:5: ( sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )? )
            // RPIExprAST.g:1100:9: sql_identifier ( DOT sql_identifier ( DOT sql_identifier )? )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_column_spec10847);
            sql_identifier1246=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1246.getTree());
            // RPIExprAST.g:1100:24: ( DOT sql_identifier ( DOT sql_identifier )? )?
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==DOT) ) {
                int LA283_1 = input.LA(2);

                if ( (LA283_1==ID||LA283_1==DOUBLEQUOTED_STRING||LA283_1==158) ) {
                    alt283=1;
                }
            }
            switch (alt283) {
                case 1 :
                    // RPIExprAST.g:1100:25: DOT sql_identifier ( DOT sql_identifier )?
                    {
                    DOT1247=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec10850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1247_tree = (Object)adaptor.create(DOT1247);
                    adaptor.addChild(root_0, DOT1247_tree);
                    }
                    pushFollow(FOLLOW_sql_identifier_in_column_spec10852);
                    sql_identifier1248=sql_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1248.getTree());
                    // RPIExprAST.g:1100:44: ( DOT sql_identifier )?
                    int alt282=2;
                    int LA282_0 = input.LA(1);

                    if ( (LA282_0==DOT) ) {
                        int LA282_1 = input.LA(2);

                        if ( (LA282_1==ID||LA282_1==DOUBLEQUOTED_STRING||LA282_1==158) ) {
                            alt282=1;
                        }
                    }
                    switch (alt282) {
                        case 1 :
                            // RPIExprAST.g:1100:45: DOT sql_identifier
                            {
                            DOT1249=(Token)match(input,DOT,FOLLOW_DOT_in_column_spec10855); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT1249_tree = (Object)adaptor.create(DOT1249);
                            adaptor.addChild(root_0, DOT1249_tree);
                            }
                            pushFollow(FOLLOW_sql_identifier_in_column_spec10857);
                            sql_identifier1250=sql_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1250.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, column_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_spec"

    public static class column_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_name"
    // RPIExprAST.g:1108:1: column_name : sql_identifier ;
    public final RPIExprASTParser.column_name_return column_name() throws RecognitionException {
        RPIExprASTParser.column_name_return retval = new RPIExprASTParser.column_name_return();
        retval.start = input.LT(1);
        int column_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1251 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // RPIExprAST.g:1109:5: ( sql_identifier )
            // RPIExprAST.g:1109:9: sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_column_name10887);
            sql_identifier1251=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1251.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, column_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_name"

    public static class nested_table_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table"
    // RPIExprAST.g:1111:1: nested_table : sql_identifier ;
    public final RPIExprASTParser.nested_table_return nested_table() throws RecognitionException {
        RPIExprASTParser.nested_table_return retval = new RPIExprASTParser.nested_table_return();
        retval.start = input.LT(1);
        int nested_table_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1252 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // RPIExprAST.g:1112:5: ( sql_identifier )
            // RPIExprAST.g:1112:9: sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_nested_table10905);
            sql_identifier1252=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1252.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, nested_table_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table"

    public static class nested_table_column_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_column_name"
    // RPIExprAST.g:1114:1: nested_table_column_name : ( schema_name DOT )? table_name DOT nested_table DOT column_name ;
    public final RPIExprASTParser.nested_table_column_name_return nested_table_column_name() throws RecognitionException {
        RPIExprASTParser.nested_table_column_name_return retval = new RPIExprASTParser.nested_table_column_name_return();
        retval.start = input.LT(1);
        int nested_table_column_name_StartIndex = input.index();
        Object root_0 = null;

        Token DOT1254=null;
        Token DOT1256=null;
        Token DOT1258=null;
        RPIExprASTParser.schema_name_return schema_name1253 = null;

        RPIExprASTParser.table_name_return table_name1255 = null;

        RPIExprASTParser.nested_table_return nested_table1257 = null;

        RPIExprASTParser.column_name_return column_name1259 = null;


        Object DOT1254_tree=null;
        Object DOT1256_tree=null;
        Object DOT1258_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // RPIExprAST.g:1115:5: ( ( schema_name DOT )? table_name DOT nested_table DOT column_name )
            // RPIExprAST.g:1115:9: ( schema_name DOT )? table_name DOT nested_table DOT column_name
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1115:9: ( schema_name DOT )?
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==ID||LA284_0==DOUBLEQUOTED_STRING) ) {
                int LA284_1 = input.LA(2);

                if ( (LA284_1==DOT) ) {
                    int LA284_3 = input.LA(3);

                    if ( (LA284_3==ID||LA284_3==DOUBLEQUOTED_STRING) ) {
                        int LA284_4 = input.LA(4);

                        if ( (LA284_4==DOT) ) {
                            int LA284_6 = input.LA(5);

                            if ( (LA284_6==ID||LA284_6==DOUBLEQUOTED_STRING) ) {
                                int LA284_7 = input.LA(6);

                                if ( (LA284_7==DOT) ) {
                                    alt284=1;
                                }
                            }
                            else if ( (LA284_6==158) ) {
                                int LA284_8 = input.LA(6);

                                if ( (LA284_8==DOT) ) {
                                    alt284=1;
                                }
                            }
                        }
                    }
                    else if ( (LA284_3==158) ) {
                        int LA284_5 = input.LA(4);

                        if ( (LA284_5==DOT) ) {
                            int LA284_6 = input.LA(5);

                            if ( (LA284_6==ID||LA284_6==DOUBLEQUOTED_STRING) ) {
                                int LA284_7 = input.LA(6);

                                if ( (LA284_7==DOT) ) {
                                    alt284=1;
                                }
                            }
                            else if ( (LA284_6==158) ) {
                                int LA284_8 = input.LA(6);

                                if ( (LA284_8==DOT) ) {
                                    alt284=1;
                                }
                            }
                        }
                    }
                }
            }
            else if ( (LA284_0==158) ) {
                int LA284_2 = input.LA(2);

                if ( (LA284_2==DOT) ) {
                    int LA284_3 = input.LA(3);

                    if ( (LA284_3==ID||LA284_3==DOUBLEQUOTED_STRING) ) {
                        int LA284_4 = input.LA(4);

                        if ( (LA284_4==DOT) ) {
                            int LA284_6 = input.LA(5);

                            if ( (LA284_6==ID||LA284_6==DOUBLEQUOTED_STRING) ) {
                                int LA284_7 = input.LA(6);

                                if ( (LA284_7==DOT) ) {
                                    alt284=1;
                                }
                            }
                            else if ( (LA284_6==158) ) {
                                int LA284_8 = input.LA(6);

                                if ( (LA284_8==DOT) ) {
                                    alt284=1;
                                }
                            }
                        }
                    }
                    else if ( (LA284_3==158) ) {
                        int LA284_5 = input.LA(4);

                        if ( (LA284_5==DOT) ) {
                            int LA284_6 = input.LA(5);

                            if ( (LA284_6==ID||LA284_6==DOUBLEQUOTED_STRING) ) {
                                int LA284_7 = input.LA(6);

                                if ( (LA284_7==DOT) ) {
                                    alt284=1;
                                }
                            }
                            else if ( (LA284_6==158) ) {
                                int LA284_8 = input.LA(6);

                                if ( (LA284_8==DOT) ) {
                                    alt284=1;
                                }
                            }
                        }
                    }
                }
            }
            switch (alt284) {
                case 1 :
                    // RPIExprAST.g:1115:11: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_nested_table_column_name10925);
                    schema_name1253=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1253.getTree());
                    DOT1254=(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name10927); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1254_tree = (Object)adaptor.create(DOT1254);
                    adaptor.addChild(root_0, DOT1254_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_nested_table_column_name10932);
            table_name1255=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1255.getTree());
            DOT1256=(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name10934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1256_tree = (Object)adaptor.create(DOT1256);
            adaptor.addChild(root_0, DOT1256_tree);
            }
            pushFollow(FOLLOW_nested_table_in_nested_table_column_name10936);
            nested_table1257=nested_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table1257.getTree());
            DOT1258=(Token)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name10938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1258_tree = (Object)adaptor.create(DOT1258);
            adaptor.addChild(root_0, DOT1258_tree);
            }
            pushFollow(FOLLOW_column_name_in_nested_table_column_name10940);
            column_name1259=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1259.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, nested_table_column_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table_column_name"

    public static class user_defined_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "user_defined_function"
    // RPIExprAST.g:1118:1: user_defined_function : sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? ;
    public final RPIExprASTParser.user_defined_function_return user_defined_function() throws RecognitionException {
        RPIExprASTParser.user_defined_function_return retval = new RPIExprASTParser.user_defined_function_return();
        retval.start = input.LT(1);
        int user_defined_function_StartIndex = input.index();
        Object root_0 = null;

        Token DOT1261=null;
        Token DOT1263=null;
        Token set1264=null;
        RPIExprASTParser.sql_identifier_return sql_identifier1260 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1262 = null;


        Object DOT1261_tree=null;
        Object DOT1263_tree=null;
        Object set1264_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // RPIExprAST.g:1119:5: ( sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? )
            // RPIExprAST.g:1119:9: sql_identifier ( DOT sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_user_defined_function10959);
            sql_identifier1260=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1260.getTree());
            // RPIExprAST.g:1119:24: ( DOT sql_identifier )*
            loop285:
            do {
                int alt285=2;
                int LA285_0 = input.LA(1);

                if ( (LA285_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case ID:
                        {
                        int LA285_3 = input.LA(3);

                        if ( (synpred478_RPIExprAST()) ) {
                            alt285=1;
                        }


                        }
                        break;
                    case 158:
                        {
                        int LA285_4 = input.LA(3);

                        if ( (synpred478_RPIExprAST()) ) {
                            alt285=1;
                        }


                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA285_5 = input.LA(3);

                        if ( (synpred478_RPIExprAST()) ) {
                            alt285=1;
                        }


                        }
                        break;

                    }

                }


                switch (alt285) {
            	case 1 :
            	    // RPIExprAST.g:1119:26: DOT sql_identifier
            	    {
            	    DOT1261=(Token)match(input,DOT,FOLLOW_DOT_in_user_defined_function10963); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT1261_tree = (Object)adaptor.create(DOT1261);
            	    adaptor.addChild(root_0, DOT1261_tree);
            	    }
            	    pushFollow(FOLLOW_sql_identifier_in_user_defined_function10965);
            	    sql_identifier1262=sql_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1262.getTree());

            	    }
            	    break;

            	default :
            	    break loop285;
                }
            } while (true);

            // RPIExprAST.g:1119:48: ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==DOT) ) {
                int LA286_1 = input.LA(2);

                if ( (LA286_1==197||(LA286_1>=200 && LA286_1<=201)) ) {
                    alt286=1;
                }
            }
            switch (alt286) {
                case 1 :
                    // RPIExprAST.g:1119:50: DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' )
                    {
                    DOT1263=(Token)match(input,DOT,FOLLOW_DOT_in_user_defined_function10972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1263_tree = (Object)adaptor.create(DOT1263);
                    adaptor.addChild(root_0, DOT1263_tree);
                    }
                    set1264=(Token)input.LT(1);
                    if ( input.LA(1)==197||(input.LA(1)>=200 && input.LA(1)<=201) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1264));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, user_defined_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "user_defined_function"

    public static class selected_table_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selected_table"
    // RPIExprAST.g:1131:1: selected_table : ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )? ;
    public final RPIExprASTParser.selected_table_return selected_table() throws RecognitionException {
        RPIExprASTParser.selected_table_return retval = new RPIExprASTParser.selected_table_return();
        retval.start = input.LT(1);
        int selected_table_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1266=null;
        RPIExprASTParser.table_spec_return table_spec1265 = null;

        RPIExprASTParser.keyTHE_return keyTHE1267 = null;

        RPIExprASTParser.subquery_return subquery1268 = null;

        RPIExprASTParser.alias_return alias1269 = null;


        Object string_literal1266_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // RPIExprAST.g:1132:5: ( ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )? )
            // RPIExprAST.g:1132:9: ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1132:9: ( table_spec | ( 'TABLE' | keyTHE )? subquery )
            int alt288=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA288_1 = input.LA(2);

                if ( (synpred482_RPIExprAST()) ) {
                    alt288=1;
                }
                else if ( ((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "THE"))) ) {
                    alt288=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 288, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 158:
                {
                alt288=1;
                }
                break;
            case LPAREN:
            case 163:
                {
                alt288=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);

                throw nvae;
            }

            switch (alt288) {
                case 1 :
                    // RPIExprAST.g:1132:11: table_spec
                    {
                    pushFollow(FOLLOW_table_spec_in_selected_table11020);
                    table_spec1265=table_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, table_spec1265.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1132:24: ( 'TABLE' | keyTHE )? subquery
                    {
                    // RPIExprAST.g:1132:24: ( 'TABLE' | keyTHE )?
                    int alt287=3;
                    int LA287_0 = input.LA(1);

                    if ( (LA287_0==163) ) {
                        alt287=1;
                    }
                    else if ( (LA287_0==ID) ) {
                        alt287=2;
                    }
                    switch (alt287) {
                        case 1 :
                            // RPIExprAST.g:1132:26: 'TABLE'
                            {
                            string_literal1266=(Token)match(input,163,FOLLOW_163_in_selected_table11026); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1266_tree = (Object)adaptor.create(string_literal1266);
                            adaptor.addChild(root_0, string_literal1266_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1132:36: keyTHE
                            {
                            pushFollow(FOLLOW_keyTHE_in_selected_table11030);
                            keyTHE1267=keyTHE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTHE1267.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_subquery_in_selected_table11035);
                    subquery1268=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1268.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1132:57: ( alias )?
            int alt289=2;
            switch ( input.LA(1) ) {
                case 112:
                    {
                    int LA289_1 = input.LA(2);

                    if ( (LA289_1==ID||LA289_1==DOUBLEQUOTED_STRING) ) {
                        int LA289_6 = input.LA(3);

                        if ( (synpred485_RPIExprAST()) ) {
                            alt289=1;
                        }
                    }
                    else if ( (LA289_1==158) ) {
                        int LA289_7 = input.LA(3);

                        if ( (synpred485_RPIExprAST()) ) {
                            alt289=1;
                        }
                    }
                    }
                    break;
                case ID:
                    {
                    int LA289_2 = input.LA(2);

                    if ( (synpred485_RPIExprAST()) ) {
                        alt289=1;
                    }
                    }
                    break;
                case 158:
                    {
                    int LA289_3 = input.LA(2);

                    if ( (synpred485_RPIExprAST()) ) {
                        alt289=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA289_5 = input.LA(2);

                    if ( (synpred485_RPIExprAST()) ) {
                        alt289=1;
                    }
                    }
                    break;
            }

            switch (alt289) {
                case 1 :
                    // RPIExprAST.g:1132:59: alias
                    {
                    pushFollow(FOLLOW_alias_in_selected_table11041);
                    alias1269=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias1269.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, selected_table_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selected_table"

    public static class table_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_spec"
    // RPIExprAST.g:1135:1: table_spec : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ;
    public final RPIExprASTParser.table_spec_return table_spec() throws RecognitionException {
        RPIExprASTParser.table_spec_return retval = new RPIExprASTParser.table_spec_return();
        retval.start = input.LT(1);
        int table_spec_StartIndex = input.index();
        Object root_0 = null;

        Token DOT1271=null;
        Token AT_SIGN1273=null;
        RPIExprASTParser.schema_name_return schema_name1270 = null;

        RPIExprASTParser.table_name_return table_name1272 = null;

        RPIExprASTParser.link_name_return link_name1274 = null;


        Object DOT1271_tree=null;
        Object AT_SIGN1273_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // RPIExprAST.g:1136:5: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? )
            // RPIExprAST.g:1136:9: ( schema_name DOT )? table_name ( AT_SIGN link_name )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1136:9: ( schema_name DOT )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==ID||LA290_0==DOUBLEQUOTED_STRING) ) {
                int LA290_1 = input.LA(2);

                if ( (LA290_1==DOT) ) {
                    alt290=1;
                }
            }
            else if ( (LA290_0==158) ) {
                int LA290_2 = input.LA(2);

                if ( (LA290_2==DOT) ) {
                    alt290=1;
                }
            }
            switch (alt290) {
                case 1 :
                    // RPIExprAST.g:1136:11: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_table_spec11065);
                    schema_name1270=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1270.getTree());
                    DOT1271=(Token)match(input,DOT,FOLLOW_DOT_in_table_spec11067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1271_tree = (Object)adaptor.create(DOT1271);
                    adaptor.addChild(root_0, DOT1271_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_table_spec11072);
            table_name1272=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1272.getTree());
            // RPIExprAST.g:1136:41: ( AT_SIGN link_name )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==AT_SIGN) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // RPIExprAST.g:1136:43: AT_SIGN link_name
                    {
                    AT_SIGN1273=(Token)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_spec11076); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT_SIGN1273_tree = (Object)adaptor.create(AT_SIGN1273);
                    adaptor.addChild(root_0, AT_SIGN1273_tree);
                    }
                    pushFollow(FOLLOW_link_name_in_table_spec11078);
                    link_name1274=link_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, link_name1274.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, table_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_spec"

    public static class table_alias_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_alias"
    // RPIExprAST.g:1139:1: table_alias : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )? ;
    public final RPIExprASTParser.table_alias_return table_alias() throws RecognitionException {
        RPIExprASTParser.table_alias_return retval = new RPIExprASTParser.table_alias_return();
        retval.start = input.LT(1);
        int table_alias_StartIndex = input.index();
        Object root_0 = null;

        Token DOT1276=null;
        Token AT_SIGN1278=null;
        RPIExprASTParser.schema_name_return schema_name1275 = null;

        RPIExprASTParser.table_name_return table_name1277 = null;

        RPIExprASTParser.link_name_return link_name1279 = null;

        RPIExprASTParser.alias_return alias1280 = null;


        Object DOT1276_tree=null;
        Object AT_SIGN1278_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // RPIExprAST.g:1140:5: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )? )
            // RPIExprAST.g:1140:9: ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1140:9: ( schema_name DOT )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==ID||LA292_0==DOUBLEQUOTED_STRING) ) {
                int LA292_1 = input.LA(2);

                if ( (LA292_1==DOT) ) {
                    alt292=1;
                }
            }
            else if ( (LA292_0==158) ) {
                int LA292_2 = input.LA(2);

                if ( (LA292_2==DOT) ) {
                    alt292=1;
                }
            }
            switch (alt292) {
                case 1 :
                    // RPIExprAST.g:1140:11: schema_name DOT
                    {
                    pushFollow(FOLLOW_schema_name_in_table_alias11102);
                    schema_name1275=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, schema_name1275.getTree());
                    DOT1276=(Token)match(input,DOT,FOLLOW_DOT_in_table_alias11104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1276_tree = (Object)adaptor.create(DOT1276);
                    adaptor.addChild(root_0, DOT1276_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_table_name_in_table_alias11109);
            table_name1277=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_name1277.getTree());
            // RPIExprAST.g:1140:41: ( AT_SIGN link_name )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==AT_SIGN) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // RPIExprAST.g:1140:43: AT_SIGN link_name
                    {
                    AT_SIGN1278=(Token)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_alias11113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT_SIGN1278_tree = (Object)adaptor.create(AT_SIGN1278);
                    adaptor.addChild(root_0, AT_SIGN1278_tree);
                    }
                    pushFollow(FOLLOW_link_name_in_table_alias11115);
                    link_name1279=link_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, link_name1279.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1140:64: ( alias )?
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==ID||LA294_0==DOUBLEQUOTED_STRING||LA294_0==112||LA294_0==158) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    // RPIExprAST.g:1140:66: alias
                    {
                    pushFollow(FOLLOW_alias_in_table_alias11122);
                    alias1280=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, alias1280.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, table_alias_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_alias"

    public static class link_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "link_name"
    // RPIExprAST.g:1143:1: link_name : sql_identifier ;
    public final RPIExprASTParser.link_name_return link_name() throws RecognitionException {
        RPIExprASTParser.link_name_return retval = new RPIExprASTParser.link_name_return();
        retval.start = input.LT(1);
        int link_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1281 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // RPIExprAST.g:1144:5: ( sql_identifier )
            // RPIExprAST.g:1144:9: sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_link_name11144);
            sql_identifier1281=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1281.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, link_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "link_name"

    public static class nested_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_condition"
    // RPIExprAST.g:1146:1: nested_condition : ({...}? condition_or | {...}? expr_bool );
    public final RPIExprASTParser.nested_condition_return nested_condition() throws RecognitionException {
        RPIExprASTParser.nested_condition_return retval = new RPIExprASTParser.nested_condition_return();
        retval.start = input.LT(1);
        int nested_condition_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.condition_or_return condition_or1282 = null;

        RPIExprASTParser.expr_bool_return expr_bool1283 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // RPIExprAST.g:1147:5: ({...}? condition_or | {...}? expr_bool )
            int alt295=2;
            switch ( input.LA(1) ) {
            case NOT:
                {
                int LA295_1 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 1, input);

                    throw nvae;
                }
                }
                break;
            case 197:
            case 200:
            case 202:
                {
                alt295=1;
                }
                break;
            case PLUS:
            case MINUS:
                {
                int LA295_3 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 3, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA295_4 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 4, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA295_5 = input.LA(2);

                if ( ((((synpred491_RPIExprAST()&&(  is_sql ))&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))||(synpred491_RPIExprAST()&&(  is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred491_RPIExprAST()&&(  is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||(((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR"))))) ) {
                    alt295=1;
                }
                else if ( ((((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(( !is_sql )&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||( !is_sql )||((( !is_sql )&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT"))))) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 5, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA295_6 = input.LA(2);

                if ( ((((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql ))||((synpred491_RPIExprAST()&&(  is_sql ))&&( is_sql )))) ) {
                    alt295=1;
                }
                else if ( ((( !is_sql )&&( is_sql ))) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 6, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA295_7 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 7, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA295_8 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 8, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA295_9 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 9, input);

                    throw nvae;
                }
                }
                break;
            case 168:
            case 169:
                {
                int LA295_10 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 10, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA295_11 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 11, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA295_12 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 12, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA295_13 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 13, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA295_14 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 14, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA295_15 = input.LA(2);

                if ( ((synpred491_RPIExprAST()&&(  is_sql ))) ) {
                    alt295=1;
                }
                else if ( (( !is_sql )) ) {
                    alt295=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 295, 15, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 295, 0, input);

                throw nvae;
            }

            switch (alt295) {
                case 1 :
                    // RPIExprAST.g:1147:9: {...}? condition_or
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", "  is_sql ");
                    }
                    pushFollow(FOLLOW_condition_or_in_nested_condition11164);
                    condition_or1282=condition_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_or1282.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1148:9: {...}? expr_bool
                    {
                    root_0 = (Object)adaptor.nil();

                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", " !is_sql ");
                    }
                    pushFollow(FOLLOW_expr_bool_in_nested_condition11176);
                    expr_bool1283=expr_bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_bool1283.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, nested_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_condition"

    public static class sql_condition_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_condition"
    // RPIExprAST.g:1150:1: sql_condition : condition_or ;
    public final RPIExprASTParser.sql_condition_return sql_condition() throws RecognitionException {
        RPIExprASTParser.sql_condition_return retval = new RPIExprASTParser.sql_condition_return();
        retval.start = input.LT(1);
        int sql_condition_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.condition_or_return condition_or1284 = null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // RPIExprAST.g:1152:5: ( condition_or )
            // RPIExprAST.g:1152:9: condition_or
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_condition_or_in_sql_condition11207);
            condition_or1284=condition_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_or1284.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, sql_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_condition"

    public static class condition_paren_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_paren"
    // RPIExprAST.g:1155:1: condition_paren : LPAREN sql_condition RPAREN ;
    public final RPIExprASTParser.condition_paren_return condition_paren() throws RecognitionException {
        RPIExprASTParser.condition_paren_return retval = new RPIExprASTParser.condition_paren_return();
        retval.start = input.LT(1);
        int condition_paren_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1285=null;
        Token RPAREN1287=null;
        RPIExprASTParser.sql_condition_return sql_condition1286 = null;


        Object LPAREN1285_tree=null;
        Object RPAREN1287_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // RPIExprAST.g:1156:5: ( LPAREN sql_condition RPAREN )
            // RPIExprAST.g:1156:9: LPAREN sql_condition RPAREN
            {
            root_0 = (Object)adaptor.nil();

            LPAREN1285=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_paren11226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1285_tree = (Object)adaptor.create(LPAREN1285);
            adaptor.addChild(root_0, LPAREN1285_tree);
            }
            pushFollow(FOLLOW_sql_condition_in_condition_paren11228);
            sql_condition1286=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1286.getTree());
            RPAREN1287=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_paren11230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1287_tree = (Object)adaptor.create(RPAREN1287);
            adaptor.addChild(root_0, RPAREN1287_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, condition_paren_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_paren"

    public static class condition_or_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_or"
    // RPIExprAST.g:1158:1: condition_or : condition_and ( 'OR' condition_and )* ;
    public final RPIExprASTParser.condition_or_return condition_or() throws RecognitionException {
        RPIExprASTParser.condition_or_return retval = new RPIExprASTParser.condition_or_return();
        retval.start = input.LT(1);
        int condition_or_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1289=null;
        RPIExprASTParser.condition_and_return condition_and1288 = null;

        RPIExprASTParser.condition_and_return condition_and1290 = null;


        Object string_literal1289_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // RPIExprAST.g:1159:5: ( condition_and ( 'OR' condition_and )* )
            // RPIExprAST.g:1159:9: condition_and ( 'OR' condition_and )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_condition_and_in_condition_or11248);
            condition_and1288=condition_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_and1288.getTree());
            // RPIExprAST.g:1159:23: ( 'OR' condition_and )*
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==OR) ) {
                    int LA296_2 = input.LA(2);

                    if ( (synpred492_RPIExprAST()) ) {
                        alt296=1;
                    }


                }


                switch (alt296) {
            	case 1 :
            	    // RPIExprAST.g:1159:25: 'OR' condition_and
            	    {
            	    string_literal1289=(Token)match(input,OR,FOLLOW_OR_in_condition_or11252); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1289_tree = (Object)adaptor.create(string_literal1289);
            	    adaptor.addChild(root_0, string_literal1289_tree);
            	    }
            	    pushFollow(FOLLOW_condition_and_in_condition_or11254);
            	    condition_and1290=condition_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_and1290.getTree());

            	    }
            	    break;

            	default :
            	    break loop296;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, condition_or_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_or"

    public static class condition_and_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_and"
    // RPIExprAST.g:1161:1: condition_and : condition_not ( 'AND' condition_not )* ;
    public final RPIExprASTParser.condition_and_return condition_and() throws RecognitionException {
        RPIExprASTParser.condition_and_return retval = new RPIExprASTParser.condition_and_return();
        retval.start = input.LT(1);
        int condition_and_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1292=null;
        RPIExprASTParser.condition_not_return condition_not1291 = null;

        RPIExprASTParser.condition_not_return condition_not1293 = null;


        Object string_literal1292_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // RPIExprAST.g:1162:5: ( condition_not ( 'AND' condition_not )* )
            // RPIExprAST.g:1162:9: condition_not ( 'AND' condition_not )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_condition_not_in_condition_and11275);
            condition_not1291=condition_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_not1291.getTree());
            // RPIExprAST.g:1162:23: ( 'AND' condition_not )*
            loop297:
            do {
                int alt297=2;
                int LA297_0 = input.LA(1);

                if ( (LA297_0==AND) ) {
                    int LA297_2 = input.LA(2);

                    if ( (synpred493_RPIExprAST()) ) {
                        alt297=1;
                    }


                }


                switch (alt297) {
            	case 1 :
            	    // RPIExprAST.g:1162:25: 'AND' condition_not
            	    {
            	    string_literal1292=(Token)match(input,AND,FOLLOW_AND_in_condition_and11279); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1292_tree = (Object)adaptor.create(string_literal1292);
            	    adaptor.addChild(root_0, string_literal1292_tree);
            	    }
            	    pushFollow(FOLLOW_condition_not_in_condition_and11281);
            	    condition_not1293=condition_not();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_not1293.getTree());

            	    }
            	    break;

            	default :
            	    break loop297;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, condition_and_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_and"

    public static class condition_not_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_not"
    // RPIExprAST.g:1164:1: condition_not : ( 'NOT' condition_expr | condition_expr );
    public final RPIExprASTParser.condition_not_return condition_not() throws RecognitionException {
        RPIExprASTParser.condition_not_return retval = new RPIExprASTParser.condition_not_return();
        retval.start = input.LT(1);
        int condition_not_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1294=null;
        RPIExprASTParser.condition_expr_return condition_expr1295 = null;

        RPIExprASTParser.condition_expr_return condition_expr1296 = null;


        Object string_literal1294_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // RPIExprAST.g:1165:5: ( 'NOT' condition_expr | condition_expr )
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==NOT) ) {
                alt298=1;
            }
            else if ( ((LA298_0>=ID && LA298_0<=LPAREN)||(LA298_0>=SQL && LA298_0<=MINUS)||LA298_0==NUMBER||LA298_0==QUOTED_STRING||LA298_0==DOUBLEQUOTED_STRING||LA298_0==116||LA298_0==158||(LA298_0>=168 && LA298_0<=169)||(LA298_0>=174 && LA298_0<=175)||(LA298_0>=197 && LA298_0<=198)||LA298_0==200||LA298_0==202) ) {
                alt298=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 298, 0, input);

                throw nvae;
            }
            switch (alt298) {
                case 1 :
                    // RPIExprAST.g:1165:9: 'NOT' condition_expr
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1294=(Token)match(input,NOT,FOLLOW_NOT_in_condition_not11302); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1294_tree = (Object)adaptor.create(string_literal1294);
                    adaptor.addChild(root_0, string_literal1294_tree);
                    }
                    pushFollow(FOLLOW_condition_expr_in_condition_not11304);
                    condition_expr1295=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_expr1295.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1166:9: condition_expr
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_expr_in_condition_not11314);
                    condition_expr1296=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_expr1296.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, condition_not_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_not"

    public static class condition_expr_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_expr"
    // RPIExprAST.g:1168:1: condition_expr : ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren );
    public final RPIExprASTParser.condition_expr_return condition_expr() throws RecognitionException {
        RPIExprASTParser.condition_expr_return retval = new RPIExprASTParser.condition_expr_return();
        retval.start = input.LT(1);
        int condition_expr_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.condition_exists_return condition_exists1297 = null;

        RPIExprASTParser.condition_is_return condition_is1298 = null;

        RPIExprASTParser.condition_comparison_return condition_comparison1299 = null;

        RPIExprASTParser.condition_group_comparison_return condition_group_comparison1300 = null;

        RPIExprASTParser.condition_in_return condition_in1301 = null;

        RPIExprASTParser.condition_is_a_set_return condition_is_a_set1302 = null;

        RPIExprASTParser.condition_is_any_return condition_is_any1303 = null;

        RPIExprASTParser.condition_is_empty_return condition_is_empty1304 = null;

        RPIExprASTParser.condition_is_of_type_return condition_is_of_type1305 = null;

        RPIExprASTParser.condition_is_present_return condition_is_present1306 = null;

        RPIExprASTParser.condition_like_return condition_like1307 = null;

        RPIExprASTParser.condition_memeber_return condition_memeber1308 = null;

        RPIExprASTParser.condition_between_return condition_between1309 = null;

        RPIExprASTParser.condition_regexp_like_return condition_regexp_like1310 = null;

        RPIExprASTParser.condition_submultiset_return condition_submultiset1311 = null;

        RPIExprASTParser.condition_equals_path_return condition_equals_path1312 = null;

        RPIExprASTParser.condition_under_path_return condition_under_path1313 = null;

        RPIExprASTParser.condition_paren_return condition_paren1314 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // RPIExprAST.g:1169:5: ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren )
            int alt299=18;
            switch ( input.LA(1) ) {
            case 200:
                {
                alt299=1;
                }
                break;
            case PLUS:
            case MINUS:
                {
                int LA299_2 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA299_3 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else if ( (true) ) {
                    alt299=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 3, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA299_4 = input.LA(2);

                if ( ((((synpred496_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred496_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred496_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred496_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred496_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||synpred496_RPIExprAST())) ) {
                    alt299=2;
                }
                else if ( ((((synpred497_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred497_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred497_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred497_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred497_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||synpred497_RPIExprAST())) ) {
                    alt299=3;
                }
                else if ( ((synpred498_RPIExprAST()||(synpred498_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred498_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred498_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred498_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred498_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR"))))) ) {
                    alt299=4;
                }
                else if ( ((((synpred499_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred499_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred499_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred499_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred499_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||synpred499_RPIExprAST())) ) {
                    alt299=5;
                }
                else if ( (synpred500_RPIExprAST()) ) {
                    alt299=6;
                }
                else if ( (synpred501_RPIExprAST()) ) {
                    alt299=7;
                }
                else if ( (synpred502_RPIExprAST()) ) {
                    alt299=8;
                }
                else if ( ((((synpred503_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred503_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(synpred503_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||synpred503_RPIExprAST()||((synpred503_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred503_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM"))))) ) {
                    alt299=9;
                }
                else if ( (synpred504_RPIExprAST()) ) {
                    alt299=10;
                }
                else if ( ((((synpred505_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred505_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred505_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||synpred505_RPIExprAST()||((synpred505_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred505_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR"))))) ) {
                    alt299=11;
                }
                else if ( (((synpred506_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred506_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||synpred506_RPIExprAST()||((synpred506_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred506_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred506_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR"))))) ) {
                    alt299=12;
                }
                else if ( ((((synpred507_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred507_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred507_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred507_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||synpred507_RPIExprAST()||((synpred507_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT"))))) ) {
                    alt299=13;
                }
                else if ( ((synpred508_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))) ) {
                    alt299=14;
                }
                else if ( (synpred509_RPIExprAST()) ) {
                    alt299=15;
                }
                else if ( ((synpred510_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH")))) ) {
                    alt299=16;
                }
                else if ( ((synpred511_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))) ) {
                    alt299=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 4, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA299_5 = input.LA(2);

                if ( ((synpred496_RPIExprAST()&&( is_sql ))) ) {
                    alt299=2;
                }
                else if ( ((synpred497_RPIExprAST()&&( is_sql ))) ) {
                    alt299=3;
                }
                else if ( ((synpred498_RPIExprAST()&&( is_sql ))) ) {
                    alt299=4;
                }
                else if ( ((synpred499_RPIExprAST()&&( is_sql ))) ) {
                    alt299=5;
                }
                else if ( ((synpred503_RPIExprAST()&&( is_sql ))) ) {
                    alt299=9;
                }
                else if ( ((synpred505_RPIExprAST()&&( is_sql ))) ) {
                    alt299=11;
                }
                else if ( ((synpred506_RPIExprAST()&&( is_sql ))) ) {
                    alt299=12;
                }
                else if ( ((synpred507_RPIExprAST()&&( is_sql ))) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA299_6 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred500_RPIExprAST()) ) {
                    alt299=6;
                }
                else if ( (synpred501_RPIExprAST()) ) {
                    alt299=7;
                }
                else if ( (synpred502_RPIExprAST()) ) {
                    alt299=8;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred504_RPIExprAST()) ) {
                    alt299=10;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else if ( (synpred509_RPIExprAST()) ) {
                    alt299=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 6, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA299_7 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred500_RPIExprAST()) ) {
                    alt299=6;
                }
                else if ( (synpred501_RPIExprAST()) ) {
                    alt299=7;
                }
                else if ( (synpred502_RPIExprAST()) ) {
                    alt299=8;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred504_RPIExprAST()) ) {
                    alt299=10;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else if ( (synpred509_RPIExprAST()) ) {
                    alt299=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 7, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA299_8 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 8, input);

                    throw nvae;
                }
                }
                break;
            case 168:
            case 169:
                {
                int LA299_9 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 9, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA299_10 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 10, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA299_11 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 11, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA299_12 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 12, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA299_13 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 13, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA299_14 = input.LA(2);

                if ( (synpred496_RPIExprAST()) ) {
                    alt299=2;
                }
                else if ( (synpred497_RPIExprAST()) ) {
                    alt299=3;
                }
                else if ( (synpred498_RPIExprAST()) ) {
                    alt299=4;
                }
                else if ( (synpred499_RPIExprAST()) ) {
                    alt299=5;
                }
                else if ( (synpred503_RPIExprAST()) ) {
                    alt299=9;
                }
                else if ( (synpred505_RPIExprAST()) ) {
                    alt299=11;
                }
                else if ( (synpred506_RPIExprAST()) ) {
                    alt299=12;
                }
                else if ( (synpred507_RPIExprAST()) ) {
                    alt299=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 299, 14, input);

                    throw nvae;
                }
                }
                break;
            case 197:
                {
                alt299=3;
                }
                break;
            case 202:
                {
                alt299=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 299, 0, input);

                throw nvae;
            }

            switch (alt299) {
                case 1 :
                    // RPIExprAST.g:1169:9: condition_exists
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_exists_in_condition_expr11332);
                    condition_exists1297=condition_exists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_exists1297.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1170:9: condition_is
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_is_in_condition_expr11342);
                    condition_is1298=condition_is();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is1298.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:1171:9: condition_comparison
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_comparison_in_condition_expr11352);
                    condition_comparison1299=condition_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_comparison1299.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:1172:9: condition_group_comparison
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_group_comparison_in_condition_expr11362);
                    condition_group_comparison1300=condition_group_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_group_comparison1300.getTree());

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:1173:9: condition_in
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_in_in_condition_expr11372);
                    condition_in1301=condition_in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_in1301.getTree());

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:1174:9: condition_is_a_set
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_is_a_set_in_condition_expr11382);
                    condition_is_a_set1302=condition_is_a_set();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_a_set1302.getTree());

                    }
                    break;
                case 7 :
                    // RPIExprAST.g:1175:9: condition_is_any
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_is_any_in_condition_expr11392);
                    condition_is_any1303=condition_is_any();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_any1303.getTree());

                    }
                    break;
                case 8 :
                    // RPIExprAST.g:1176:9: condition_is_empty
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_is_empty_in_condition_expr11402);
                    condition_is_empty1304=condition_is_empty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_empty1304.getTree());

                    }
                    break;
                case 9 :
                    // RPIExprAST.g:1177:9: condition_is_of_type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_is_of_type_in_condition_expr11412);
                    condition_is_of_type1305=condition_is_of_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type1305.getTree());

                    }
                    break;
                case 10 :
                    // RPIExprAST.g:1178:9: condition_is_present
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_is_present_in_condition_expr11422);
                    condition_is_present1306=condition_is_present();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_present1306.getTree());

                    }
                    break;
                case 11 :
                    // RPIExprAST.g:1179:9: condition_like
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_like_in_condition_expr11432);
                    condition_like1307=condition_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_like1307.getTree());

                    }
                    break;
                case 12 :
                    // RPIExprAST.g:1180:9: condition_memeber
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_memeber_in_condition_expr11442);
                    condition_memeber1308=condition_memeber();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_memeber1308.getTree());

                    }
                    break;
                case 13 :
                    // RPIExprAST.g:1181:9: condition_between
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_between_in_condition_expr11452);
                    condition_between1309=condition_between();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_between1309.getTree());

                    }
                    break;
                case 14 :
                    // RPIExprAST.g:1182:9: condition_regexp_like
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_regexp_like_in_condition_expr11462);
                    condition_regexp_like1310=condition_regexp_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_regexp_like1310.getTree());

                    }
                    break;
                case 15 :
                    // RPIExprAST.g:1183:9: condition_submultiset
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_submultiset_in_condition_expr11472);
                    condition_submultiset1311=condition_submultiset();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_submultiset1311.getTree());

                    }
                    break;
                case 16 :
                    // RPIExprAST.g:1184:9: condition_equals_path
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_equals_path_in_condition_expr11482);
                    condition_equals_path1312=condition_equals_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_equals_path1312.getTree());

                    }
                    break;
                case 17 :
                    // RPIExprAST.g:1185:9: condition_under_path
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_under_path_in_condition_expr11492);
                    condition_under_path1313=condition_under_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_under_path1313.getTree());

                    }
                    break;
                case 18 :
                    // RPIExprAST.g:1186:9: condition_paren
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_condition_paren_in_condition_expr11502);
                    condition_paren1314=condition_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_paren1314.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, condition_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_expr"

    public static class condition_exists_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_exists"
    // RPIExprAST.g:1188:1: condition_exists : 'EXISTS' LPAREN select_command RPAREN ;
    public final RPIExprASTParser.condition_exists_return condition_exists() throws RecognitionException {
        RPIExprASTParser.condition_exists_return retval = new RPIExprASTParser.condition_exists_return();
        retval.start = input.LT(1);
        int condition_exists_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1315=null;
        Token LPAREN1316=null;
        Token RPAREN1318=null;
        RPIExprASTParser.select_command_return select_command1317 = null;


        Object string_literal1315_tree=null;
        Object LPAREN1316_tree=null;
        Object RPAREN1318_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // RPIExprAST.g:1189:5: ( 'EXISTS' LPAREN select_command RPAREN )
            // RPIExprAST.g:1189:9: 'EXISTS' LPAREN select_command RPAREN
            {
            root_0 = (Object)adaptor.nil();

            string_literal1315=(Token)match(input,200,FOLLOW_200_in_condition_exists11520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1315_tree = (Object)adaptor.create(string_literal1315);
            adaptor.addChild(root_0, string_literal1315_tree);
            }
            LPAREN1316=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_exists11522); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1316_tree = (Object)adaptor.create(LPAREN1316);
            adaptor.addChild(root_0, LPAREN1316_tree);
            }
            pushFollow(FOLLOW_select_command_in_condition_exists11524);
            select_command1317=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1317.getTree());
            RPAREN1318=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_exists11526); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1318_tree = (Object)adaptor.create(RPAREN1318);
            adaptor.addChild(root_0, RPAREN1318_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, condition_exists_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_exists"

    public static class condition_is_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is"
    // RPIExprAST.g:1191:1: condition_is : sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) ;
    public final RPIExprASTParser.condition_is_return condition_is() throws RecognitionException {
        RPIExprASTParser.condition_is_return retval = new RPIExprASTParser.condition_is_return();
        retval.start = input.LT(1);
        int condition_is_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1320=null;
        Token string_literal1321=null;
        Token string_literal1324=null;
        RPIExprASTParser.sql_expression_return sql_expression1319 = null;

        RPIExprASTParser.keyNAN_return keyNAN1322 = null;

        RPIExprASTParser.keyINFINITE_return keyINFINITE1323 = null;


        Object string_literal1320_tree=null;
        Object string_literal1321_tree=null;
        Object string_literal1324_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // RPIExprAST.g:1192:5: ( sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) )
            // RPIExprAST.g:1192:9: sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_condition_is11544);
            sql_expression1319=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1319.getTree());
            string_literal1320=(Token)match(input,111,FOLLOW_111_in_condition_is11546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1320_tree = (Object)adaptor.create(string_literal1320);
            adaptor.addChild(root_0, string_literal1320_tree);
            }
            // RPIExprAST.g:1192:29: ( 'NOT' )?
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==NOT) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    // RPIExprAST.g:1192:31: 'NOT'
                    {
                    string_literal1321=(Token)match(input,NOT,FOLLOW_NOT_in_condition_is11550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1321_tree = (Object)adaptor.create(string_literal1321);
                    adaptor.addChild(root_0, string_literal1321_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:1192:40: ( keyNAN | keyINFINITE | 'NULL' )
            int alt301=3;
            int LA301_0 = input.LA(1);

            if ( (LA301_0==ID) ) {
                int LA301_1 = input.LA(2);

                if ( ((synpred513_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NAN")))) ) {
                    alt301=1;
                }
                else if ( ((synpred514_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INFINITE")))) ) {
                    alt301=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 301, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA301_0==116) ) {
                alt301=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 301, 0, input);

                throw nvae;
            }
            switch (alt301) {
                case 1 :
                    // RPIExprAST.g:1192:42: keyNAN
                    {
                    pushFollow(FOLLOW_keyNAN_in_condition_is11557);
                    keyNAN1322=keyNAN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyNAN1322.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1192:51: keyINFINITE
                    {
                    pushFollow(FOLLOW_keyINFINITE_in_condition_is11561);
                    keyINFINITE1323=keyINFINITE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyINFINITE1323.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:1192:65: 'NULL'
                    {
                    string_literal1324=(Token)match(input,116,FOLLOW_116_in_condition_is11565); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1324_tree = (Object)adaptor.create(string_literal1324);
                    adaptor.addChild(root_0, string_literal1324_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, condition_is_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is"

    public static class condition_comparison_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_comparison"
    // RPIExprAST.g:1194:1: condition_comparison : ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? | ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )? );
    public final RPIExprASTParser.condition_comparison_return condition_comparison() throws RecognitionException {
        RPIExprASTParser.condition_comparison_return retval = new RPIExprASTParser.condition_comparison_return();
        retval.start = input.LT(1);
        int condition_comparison_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1325=null;
        Token RPAREN1327=null;
        Token set1329=null;
        Token LPAREN1330=null;
        Token RPAREN1332=null;
        Token string_literal1334=null;
        Token set1337=null;
        Token string_literal1338=null;
        Token LPAREN1340=null;
        Token RPAREN1342=null;
        RPIExprASTParser.sql_expressions_return sql_expressions1326 = null;

        RPIExprASTParser.outer_join_sign_return outer_join_sign1328 = null;

        RPIExprASTParser.select_command_return select_command1331 = null;

        RPIExprASTParser.outer_join_sign_return outer_join_sign1333 = null;

        RPIExprASTParser.sql_expression_return sql_expression1335 = null;

        RPIExprASTParser.outer_join_sign_return outer_join_sign1336 = null;

        RPIExprASTParser.sql_expression_return sql_expression1339 = null;

        RPIExprASTParser.select_command_return select_command1341 = null;

        RPIExprASTParser.outer_join_sign_return outer_join_sign1343 = null;


        Object LPAREN1325_tree=null;
        Object RPAREN1327_tree=null;
        Object set1329_tree=null;
        Object LPAREN1330_tree=null;
        Object RPAREN1332_tree=null;
        Object string_literal1334_tree=null;
        Object set1337_tree=null;
        Object string_literal1338_tree=null;
        Object LPAREN1340_tree=null;
        Object RPAREN1342_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // RPIExprAST.g:1195:5: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? | ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )? )
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==LPAREN) ) {
                int LA309_1 = input.LA(2);

                if ( (synpred518_RPIExprAST()) ) {
                    alt309=1;
                }
                else if ( (true) ) {
                    alt309=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 309, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA309_0==ID||(LA309_0>=SQL && LA309_0<=MINUS)||LA309_0==NUMBER||LA309_0==QUOTED_STRING||LA309_0==DOUBLEQUOTED_STRING||LA309_0==116||LA309_0==158||(LA309_0>=168 && LA309_0<=169)||(LA309_0>=174 && LA309_0<=175)||(LA309_0>=197 && LA309_0<=198)) ) {
                alt309=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 309, 0, input);

                throw nvae;
            }
            switch (alt309) {
                case 1 :
                    // RPIExprAST.g:1195:9: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
                    {
                    root_0 = (Object)adaptor.nil();

                    LPAREN1325=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison11585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1325_tree = (Object)adaptor.create(LPAREN1325);
                    adaptor.addChild(root_0, LPAREN1325_tree);
                    }
                    pushFollow(FOLLOW_sql_expressions_in_condition_comparison11587);
                    sql_expressions1326=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1326.getTree());
                    RPAREN1327=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison11589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1327_tree = (Object)adaptor.create(RPAREN1327);
                    adaptor.addChild(root_0, RPAREN1327_tree);
                    }
                    // RPIExprAST.g:1195:39: ( outer_join_sign )?
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==LPAREN) ) {
                        alt302=1;
                    }
                    switch (alt302) {
                        case 1 :
                            // RPIExprAST.g:1195:41: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison11593);
                            outer_join_sign1328=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1328.getTree());

                            }
                            break;

                    }

                    set1329=(Token)input.LT(1);
                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1329));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    LPAREN1330=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison11608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1330_tree = (Object)adaptor.create(LPAREN1330);
                    adaptor.addChild(root_0, LPAREN1330_tree);
                    }
                    pushFollow(FOLLOW_select_command_in_condition_comparison11610);
                    select_command1331=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1331.getTree());
                    RPAREN1332=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison11612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1332_tree = (Object)adaptor.create(RPAREN1332);
                    adaptor.addChild(root_0, RPAREN1332_tree);
                    }
                    // RPIExprAST.g:1195:105: ( outer_join_sign )?
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==LPAREN) ) {
                        int LA303_1 = input.LA(2);

                        if ( (LA303_1==PLUS) ) {
                            int LA303_3 = input.LA(3);

                            if ( (LA303_3==RPAREN) ) {
                                int LA303_4 = input.LA(4);

                                if ( (synpred517_RPIExprAST()) ) {
                                    alt303=1;
                                }
                            }
                        }
                    }
                    switch (alt303) {
                        case 1 :
                            // RPIExprAST.g:1195:107: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison11616);
                            outer_join_sign1333=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1333.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1196:9: ( 'PRIOR' )? sql_expression ( outer_join_sign )? ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'PRIOR' )? ( sql_expression | LPAREN select_command RPAREN ) ( outer_join_sign )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // RPIExprAST.g:1196:9: ( 'PRIOR' )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==197) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // RPIExprAST.g:1196:11: 'PRIOR'
                            {
                            string_literal1334=(Token)match(input,197,FOLLOW_197_in_condition_comparison11631); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1334_tree = (Object)adaptor.create(string_literal1334);
                            adaptor.addChild(root_0, string_literal1334_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_sql_expression_in_condition_comparison11636);
                    sql_expression1335=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1335.getTree());
                    // RPIExprAST.g:1196:37: ( outer_join_sign )?
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==LPAREN) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            // RPIExprAST.g:1196:39: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison11640);
                            outer_join_sign1336=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1336.getTree());

                            }
                            break;

                    }

                    set1337=(Token)input.LT(1);
                    if ( input.LA(1)==EQ||(input.LA(1)>=BOOLOP_LT && input.LA(1)<=BOOLOP_LE)||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1337));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprAST.g:1196:122: ( 'PRIOR' )?
                    int alt306=2;
                    int LA306_0 = input.LA(1);

                    if ( (LA306_0==197) ) {
                        alt306=1;
                    }
                    switch (alt306) {
                        case 1 :
                            // RPIExprAST.g:1196:124: 'PRIOR'
                            {
                            string_literal1338=(Token)match(input,197,FOLLOW_197_in_condition_comparison11673); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1338_tree = (Object)adaptor.create(string_literal1338);
                            adaptor.addChild(root_0, string_literal1338_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:1196:135: ( sql_expression | LPAREN select_command RPAREN )
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==ID||(LA307_0>=SQL && LA307_0<=MINUS)||LA307_0==NUMBER||LA307_0==QUOTED_STRING||LA307_0==DOUBLEQUOTED_STRING||LA307_0==116||LA307_0==158||(LA307_0>=168 && LA307_0<=169)||(LA307_0>=174 && LA307_0<=175)||LA307_0==198) ) {
                        alt307=1;
                    }
                    else if ( (LA307_0==LPAREN) ) {
                        int LA307_2 = input.LA(2);

                        if ( (synpred527_RPIExprAST()) ) {
                            alt307=1;
                        }
                        else if ( (true) ) {
                            alt307=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 307, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 307, 0, input);

                        throw nvae;
                    }
                    switch (alt307) {
                        case 1 :
                            // RPIExprAST.g:1196:137: sql_expression
                            {
                            pushFollow(FOLLOW_sql_expression_in_condition_comparison11680);
                            sql_expression1339=sql_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1339.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1196:154: LPAREN select_command RPAREN
                            {
                            LPAREN1340=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison11684); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1340_tree = (Object)adaptor.create(LPAREN1340);
                            adaptor.addChild(root_0, LPAREN1340_tree);
                            }
                            pushFollow(FOLLOW_select_command_in_condition_comparison11686);
                            select_command1341=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1341.getTree());
                            RPAREN1342=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison11688); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1342_tree = (Object)adaptor.create(RPAREN1342);
                            adaptor.addChild(root_0, RPAREN1342_tree);
                            }

                            }
                            break;

                    }

                    // RPIExprAST.g:1196:185: ( outer_join_sign )?
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( (LA308_0==LPAREN) ) {
                        int LA308_1 = input.LA(2);

                        if ( (synpred528_RPIExprAST()) ) {
                            alt308=1;
                        }
                    }
                    switch (alt308) {
                        case 1 :
                            // RPIExprAST.g:1196:187: outer_join_sign
                            {
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison11694);
                            outer_join_sign1343=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, outer_join_sign1343.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, condition_comparison_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_comparison"

    public static class condition_group_comparison_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_group_comparison"
    // RPIExprAST.g:1198:1: condition_group_comparison : ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN );
    public final RPIExprASTParser.condition_group_comparison_return condition_group_comparison() throws RecognitionException {
        RPIExprASTParser.condition_group_comparison_return retval = new RPIExprASTParser.condition_group_comparison_return();
        retval.start = input.LT(1);
        int condition_group_comparison_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1344=null;
        Token RPAREN1346=null;
        Token set1347=null;
        Token string_literal1348=null;
        Token string_literal1350=null;
        Token LPAREN1351=null;
        Token RPAREN1354=null;
        Token set1356=null;
        Token string_literal1357=null;
        Token string_literal1359=null;
        Token LPAREN1360=null;
        Token RPAREN1363=null;
        RPIExprASTParser.sql_expressions_return sql_expressions1345 = null;

        RPIExprASTParser.keySOME_return keySOME1349 = null;

        RPIExprASTParser.grouping_expression_list_return grouping_expression_list1352 = null;

        RPIExprASTParser.select_command_return select_command1353 = null;

        RPIExprASTParser.sql_expression_return sql_expression1355 = null;

        RPIExprASTParser.keySOME_return keySOME1358 = null;

        RPIExprASTParser.sql_expressions_return sql_expressions1361 = null;

        RPIExprASTParser.select_command_return select_command1362 = null;


        Object LPAREN1344_tree=null;
        Object RPAREN1346_tree=null;
        Object set1347_tree=null;
        Object string_literal1348_tree=null;
        Object string_literal1350_tree=null;
        Object LPAREN1351_tree=null;
        Object RPAREN1354_tree=null;
        Object set1356_tree=null;
        Object string_literal1357_tree=null;
        Object string_literal1359_tree=null;
        Object LPAREN1360_tree=null;
        Object RPAREN1363_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // RPIExprAST.g:1199:5: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN )
            int alt314=2;
            int LA314_0 = input.LA(1);

            if ( (LA314_0==LPAREN) ) {
                int LA314_1 = input.LA(2);

                if ( (synpred533_RPIExprAST()) ) {
                    alt314=1;
                }
                else if ( (true) ) {
                    alt314=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA314_0==ID||(LA314_0>=SQL && LA314_0<=MINUS)||LA314_0==NUMBER||LA314_0==QUOTED_STRING||LA314_0==DOUBLEQUOTED_STRING||LA314_0==116||LA314_0==158||(LA314_0>=168 && LA314_0<=169)||(LA314_0>=174 && LA314_0<=175)||LA314_0==198) ) {
                alt314=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);

                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    // RPIExprAST.g:1199:9: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LPAREN1344=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison11715); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1344_tree = (Object)adaptor.create(LPAREN1344);
                    adaptor.addChild(root_0, LPAREN1344_tree);
                    }
                    pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison11717);
                    sql_expressions1345=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1345.getTree());
                    RPAREN1346=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison11719); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1346_tree = (Object)adaptor.create(RPAREN1346);
                    adaptor.addChild(root_0, RPAREN1346_tree);
                    }
                    set1347=(Token)input.LT(1);
                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1347));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprAST.g:1199:55: ( 'ANY' | keySOME | 'ALL' )
                    int alt310=3;
                    switch ( input.LA(1) ) {
                    case 202:
                        {
                        alt310=1;
                        }
                        break;
                    case ID:
                        {
                        alt310=2;
                        }
                        break;
                    case 177:
                        {
                        alt310=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 310, 0, input);

                        throw nvae;
                    }

                    switch (alt310) {
                        case 1 :
                            // RPIExprAST.g:1199:57: 'ANY'
                            {
                            string_literal1348=(Token)match(input,202,FOLLOW_202_in_condition_group_comparison11733); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1348_tree = (Object)adaptor.create(string_literal1348);
                            adaptor.addChild(root_0, string_literal1348_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1199:65: keySOME
                            {
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison11737);
                            keySOME1349=keySOME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySOME1349.getTree());

                            }
                            break;
                        case 3 :
                            // RPIExprAST.g:1199:75: 'ALL'
                            {
                            string_literal1350=(Token)match(input,177,FOLLOW_177_in_condition_group_comparison11741); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1350_tree = (Object)adaptor.create(string_literal1350);
                            adaptor.addChild(root_0, string_literal1350_tree);
                            }

                            }
                            break;

                    }

                    LPAREN1351=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison11745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1351_tree = (Object)adaptor.create(LPAREN1351);
                    adaptor.addChild(root_0, LPAREN1351_tree);
                    }
                    // RPIExprAST.g:1199:90: ( grouping_expression_list | select_command )
                    int alt311=2;
                    int LA311_0 = input.LA(1);

                    if ( ((LA311_0>=ID && LA311_0<=LPAREN)||(LA311_0>=SQL && LA311_0<=MINUS)||LA311_0==NUMBER||LA311_0==QUOTED_STRING||LA311_0==DOUBLEQUOTED_STRING||LA311_0==116||LA311_0==158||(LA311_0>=168 && LA311_0<=169)||LA311_0==175||LA311_0==198) ) {
                        alt311=1;
                    }
                    else if ( (LA311_0==174) ) {
                        int LA311_13 = input.LA(2);

                        if ( (synpred532_RPIExprAST()) ) {
                            alt311=1;
                        }
                        else if ( (true) ) {
                            alt311=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 311, 13, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 311, 0, input);

                        throw nvae;
                    }
                    switch (alt311) {
                        case 1 :
                            // RPIExprAST.g:1199:92: grouping_expression_list
                            {
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_group_comparison11749);
                            grouping_expression_list1352=grouping_expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list1352.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1199:119: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison11753);
                            select_command1353=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1353.getTree());

                            }
                            break;

                    }

                    RPAREN1354=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison11757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1354_tree = (Object)adaptor.create(RPAREN1354);
                    adaptor.addChild(root_0, RPAREN1354_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1200:9: sql_expression ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_expression_in_condition_group_comparison11767);
                    sql_expression1355=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1355.getTree());
                    set1356=(Token)input.LT(1);
                    if ( input.LA(1)==EQ||(input.LA(1)>=BOOLOP_LT && input.LA(1)<=BOOLOP_LE)||input.LA(1)==NOT_EQ ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1356));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprAST.g:1200:88: ( 'ANY' | keySOME | 'ALL' )
                    int alt312=3;
                    switch ( input.LA(1) ) {
                    case 202:
                        {
                        alt312=1;
                        }
                        break;
                    case ID:
                        {
                        alt312=2;
                        }
                        break;
                    case 177:
                        {
                        alt312=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 0, input);

                        throw nvae;
                    }

                    switch (alt312) {
                        case 1 :
                            // RPIExprAST.g:1200:90: 'ANY'
                            {
                            string_literal1357=(Token)match(input,202,FOLLOW_202_in_condition_group_comparison11797); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1357_tree = (Object)adaptor.create(string_literal1357);
                            adaptor.addChild(root_0, string_literal1357_tree);
                            }

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1200:98: keySOME
                            {
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison11801);
                            keySOME1358=keySOME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySOME1358.getTree());

                            }
                            break;
                        case 3 :
                            // RPIExprAST.g:1200:108: 'ALL'
                            {
                            string_literal1359=(Token)match(input,177,FOLLOW_177_in_condition_group_comparison11805); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1359_tree = (Object)adaptor.create(string_literal1359);
                            adaptor.addChild(root_0, string_literal1359_tree);
                            }

                            }
                            break;

                    }

                    LPAREN1360=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison11809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1360_tree = (Object)adaptor.create(LPAREN1360);
                    adaptor.addChild(root_0, LPAREN1360_tree);
                    }
                    // RPIExprAST.g:1200:123: ( sql_expressions | select_command )
                    int alt313=2;
                    int LA313_0 = input.LA(1);

                    if ( ((LA313_0>=ID && LA313_0<=LPAREN)||(LA313_0>=SQL && LA313_0<=MINUS)||LA313_0==NUMBER||LA313_0==QUOTED_STRING||LA313_0==DOUBLEQUOTED_STRING||LA313_0==116||LA313_0==158||(LA313_0>=168 && LA313_0<=169)||LA313_0==175||LA313_0==198) ) {
                        alt313=1;
                    }
                    else if ( (LA313_0==174) ) {
                        int LA313_13 = input.LA(2);

                        if ( (synpred541_RPIExprAST()) ) {
                            alt313=1;
                        }
                        else if ( (true) ) {
                            alt313=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 313, 13, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 313, 0, input);

                        throw nvae;
                    }
                    switch (alt313) {
                        case 1 :
                            // RPIExprAST.g:1200:125: sql_expressions
                            {
                            pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison11813);
                            sql_expressions1361=sql_expressions();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1361.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1200:143: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison11817);
                            select_command1362=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1362.getTree());

                            }
                            break;

                    }

                    RPAREN1363=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison11821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1363_tree = (Object)adaptor.create(RPAREN1363);
                    adaptor.addChild(root_0, RPAREN1363_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, condition_group_comparison_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_group_comparison"

    public static class condition_in_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_in"
    // RPIExprAST.g:1202:1: condition_in : ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN );
    public final RPIExprASTParser.condition_in_return condition_in() throws RecognitionException {
        RPIExprASTParser.condition_in_return retval = new RPIExprASTParser.condition_in_return();
        retval.start = input.LT(1);
        int condition_in_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1364=null;
        Token RPAREN1366=null;
        Token string_literal1367=null;
        Token string_literal1368=null;
        Token LPAREN1369=null;
        Token RPAREN1372=null;
        Token string_literal1374=null;
        Token string_literal1375=null;
        Token LPAREN1376=null;
        Token RPAREN1379=null;
        RPIExprASTParser.sql_expressions_return sql_expressions1365 = null;

        RPIExprASTParser.grouping_expression_list_return grouping_expression_list1370 = null;

        RPIExprASTParser.select_command_return select_command1371 = null;

        RPIExprASTParser.sql_expression_return sql_expression1373 = null;

        RPIExprASTParser.expression_list_return expression_list1377 = null;

        RPIExprASTParser.select_command_return select_command1378 = null;


        Object LPAREN1364_tree=null;
        Object RPAREN1366_tree=null;
        Object string_literal1367_tree=null;
        Object string_literal1368_tree=null;
        Object LPAREN1369_tree=null;
        Object RPAREN1372_tree=null;
        Object string_literal1374_tree=null;
        Object string_literal1375_tree=null;
        Object LPAREN1376_tree=null;
        Object RPAREN1379_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // RPIExprAST.g:1203:5: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN )
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==LPAREN) ) {
                int LA319_1 = input.LA(2);

                if ( (synpred544_RPIExprAST()) ) {
                    alt319=1;
                }
                else if ( (true) ) {
                    alt319=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 319, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA319_0==ID||(LA319_0>=SQL && LA319_0<=MINUS)||LA319_0==NUMBER||LA319_0==QUOTED_STRING||LA319_0==DOUBLEQUOTED_STRING||LA319_0==116||LA319_0==158||(LA319_0>=168 && LA319_0<=169)||(LA319_0>=174 && LA319_0<=175)||LA319_0==198) ) {
                alt319=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);

                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    // RPIExprAST.g:1203:9: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LPAREN1364=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in11839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1364_tree = (Object)adaptor.create(LPAREN1364);
                    adaptor.addChild(root_0, LPAREN1364_tree);
                    }
                    pushFollow(FOLLOW_sql_expressions_in_condition_in11841);
                    sql_expressions1365=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1365.getTree());
                    RPAREN1366=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in11843); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1366_tree = (Object)adaptor.create(RPAREN1366);
                    adaptor.addChild(root_0, RPAREN1366_tree);
                    }
                    // RPIExprAST.g:1203:39: ( 'NOT' )?
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==NOT) ) {
                        alt315=1;
                    }
                    switch (alt315) {
                        case 1 :
                            // RPIExprAST.g:1203:41: 'NOT'
                            {
                            string_literal1367=(Token)match(input,NOT,FOLLOW_NOT_in_condition_in11847); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1367_tree = (Object)adaptor.create(string_literal1367);
                            adaptor.addChild(root_0, string_literal1367_tree);
                            }

                            }
                            break;

                    }

                    string_literal1368=(Token)match(input,160,FOLLOW_160_in_condition_in11852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1368_tree = (Object)adaptor.create(string_literal1368);
                    adaptor.addChild(root_0, string_literal1368_tree);
                    }
                    LPAREN1369=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in11854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1369_tree = (Object)adaptor.create(LPAREN1369);
                    adaptor.addChild(root_0, LPAREN1369_tree);
                    }
                    // RPIExprAST.g:1203:62: ( grouping_expression_list | select_command )
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( ((LA316_0>=ID && LA316_0<=LPAREN)||(LA316_0>=SQL && LA316_0<=MINUS)||LA316_0==NUMBER||LA316_0==QUOTED_STRING||LA316_0==DOUBLEQUOTED_STRING||LA316_0==116||LA316_0==158||(LA316_0>=168 && LA316_0<=169)||LA316_0==175||LA316_0==198) ) {
                        alt316=1;
                    }
                    else if ( (LA316_0==174) ) {
                        int LA316_13 = input.LA(2);

                        if ( (synpred543_RPIExprAST()) ) {
                            alt316=1;
                        }
                        else if ( (true) ) {
                            alt316=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 316, 13, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 316, 0, input);

                        throw nvae;
                    }
                    switch (alt316) {
                        case 1 :
                            // RPIExprAST.g:1203:64: grouping_expression_list
                            {
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_in11858);
                            grouping_expression_list1370=grouping_expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, grouping_expression_list1370.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1203:91: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_in11862);
                            select_command1371=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1371.getTree());

                            }
                            break;

                    }

                    RPAREN1372=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in11866); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1372_tree = (Object)adaptor.create(RPAREN1372);
                    adaptor.addChild(root_0, RPAREN1372_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1204:9: sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_expression_in_condition_in11876);
                    sql_expression1373=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1373.getTree());
                    // RPIExprAST.g:1204:24: ( 'NOT' )?
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( (LA317_0==NOT) ) {
                        alt317=1;
                    }
                    switch (alt317) {
                        case 1 :
                            // RPIExprAST.g:1204:26: 'NOT'
                            {
                            string_literal1374=(Token)match(input,NOT,FOLLOW_NOT_in_condition_in11880); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1374_tree = (Object)adaptor.create(string_literal1374);
                            adaptor.addChild(root_0, string_literal1374_tree);
                            }

                            }
                            break;

                    }

                    string_literal1375=(Token)match(input,160,FOLLOW_160_in_condition_in11885); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1375_tree = (Object)adaptor.create(string_literal1375);
                    adaptor.addChild(root_0, string_literal1375_tree);
                    }
                    LPAREN1376=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in11887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1376_tree = (Object)adaptor.create(LPAREN1376);
                    adaptor.addChild(root_0, LPAREN1376_tree);
                    }
                    // RPIExprAST.g:1204:47: ( expression_list | select_command )
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( ((LA318_0>=ID && LA318_0<=LPAREN)||(LA318_0>=SQL && LA318_0<=MINUS)||LA318_0==NUMBER||LA318_0==QUOTED_STRING||LA318_0==DOUBLEQUOTED_STRING||LA318_0==116||LA318_0==158||(LA318_0>=168 && LA318_0<=169)||LA318_0==175||LA318_0==198) ) {
                        alt318=1;
                    }
                    else if ( (LA318_0==174) ) {
                        int LA318_13 = input.LA(2);

                        if ( (synpred546_RPIExprAST()) ) {
                            alt318=1;
                        }
                        else if ( (true) ) {
                            alt318=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 318, 13, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 318, 0, input);

                        throw nvae;
                    }
                    switch (alt318) {
                        case 1 :
                            // RPIExprAST.g:1204:49: expression_list
                            {
                            pushFollow(FOLLOW_expression_list_in_condition_in11891);
                            expression_list1377=expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1377.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1204:67: select_command
                            {
                            pushFollow(FOLLOW_select_command_in_condition_in11895);
                            select_command1378=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1378.getTree());

                            }
                            break;

                    }

                    RPAREN1379=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in11899); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1379_tree = (Object)adaptor.create(RPAREN1379);
                    adaptor.addChild(root_0, RPAREN1379_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, condition_in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_in"

    public static class condition_is_a_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_a_set"
    // RPIExprAST.g:1206:1: condition_is_a_set : nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' ;
    public final RPIExprASTParser.condition_is_a_set_return condition_is_a_set() throws RecognitionException {
        RPIExprASTParser.condition_is_a_set_return retval = new RPIExprASTParser.condition_is_a_set_return();
        retval.start = input.LT(1);
        int condition_is_a_set_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1381=null;
        Token string_literal1382=null;
        Token string_literal1384=null;
        RPIExprASTParser.nested_table_column_name_return nested_table_column_name1380 = null;

        RPIExprASTParser.keyA_return keyA1383 = null;


        Object string_literal1381_tree=null;
        Object string_literal1382_tree=null;
        Object string_literal1384_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // RPIExprAST.g:1207:5: ( nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' )
            // RPIExprAST.g:1207:9: nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_a_set11917);
            nested_table_column_name1380=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1380.getTree());
            string_literal1381=(Token)match(input,111,FOLLOW_111_in_condition_is_a_set11919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1381_tree = (Object)adaptor.create(string_literal1381);
            adaptor.addChild(root_0, string_literal1381_tree);
            }
            // RPIExprAST.g:1207:39: ( 'NOT' )?
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==NOT) ) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    // RPIExprAST.g:1207:41: 'NOT'
                    {
                    string_literal1382=(Token)match(input,NOT,FOLLOW_NOT_in_condition_is_a_set11923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1382_tree = (Object)adaptor.create(string_literal1382);
                    adaptor.addChild(root_0, string_literal1382_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keyA_in_condition_is_a_set11928);
            keyA1383=keyA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyA1383.getTree());
            string_literal1384=(Token)match(input,145,FOLLOW_145_in_condition_is_a_set11930); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1384_tree = (Object)adaptor.create(string_literal1384);
            adaptor.addChild(root_0, string_literal1384_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, condition_is_a_set_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_a_set"

    public static class condition_is_any_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_any"
    // RPIExprAST.g:1209:1: condition_is_any : ( column_name 'IS' )? 'ANY' ;
    public final RPIExprASTParser.condition_is_any_return condition_is_any() throws RecognitionException {
        RPIExprASTParser.condition_is_any_return retval = new RPIExprASTParser.condition_is_any_return();
        retval.start = input.LT(1);
        int condition_is_any_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1386=null;
        Token string_literal1387=null;
        RPIExprASTParser.column_name_return column_name1385 = null;


        Object string_literal1386_tree=null;
        Object string_literal1387_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // RPIExprAST.g:1210:5: ( ( column_name 'IS' )? 'ANY' )
            // RPIExprAST.g:1210:9: ( column_name 'IS' )? 'ANY'
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1210:9: ( column_name 'IS' )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==ID||LA321_0==DOUBLEQUOTED_STRING||LA321_0==158) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    // RPIExprAST.g:1210:11: column_name 'IS'
                    {
                    pushFollow(FOLLOW_column_name_in_condition_is_any11950);
                    column_name1385=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1385.getTree());
                    string_literal1386=(Token)match(input,111,FOLLOW_111_in_condition_is_any11952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1386_tree = (Object)adaptor.create(string_literal1386);
                    adaptor.addChild(root_0, string_literal1386_tree);
                    }

                    }
                    break;

            }

            string_literal1387=(Token)match(input,202,FOLLOW_202_in_condition_is_any11957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1387_tree = (Object)adaptor.create(string_literal1387);
            adaptor.addChild(root_0, string_literal1387_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, condition_is_any_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_any"

    public static class condition_is_empty_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_empty"
    // RPIExprAST.g:1212:1: condition_is_empty : nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY ;
    public final RPIExprASTParser.condition_is_empty_return condition_is_empty() throws RecognitionException {
        RPIExprASTParser.condition_is_empty_return retval = new RPIExprASTParser.condition_is_empty_return();
        retval.start = input.LT(1);
        int condition_is_empty_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1389=null;
        Token string_literal1390=null;
        RPIExprASTParser.nested_table_column_name_return nested_table_column_name1388 = null;

        RPIExprASTParser.keyEMPTY_return keyEMPTY1391 = null;


        Object string_literal1389_tree=null;
        Object string_literal1390_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // RPIExprAST.g:1213:5: ( nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY )
            // RPIExprAST.g:1213:9: nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_empty11975);
            nested_table_column_name1388=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1388.getTree());
            string_literal1389=(Token)match(input,111,FOLLOW_111_in_condition_is_empty11977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1389_tree = (Object)adaptor.create(string_literal1389);
            adaptor.addChild(root_0, string_literal1389_tree);
            }
            // RPIExprAST.g:1213:39: ( 'NOT' )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==NOT) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    // RPIExprAST.g:1213:41: 'NOT'
                    {
                    string_literal1390=(Token)match(input,NOT,FOLLOW_NOT_in_condition_is_empty11981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1390_tree = (Object)adaptor.create(string_literal1390);
                    adaptor.addChild(root_0, string_literal1390_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keyEMPTY_in_condition_is_empty11986);
            keyEMPTY1391=keyEMPTY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEMPTY1391.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, condition_is_empty_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_empty"

    public static class condition_is_of_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_of_type"
    // RPIExprAST.g:1215:1: condition_is_of_type : sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN ;
    public final RPIExprASTParser.condition_is_of_type_return condition_is_of_type() throws RecognitionException {
        RPIExprASTParser.condition_is_of_type_return retval = new RPIExprASTParser.condition_is_of_type_return();
        retval.start = input.LT(1);
        int condition_is_of_type_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1393=null;
        Token string_literal1394=null;
        Token string_literal1395=null;
        Token LPAREN1397=null;
        Token RPAREN1399=null;
        RPIExprASTParser.sql_expression_return sql_expression1392 = null;

        RPIExprASTParser.keyTYPE_return keyTYPE1396 = null;

        RPIExprASTParser.type_name_return type_name1398 = null;


        Object string_literal1393_tree=null;
        Object string_literal1394_tree=null;
        Object string_literal1395_tree=null;
        Object LPAREN1397_tree=null;
        Object RPAREN1399_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // RPIExprAST.g:1216:5: ( sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN )
            // RPIExprAST.g:1216:9: sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_condition_is_of_type12004);
            sql_expression1392=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1392.getTree());
            string_literal1393=(Token)match(input,111,FOLLOW_111_in_condition_is_of_type12006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1393_tree = (Object)adaptor.create(string_literal1393);
            adaptor.addChild(root_0, string_literal1393_tree);
            }
            // RPIExprAST.g:1216:29: ( 'NOT' )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==NOT) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    // RPIExprAST.g:1216:31: 'NOT'
                    {
                    string_literal1394=(Token)match(input,NOT,FOLLOW_NOT_in_condition_is_of_type12010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1394_tree = (Object)adaptor.create(string_literal1394);
                    adaptor.addChild(root_0, string_literal1394_tree);
                    }

                    }
                    break;

            }

            string_literal1395=(Token)match(input,164,FOLLOW_164_in_condition_is_of_type12015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1395_tree = (Object)adaptor.create(string_literal1395);
            adaptor.addChild(root_0, string_literal1395_tree);
            }
            // RPIExprAST.g:1216:45: ( keyTYPE )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==ID) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // RPIExprAST.g:1216:47: keyTYPE
                    {
                    pushFollow(FOLLOW_keyTYPE_in_condition_is_of_type12019);
                    keyTYPE1396=keyTYPE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTYPE1396.getTree());

                    }
                    break;

            }

            LPAREN1397=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_is_of_type12024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1397_tree = (Object)adaptor.create(LPAREN1397);
            adaptor.addChild(root_0, LPAREN1397_tree);
            }
            pushFollow(FOLLOW_type_name_in_condition_is_of_type12026);
            type_name1398=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name1398.getTree());
            RPAREN1399=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_is_of_type12028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1399_tree = (Object)adaptor.create(RPAREN1399);
            adaptor.addChild(root_0, RPAREN1399_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, condition_is_of_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type"

    public static class condition_is_of_type_names_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_of_type_names"
    // RPIExprAST.g:1218:1: condition_is_of_type_names : condition_is_of_type_name ( COMMA condition_is_of_type_name )* ;
    public final RPIExprASTParser.condition_is_of_type_names_return condition_is_of_type_names() throws RecognitionException {
        RPIExprASTParser.condition_is_of_type_names_return retval = new RPIExprASTParser.condition_is_of_type_names_return();
        retval.start = input.LT(1);
        int condition_is_of_type_names_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1401=null;
        RPIExprASTParser.condition_is_of_type_name_return condition_is_of_type_name1400 = null;

        RPIExprASTParser.condition_is_of_type_name_return condition_is_of_type_name1402 = null;


        Object COMMA1401_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // RPIExprAST.g:1219:5: ( condition_is_of_type_name ( COMMA condition_is_of_type_name )* )
            // RPIExprAST.g:1219:9: condition_is_of_type_name ( COMMA condition_is_of_type_name )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12046);
            condition_is_of_type_name1400=condition_is_of_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type_name1400.getTree());
            // RPIExprAST.g:1219:35: ( COMMA condition_is_of_type_name )*
            loop325:
            do {
                int alt325=2;
                int LA325_0 = input.LA(1);

                if ( (LA325_0==COMMA) ) {
                    alt325=1;
                }


                switch (alt325) {
            	case 1 :
            	    // RPIExprAST.g:1219:37: COMMA condition_is_of_type_name
            	    {
            	    COMMA1401=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_is_of_type_names12050); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1401_tree = (Object)adaptor.create(COMMA1401);
            	    adaptor.addChild(root_0, COMMA1401_tree);
            	    }
            	    pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12052);
            	    condition_is_of_type_name1402=condition_is_of_type_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, condition_is_of_type_name1402.getTree());

            	    }
            	    break;

            	default :
            	    break loop325;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, condition_is_of_type_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_names"

    public static class condition_is_of_type_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_of_type_name"
    // RPIExprAST.g:1221:1: condition_is_of_type_name : ( keyONLY )? type_name ;
    public final RPIExprASTParser.condition_is_of_type_name_return condition_is_of_type_name() throws RecognitionException {
        RPIExprASTParser.condition_is_of_type_name_return retval = new RPIExprASTParser.condition_is_of_type_name_return();
        retval.start = input.LT(1);
        int condition_is_of_type_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyONLY_return keyONLY1403 = null;

        RPIExprASTParser.type_name_return type_name1404 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // RPIExprAST.g:1222:5: ( ( keyONLY )? type_name )
            // RPIExprAST.g:1222:9: ( keyONLY )? type_name
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1222:9: ( keyONLY )?
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==ID) ) {
                int LA326_1 = input.LA(2);

                if ( (LA326_1==ID||LA326_1==DOUBLEQUOTED_STRING) ) {
                    alt326=1;
                }
            }
            switch (alt326) {
                case 1 :
                    // RPIExprAST.g:1222:11: keyONLY
                    {
                    pushFollow(FOLLOW_keyONLY_in_condition_is_of_type_name12075);
                    keyONLY1403=keyONLY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyONLY1403.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_type_name_in_condition_is_of_type_name12080);
            type_name1404=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_name1404.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, condition_is_of_type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_name"

    public static class condition_is_present_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_present"
    // RPIExprAST.g:1224:1: condition_is_present : cell_reference 'IS' keyPRESENT ;
    public final RPIExprASTParser.condition_is_present_return condition_is_present() throws RecognitionException {
        RPIExprASTParser.condition_is_present_return retval = new RPIExprASTParser.condition_is_present_return();
        retval.start = input.LT(1);
        int condition_is_present_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1406=null;
        RPIExprASTParser.cell_reference_return cell_reference1405 = null;

        RPIExprASTParser.keyPRESENT_return keyPRESENT1407 = null;


        Object string_literal1406_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // RPIExprAST.g:1225:5: ( cell_reference 'IS' keyPRESENT )
            // RPIExprAST.g:1225:9: cell_reference 'IS' keyPRESENT
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_cell_reference_in_condition_is_present12098);
            cell_reference1405=cell_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cell_reference1405.getTree());
            string_literal1406=(Token)match(input,111,FOLLOW_111_in_condition_is_present12100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1406_tree = (Object)adaptor.create(string_literal1406);
            adaptor.addChild(root_0, string_literal1406_tree);
            }
            pushFollow(FOLLOW_keyPRESENT_in_condition_is_present12102);
            keyPRESENT1407=keyPRESENT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyPRESENT1407.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, condition_is_present_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_present"

    public static class condition_like_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_like"
    // RPIExprAST.g:1227:1: condition_like : sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? ;
    public final RPIExprASTParser.condition_like_return condition_like() throws RecognitionException {
        RPIExprASTParser.condition_like_return retval = new RPIExprASTParser.condition_like_return();
        retval.start = input.LT(1);
        int condition_like_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1409=null;
        Token string_literal1410=null;
        RPIExprASTParser.sql_expression_return sql_expression1408 = null;

        RPIExprASTParser.keyLIKEC_return keyLIKEC1411 = null;

        RPIExprASTParser.keyLIKE2_return keyLIKE21412 = null;

        RPIExprASTParser.keyLIKE4_return keyLIKE41413 = null;

        RPIExprASTParser.sql_expression_return sql_expression1414 = null;

        RPIExprASTParser.keyESCAPE_return keyESCAPE1415 = null;

        RPIExprASTParser.sql_expression_return sql_expression1416 = null;


        Object string_literal1409_tree=null;
        Object string_literal1410_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // RPIExprAST.g:1228:5: ( sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? )
            // RPIExprAST.g:1228:9: sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_condition_like12120);
            sql_expression1408=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1408.getTree());
            // RPIExprAST.g:1228:24: ( 'NOT' )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==NOT) ) {
                alt327=1;
            }
            switch (alt327) {
                case 1 :
                    // RPIExprAST.g:1228:26: 'NOT'
                    {
                    string_literal1409=(Token)match(input,NOT,FOLLOW_NOT_in_condition_like12124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1409_tree = (Object)adaptor.create(string_literal1409);
                    adaptor.addChild(root_0, string_literal1409_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:1228:35: ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 )
            int alt328=4;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==192) ) {
                alt328=1;
            }
            else if ( (LA328_0==ID) ) {
                int LA328_2 = input.LA(2);

                if ( ((synpred556_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LIKEC")))) ) {
                    alt328=2;
                }
                else if ( ((synpred557_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LIKE2")))) ) {
                    alt328=3;
                }
                else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LIKE4"))) ) {
                    alt328=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 328, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    // RPIExprAST.g:1228:37: 'LIKE'
                    {
                    string_literal1410=(Token)match(input,192,FOLLOW_192_in_condition_like12131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1410_tree = (Object)adaptor.create(string_literal1410);
                    adaptor.addChild(root_0, string_literal1410_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1228:46: keyLIKEC
                    {
                    pushFollow(FOLLOW_keyLIKEC_in_condition_like12135);
                    keyLIKEC1411=keyLIKEC();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKEC1411.getTree());

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:1228:57: keyLIKE2
                    {
                    pushFollow(FOLLOW_keyLIKE2_in_condition_like12139);
                    keyLIKE21412=keyLIKE2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKE21412.getTree());

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:1228:68: keyLIKE4
                    {
                    pushFollow(FOLLOW_keyLIKE4_in_condition_like12143);
                    keyLIKE41413=keyLIKE4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyLIKE41413.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_sql_expression_in_condition_like12147);
            sql_expression1414=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1414.getTree());
            // RPIExprAST.g:1228:94: ( keyESCAPE sql_expression )?
            int alt329=2;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==ID) ) {
                int LA329_1 = input.LA(2);

                if ( ((synpred558_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ESCAPE")))) ) {
                    alt329=1;
                }
            }
            switch (alt329) {
                case 1 :
                    // RPIExprAST.g:1228:96: keyESCAPE sql_expression
                    {
                    pushFollow(FOLLOW_keyESCAPE_in_condition_like12151);
                    keyESCAPE1415=keyESCAPE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyESCAPE1415.getTree());
                    pushFollow(FOLLOW_sql_expression_in_condition_like12153);
                    sql_expression1416=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1416.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, condition_like_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_like"

    public static class condition_memeber_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_memeber"
    // RPIExprAST.g:1230:1: condition_memeber : sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name ;
    public final RPIExprASTParser.condition_memeber_return condition_memeber() throws RecognitionException {
        RPIExprASTParser.condition_memeber_return retval = new RPIExprASTParser.condition_memeber_return();
        retval.start = input.LT(1);
        int condition_memeber_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1418=null;
        Token string_literal1420=null;
        RPIExprASTParser.sql_expression_return sql_expression1417 = null;

        RPIExprASTParser.keyMEMBER_return keyMEMBER1419 = null;

        RPIExprASTParser.nested_table_column_name_return nested_table_column_name1421 = null;


        Object string_literal1418_tree=null;
        Object string_literal1420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // RPIExprAST.g:1231:5: ( sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name )
            // RPIExprAST.g:1231:9: sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_condition_memeber12174);
            sql_expression1417=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1417.getTree());
            // RPIExprAST.g:1231:24: ( 'NOT' )?
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==NOT) ) {
                alt330=1;
            }
            switch (alt330) {
                case 1 :
                    // RPIExprAST.g:1231:26: 'NOT'
                    {
                    string_literal1418=(Token)match(input,NOT,FOLLOW_NOT_in_condition_memeber12178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1418_tree = (Object)adaptor.create(string_literal1418);
                    adaptor.addChild(root_0, string_literal1418_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keyMEMBER_in_condition_memeber12183);
            keyMEMBER1419=keyMEMBER();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyMEMBER1419.getTree());
            // RPIExprAST.g:1231:45: ( 'OF' )?
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==164) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    // RPIExprAST.g:1231:47: 'OF'
                    {
                    string_literal1420=(Token)match(input,164,FOLLOW_164_in_condition_memeber12187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1420_tree = (Object)adaptor.create(string_literal1420);
                    adaptor.addChild(root_0, string_literal1420_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_nested_table_column_name_in_condition_memeber12192);
            nested_table_column_name1421=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1421.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, condition_memeber_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_memeber"

    public static class condition_between_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_between"
    // RPIExprAST.g:1233:1: condition_between : sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression ;
    public final RPIExprASTParser.condition_between_return condition_between() throws RecognitionException {
        RPIExprASTParser.condition_between_return retval = new RPIExprASTParser.condition_between_return();
        retval.start = input.LT(1);
        int condition_between_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1423=null;
        Token string_literal1424=null;
        Token string_literal1426=null;
        RPIExprASTParser.sql_expression_return sql_expression1422 = null;

        RPIExprASTParser.sql_expression_return sql_expression1425 = null;

        RPIExprASTParser.sql_expression_return sql_expression1427 = null;


        Object string_literal1423_tree=null;
        Object string_literal1424_tree=null;
        Object string_literal1426_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // RPIExprAST.g:1234:5: ( sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression )
            // RPIExprAST.g:1234:9: sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_expression_in_condition_between12210);
            sql_expression1422=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1422.getTree());
            // RPIExprAST.g:1234:24: ( 'NOT' )?
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==NOT) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    // RPIExprAST.g:1234:26: 'NOT'
                    {
                    string_literal1423=(Token)match(input,NOT,FOLLOW_NOT_in_condition_between12214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1423_tree = (Object)adaptor.create(string_literal1423);
                    adaptor.addChild(root_0, string_literal1423_tree);
                    }

                    }
                    break;

            }

            string_literal1424=(Token)match(input,196,FOLLOW_196_in_condition_between12219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1424_tree = (Object)adaptor.create(string_literal1424);
            adaptor.addChild(root_0, string_literal1424_tree);
            }
            pushFollow(FOLLOW_sql_expression_in_condition_between12221);
            sql_expression1425=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1425.getTree());
            string_literal1426=(Token)match(input,AND,FOLLOW_AND_in_condition_between12223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1426_tree = (Object)adaptor.create(string_literal1426);
            adaptor.addChild(root_0, string_literal1426_tree);
            }
            pushFollow(FOLLOW_sql_expression_in_condition_between12225);
            sql_expression1427=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1427.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, condition_between_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_between"

    public static class condition_regexp_like_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_regexp_like"
    // RPIExprAST.g:1236:1: condition_regexp_like : keyREGEXP_LIKE LPAREN call_parameters RPAREN ;
    public final RPIExprASTParser.condition_regexp_like_return condition_regexp_like() throws RecognitionException {
        RPIExprASTParser.condition_regexp_like_return retval = new RPIExprASTParser.condition_regexp_like_return();
        retval.start = input.LT(1);
        int condition_regexp_like_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1429=null;
        Token RPAREN1431=null;
        RPIExprASTParser.keyREGEXP_LIKE_return keyREGEXP_LIKE1428 = null;

        RPIExprASTParser.call_parameters_return call_parameters1430 = null;


        Object LPAREN1429_tree=null;
        Object RPAREN1431_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // RPIExprAST.g:1237:5: ( keyREGEXP_LIKE LPAREN call_parameters RPAREN )
            // RPIExprAST.g:1237:9: keyREGEXP_LIKE LPAREN call_parameters RPAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like12243);
            keyREGEXP_LIKE1428=keyREGEXP_LIKE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREGEXP_LIKE1428.getTree());
            LPAREN1429=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_regexp_like12245); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1429_tree = (Object)adaptor.create(LPAREN1429);
            adaptor.addChild(root_0, LPAREN1429_tree);
            }
            pushFollow(FOLLOW_call_parameters_in_condition_regexp_like12247);
            call_parameters1430=call_parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameters1430.getTree());
            RPAREN1431=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_regexp_like12249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1431_tree = (Object)adaptor.create(RPAREN1431);
            adaptor.addChild(root_0, RPAREN1431_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, condition_regexp_like_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_regexp_like"

    public static class condition_submultiset_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_submultiset"
    // RPIExprAST.g:1239:1: condition_submultiset : nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name ;
    public final RPIExprASTParser.condition_submultiset_return condition_submultiset() throws RecognitionException {
        RPIExprASTParser.condition_submultiset_return retval = new RPIExprASTParser.condition_submultiset_return();
        retval.start = input.LT(1);
        int condition_submultiset_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1433=null;
        Token string_literal1435=null;
        RPIExprASTParser.nested_table_column_name_return nested_table_column_name1432 = null;

        RPIExprASTParser.keySUBMULTISET_return keySUBMULTISET1434 = null;

        RPIExprASTParser.nested_table_column_name_return nested_table_column_name1436 = null;


        Object string_literal1433_tree=null;
        Object string_literal1435_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // RPIExprAST.g:1240:5: ( nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name )
            // RPIExprAST.g:1240:9: nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset12267);
            nested_table_column_name1432=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1432.getTree());
            // RPIExprAST.g:1240:34: ( 'NOT' )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==NOT) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    // RPIExprAST.g:1240:36: 'NOT'
                    {
                    string_literal1433=(Token)match(input,NOT,FOLLOW_NOT_in_condition_submultiset12271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1433_tree = (Object)adaptor.create(string_literal1433);
                    adaptor.addChild(root_0, string_literal1433_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_keySUBMULTISET_in_condition_submultiset12276);
            keySUBMULTISET1434=keySUBMULTISET();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keySUBMULTISET1434.getTree());
            // RPIExprAST.g:1240:60: ( 'OF' )?
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==164) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    // RPIExprAST.g:1240:62: 'OF'
                    {
                    string_literal1435=(Token)match(input,164,FOLLOW_164_in_condition_submultiset12280); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1435_tree = (Object)adaptor.create(string_literal1435);
                    adaptor.addChild(root_0, string_literal1435_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset12285);
            nested_table_column_name1436=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_table_column_name1436.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, condition_submultiset_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_submultiset"

    public static class condition_equals_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_equals_path"
    // RPIExprAST.g:1242:1: condition_equals_path : keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final RPIExprASTParser.condition_equals_path_return condition_equals_path() throws RecognitionException {
        RPIExprASTParser.condition_equals_path_return retval = new RPIExprASTParser.condition_equals_path_return();
        retval.start = input.LT(1);
        int condition_equals_path_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1438=null;
        Token COMMA1440=null;
        Token COMMA1442=null;
        Token RPAREN1444=null;
        RPIExprASTParser.keyEQUALS_PATH_return keyEQUALS_PATH1437 = null;

        RPIExprASTParser.column_name_return column_name1439 = null;

        RPIExprASTParser.path_string_return path_string1441 = null;

        RPIExprASTParser.correlation_integer_return correlation_integer1443 = null;


        Object LPAREN1438_tree=null;
        Object COMMA1440_tree=null;
        Object COMMA1442_tree=null;
        Object RPAREN1444_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // RPIExprAST.g:1243:5: ( keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // RPIExprAST.g:1243:9: keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyEQUALS_PATH_in_condition_equals_path12303);
            keyEQUALS_PATH1437=keyEQUALS_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyEQUALS_PATH1437.getTree());
            LPAREN1438=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_equals_path12305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1438_tree = (Object)adaptor.create(LPAREN1438);
            adaptor.addChild(root_0, LPAREN1438_tree);
            }
            pushFollow(FOLLOW_column_name_in_condition_equals_path12307);
            column_name1439=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1439.getTree());
            COMMA1440=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path12309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1440_tree = (Object)adaptor.create(COMMA1440);
            adaptor.addChild(root_0, COMMA1440_tree);
            }
            pushFollow(FOLLOW_path_string_in_condition_equals_path12311);
            path_string1441=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_string1441.getTree());
            // RPIExprAST.g:1243:61: ( COMMA correlation_integer )?
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==COMMA) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    // RPIExprAST.g:1243:63: COMMA correlation_integer
                    {
                    COMMA1442=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path12315); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1442_tree = (Object)adaptor.create(COMMA1442);
                    adaptor.addChild(root_0, COMMA1442_tree);
                    }
                    pushFollow(FOLLOW_correlation_integer_in_condition_equals_path12317);
                    correlation_integer1443=correlation_integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, correlation_integer1443.getTree());

                    }
                    break;

            }

            RPAREN1444=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_equals_path12322); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1444_tree = (Object)adaptor.create(RPAREN1444);
            adaptor.addChild(root_0, RPAREN1444_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, condition_equals_path_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_equals_path"

    public static class condition_under_path_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_under_path"
    // RPIExprAST.g:1245:1: condition_under_path : keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final RPIExprASTParser.condition_under_path_return condition_under_path() throws RecognitionException {
        RPIExprASTParser.condition_under_path_return retval = new RPIExprASTParser.condition_under_path_return();
        retval.start = input.LT(1);
        int condition_under_path_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1446=null;
        Token COMMA1448=null;
        Token COMMA1450=null;
        Token COMMA1452=null;
        Token RPAREN1454=null;
        RPIExprASTParser.keyUNDER_PATH_return keyUNDER_PATH1445 = null;

        RPIExprASTParser.column_name_return column_name1447 = null;

        RPIExprASTParser.levels_return levels1449 = null;

        RPIExprASTParser.path_string_return path_string1451 = null;

        RPIExprASTParser.correlation_integer_return correlation_integer1453 = null;


        Object LPAREN1446_tree=null;
        Object COMMA1448_tree=null;
        Object COMMA1450_tree=null;
        Object COMMA1452_tree=null;
        Object RPAREN1454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // RPIExprAST.g:1246:5: ( keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // RPIExprAST.g:1246:9: keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyUNDER_PATH_in_condition_under_path12340);
            keyUNDER_PATH1445=keyUNDER_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyUNDER_PATH1445.getTree());
            LPAREN1446=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_condition_under_path12342); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1446_tree = (Object)adaptor.create(LPAREN1446);
            adaptor.addChild(root_0, LPAREN1446_tree);
            }
            pushFollow(FOLLOW_column_name_in_condition_under_path12344);
            column_name1447=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1447.getTree());
            // RPIExprAST.g:1246:42: ( COMMA levels )?
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==COMMA) ) {
                int LA336_1 = input.LA(2);

                if ( (LA336_1==NUMBER) ) {
                    alt336=1;
                }
            }
            switch (alt336) {
                case 1 :
                    // RPIExprAST.g:1246:44: COMMA levels
                    {
                    COMMA1448=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path12348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1448_tree = (Object)adaptor.create(COMMA1448);
                    adaptor.addChild(root_0, COMMA1448_tree);
                    }
                    pushFollow(FOLLOW_levels_in_condition_under_path12350);
                    levels1449=levels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, levels1449.getTree());

                    }
                    break;

            }

            COMMA1450=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path12355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1450_tree = (Object)adaptor.create(COMMA1450);
            adaptor.addChild(root_0, COMMA1450_tree);
            }
            pushFollow(FOLLOW_path_string_in_condition_under_path12357);
            path_string1451=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, path_string1451.getTree());
            // RPIExprAST.g:1246:78: ( COMMA correlation_integer )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==COMMA) ) {
                alt337=1;
            }
            switch (alt337) {
                case 1 :
                    // RPIExprAST.g:1246:80: COMMA correlation_integer
                    {
                    COMMA1452=(Token)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path12361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1452_tree = (Object)adaptor.create(COMMA1452);
                    adaptor.addChild(root_0, COMMA1452_tree);
                    }
                    pushFollow(FOLLOW_correlation_integer_in_condition_under_path12363);
                    correlation_integer1453=correlation_integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, correlation_integer1453.getTree());

                    }
                    break;

            }

            RPAREN1454=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_condition_under_path12368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1454_tree = (Object)adaptor.create(RPAREN1454);
            adaptor.addChild(root_0, RPAREN1454_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, condition_under_path_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_under_path"

    public static class levels_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "levels"
    // RPIExprAST.g:1248:1: levels : integer ;
    public final RPIExprASTParser.levels_return levels() throws RecognitionException {
        RPIExprASTParser.levels_return retval = new RPIExprASTParser.levels_return();
        retval.start = input.LT(1);
        int levels_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.integer_return integer1455 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // RPIExprAST.g:1249:5: ( integer )
            // RPIExprAST.g:1249:9: integer
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_integer_in_levels12386);
            integer1455=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1455.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, levels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "levels"

    public static class correlation_integer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "correlation_integer"
    // RPIExprAST.g:1251:1: correlation_integer : integer ;
    public final RPIExprASTParser.correlation_integer_return correlation_integer() throws RecognitionException {
        RPIExprASTParser.correlation_integer_return retval = new RPIExprASTParser.correlation_integer_return();
        retval.start = input.LT(1);
        int correlation_integer_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.integer_return integer1456 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // RPIExprAST.g:1252:5: ( integer )
            // RPIExprAST.g:1252:9: integer
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_integer_in_correlation_integer12404);
            integer1456=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, integer1456.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, correlation_integer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "correlation_integer"

    public static class path_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path_string"
    // RPIExprAST.g:1254:1: path_string : QUOTED_STRING ;
    public final RPIExprASTParser.path_string_return path_string() throws RecognitionException {
        RPIExprASTParser.path_string_return retval = new RPIExprASTParser.path_string_return();
        retval.start = input.LT(1);
        int path_string_StartIndex = input.index();
        Object root_0 = null;

        Token QUOTED_STRING1457=null;

        Object QUOTED_STRING1457_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // RPIExprAST.g:1255:5: ( QUOTED_STRING )
            // RPIExprAST.g:1255:9: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();

            QUOTED_STRING1457=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_path_string12422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1457_tree = (Object)adaptor.create(QUOTED_STRING1457);
            adaptor.addChild(root_0, QUOTED_STRING1457_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, path_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "path_string"

    public static class grouping_expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_expression_list"
    // RPIExprAST.g:1257:1: grouping_expression_list : expression_list ( COMMA expression_list )* ;
    public final RPIExprASTParser.grouping_expression_list_return grouping_expression_list() throws RecognitionException {
        RPIExprASTParser.grouping_expression_list_return retval = new RPIExprASTParser.grouping_expression_list_return();
        retval.start = input.LT(1);
        int grouping_expression_list_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1459=null;
        RPIExprASTParser.expression_list_return expression_list1458 = null;

        RPIExprASTParser.expression_list_return expression_list1460 = null;


        Object COMMA1459_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // RPIExprAST.g:1258:5: ( expression_list ( COMMA expression_list )* )
            // RPIExprAST.g:1258:9: expression_list ( COMMA expression_list )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_list_in_grouping_expression_list12440);
            expression_list1458=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1458.getTree());
            // RPIExprAST.g:1258:25: ( COMMA expression_list )*
            loop338:
            do {
                int alt338=2;
                int LA338_0 = input.LA(1);

                if ( (LA338_0==COMMA) ) {
                    int LA338_1 = input.LA(2);

                    if ( (synpred567_RPIExprAST()) ) {
                        alt338=1;
                    }


                }


                switch (alt338) {
            	case 1 :
            	    // RPIExprAST.g:1258:27: COMMA expression_list
            	    {
            	    COMMA1459=(Token)match(input,COMMA,FOLLOW_COMMA_in_grouping_expression_list12444); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1459_tree = (Object)adaptor.create(COMMA1459);
            	    adaptor.addChild(root_0, COMMA1459_tree);
            	    }
            	    pushFollow(FOLLOW_expression_list_in_grouping_expression_list12446);
            	    expression_list1460=expression_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression_list1460.getTree());

            	    }
            	    break;

            	default :
            	    break loop338;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, grouping_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_expression_list"

    public static class expression_list_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_list"
    // RPIExprAST.g:1260:1: expression_list : ( LPAREN sql_expressions RPAREN | sql_expressions );
    public final RPIExprASTParser.expression_list_return expression_list() throws RecognitionException {
        RPIExprASTParser.expression_list_return retval = new RPIExprASTParser.expression_list_return();
        retval.start = input.LT(1);
        int expression_list_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1461=null;
        Token RPAREN1463=null;
        RPIExprASTParser.sql_expressions_return sql_expressions1462 = null;

        RPIExprASTParser.sql_expressions_return sql_expressions1464 = null;


        Object LPAREN1461_tree=null;
        Object RPAREN1463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // RPIExprAST.g:1261:5: ( LPAREN sql_expressions RPAREN | sql_expressions )
            int alt339=2;
            int LA339_0 = input.LA(1);

            if ( (LA339_0==LPAREN) ) {
                int LA339_1 = input.LA(2);

                if ( (synpred568_RPIExprAST()) ) {
                    alt339=1;
                }
                else if ( (true) ) {
                    alt339=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 339, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA339_0==ID||(LA339_0>=SQL && LA339_0<=MINUS)||LA339_0==NUMBER||LA339_0==QUOTED_STRING||LA339_0==DOUBLEQUOTED_STRING||LA339_0==116||LA339_0==158||(LA339_0>=168 && LA339_0<=169)||(LA339_0>=174 && LA339_0<=175)||LA339_0==198) ) {
                alt339=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;
            }
            switch (alt339) {
                case 1 :
                    // RPIExprAST.g:1261:9: LPAREN sql_expressions RPAREN
                    {
                    root_0 = (Object)adaptor.nil();

                    LPAREN1461=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list12467); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1461_tree = (Object)adaptor.create(LPAREN1461);
                    adaptor.addChild(root_0, LPAREN1461_tree);
                    }
                    pushFollow(FOLLOW_sql_expressions_in_expression_list12469);
                    sql_expressions1462=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1462.getTree());
                    RPAREN1463=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list12471); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1463_tree = (Object)adaptor.create(RPAREN1463);
                    adaptor.addChild(root_0, RPAREN1463_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1262:9: sql_expressions
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_expressions_in_expression_list12481);
                    sql_expressions1464=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expressions1464.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_list"

    public static class cell_reference_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_reference"
    // RPIExprAST.g:1264:1: cell_reference : sql_identifier ;
    public final RPIExprASTParser.cell_reference_return cell_reference() throws RecognitionException {
        RPIExprASTParser.cell_reference_return retval = new RPIExprASTParser.cell_reference_return();
        retval.start = input.LT(1);
        int cell_reference_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_identifier_return sql_identifier1465 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // RPIExprAST.g:1265:5: ( sql_identifier )
            // RPIExprAST.g:1265:9: sql_identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_sql_identifier_in_cell_reference12499);
            sql_identifier1465=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_identifier1465.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, cell_reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_reference"

    public static class call_parameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_parameters"
    // RPIExprAST.g:1267:1: call_parameters : call_parameter ( COMMA call_parameter )* ;
    public final RPIExprASTParser.call_parameters_return call_parameters() throws RecognitionException {
        RPIExprASTParser.call_parameters_return retval = new RPIExprASTParser.call_parameters_return();
        retval.start = input.LT(1);
        int call_parameters_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1467=null;
        RPIExprASTParser.call_parameter_return call_parameter1466 = null;

        RPIExprASTParser.call_parameter_return call_parameter1468 = null;


        Object COMMA1467_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // RPIExprAST.g:1268:5: ( call_parameter ( COMMA call_parameter )* )
            // RPIExprAST.g:1268:9: call_parameter ( COMMA call_parameter )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_call_parameter_in_call_parameters12517);
            call_parameter1466=call_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameter1466.getTree());
            // RPIExprAST.g:1268:24: ( COMMA call_parameter )*
            loop340:
            do {
                int alt340=2;
                int LA340_0 = input.LA(1);

                if ( (LA340_0==COMMA) ) {
                    alt340=1;
                }


                switch (alt340) {
            	case 1 :
            	    // RPIExprAST.g:1268:26: COMMA call_parameter
            	    {
            	    COMMA1467=(Token)match(input,COMMA,FOLLOW_COMMA_in_call_parameters12521); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1467_tree = (Object)adaptor.create(COMMA1467);
            	    adaptor.addChild(root_0, COMMA1467_tree);
            	    }
            	    pushFollow(FOLLOW_call_parameter_in_call_parameters12523);
            	    call_parameter1468=call_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, call_parameter1468.getTree());

            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, call_parameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_parameters"

    public static class call_parameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_parameter"
    // RPIExprAST.g:1270:1: call_parameter : ( parameter_name ARROW )? nested_expression ;
    public final RPIExprASTParser.call_parameter_return call_parameter() throws RecognitionException {
        RPIExprASTParser.call_parameter_return retval = new RPIExprASTParser.call_parameter_return();
        retval.start = input.LT(1);
        int call_parameter_StartIndex = input.index();
        Object root_0 = null;

        Token ARROW1470=null;
        RPIExprASTParser.parameter_name_return parameter_name1469 = null;

        RPIExprASTParser.nested_expression_return nested_expression1471 = null;


        Object ARROW1470_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // RPIExprAST.g:1271:5: ( ( parameter_name ARROW )? nested_expression )
            // RPIExprAST.g:1271:9: ( parameter_name ARROW )? nested_expression
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1271:9: ( parameter_name ARROW )?
            int alt341=2;
            int LA341_0 = input.LA(1);

            if ( (LA341_0==ID) ) {
                int LA341_1 = input.LA(2);

                if ( (LA341_1==ARROW) ) {
                    alt341=1;
                }
            }
            else if ( (LA341_0==DOUBLEQUOTED_STRING) ) {
                int LA341_3 = input.LA(2);

                if ( (LA341_3==ARROW) ) {
                    alt341=1;
                }
            }
            switch (alt341) {
                case 1 :
                    // RPIExprAST.g:1271:11: parameter_name ARROW
                    {
                    pushFollow(FOLLOW_parameter_name_in_call_parameter12546);
                    parameter_name1469=parameter_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parameter_name1469.getTree());
                    ARROW1470=(Token)match(input,ARROW,FOLLOW_ARROW_in_call_parameter12548); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARROW1470_tree = (Object)adaptor.create(ARROW1470);
                    adaptor.addChild(root_0, ARROW1470_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_nested_expression_in_call_parameter12553);
            nested_expression1471=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nested_expression1471.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, call_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_parameter"

    public static class relational_op_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_op"
    // RPIExprAST.g:1274:1: relational_op : ( EQ | BOOLOP_LT | BOOLOP_GT | NOT_EQ | BOOLOP_LE | BOOLOP_GE );
    public final RPIExprASTParser.relational_op_return relational_op() throws RecognitionException {
        RPIExprASTParser.relational_op_return retval = new RPIExprASTParser.relational_op_return();
        retval.start = input.LT(1);
        int relational_op_StartIndex = input.index();
        Object root_0 = null;

        Token set1472=null;

        Object set1472_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // RPIExprAST.g:1275:5: ( EQ | BOOLOP_LT | BOOLOP_GT | NOT_EQ | BOOLOP_LE | BOOLOP_GE )
            // RPIExprAST.g:
            {
            root_0 = (Object)adaptor.nil();

            set1472=(Token)input.LT(1);
            if ( input.LA(1)==EQ||(input.LA(1)>=BOOLOP_LT && input.LA(1)<=BOOLOP_LE)||input.LA(1)==NOT_EQ ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1472));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, relational_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_op"

    public static class exp_set_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exp_set"
    // RPIExprAST.g:1278:1: exp_set : ( ( sql_expression )=> sql_expression | subquery );
    public final RPIExprASTParser.exp_set_return exp_set() throws RecognitionException {
        RPIExprASTParser.exp_set_return retval = new RPIExprASTParser.exp_set_return();
        retval.start = input.LT(1);
        int exp_set_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.sql_expression_return sql_expression1473 = null;

        RPIExprASTParser.subquery_return subquery1474 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // RPIExprAST.g:1279:5: ( ( sql_expression )=> sql_expression | subquery )
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( ((LA342_0>=PLUS && LA342_0<=MINUS)) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==LPAREN) ) {
                int LA342_2 = input.LA(2);

                if ( (synpred576_RPIExprAST()) ) {
                    alt342=1;
                }
                else if ( (true) ) {
                    alt342=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 342, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA342_0==ID) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==175) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==DOUBLEQUOTED_STRING) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==158) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==198) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( ((LA342_0>=168 && LA342_0<=169)) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==SQL) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==QUOTED_STRING) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==NUMBER) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==116) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else if ( (LA342_0==174) && (synpred576_RPIExprAST())) {
                alt342=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;
            }
            switch (alt342) {
                case 1 :
                    // RPIExprAST.g:1279:9: ( sql_expression )=> sql_expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_sql_expression_in_exp_set12619);
                    sql_expression1473=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1473.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1280:9: subquery
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_subquery_in_exp_set12629);
                    subquery1474=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1474.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, exp_set_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exp_set"

    public static class subquery_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery"
    // RPIExprAST.g:1283:1: subquery : LPAREN select_command RPAREN ;
    public final RPIExprASTParser.subquery_return subquery() throws RecognitionException {
        RPIExprASTParser.subquery_return retval = new RPIExprASTParser.subquery_return();
        retval.start = input.LT(1);
        int subquery_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1475=null;
        Token RPAREN1477=null;
        RPIExprASTParser.select_command_return select_command1476 = null;


        Object LPAREN1475_tree=null;
        Object RPAREN1477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // RPIExprAST.g:1284:5: ( LPAREN select_command RPAREN )
            // RPIExprAST.g:1284:9: LPAREN select_command RPAREN
            {
            root_0 = (Object)adaptor.nil();

            LPAREN1475=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subquery12648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1475_tree = (Object)adaptor.create(LPAREN1475);
            adaptor.addChild(root_0, LPAREN1475_tree);
            }
            pushFollow(FOLLOW_select_command_in_subquery12650);
            select_command1476=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1476.getTree());
            RPAREN1477=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery12652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1477_tree = (Object)adaptor.create(RPAREN1477);
            adaptor.addChild(root_0, RPAREN1477_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, subquery_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery"

    public static class connect_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "connect_clause"
    // RPIExprAST.g:1287:1: connect_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? ;
    public final RPIExprASTParser.connect_clause_return connect_clause() throws RecognitionException {
        RPIExprASTParser.connect_clause_return retval = new RPIExprASTParser.connect_clause_return();
        retval.start = input.LT(1);
        int connect_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1478=null;
        Token string_literal1479=null;
        Token string_literal1481=null;
        Token string_literal1482=null;
        Token string_literal1483=null;
        Token string_literal1490=null;
        Token string_literal1491=null;
        Token string_literal1495=null;
        Token string_literal1497=null;
        Token string_literal1499=null;
        Token string_literal1500=null;
        RPIExprASTParser.sql_condition_return sql_condition1480 = null;

        RPIExprASTParser.sql_expression_return sql_expression1484 = null;

        RPIExprASTParser.relational_op_return relational_op1485 = null;

        RPIExprASTParser.sql_expression_return sql_expression1486 = null;

        RPIExprASTParser.sql_expression_return sql_expression1487 = null;

        RPIExprASTParser.relational_op_return relational_op1488 = null;

        RPIExprASTParser.sql_expression_return sql_expression1489 = null;

        RPIExprASTParser.sql_condition_return sql_condition1492 = null;

        RPIExprASTParser.sql_expression_return sql_expression1493 = null;

        RPIExprASTParser.relational_op_return relational_op1494 = null;

        RPIExprASTParser.sql_expression_return sql_expression1496 = null;

        RPIExprASTParser.sql_condition_return sql_condition1498 = null;

        RPIExprASTParser.sql_condition_return sql_condition1501 = null;


        Object string_literal1478_tree=null;
        Object string_literal1479_tree=null;
        Object string_literal1481_tree=null;
        Object string_literal1482_tree=null;
        Object string_literal1483_tree=null;
        Object string_literal1490_tree=null;
        Object string_literal1491_tree=null;
        Object string_literal1495_tree=null;
        Object string_literal1497_tree=null;
        Object string_literal1499_tree=null;
        Object string_literal1500_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // RPIExprAST.g:1288:5: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? )
            // RPIExprAST.g:1288:9: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1288:9: ( 'START' 'WITH' sql_condition )?
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==186) ) {
                alt343=1;
            }
            switch (alt343) {
                case 1 :
                    // RPIExprAST.g:1288:11: 'START' 'WITH' sql_condition
                    {
                    string_literal1478=(Token)match(input,186,FOLLOW_186_in_connect_clause12673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1478_tree = (Object)adaptor.create(string_literal1478);
                    adaptor.addChild(root_0, string_literal1478_tree);
                    }
                    string_literal1479=(Token)match(input,136,FOLLOW_136_in_connect_clause12675); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1479_tree = (Object)adaptor.create(string_literal1479);
                    adaptor.addChild(root_0, string_literal1479_tree);
                    }
                    pushFollow(FOLLOW_sql_condition_in_connect_clause12677);
                    sql_condition1480=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1480.getTree());

                    }
                    break;

            }

            string_literal1481=(Token)match(input,187,FOLLOW_187_in_connect_clause12690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1481_tree = (Object)adaptor.create(string_literal1481);
            adaptor.addChild(root_0, string_literal1481_tree);
            }
            string_literal1482=(Token)match(input,166,FOLLOW_166_in_connect_clause12692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1482_tree = (Object)adaptor.create(string_literal1482);
            adaptor.addChild(root_0, string_literal1482_tree);
            }
            // RPIExprAST.g:1290:9: ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' )
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==197) ) {
                alt344=1;
            }
            else if ( ((LA344_0>=ID && LA344_0<=LPAREN)||(LA344_0>=SQL && LA344_0<=MINUS)||LA344_0==NUMBER||LA344_0==QUOTED_STRING||LA344_0==DOUBLEQUOTED_STRING||LA344_0==116||LA344_0==158||(LA344_0>=168 && LA344_0<=169)||(LA344_0>=174 && LA344_0<=175)||LA344_0==198) ) {
                alt344=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 344, 0, input);

                throw nvae;
            }
            switch (alt344) {
                case 1 :
                    // RPIExprAST.g:1290:13: 'PRIOR' sql_expression relational_op sql_expression
                    {
                    string_literal1483=(Token)match(input,197,FOLLOW_197_in_connect_clause12707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1483_tree = (Object)adaptor.create(string_literal1483);
                    adaptor.addChild(root_0, string_literal1483_tree);
                    }
                    pushFollow(FOLLOW_sql_expression_in_connect_clause12709);
                    sql_expression1484=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1484.getTree());
                    pushFollow(FOLLOW_relational_op_in_connect_clause12711);
                    relational_op1485=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1485.getTree());
                    pushFollow(FOLLOW_sql_expression_in_connect_clause12713);
                    sql_expression1486=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1486.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1291:13: sql_expression relational_op sql_expression 'PRIOR'
                    {
                    pushFollow(FOLLOW_sql_expression_in_connect_clause12727);
                    sql_expression1487=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1487.getTree());
                    pushFollow(FOLLOW_relational_op_in_connect_clause12729);
                    relational_op1488=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1488.getTree());
                    pushFollow(FOLLOW_sql_expression_in_connect_clause12731);
                    sql_expression1489=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1489.getTree());
                    string_literal1490=(Token)match(input,197,FOLLOW_197_in_connect_clause12733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1490_tree = (Object)adaptor.create(string_literal1490);
                    adaptor.addChild(root_0, string_literal1490_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:1293:9: ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? )
            int alt348=2;
            int LA348_0 = input.LA(1);

            if ( (LA348_0==197) && (synpred580_RPIExprAST())) {
                alt348=1;
            }
            else if ( (LA348_0==NOT) && (synpred580_RPIExprAST())) {
                alt348=1;
            }
            else if ( (LA348_0==200) && (synpred580_RPIExprAST())) {
                alt348=1;
            }
            else if ( ((LA348_0>=PLUS && LA348_0<=MINUS)) ) {
                int LA348_4 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==LPAREN) ) {
                int LA348_5 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==ID) ) {
                int LA348_6 = input.LA(2);

                if ( ((synpred580_RPIExprAST()||(synpred580_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(synpred580_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(synpred580_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||(synpred580_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))||((synpred580_RPIExprAST()&&( is_sql ))&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM"))))) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==175) ) {
                int LA348_7 = input.LA(2);

                if ( (((synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql ))||(synpred580_RPIExprAST()&&( is_sql )))) ) {
                    alt348=1;
                }
                else if ( (( is_sql )) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==DOUBLEQUOTED_STRING) ) {
                int LA348_8 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 8, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==158) ) {
                int LA348_9 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 9, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==198) ) {
                int LA348_10 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 10, input);

                    throw nvae;
                }
            }
            else if ( ((LA348_0>=168 && LA348_0<=169)) ) {
                int LA348_11 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 11, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==SQL) ) {
                int LA348_12 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 12, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==QUOTED_STRING) ) {
                int LA348_13 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 13, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==NUMBER) ) {
                int LA348_14 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 14, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==116) ) {
                int LA348_15 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 15, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==174) ) {
                int LA348_16 = input.LA(2);

                if ( (synpred580_RPIExprAST()) ) {
                    alt348=1;
                }
                else if ( (true) ) {
                    alt348=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 348, 16, input);

                    throw nvae;
                }
            }
            else if ( (LA348_0==202) && (synpred580_RPIExprAST())) {
                alt348=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 348, 0, input);

                throw nvae;
            }
            switch (alt348) {
                case 1 :
                    // RPIExprAST.g:1293:13: ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition
                    {
                    // RPIExprAST.g:1293:47: ( 'PRIOR' )?
                    int alt345=2;
                    int LA345_0 = input.LA(1);

                    if ( (LA345_0==197) ) {
                        int LA345_1 = input.LA(2);

                        if ( (synpred581_RPIExprAST()) ) {
                            alt345=1;
                        }
                    }
                    switch (alt345) {
                        case 1 :
                            // RPIExprAST.g:1293:48: 'PRIOR'
                            {
                            string_literal1491=(Token)match(input,197,FOLLOW_197_in_connect_clause12773); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1491_tree = (Object)adaptor.create(string_literal1491);
                            adaptor.addChild(root_0, string_literal1491_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_sql_condition_in_connect_clause12777);
                    sql_condition1492=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1492.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1294:13: sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )?
                    {
                    pushFollow(FOLLOW_sql_expression_in_connect_clause12791);
                    sql_expression1493=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1493.getTree());
                    pushFollow(FOLLOW_relational_op_in_connect_clause12793);
                    relational_op1494=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, relational_op1494.getTree());
                    // RPIExprAST.g:1294:42: ( 'PRIOR' )?
                    int alt346=2;
                    int LA346_0 = input.LA(1);

                    if ( (LA346_0==197) ) {
                        alt346=1;
                    }
                    switch (alt346) {
                        case 1 :
                            // RPIExprAST.g:1294:44: 'PRIOR'
                            {
                            string_literal1495=(Token)match(input,197,FOLLOW_197_in_connect_clause12797); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1495_tree = (Object)adaptor.create(string_literal1495);
                            adaptor.addChild(root_0, string_literal1495_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_sql_expression_in_connect_clause12802);
                    sql_expression1496=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1496.getTree());
                    // RPIExprAST.g:1294:70: ( 'AND' sql_condition )?
                    int alt347=2;
                    int LA347_0 = input.LA(1);

                    if ( (LA347_0==AND) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            // RPIExprAST.g:1294:72: 'AND' sql_condition
                            {
                            string_literal1497=(Token)match(input,AND,FOLLOW_AND_in_connect_clause12806); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1497_tree = (Object)adaptor.create(string_literal1497);
                            adaptor.addChild(root_0, string_literal1497_tree);
                            }
                            pushFollow(FOLLOW_sql_condition_in_connect_clause12808);
                            sql_condition1498=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1498.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // RPIExprAST.g:1296:9: ( 'START' 'WITH' sql_condition )?
            int alt349=2;
            int LA349_0 = input.LA(1);

            if ( (LA349_0==186) ) {
                alt349=1;
            }
            switch (alt349) {
                case 1 :
                    // RPIExprAST.g:1296:11: 'START' 'WITH' sql_condition
                    {
                    string_literal1499=(Token)match(input,186,FOLLOW_186_in_connect_clause12833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1499_tree = (Object)adaptor.create(string_literal1499);
                    adaptor.addChild(root_0, string_literal1499_tree);
                    }
                    string_literal1500=(Token)match(input,136,FOLLOW_136_in_connect_clause12835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1500_tree = (Object)adaptor.create(string_literal1500);
                    adaptor.addChild(root_0, string_literal1500_tree);
                    }
                    pushFollow(FOLLOW_sql_condition_in_connect_clause12837);
                    sql_condition1501=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1501.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, connect_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "connect_clause"

    public static class group_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_clause"
    // RPIExprAST.g:1299:1: group_clause : 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? ;
    public final RPIExprASTParser.group_clause_return group_clause() throws RecognitionException {
        RPIExprASTParser.group_clause_return retval = new RPIExprASTParser.group_clause_return();
        retval.start = input.LT(1);
        int group_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1502=null;
        Token string_literal1503=null;
        Token COMMA1505=null;
        Token string_literal1507=null;
        RPIExprASTParser.sql_expression_return sql_expression1504 = null;

        RPIExprASTParser.sql_expression_return sql_expression1506 = null;

        RPIExprASTParser.sql_condition_return sql_condition1508 = null;


        Object string_literal1502_tree=null;
        Object string_literal1503_tree=null;
        Object COMMA1505_tree=null;
        Object string_literal1507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // RPIExprAST.g:1300:5: ( 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? )
            // RPIExprAST.g:1300:9: 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1502=(Token)match(input,188,FOLLOW_188_in_group_clause12859); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1502_tree = (Object)adaptor.create(string_literal1502);
            adaptor.addChild(root_0, string_literal1502_tree);
            }
            string_literal1503=(Token)match(input,166,FOLLOW_166_in_group_clause12861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1503_tree = (Object)adaptor.create(string_literal1503);
            adaptor.addChild(root_0, string_literal1503_tree);
            }
            pushFollow(FOLLOW_sql_expression_in_group_clause12863);
            sql_expression1504=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1504.getTree());
            // RPIExprAST.g:1300:37: ( COMMA sql_expression )*
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==COMMA) ) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    // RPIExprAST.g:1300:39: COMMA sql_expression
            	    {
            	    COMMA1505=(Token)match(input,COMMA,FOLLOW_COMMA_in_group_clause12867); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1505_tree = (Object)adaptor.create(COMMA1505);
            	    adaptor.addChild(root_0, COMMA1505_tree);
            	    }
            	    pushFollow(FOLLOW_sql_expression_in_group_clause12869);
            	    sql_expression1506=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1506.getTree());

            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);

            // RPIExprAST.g:1300:63: ( 'HAVING' sql_condition )?
            int alt351=2;
            int LA351_0 = input.LA(1);

            if ( (LA351_0==180) ) {
                alt351=1;
            }
            switch (alt351) {
                case 1 :
                    // RPIExprAST.g:1300:65: 'HAVING' sql_condition
                    {
                    string_literal1507=(Token)match(input,180,FOLLOW_180_in_group_clause12876); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1507_tree = (Object)adaptor.create(string_literal1507);
                    adaptor.addChild(root_0, string_literal1507_tree);
                    }
                    pushFollow(FOLLOW_sql_condition_in_group_clause12878);
                    sql_condition1508=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1508.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, group_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_clause"

    public static class set_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_clause"
    // RPIExprAST.g:1303:1: set_clause : ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command ;
    public final RPIExprASTParser.set_clause_return set_clause() throws RecognitionException {
        RPIExprASTParser.set_clause_return retval = new RPIExprASTParser.set_clause_return();
        retval.start = input.LT(1);
        int set_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1509=null;
        Token string_literal1510=null;
        Token string_literal1511=null;
        Token string_literal1512=null;
        RPIExprASTParser.select_command_return select_command1513 = null;


        Object string_literal1509_tree=null;
        Object string_literal1510_tree=null;
        Object string_literal1511_tree=null;
        Object string_literal1512_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // RPIExprAST.g:1304:5: ( ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command )
            // RPIExprAST.g:1304:9: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1304:9: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' )
            int alt352=3;
            switch ( input.LA(1) ) {
            case 181:
                {
                alt352=1;
                }
                break;
            case 182:
                {
                alt352=2;
                }
                break;
            case 183:
                {
                alt352=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 352, 0, input);

                throw nvae;
            }

            switch (alt352) {
                case 1 :
                    // RPIExprAST.g:1304:11: ( 'UNION' 'ALL' )
                    {
                    // RPIExprAST.g:1304:11: ( 'UNION' 'ALL' )
                    // RPIExprAST.g:1304:13: 'UNION' 'ALL'
                    {
                    string_literal1509=(Token)match(input,181,FOLLOW_181_in_set_clause12904); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1509_tree = (Object)adaptor.create(string_literal1509);
                    adaptor.addChild(root_0, string_literal1509_tree);
                    }
                    string_literal1510=(Token)match(input,177,FOLLOW_177_in_set_clause12906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1510_tree = (Object)adaptor.create(string_literal1510);
                    adaptor.addChild(root_0, string_literal1510_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1304:31: 'INTERSECT'
                    {
                    string_literal1511=(Token)match(input,182,FOLLOW_182_in_set_clause12912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1511_tree = (Object)adaptor.create(string_literal1511);
                    adaptor.addChild(root_0, string_literal1511_tree);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:1304:45: 'MINUS'
                    {
                    string_literal1512=(Token)match(input,183,FOLLOW_183_in_set_clause12916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1512_tree = (Object)adaptor.create(string_literal1512);
                    adaptor.addChild(root_0, string_literal1512_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_select_command_in_set_clause12920);
            select_command1513=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_command1513.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, set_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_clause"

    public static class order_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_clause"
    // RPIExprAST.g:1307:1: order_clause : 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* ;
    public final RPIExprASTParser.order_clause_return order_clause() throws RecognitionException {
        RPIExprASTParser.order_clause_return retval = new RPIExprASTParser.order_clause_return();
        retval.start = input.LT(1);
        int order_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1514=null;
        Token string_literal1515=null;
        Token COMMA1517=null;
        RPIExprASTParser.sorted_def_return sorted_def1516 = null;

        RPIExprASTParser.sorted_def_return sorted_def1518 = null;


        Object string_literal1514_tree=null;
        Object string_literal1515_tree=null;
        Object COMMA1517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // RPIExprAST.g:1308:5: ( 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* )
            // RPIExprAST.g:1308:9: 'ORDER' 'BY' sorted_def ( COMMA sorted_def )*
            {
            root_0 = (Object)adaptor.nil();

            string_literal1514=(Token)match(input,191,FOLLOW_191_in_order_clause12940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1514_tree = (Object)adaptor.create(string_literal1514);
            adaptor.addChild(root_0, string_literal1514_tree);
            }
            string_literal1515=(Token)match(input,166,FOLLOW_166_in_order_clause12942); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1515_tree = (Object)adaptor.create(string_literal1515);
            adaptor.addChild(root_0, string_literal1515_tree);
            }
            pushFollow(FOLLOW_sorted_def_in_order_clause12944);
            sorted_def1516=sorted_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sorted_def1516.getTree());
            // RPIExprAST.g:1308:33: ( COMMA sorted_def )*
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==COMMA) ) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    // RPIExprAST.g:1308:35: COMMA sorted_def
            	    {
            	    COMMA1517=(Token)match(input,COMMA,FOLLOW_COMMA_in_order_clause12948); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1517_tree = (Object)adaptor.create(COMMA1517);
            	    adaptor.addChild(root_0, COMMA1517_tree);
            	    }
            	    pushFollow(FOLLOW_sorted_def_in_order_clause12950);
            	    sorted_def1518=sorted_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sorted_def1518.getTree());

            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, order_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_clause"

    public static class sorted_def_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sorted_def"
    // RPIExprAST.g:1311:1: sorted_def : ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? ;
    public final RPIExprASTParser.sorted_def_return sorted_def() throws RecognitionException {
        RPIExprASTParser.sorted_def_return retval = new RPIExprASTParser.sorted_def_return();
        retval.start = input.LT(1);
        int sorted_def_StartIndex = input.index();
        Object root_0 = null;

        Token NUMBER1520=null;
        Token set1521=null;
        RPIExprASTParser.sql_expression_return sql_expression1519 = null;


        Object NUMBER1520_tree=null;
        Object set1521_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // RPIExprAST.g:1312:5: ( ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? )
            // RPIExprAST.g:1312:9: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )?
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1312:9: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER )
            int alt354=2;
            int LA354_0 = input.LA(1);

            if ( ((LA354_0>=PLUS && LA354_0<=MINUS)) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==LPAREN) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==ID) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==175) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==DOUBLEQUOTED_STRING) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==158) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==198) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( ((LA354_0>=168 && LA354_0<=169)) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==SQL) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==QUOTED_STRING) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==NUMBER) ) {
                int LA354_11 = input.LA(2);

                if ( (synpred590_RPIExprAST()) ) {
                    alt354=1;
                }
                else if ( (synpred591_RPIExprAST()) ) {
                    alt354=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 354, 11, input);

                    throw nvae;
                }
            }
            else if ( (LA354_0==116) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else if ( (LA354_0==174) && (synpred590_RPIExprAST())) {
                alt354=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 354, 0, input);

                throw nvae;
            }
            switch (alt354) {
                case 1 :
                    // RPIExprAST.g:1312:11: ( sql_expression )=> sql_expression
                    {
                    pushFollow(FOLLOW_sql_expression_in_sorted_def12982);
                    sql_expression1519=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1519.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1312:50: ( NUMBER )=> NUMBER
                    {
                    NUMBER1520=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_sorted_def12994); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER1520_tree = (Object)adaptor.create(NUMBER1520);
                    adaptor.addChild(root_0, NUMBER1520_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:1312:73: ( 'ASC' | 'DESC' )?
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( ((LA355_0>=193 && LA355_0<=194)) ) {
                alt355=1;
            }
            switch (alt355) {
                case 1 :
                    // RPIExprAST.g:
                    {
                    set1521=(Token)input.LT(1);
                    if ( (input.LA(1)>=193 && input.LA(1)<=194) ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1521));
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, sorted_def_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sorted_def"

    public static class update_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_clause"
    // RPIExprAST.g:1315:1: update_clause : 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? ;
    public final RPIExprASTParser.update_clause_return update_clause() throws RecognitionException {
        RPIExprASTParser.update_clause_return retval = new RPIExprASTParser.update_clause_return();
        retval.start = input.LT(1);
        int update_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1522=null;
        Token string_literal1523=null;
        Token string_literal1524=null;
        Token COMMA1526=null;
        Token string_literal1528=null;
        RPIExprASTParser.column_name_return column_name1525 = null;

        RPIExprASTParser.column_name_return column_name1527 = null;


        Object string_literal1522_tree=null;
        Object string_literal1523_tree=null;
        Object string_literal1524_tree=null;
        Object COMMA1526_tree=null;
        Object string_literal1528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // RPIExprAST.g:1316:5: ( 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? )
            // RPIExprAST.g:1316:9: 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1522=(Token)match(input,170,FOLLOW_170_in_update_clause13026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1522_tree = (Object)adaptor.create(string_literal1522);
            adaptor.addChild(root_0, string_literal1522_tree);
            }
            string_literal1523=(Token)match(input,190,FOLLOW_190_in_update_clause13028); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1523_tree = (Object)adaptor.create(string_literal1523);
            adaptor.addChild(root_0, string_literal1523_tree);
            }
            // RPIExprAST.g:1316:24: ( 'OF' column_name ( COMMA column_name )* )?
            int alt357=2;
            int LA357_0 = input.LA(1);

            if ( (LA357_0==164) ) {
                alt357=1;
            }
            switch (alt357) {
                case 1 :
                    // RPIExprAST.g:1316:26: 'OF' column_name ( COMMA column_name )*
                    {
                    string_literal1524=(Token)match(input,164,FOLLOW_164_in_update_clause13032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1524_tree = (Object)adaptor.create(string_literal1524);
                    adaptor.addChild(root_0, string_literal1524_tree);
                    }
                    pushFollow(FOLLOW_column_name_in_update_clause13034);
                    column_name1525=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1525.getTree());
                    // RPIExprAST.g:1316:43: ( COMMA column_name )*
                    loop356:
                    do {
                        int alt356=2;
                        int LA356_0 = input.LA(1);

                        if ( (LA356_0==COMMA) ) {
                            alt356=1;
                        }


                        switch (alt356) {
                    	case 1 :
                    	    // RPIExprAST.g:1316:45: COMMA column_name
                    	    {
                    	    COMMA1526=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_clause13038); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA1526_tree = (Object)adaptor.create(COMMA1526);
                    	    adaptor.addChild(root_0, COMMA1526_tree);
                    	    }
                    	    pushFollow(FOLLOW_column_name_in_update_clause13040);
                    	    column_name1527=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_name1527.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop356;
                        }
                    } while (true);


                    }
                    break;

            }

            // RPIExprAST.g:1316:69: ( 'NOWAIT' )?
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==195) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    // RPIExprAST.g:1316:71: 'NOWAIT'
                    {
                    string_literal1528=(Token)match(input,195,FOLLOW_195_in_update_clause13050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1528_tree = (Object)adaptor.create(string_literal1528);
                    adaptor.addChild(root_0, string_literal1528_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, update_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_clause"

    public static class insert_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_command"
    // RPIExprAST.g:1319:1: insert_command : 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? ;
    public final RPIExprASTParser.insert_command_return insert_command() throws RecognitionException {
        RPIExprASTParser.insert_command_return retval = new RPIExprASTParser.insert_command_return();
        retval.start = input.LT(1);
        int insert_command_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1529=null;
        Token string_literal1530=null;
        Token LPAREN1532=null;
        Token RPAREN1534=null;
        Token string_literal1535=null;
        Token LPAREN1536=null;
        Token RPAREN1538=null;
        RPIExprASTParser.table_reference_list_return table_reference_list1531 = null;

        RPIExprASTParser.column_specs_return column_specs1533 = null;

        RPIExprASTParser.plsql_expressions_return plsql_expressions1537 = null;

        RPIExprASTParser.select_statement_return select_statement1539 = null;

        RPIExprASTParser.returning_clause_return returning_clause1540 = null;


        Object string_literal1529_tree=null;
        Object string_literal1530_tree=null;
        Object LPAREN1532_tree=null;
        Object RPAREN1534_tree=null;
        Object string_literal1535_tree=null;
        Object LPAREN1536_tree=null;
        Object RPAREN1538_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // RPIExprAST.g:1320:5: ( 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? )
            // RPIExprAST.g:1320:9: 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1529=(Token)match(input,203,FOLLOW_203_in_insert_command13072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1529_tree = (Object)adaptor.create(string_literal1529);
            adaptor.addChild(root_0, string_literal1529_tree);
            }
            string_literal1530=(Token)match(input,178,FOLLOW_178_in_insert_command13074); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1530_tree = (Object)adaptor.create(string_literal1530);
            adaptor.addChild(root_0, string_literal1530_tree);
            }
            pushFollow(FOLLOW_table_reference_list_in_insert_command13076);
            table_reference_list1531=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list1531.getTree());
            // RPIExprAST.g:1321:9: ( LPAREN column_specs RPAREN )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==LPAREN) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // RPIExprAST.g:1321:11: LPAREN column_specs RPAREN
                    {
                    LPAREN1532=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command13088); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1532_tree = (Object)adaptor.create(LPAREN1532);
                    adaptor.addChild(root_0, LPAREN1532_tree);
                    }
                    pushFollow(FOLLOW_column_specs_in_insert_command13090);
                    column_specs1533=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1533.getTree());
                    RPAREN1534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command13092); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1534_tree = (Object)adaptor.create(RPAREN1534);
                    adaptor.addChild(root_0, RPAREN1534_tree);
                    }

                    }
                    break;

            }

            // RPIExprAST.g:1322:9: ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement )
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==204) ) {
                alt360=1;
            }
            else if ( (LA360_0==174) ) {
                alt360=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 360, 0, input);

                throw nvae;
            }
            switch (alt360) {
                case 1 :
                    // RPIExprAST.g:1322:13: 'VALUES' LPAREN plsql_expressions RPAREN
                    {
                    string_literal1535=(Token)match(input,204,FOLLOW_204_in_insert_command13109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1535_tree = (Object)adaptor.create(string_literal1535);
                    adaptor.addChild(root_0, string_literal1535_tree);
                    }
                    LPAREN1536=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command13111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1536_tree = (Object)adaptor.create(LPAREN1536);
                    adaptor.addChild(root_0, LPAREN1536_tree);
                    }
                    pushFollow(FOLLOW_plsql_expressions_in_insert_command13113);
                    plsql_expressions1537=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions1537.getTree());
                    RPAREN1538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command13115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1538_tree = (Object)adaptor.create(RPAREN1538);
                    adaptor.addChild(root_0, RPAREN1538_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1323:13: select_statement
                    {
                    pushFollow(FOLLOW_select_statement_in_insert_command13129);
                    select_statement1539=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, select_statement1539.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1325:9: ( returning_clause )?
            int alt361=2;
            int LA361_0 = input.LA(1);

            if ( ((LA361_0>=220 && LA361_0<=221)) ) {
                alt361=1;
            }
            switch (alt361) {
                case 1 :
                    // RPIExprAST.g:1325:11: returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_insert_command13151);
                    returning_clause1540=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1540.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, insert_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_command"

    public static class update_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_command"
    // RPIExprAST.g:1328:1: update_command : 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final RPIExprASTParser.update_command_return update_command() throws RecognitionException {
        RPIExprASTParser.update_command_return retval = new RPIExprASTParser.update_command_return();
        retval.start = input.LT(1);
        int update_command_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1541=null;
        Token string_literal1543=null;
        Token string_literal1546=null;
        RPIExprASTParser.selected_table_return selected_table1542 = null;

        RPIExprASTParser.update_nested_column_specs_return update_nested_column_specs1544 = null;

        RPIExprASTParser.update_column_specs_return update_column_specs1545 = null;

        RPIExprASTParser.keyCURRENT_OF_return keyCURRENT_OF1547 = null;

        RPIExprASTParser.cursor_name_return cursor_name1548 = null;

        RPIExprASTParser.sql_condition_return sql_condition1549 = null;

        RPIExprASTParser.returning_clause_return returning_clause1550 = null;


        Object string_literal1541_tree=null;
        Object string_literal1543_tree=null;
        Object string_literal1546_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // RPIExprAST.g:1329:5: ( 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // RPIExprAST.g:1329:9: 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1541=(Token)match(input,190,FOLLOW_190_in_update_command13173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1541_tree = (Object)adaptor.create(string_literal1541);
            adaptor.addChild(root_0, string_literal1541_tree);
            }
            pushFollow(FOLLOW_selected_table_in_update_command13175);
            selected_table1542=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table1542.getTree());
            string_literal1543=(Token)match(input,145,FOLLOW_145_in_update_command13185); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1543_tree = (Object)adaptor.create(string_literal1543);
            adaptor.addChild(root_0, string_literal1543_tree);
            }
            // RPIExprAST.g:1331:9: ( update_nested_column_specs | update_column_specs )
            int alt362=2;
            int LA362_0 = input.LA(1);

            if ( (LA362_0==LPAREN) ) {
                alt362=1;
            }
            else if ( (LA362_0==ID||LA362_0==DOUBLEQUOTED_STRING||LA362_0==158) ) {
                alt362=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 362, 0, input);

                throw nvae;
            }
            switch (alt362) {
                case 1 :
                    // RPIExprAST.g:1331:13: update_nested_column_specs
                    {
                    pushFollow(FOLLOW_update_nested_column_specs_in_update_command13200);
                    update_nested_column_specs1544=update_nested_column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_specs1544.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1332:13: update_column_specs
                    {
                    pushFollow(FOLLOW_update_column_specs_in_update_command13214);
                    update_column_specs1545=update_column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_specs1545.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1334:9: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==185) ) {
                alt364=1;
            }
            switch (alt364) {
                case 1 :
                    // RPIExprAST.g:1334:13: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                    {
                    string_literal1546=(Token)match(input,185,FOLLOW_185_in_update_command13238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1546_tree = (Object)adaptor.create(string_literal1546);
                    adaptor.addChild(root_0, string_literal1546_tree);
                    }
                    // RPIExprAST.g:1335:13: ( keyCURRENT_OF cursor_name | sql_condition )
                    int alt363=2;
                    int LA363_0 = input.LA(1);

                    if ( (LA363_0==ID) ) {
                        switch ( input.LA(2) ) {
                        case LPAREN:
                        case EQ:
                        case PLUS:
                        case MINUS:
                        case ASTERISK:
                        case DIV:
                        case NOT:
                        case BOOLOP_LT:
                        case BOOLOP_GT:
                        case BOOLOP_GE:
                        case BOOLOP_LE:
                        case DOT:
                        case DOUBLEVERTBAR:
                        case EXPONENT:
                        case NOT_EQ:
                        case 111:
                        case 160:
                        case 192:
                        case 196:
                            {
                            alt363=2;
                            }
                            break;
                        case ID:
                            {
                            int LA363_3 = input.LA(3);

                            if ( ((LA363_3>=ID && LA363_3<=LPAREN)||(LA363_3>=SQL && LA363_3<=MINUS)||LA363_3==NUMBER||LA363_3==QUOTED_STRING||LA363_3==DOUBLEQUOTED_STRING||LA363_3==116||LA363_3==158||LA363_3==164||(LA363_3>=168 && LA363_3<=169)||(LA363_3>=174 && LA363_3<=175)||LA363_3==198) ) {
                                alt363=2;
                            }
                            else if ( (LA363_3==EOF||LA363_3==SEMICOLON||(LA363_3>=220 && LA363_3<=221)) ) {
                                alt363=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 363, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            alt363=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 363, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( (LA363_0==LPAREN||(LA363_0>=SQL && LA363_0<=MINUS)||LA363_0==NUMBER||LA363_0==NOT||LA363_0==QUOTED_STRING||LA363_0==DOUBLEQUOTED_STRING||LA363_0==116||LA363_0==158||(LA363_0>=168 && LA363_0<=169)||(LA363_0>=174 && LA363_0<=175)||(LA363_0>=197 && LA363_0<=198)||LA363_0==200||LA363_0==202) ) {
                        alt363=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 363, 0, input);

                        throw nvae;
                    }
                    switch (alt363) {
                        case 1 :
                            // RPIExprAST.g:1335:17: keyCURRENT_OF cursor_name
                            {
                            pushFollow(FOLLOW_keyCURRENT_OF_in_update_command13256);
                            keyCURRENT_OF1547=keyCURRENT_OF();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURRENT_OF1547.getTree());
                            pushFollow(FOLLOW_cursor_name_in_update_command13258);
                            cursor_name1548=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1548.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1336:17: sql_condition
                            {
                            pushFollow(FOLLOW_sql_condition_in_update_command13276);
                            sql_condition1549=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1549.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // RPIExprAST.g:1339:9: ( returning_clause )?
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( ((LA365_0>=220 && LA365_0<=221)) ) {
                alt365=1;
            }
            switch (alt365) {
                case 1 :
                    // RPIExprAST.g:1339:11: returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_update_command13313);
                    returning_clause1550=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1550.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, update_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_command"

    public static class update_column_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_column_specs"
    // RPIExprAST.g:1342:1: update_column_specs : update_column_spec ( COMMA update_column_spec )* ;
    public final RPIExprASTParser.update_column_specs_return update_column_specs() throws RecognitionException {
        RPIExprASTParser.update_column_specs_return retval = new RPIExprASTParser.update_column_specs_return();
        retval.start = input.LT(1);
        int update_column_specs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1552=null;
        RPIExprASTParser.update_column_spec_return update_column_spec1551 = null;

        RPIExprASTParser.update_column_spec_return update_column_spec1553 = null;


        Object COMMA1552_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // RPIExprAST.g:1343:5: ( update_column_spec ( COMMA update_column_spec )* )
            // RPIExprAST.g:1343:9: update_column_spec ( COMMA update_column_spec )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_update_column_spec_in_update_column_specs13335);
            update_column_spec1551=update_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_spec1551.getTree());
            // RPIExprAST.g:1343:28: ( COMMA update_column_spec )*
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==COMMA) ) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    // RPIExprAST.g:1343:30: COMMA update_column_spec
            	    {
            	    COMMA1552=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_column_specs13339); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1552_tree = (Object)adaptor.create(COMMA1552);
            	    adaptor.addChild(root_0, COMMA1552_tree);
            	    }
            	    pushFollow(FOLLOW_update_column_spec_in_update_column_specs13341);
            	    update_column_spec1553=update_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_column_spec1553.getTree());

            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, update_column_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_column_specs"

    public static class update_column_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_column_spec"
    // RPIExprAST.g:1346:1: update_column_spec : column_spec EQ sql_expression ;
    public final RPIExprASTParser.update_column_spec_return update_column_spec() throws RecognitionException {
        RPIExprASTParser.update_column_spec_return retval = new RPIExprASTParser.update_column_spec_return();
        retval.start = input.LT(1);
        int update_column_spec_StartIndex = input.index();
        Object root_0 = null;

        Token EQ1555=null;
        RPIExprASTParser.column_spec_return column_spec1554 = null;

        RPIExprASTParser.sql_expression_return sql_expression1556 = null;


        Object EQ1555_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // RPIExprAST.g:1347:5: ( column_spec EQ sql_expression )
            // RPIExprAST.g:1347:9: column_spec EQ sql_expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_column_spec_in_update_column_spec13363);
            column_spec1554=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_spec1554.getTree());
            EQ1555=(Token)match(input,EQ,FOLLOW_EQ_in_update_column_spec13365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1555_tree = (Object)adaptor.create(EQ1555);
            adaptor.addChild(root_0, EQ1555_tree);
            }
            pushFollow(FOLLOW_sql_expression_in_update_column_spec13367);
            sql_expression1556=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_expression1556.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, update_column_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_column_spec"

    public static class update_nested_column_specs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_nested_column_specs"
    // RPIExprAST.g:1350:1: update_nested_column_specs : update_nested_column_spec ( COMMA update_nested_column_spec )* ;
    public final RPIExprASTParser.update_nested_column_specs_return update_nested_column_specs() throws RecognitionException {
        RPIExprASTParser.update_nested_column_specs_return retval = new RPIExprASTParser.update_nested_column_specs_return();
        retval.start = input.LT(1);
        int update_nested_column_specs_StartIndex = input.index();
        Object root_0 = null;

        Token COMMA1558=null;
        RPIExprASTParser.update_nested_column_spec_return update_nested_column_spec1557 = null;

        RPIExprASTParser.update_nested_column_spec_return update_nested_column_spec1559 = null;


        Object COMMA1558_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // RPIExprAST.g:1351:5: ( update_nested_column_spec ( COMMA update_nested_column_spec )* )
            // RPIExprAST.g:1351:9: update_nested_column_spec ( COMMA update_nested_column_spec )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs13386);
            update_nested_column_spec1557=update_nested_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_spec1557.getTree());
            // RPIExprAST.g:1351:35: ( COMMA update_nested_column_spec )*
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==COMMA) ) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    // RPIExprAST.g:1351:37: COMMA update_nested_column_spec
            	    {
            	    COMMA1558=(Token)match(input,COMMA,FOLLOW_COMMA_in_update_nested_column_specs13390); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1558_tree = (Object)adaptor.create(COMMA1558);
            	    adaptor.addChild(root_0, COMMA1558_tree);
            	    }
            	    pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs13392);
            	    update_nested_column_spec1559=update_nested_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, update_nested_column_spec1559.getTree());

            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, update_nested_column_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_nested_column_specs"

    public static class update_nested_column_spec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_nested_column_spec"
    // RPIExprAST.g:1354:1: update_nested_column_spec : LPAREN column_specs RPAREN EQ subquery ;
    public final RPIExprASTParser.update_nested_column_spec_return update_nested_column_spec() throws RecognitionException {
        RPIExprASTParser.update_nested_column_spec_return retval = new RPIExprASTParser.update_nested_column_spec_return();
        retval.start = input.LT(1);
        int update_nested_column_spec_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1560=null;
        Token RPAREN1562=null;
        Token EQ1563=null;
        RPIExprASTParser.column_specs_return column_specs1561 = null;

        RPIExprASTParser.subquery_return subquery1564 = null;


        Object LPAREN1560_tree=null;
        Object RPAREN1562_tree=null;
        Object EQ1563_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // RPIExprAST.g:1355:5: ( LPAREN column_specs RPAREN EQ subquery )
            // RPIExprAST.g:1355:9: LPAREN column_specs RPAREN EQ subquery
            {
            root_0 = (Object)adaptor.nil();

            LPAREN1560=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_update_nested_column_spec13414); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1560_tree = (Object)adaptor.create(LPAREN1560);
            adaptor.addChild(root_0, LPAREN1560_tree);
            }
            pushFollow(FOLLOW_column_specs_in_update_nested_column_spec13416);
            column_specs1561=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, column_specs1561.getTree());
            RPAREN1562=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_update_nested_column_spec13418); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1562_tree = (Object)adaptor.create(RPAREN1562);
            adaptor.addChild(root_0, RPAREN1562_tree);
            }
            EQ1563=(Token)match(input,EQ,FOLLOW_EQ_in_update_nested_column_spec13420); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1563_tree = (Object)adaptor.create(EQ1563);
            adaptor.addChild(root_0, EQ1563_tree);
            }
            pushFollow(FOLLOW_subquery_in_update_nested_column_spec13422);
            subquery1564=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery1564.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, update_nested_column_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_nested_column_spec"

    public static class delete_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_command"
    // RPIExprAST.g:1358:1: delete_command : 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final RPIExprASTParser.delete_command_return delete_command() throws RecognitionException {
        RPIExprASTParser.delete_command_return retval = new RPIExprASTParser.delete_command_return();
        retval.start = input.LT(1);
        int delete_command_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1565=null;
        Token string_literal1566=null;
        Token string_literal1568=null;
        RPIExprASTParser.selected_table_return selected_table1567 = null;

        RPIExprASTParser.keyCURRENT_OF_return keyCURRENT_OF1569 = null;

        RPIExprASTParser.cursor_name_return cursor_name1570 = null;

        RPIExprASTParser.sql_condition_return sql_condition1571 = null;

        RPIExprASTParser.returning_clause_return returning_clause1572 = null;


        Object string_literal1565_tree=null;
        Object string_literal1566_tree=null;
        Object string_literal1568_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // RPIExprAST.g:1359:5: ( 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // RPIExprAST.g:1359:9: 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1565=(Token)match(input,201,FOLLOW_201_in_delete_command13441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1565_tree = (Object)adaptor.create(string_literal1565);
            adaptor.addChild(root_0, string_literal1565_tree);
            }
            // RPIExprAST.g:1359:18: ( 'FROM' )?
            int alt368=2;
            int LA368_0 = input.LA(1);

            if ( (LA368_0==179) ) {
                alt368=1;
            }
            switch (alt368) {
                case 1 :
                    // RPIExprAST.g:1359:20: 'FROM'
                    {
                    string_literal1566=(Token)match(input,179,FOLLOW_179_in_delete_command13445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1566_tree = (Object)adaptor.create(string_literal1566);
                    adaptor.addChild(root_0, string_literal1566_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selected_table_in_delete_command13450);
            selected_table1567=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selected_table1567.getTree());
            // RPIExprAST.g:1361:9: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==185) ) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    // RPIExprAST.g:1361:13: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                    {
                    string_literal1568=(Token)match(input,185,FOLLOW_185_in_delete_command13465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1568_tree = (Object)adaptor.create(string_literal1568);
                    adaptor.addChild(root_0, string_literal1568_tree);
                    }
                    // RPIExprAST.g:1362:13: ( keyCURRENT_OF cursor_name | sql_condition )
                    int alt369=2;
                    int LA369_0 = input.LA(1);

                    if ( (LA369_0==ID) ) {
                        switch ( input.LA(2) ) {
                        case LPAREN:
                        case EQ:
                        case PLUS:
                        case MINUS:
                        case ASTERISK:
                        case DIV:
                        case NOT:
                        case BOOLOP_LT:
                        case BOOLOP_GT:
                        case BOOLOP_GE:
                        case BOOLOP_LE:
                        case DOT:
                        case DOUBLEVERTBAR:
                        case EXPONENT:
                        case NOT_EQ:
                        case 111:
                        case 160:
                        case 192:
                        case 196:
                            {
                            alt369=2;
                            }
                            break;
                        case ID:
                            {
                            int LA369_3 = input.LA(3);

                            if ( ((LA369_3>=ID && LA369_3<=LPAREN)||(LA369_3>=SQL && LA369_3<=MINUS)||LA369_3==NUMBER||LA369_3==QUOTED_STRING||LA369_3==DOUBLEQUOTED_STRING||LA369_3==116||LA369_3==158||LA369_3==164||(LA369_3>=168 && LA369_3<=169)||(LA369_3>=174 && LA369_3<=175)||LA369_3==198) ) {
                                alt369=2;
                            }
                            else if ( (LA369_3==EOF||LA369_3==SEMICOLON||(LA369_3>=220 && LA369_3<=221)) ) {
                                alt369=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 369, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            alt369=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 369, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( (LA369_0==LPAREN||(LA369_0>=SQL && LA369_0<=MINUS)||LA369_0==NUMBER||LA369_0==NOT||LA369_0==QUOTED_STRING||LA369_0==DOUBLEQUOTED_STRING||LA369_0==116||LA369_0==158||(LA369_0>=168 && LA369_0<=169)||(LA369_0>=174 && LA369_0<=175)||(LA369_0>=197 && LA369_0<=198)||LA369_0==200||LA369_0==202) ) {
                        alt369=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 369, 0, input);

                        throw nvae;
                    }
                    switch (alt369) {
                        case 1 :
                            // RPIExprAST.g:1362:17: keyCURRENT_OF cursor_name
                            {
                            pushFollow(FOLLOW_keyCURRENT_OF_in_delete_command13483);
                            keyCURRENT_OF1569=keyCURRENT_OF();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCURRENT_OF1569.getTree());
                            pushFollow(FOLLOW_cursor_name_in_delete_command13485);
                            cursor_name1570=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1570.getTree());

                            }
                            break;
                        case 2 :
                            // RPIExprAST.g:1363:17: sql_condition
                            {
                            pushFollow(FOLLOW_sql_condition_in_delete_command13503);
                            sql_condition1571=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sql_condition1571.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            // RPIExprAST.g:1366:9: ( returning_clause )?
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( ((LA371_0>=220 && LA371_0<=221)) ) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    // RPIExprAST.g:1366:11: returning_clause
                    {
                    pushFollow(FOLLOW_returning_clause_in_delete_command13540);
                    returning_clause1572=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, returning_clause1572.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, delete_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_command"

    public static class returning_clause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "returning_clause"
    // RPIExprAST.g:1369:1: returning_clause : ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues ;
    public final RPIExprASTParser.returning_clause_return returning_clause() throws RecognitionException {
        RPIExprASTParser.returning_clause_return retval = new RPIExprASTParser.returning_clause_return();
        retval.start = input.LT(1);
        int returning_clause_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1578=null;
        RPIExprASTParser.keyRETURN_return keyRETURN1573 = null;

        RPIExprASTParser.keyRETURNING_return keyRETURNING1574 = null;

        RPIExprASTParser.select_list_return select_list1575 = null;

        RPIExprASTParser.keyBULK_return keyBULK1576 = null;

        RPIExprASTParser.keyCOLLECT_return keyCOLLECT1577 = null;

        RPIExprASTParser.lvalues_return lvalues1579 = null;


        Object string_literal1578_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // RPIExprAST.g:1370:5: ( ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues )
            // RPIExprAST.g:1370:9: ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues
            {
            root_0 = (Object)adaptor.nil();

            // RPIExprAST.g:1370:9: ( keyRETURN | keyRETURNING )
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( (LA372_0==220) ) {
                alt372=1;
            }
            else if ( (LA372_0==221) ) {
                alt372=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 372, 0, input);

                throw nvae;
            }
            switch (alt372) {
                case 1 :
                    // RPIExprAST.g:1370:11: keyRETURN
                    {
                    pushFollow(FOLLOW_keyRETURN_in_returning_clause13564);
                    keyRETURN1573=keyRETURN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURN1573.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1370:23: keyRETURNING
                    {
                    pushFollow(FOLLOW_keyRETURNING_in_returning_clause13568);
                    keyRETURNING1574=keyRETURNING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyRETURNING1574.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_select_list_in_returning_clause13572);
            select_list1575=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, select_list1575.getTree());
            // RPIExprAST.g:1370:50: ( keyBULK keyCOLLECT )?
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==ID) ) {
                alt373=1;
            }
            switch (alt373) {
                case 1 :
                    // RPIExprAST.g:1370:52: keyBULK keyCOLLECT
                    {
                    pushFollow(FOLLOW_keyBULK_in_returning_clause13576);
                    keyBULK1576=keyBULK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyBULK1576.getTree());
                    pushFollow(FOLLOW_keyCOLLECT_in_returning_clause13578);
                    keyCOLLECT1577=keyCOLLECT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCOLLECT1577.getTree());

                    }
                    break;

            }

            string_literal1578=(Token)match(input,178,FOLLOW_178_in_returning_clause13583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1578_tree = (Object)adaptor.create(string_literal1578);
            adaptor.addChild(root_0, string_literal1578_tree);
            }
            pushFollow(FOLLOW_lvalues_in_returning_clause13585);
            lvalues1579=lvalues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalues1579.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, returning_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "returning_clause"

    public static class set_transaction_command_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_command"
    // RPIExprAST.g:1373:1: set_transaction_command : 'SET' keyTRANSACTION keyREAD keyONLY ;
    public final RPIExprASTParser.set_transaction_command_return set_transaction_command() throws RecognitionException {
        RPIExprASTParser.set_transaction_command_return retval = new RPIExprASTParser.set_transaction_command_return();
        retval.start = input.LT(1);
        int set_transaction_command_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1580=null;
        RPIExprASTParser.keyTRANSACTION_return keyTRANSACTION1581 = null;

        RPIExprASTParser.keyREAD_return keyREAD1582 = null;

        RPIExprASTParser.keyONLY_return keyONLY1583 = null;


        Object string_literal1580_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // RPIExprAST.g:1374:5: ( 'SET' keyTRANSACTION keyREAD keyONLY )
            // RPIExprAST.g:1374:9: 'SET' keyTRANSACTION keyREAD keyONLY
            {
            root_0 = (Object)adaptor.nil();

            string_literal1580=(Token)match(input,145,FOLLOW_145_in_set_transaction_command13604); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1580_tree = (Object)adaptor.create(string_literal1580);
            adaptor.addChild(root_0, string_literal1580_tree);
            }
            pushFollow(FOLLOW_keyTRANSACTION_in_set_transaction_command13606);
            keyTRANSACTION1581=keyTRANSACTION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyTRANSACTION1581.getTree());
            pushFollow(FOLLOW_keyREAD_in_set_transaction_command13608);
            keyREAD1582=keyREAD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyREAD1582.getTree());
            pushFollow(FOLLOW_keyONLY_in_set_transaction_command13610);
            keyONLY1583=keyONLY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyONLY1583.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, set_transaction_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_transaction_command"

    public static class close_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // RPIExprAST.g:1377:1: close_statement : keyCLOSE cursor_name ;
    public final RPIExprASTParser.close_statement_return close_statement() throws RecognitionException {
        RPIExprASTParser.close_statement_return retval = new RPIExprASTParser.close_statement_return();
        retval.start = input.LT(1);
        int close_statement_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.keyCLOSE_return keyCLOSE1584 = null;

        RPIExprASTParser.cursor_name_return cursor_name1585 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // RPIExprAST.g:1378:5: ( keyCLOSE cursor_name )
            // RPIExprAST.g:1378:9: keyCLOSE cursor_name
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyCLOSE_in_close_statement13629);
            keyCLOSE1584=keyCLOSE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyCLOSE1584.getTree());
            pushFollow(FOLLOW_cursor_name_in_close_statement13631);
            cursor_name1585=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1585.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, close_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class fetch_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // RPIExprAST.g:1381:1: fetch_statement : 'FETCH' cursor_name 'INTO' ( variable_names | record_name ) ;
    public final RPIExprASTParser.fetch_statement_return fetch_statement() throws RecognitionException {
        RPIExprASTParser.fetch_statement_return retval = new RPIExprASTParser.fetch_statement_return();
        retval.start = input.LT(1);
        int fetch_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1586=null;
        Token string_literal1588=null;
        RPIExprASTParser.cursor_name_return cursor_name1587 = null;

        RPIExprASTParser.variable_names_return variable_names1589 = null;

        RPIExprASTParser.record_name_return record_name1590 = null;


        Object string_literal1586_tree=null;
        Object string_literal1588_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // RPIExprAST.g:1382:5: ( 'FETCH' cursor_name 'INTO' ( variable_names | record_name ) )
            // RPIExprAST.g:1382:9: 'FETCH' cursor_name 'INTO' ( variable_names | record_name )
            {
            root_0 = (Object)adaptor.nil();

            string_literal1586=(Token)match(input,205,FOLLOW_205_in_fetch_statement13650); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1586_tree = (Object)adaptor.create(string_literal1586);
            adaptor.addChild(root_0, string_literal1586_tree);
            }
            pushFollow(FOLLOW_cursor_name_in_fetch_statement13652);
            cursor_name1587=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1587.getTree());
            string_literal1588=(Token)match(input,178,FOLLOW_178_in_fetch_statement13654); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1588_tree = (Object)adaptor.create(string_literal1588);
            adaptor.addChild(root_0, string_literal1588_tree);
            }
            // RPIExprAST.g:1383:9: ( variable_names | record_name )
            int alt374=2;
            int LA374_0 = input.LA(1);

            if ( (LA374_0==ID||LA374_0==DOUBLEQUOTED_STRING) ) {
                int LA374_1 = input.LA(2);

                if ( (synpred612_RPIExprAST()) ) {
                    alt374=1;
                }
                else if ( (true) ) {
                    alt374=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 374, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 374, 0, input);

                throw nvae;
            }
            switch (alt374) {
                case 1 :
                    // RPIExprAST.g:1383:13: variable_names
                    {
                    pushFollow(FOLLOW_variable_names_in_fetch_statement13669);
                    variable_names1589=variable_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_names1589.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1384:13: record_name
                    {
                    pushFollow(FOLLOW_record_name_in_fetch_statement13683);
                    record_name1590=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, record_name1590.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, fetch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class lock_table_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // RPIExprAST.g:1388:1: lock_table_statement : 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? ;
    public final RPIExprASTParser.lock_table_statement_return lock_table_statement() throws RecognitionException {
        RPIExprASTParser.lock_table_statement_return retval = new RPIExprASTParser.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1591=null;
        Token string_literal1592=null;
        Token string_literal1594=null;
        Token string_literal1596=null;
        Token string_literal1597=null;
        RPIExprASTParser.table_reference_list_return table_reference_list1593 = null;

        RPIExprASTParser.lock_mode_return lock_mode1595 = null;


        Object string_literal1591_tree=null;
        Object string_literal1592_tree=null;
        Object string_literal1594_tree=null;
        Object string_literal1596_tree=null;
        Object string_literal1597_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // RPIExprAST.g:1389:5: ( 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? )
            // RPIExprAST.g:1389:9: 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal1591=(Token)match(input,206,FOLLOW_206_in_lock_table_statement13712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1591_tree = (Object)adaptor.create(string_literal1591);
            adaptor.addChild(root_0, string_literal1591_tree);
            }
            string_literal1592=(Token)match(input,163,FOLLOW_163_in_lock_table_statement13714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1592_tree = (Object)adaptor.create(string_literal1592);
            adaptor.addChild(root_0, string_literal1592_tree);
            }
            pushFollow(FOLLOW_table_reference_list_in_lock_table_statement13716);
            table_reference_list1593=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, table_reference_list1593.getTree());
            string_literal1594=(Token)match(input,160,FOLLOW_160_in_lock_table_statement13726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1594_tree = (Object)adaptor.create(string_literal1594);
            adaptor.addChild(root_0, string_literal1594_tree);
            }
            pushFollow(FOLLOW_lock_mode_in_lock_table_statement13728);
            lock_mode1595=lock_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lock_mode1595.getTree());
            string_literal1596=(Token)match(input,207,FOLLOW_207_in_lock_table_statement13730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1596_tree = (Object)adaptor.create(string_literal1596);
            adaptor.addChild(root_0, string_literal1596_tree);
            }
            // RPIExprAST.g:1390:31: ( 'NOWAIT' )?
            int alt375=2;
            int LA375_0 = input.LA(1);

            if ( (LA375_0==195) ) {
                alt375=1;
            }
            switch (alt375) {
                case 1 :
                    // RPIExprAST.g:1390:33: 'NOWAIT'
                    {
                    string_literal1597=(Token)match(input,195,FOLLOW_195_in_lock_table_statement13734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1597_tree = (Object)adaptor.create(string_literal1597);
                    adaptor.addChild(root_0, string_literal1597_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class lock_mode_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_mode"
    // RPIExprAST.g:1393:1: lock_mode : ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' );
    public final RPIExprASTParser.lock_mode_return lock_mode() throws RecognitionException {
        RPIExprASTParser.lock_mode_return retval = new RPIExprASTParser.lock_mode_return();
        retval.start = input.LT(1);
        int lock_mode_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1598=null;
        Token string_literal1599=null;
        Token string_literal1600=null;
        Token string_literal1601=null;
        Token string_literal1602=null;
        Token string_literal1603=null;
        Token string_literal1604=null;
        Token string_literal1605=null;
        Token string_literal1606=null;
        Token string_literal1607=null;
        Token string_literal1608=null;

        Object string_literal1598_tree=null;
        Object string_literal1599_tree=null;
        Object string_literal1600_tree=null;
        Object string_literal1601_tree=null;
        Object string_literal1602_tree=null;
        Object string_literal1603_tree=null;
        Object string_literal1604_tree=null;
        Object string_literal1605_tree=null;
        Object string_literal1606_tree=null;
        Object string_literal1607_tree=null;
        Object string_literal1608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // RPIExprAST.g:1394:5: ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' )
            int alt376=6;
            switch ( input.LA(1) ) {
            case 208:
                {
                int LA376_1 = input.LA(2);

                if ( (LA376_1==209) ) {
                    alt376=1;
                }
                else if ( (LA376_1==210) ) {
                    alt376=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 376, 1, input);

                    throw nvae;
                }
                }
                break;
            case 209:
                {
                switch ( input.LA(2) ) {
                case 190:
                    {
                    alt376=3;
                    }
                    break;
                case 208:
                    {
                    alt376=5;
                    }
                    break;
                case 207:
                    {
                    alt376=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 376, 2, input);

                    throw nvae;
                }

                }
                break;
            case 210:
                {
                alt376=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 376, 0, input);

                throw nvae;
            }

            switch (alt376) {
                case 1 :
                    // RPIExprAST.g:1394:9: 'ROW' 'SHARE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1598=(Token)match(input,208,FOLLOW_208_in_lock_mode13756); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1598_tree = (Object)adaptor.create(string_literal1598);
                    adaptor.addChild(root_0, string_literal1598_tree);
                    }
                    string_literal1599=(Token)match(input,209,FOLLOW_209_in_lock_mode13758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1599_tree = (Object)adaptor.create(string_literal1599);
                    adaptor.addChild(root_0, string_literal1599_tree);
                    }

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1395:9: 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1600=(Token)match(input,208,FOLLOW_208_in_lock_mode13768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1600_tree = (Object)adaptor.create(string_literal1600);
                    adaptor.addChild(root_0, string_literal1600_tree);
                    }
                    string_literal1601=(Token)match(input,210,FOLLOW_210_in_lock_mode13770); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1601_tree = (Object)adaptor.create(string_literal1601);
                    adaptor.addChild(root_0, string_literal1601_tree);
                    }

                    }
                    break;
                case 3 :
                    // RPIExprAST.g:1396:9: 'SHARE' 'UPDATE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1602=(Token)match(input,209,FOLLOW_209_in_lock_mode13780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1602_tree = (Object)adaptor.create(string_literal1602);
                    adaptor.addChild(root_0, string_literal1602_tree);
                    }
                    string_literal1603=(Token)match(input,190,FOLLOW_190_in_lock_mode13782); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1603_tree = (Object)adaptor.create(string_literal1603);
                    adaptor.addChild(root_0, string_literal1603_tree);
                    }

                    }
                    break;
                case 4 :
                    // RPIExprAST.g:1397:9: 'SHARE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1604=(Token)match(input,209,FOLLOW_209_in_lock_mode13792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1604_tree = (Object)adaptor.create(string_literal1604);
                    adaptor.addChild(root_0, string_literal1604_tree);
                    }

                    }
                    break;
                case 5 :
                    // RPIExprAST.g:1398:9: 'SHARE' 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1605=(Token)match(input,209,FOLLOW_209_in_lock_mode13802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1605_tree = (Object)adaptor.create(string_literal1605);
                    adaptor.addChild(root_0, string_literal1605_tree);
                    }
                    string_literal1606=(Token)match(input,208,FOLLOW_208_in_lock_mode13804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1606_tree = (Object)adaptor.create(string_literal1606);
                    adaptor.addChild(root_0, string_literal1606_tree);
                    }
                    string_literal1607=(Token)match(input,210,FOLLOW_210_in_lock_mode13806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1607_tree = (Object)adaptor.create(string_literal1607);
                    adaptor.addChild(root_0, string_literal1607_tree);
                    }

                    }
                    break;
                case 6 :
                    // RPIExprAST.g:1399:9: 'EXCLUSIVE'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1608=(Token)match(input,210,FOLLOW_210_in_lock_mode13816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1608_tree = (Object)adaptor.create(string_literal1608);
                    adaptor.addChild(root_0, string_literal1608_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, lock_mode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_mode"

    public static class open_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // RPIExprAST.g:1402:1: open_statement : keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? ;
    public final RPIExprASTParser.open_statement_return open_statement() throws RecognitionException {
        RPIExprASTParser.open_statement_return retval = new RPIExprASTParser.open_statement_return();
        retval.start = input.LT(1);
        int open_statement_StartIndex = input.index();
        Object root_0 = null;

        Token LPAREN1611=null;
        Token RPAREN1613=null;
        RPIExprASTParser.keyOPEN_return keyOPEN1609 = null;

        RPIExprASTParser.cursor_name_return cursor_name1610 = null;

        RPIExprASTParser.plsql_expressions_return plsql_expressions1612 = null;


        Object LPAREN1611_tree=null;
        Object RPAREN1613_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // RPIExprAST.g:1403:5: ( keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? )
            // RPIExprAST.g:1403:9: keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyOPEN_in_open_statement13835);
            keyOPEN1609=keyOPEN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyOPEN1609.getTree());
            pushFollow(FOLLOW_cursor_name_in_open_statement13837);
            cursor_name1610=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cursor_name1610.getTree());
            // RPIExprAST.g:1403:29: ( LPAREN plsql_expressions RPAREN )?
            int alt377=2;
            int LA377_0 = input.LA(1);

            if ( (LA377_0==LPAREN) ) {
                alt377=1;
            }
            switch (alt377) {
                case 1 :
                    // RPIExprAST.g:1403:31: LPAREN plsql_expressions RPAREN
                    {
                    LPAREN1611=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_open_statement13841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1611_tree = (Object)adaptor.create(LPAREN1611);
                    adaptor.addChild(root_0, LPAREN1611_tree);
                    }
                    pushFollow(FOLLOW_plsql_expressions_in_open_statement13843);
                    plsql_expressions1612=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, plsql_expressions1612.getTree());
                    RPAREN1613=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_open_statement13845); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1613_tree = (Object)adaptor.create(RPAREN1613);
                    adaptor.addChild(root_0, RPAREN1613_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, open_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class rollback_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // RPIExprAST.g:1406:1: rollback_statement : keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? ;
    public final RPIExprASTParser.rollback_statement_return rollback_statement() throws RecognitionException {
        RPIExprASTParser.rollback_statement_return retval = new RPIExprASTParser.rollback_statement_return();
        retval.start = input.LT(1);
        int rollback_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1616=null;
        Token string_literal1617=null;
        Token string_literal1619=null;
        RPIExprASTParser.keyROLLBACK_return keyROLLBACK1614 = null;

        RPIExprASTParser.keyWORK_return keyWORK1615 = null;

        RPIExprASTParser.savepoint_name_return savepoint_name1618 = null;

        RPIExprASTParser.quoted_string_return quoted_string1620 = null;


        Object string_literal1616_tree=null;
        Object string_literal1617_tree=null;
        Object string_literal1619_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // RPIExprAST.g:1407:5: ( keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? )
            // RPIExprAST.g:1407:9: keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_keyROLLBACK_in_rollback_statement13867);
            keyROLLBACK1614=keyROLLBACK();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, keyROLLBACK1614.getTree());
            // RPIExprAST.g:1407:21: ( keyWORK )?
            int alt378=2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0==ID) ) {
                alt378=1;
            }
            switch (alt378) {
                case 1 :
                    // RPIExprAST.g:1407:23: keyWORK
                    {
                    pushFollow(FOLLOW_keyWORK_in_rollback_statement13871);
                    keyWORK1615=keyWORK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, keyWORK1615.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1408:9: ( 'TO' ( 'SAVEPOINT' )? savepoint_name )?
            int alt380=2;
            int LA380_0 = input.LA(1);

            if ( (LA380_0==135) ) {
                alt380=1;
            }
            switch (alt380) {
                case 1 :
                    // RPIExprAST.g:1408:11: 'TO' ( 'SAVEPOINT' )? savepoint_name
                    {
                    string_literal1616=(Token)match(input,135,FOLLOW_135_in_rollback_statement13886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1616_tree = (Object)adaptor.create(string_literal1616);
                    adaptor.addChild(root_0, string_literal1616_tree);
                    }
                    // RPIExprAST.g:1408:16: ( 'SAVEPOINT' )?
                    int alt379=2;
                    int LA379_0 = input.LA(1);

                    if ( (LA379_0==211) ) {
                        alt379=1;
                    }
                    switch (alt379) {
                        case 1 :
                            // RPIExprAST.g:1408:18: 'SAVEPOINT'
                            {
                            string_literal1617=(Token)match(input,211,FOLLOW_211_in_rollback_statement13890); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1617_tree = (Object)adaptor.create(string_literal1617);
                            adaptor.addChild(root_0, string_literal1617_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_savepoint_name_in_rollback_statement13895);
                    savepoint_name1618=savepoint_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1618.getTree());

                    }
                    break;

            }

            // RPIExprAST.g:1409:9: ( 'COMMENT' quoted_string )?
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==212) ) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    // RPIExprAST.g:1409:11: 'COMMENT' quoted_string
                    {
                    string_literal1619=(Token)match(input,212,FOLLOW_212_in_rollback_statement13910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1619_tree = (Object)adaptor.create(string_literal1619);
                    adaptor.addChild(root_0, string_literal1619_tree);
                    }
                    pushFollow(FOLLOW_quoted_string_in_rollback_statement13912);
                    quoted_string1620=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, quoted_string1620.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, rollback_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // RPIExprAST.g:1412:1: savepoint_statement : 'SAVEPOINT' savepoint_name ;
    public final RPIExprASTParser.savepoint_statement_return savepoint_statement() throws RecognitionException {
        RPIExprASTParser.savepoint_statement_return retval = new RPIExprASTParser.savepoint_statement_return();
        retval.start = input.LT(1);
        int savepoint_statement_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1621=null;
        RPIExprASTParser.savepoint_name_return savepoint_name1622 = null;


        Object string_literal1621_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // RPIExprAST.g:1413:5: ( 'SAVEPOINT' savepoint_name )
            // RPIExprAST.g:1413:9: 'SAVEPOINT' savepoint_name
            {
            root_0 = (Object)adaptor.nil();

            string_literal1621=(Token)match(input,211,FOLLOW_211_in_savepoint_statement13934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1621_tree = (Object)adaptor.create(string_literal1621);
            adaptor.addChild(root_0, string_literal1621_tree);
            }
            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement13936);
            savepoint_name1622=savepoint_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, savepoint_name1622.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, savepoint_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class savepoint_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_name"
    // RPIExprAST.g:1416:1: savepoint_name : identifier ;
    public final RPIExprASTParser.savepoint_name_return savepoint_name() throws RecognitionException {
        RPIExprASTParser.savepoint_name_return retval = new RPIExprASTParser.savepoint_name_return();
        retval.start = input.LT(1);
        int savepoint_name_StartIndex = input.index();
        Object root_0 = null;

        RPIExprASTParser.identifier_return identifier1623 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // RPIExprAST.g:1417:5: ( identifier )
            // RPIExprAST.g:1417:9: identifier
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifier_in_savepoint_name13955);
            identifier1623=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1623.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, savepoint_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_name"

    public static class identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // RPIExprAST.g:1420:1: identifier : ( ID | DOUBLEQUOTED_STRING );
    public final RPIExprASTParser.identifier_return identifier() throws RecognitionException {
        RPIExprASTParser.identifier_return retval = new RPIExprASTParser.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        Object root_0 = null;

        Token set1624=null;

        Object set1624_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // RPIExprAST.g:1421:5: ( ID | DOUBLEQUOTED_STRING )
            // RPIExprAST.g:
            {
            root_0 = (Object)adaptor.nil();

            set1624=(Token)input.LT(1);
            if ( input.LA(1)==ID||input.LA(1)==DOUBLEQUOTED_STRING ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set1624));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class quoted_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quoted_string"
    // RPIExprAST.g:1426:1: quoted_string : QUOTED_STRING ;
    public final RPIExprASTParser.quoted_string_return quoted_string() throws RecognitionException {
        RPIExprASTParser.quoted_string_return retval = new RPIExprASTParser.quoted_string_return();
        retval.start = input.LT(1);
        int quoted_string_StartIndex = input.index();
        Object root_0 = null;

        Token QUOTED_STRING1625=null;

        Object QUOTED_STRING1625_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // RPIExprAST.g:1427:5: ( QUOTED_STRING )
            // RPIExprAST.g:1427:9: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();

            QUOTED_STRING1625=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_quoted_string14005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1625_tree = (Object)adaptor.create(QUOTED_STRING1625);
            adaptor.addChild(root_0, QUOTED_STRING1625_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, quoted_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quoted_string"

    public static class match_string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_string"
    // RPIExprAST.g:1430:1: match_string : QUOTED_STRING ;
    public final RPIExprASTParser.match_string_return match_string() throws RecognitionException {
        RPIExprASTParser.match_string_return retval = new RPIExprASTParser.match_string_return();
        retval.start = input.LT(1);
        int match_string_StartIndex = input.index();
        Object root_0 = null;

        Token QUOTED_STRING1626=null;

        Object QUOTED_STRING1626_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // RPIExprAST.g:1431:5: ( QUOTED_STRING )
            // RPIExprAST.g:1431:9: QUOTED_STRING
            {
            root_0 = (Object)adaptor.nil();

            QUOTED_STRING1626=(Token)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_match_string14024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1626_tree = (Object)adaptor.create(QUOTED_STRING1626);
            adaptor.addChild(root_0, QUOTED_STRING1626_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, match_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "match_string"

    public static class keyA_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyA"
    // RPIExprAST.g:1433:1: keyA : {...}? ID ;
    public final RPIExprASTParser.keyA_return keyA() throws RecognitionException {
        RPIExprASTParser.keyA_return retval = new RPIExprASTParser.keyA_return();
        retval.start = input.LT(1);
        int keyA_StartIndex = input.index();
        Object root_0 = null;

        Token ID1627=null;

        Object ID1627_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // RPIExprAST.g:1433:34: ({...}? ID )
            // RPIExprAST.g:1433:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "A"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyA", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"A\")");
            }
            ID1627=(Token)match(input,ID,FOLLOW_ID_in_keyA14066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1627_tree = (Object)adaptor.create(ID1627);
            adaptor.addChild(root_0, ID1627_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, keyA_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyA"

    public static class keyAUTOMATIC_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyAUTOMATIC"
    // RPIExprAST.g:1434:1: keyAUTOMATIC : {...}? ID ;
    public final RPIExprASTParser.keyAUTOMATIC_return keyAUTOMATIC() throws RecognitionException {
        RPIExprASTParser.keyAUTOMATIC_return retval = new RPIExprASTParser.keyAUTOMATIC_return();
        retval.start = input.LT(1);
        int keyAUTOMATIC_StartIndex = input.index();
        Object root_0 = null;

        Token ID1628=null;

        Object ID1628_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }
            // RPIExprAST.g:1434:34: ({...}? ID )
            // RPIExprAST.g:1434:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "AUTOMATIC"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTOMATIC", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"AUTOMATIC\")");
            }
            ID1628=(Token)match(input,ID,FOLLOW_ID_in_keyAUTOMATIC14095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1628_tree = (Object)adaptor.create(ID1628);
            adaptor.addChild(root_0, ID1628_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 275, keyAUTOMATIC_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyAUTOMATIC"

    public static class keyCOUNT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCOUNT"
    // RPIExprAST.g:1435:1: keyCOUNT : {...}? ID ;
    public final RPIExprASTParser.keyCOUNT_return keyCOUNT() throws RecognitionException {
        RPIExprASTParser.keyCOUNT_return retval = new RPIExprASTParser.keyCOUNT_return();
        retval.start = input.LT(1);
        int keyCOUNT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1629=null;

        Object ID1629_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }
            // RPIExprAST.g:1435:34: ({...}? ID )
            // RPIExprAST.g:1435:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOUNT", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"COUNT\")");
            }
            ID1629=(Token)match(input,ID,FOLLOW_ID_in_keyCOUNT14128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1629_tree = (Object)adaptor.create(ID1629);
            adaptor.addChild(root_0, ID1629_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 276, keyCOUNT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCOUNT"

    public static class keyTO_CHAR_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTO_CHAR"
    // RPIExprAST.g:1436:1: keyTO_CHAR : {...}? ID ;
    public final RPIExprASTParser.keyTO_CHAR_return keyTO_CHAR() throws RecognitionException {
        RPIExprASTParser.keyTO_CHAR_return retval = new RPIExprASTParser.keyTO_CHAR_return();
        retval.start = input.LT(1);
        int keyTO_CHAR_StartIndex = input.index();
        Object root_0 = null;

        Token ID1630=null;

        Object ID1630_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }
            // RPIExprAST.g:1436:34: ({...}? ID )
            // RPIExprAST.g:1436:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTO_CHAR", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( \"TO_CHAR\")");
            }
            ID1630=(Token)match(input,ID,FOLLOW_ID_in_keyTO_CHAR14159); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1630_tree = (Object)adaptor.create(ID1630);
            adaptor.addChild(root_0, ID1630_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 277, keyTO_CHAR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTO_CHAR"

    public static class keySUBSTR_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySUBSTR"
    // RPIExprAST.g:1437:1: keySUBSTR : {...}? ID ;
    public final RPIExprASTParser.keySUBSTR_return keySUBSTR() throws RecognitionException {
        RPIExprASTParser.keySUBSTR_return retval = new RPIExprASTParser.keySUBSTR_return();
        retval.start = input.LT(1);
        int keySUBSTR_StartIndex = input.index();
        Object root_0 = null;

        Token ID1631=null;

        Object ID1631_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }
            // RPIExprAST.g:1437:34: ({...}? ID )
            // RPIExprAST.g:1437:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBSTR", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( \"SUBSTR\")");
            }
            ID1631=(Token)match(input,ID,FOLLOW_ID_in_keySUBSTR14191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1631_tree = (Object)adaptor.create(ID1631);
            adaptor.addChild(root_0, ID1631_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 278, keySUBSTR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySUBSTR"

    public static class keyTRIM_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTRIM"
    // RPIExprAST.g:1438:1: keyTRIM : {...}? ID ;
    public final RPIExprASTParser.keyTRIM_return keyTRIM() throws RecognitionException {
        RPIExprASTParser.keyTRIM_return retval = new RPIExprASTParser.keyTRIM_return();
        retval.start = input.LT(1);
        int keyTRIM_StartIndex = input.index();
        Object root_0 = null;

        Token ID1632=null;

        Object ID1632_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }
            // RPIExprAST.g:1438:34: ({...}? ID )
            // RPIExprAST.g:1438:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTRIM", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"TRIM\")");
            }
            ID1632=(Token)match(input,ID,FOLLOW_ID_in_keyTRIM14225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1632_tree = (Object)adaptor.create(ID1632);
            adaptor.addChild(root_0, ID1632_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 279, keyTRIM_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTRIM"

    public static class keyCROSS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCROSS"
    // RPIExprAST.g:1439:1: keyCROSS : {...}? ID ;
    public final RPIExprASTParser.keyCROSS_return keyCROSS() throws RecognitionException {
        RPIExprASTParser.keyCROSS_return retval = new RPIExprASTParser.keyCROSS_return();
        retval.start = input.LT(1);
        int keyCROSS_StartIndex = input.index();
        Object root_0 = null;

        Token ID1633=null;

        Object ID1633_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }
            // RPIExprAST.g:1439:34: ({...}? ID )
            // RPIExprAST.g:1439:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CROSS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCROSS", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"CROSS\")");
            }
            ID1633=(Token)match(input,ID,FOLLOW_ID_in_keyCROSS14258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1633_tree = (Object)adaptor.create(ID1633);
            adaptor.addChild(root_0, ID1633_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 280, keyCROSS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCROSS"

    public static class keyCUBE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCUBE"
    // RPIExprAST.g:1440:1: keyCUBE : {...}? ID ;
    public final RPIExprASTParser.keyCUBE_return keyCUBE() throws RecognitionException {
        RPIExprASTParser.keyCUBE_return retval = new RPIExprASTParser.keyCUBE_return();
        retval.start = input.LT(1);
        int keyCUBE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1634=null;

        Object ID1634_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }
            // RPIExprAST.g:1440:34: ({...}? ID )
            // RPIExprAST.g:1440:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CUBE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCUBE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"CUBE\")");
            }
            ID1634=(Token)match(input,ID,FOLLOW_ID_in_keyCUBE14292); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1634_tree = (Object)adaptor.create(ID1634);
            adaptor.addChild(root_0, ID1634_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 281, keyCUBE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCUBE"

    public static class keyCURRENT_OF_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCURRENT_OF"
    // RPIExprAST.g:1441:1: keyCURRENT_OF : {...}? ID ;
    public final RPIExprASTParser.keyCURRENT_OF_return keyCURRENT_OF() throws RecognitionException {
        RPIExprASTParser.keyCURRENT_OF_return retval = new RPIExprASTParser.keyCURRENT_OF_return();
        retval.start = input.LT(1);
        int keyCURRENT_OF_StartIndex = input.index();
        Object root_0 = null;

        Token ID1635=null;

        Object ID1635_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }
            // RPIExprAST.g:1441:34: ({...}? ID )
            // RPIExprAST.g:1441:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURRENT_OF"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURRENT_OF", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"CURRENT_OF\")");
            }
            ID1635=(Token)match(input,ID,FOLLOW_ID_in_keyCURRENT_OF14320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1635_tree = (Object)adaptor.create(ID1635);
            adaptor.addChild(root_0, ID1635_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 282, keyCURRENT_OF_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCURRENT_OF"

    public static class keyDAY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDAY"
    // RPIExprAST.g:1442:1: keyDAY : {...}? ID ;
    public final RPIExprASTParser.keyDAY_return keyDAY() throws RecognitionException {
        RPIExprASTParser.keyDAY_return retval = new RPIExprASTParser.keyDAY_return();
        retval.start = input.LT(1);
        int keyDAY_StartIndex = input.index();
        Object root_0 = null;

        Token ID1636=null;

        Object ID1636_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }
            // RPIExprAST.g:1442:34: ({...}? ID )
            // RPIExprAST.g:1442:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDAY", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"DAY\")");
            }
            ID1636=(Token)match(input,ID,FOLLOW_ID_in_keyDAY14355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1636_tree = (Object)adaptor.create(ID1636);
            adaptor.addChild(root_0, ID1636_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 283, keyDAY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDAY"

    public static class keyDBTIMEZONE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDBTIMEZONE"
    // RPIExprAST.g:1443:1: keyDBTIMEZONE : {...}? ID ;
    public final RPIExprASTParser.keyDBTIMEZONE_return keyDBTIMEZONE() throws RecognitionException {
        RPIExprASTParser.keyDBTIMEZONE_return retval = new RPIExprASTParser.keyDBTIMEZONE_return();
        retval.start = input.LT(1);
        int keyDBTIMEZONE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1637=null;

        Object ID1637_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }
            // RPIExprAST.g:1443:34: ({...}? ID )
            // RPIExprAST.g:1443:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DBTIMEZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDBTIMEZONE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"DBTIMEZONE\")");
            }
            ID1637=(Token)match(input,ID,FOLLOW_ID_in_keyDBTIMEZONE14383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1637_tree = (Object)adaptor.create(ID1637);
            adaptor.addChild(root_0, ID1637_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 284, keyDBTIMEZONE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDBTIMEZONE"

    public static class keyDECREMENT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDECREMENT"
    // RPIExprAST.g:1444:1: keyDECREMENT : {...}? ID ;
    public final RPIExprASTParser.keyDECREMENT_return keyDECREMENT() throws RecognitionException {
        RPIExprASTParser.keyDECREMENT_return retval = new RPIExprASTParser.keyDECREMENT_return();
        retval.start = input.LT(1);
        int keyDECREMENT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1638=null;

        Object ID1638_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }
            // RPIExprAST.g:1444:34: ({...}? ID )
            // RPIExprAST.g:1444:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DECREMENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDECREMENT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"DECREMENT\")");
            }
            ID1638=(Token)match(input,ID,FOLLOW_ID_in_keyDECREMENT14412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1638_tree = (Object)adaptor.create(ID1638);
            adaptor.addChild(root_0, ID1638_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 285, keyDECREMENT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDECREMENT"

    public static class keyDIMENSION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDIMENSION"
    // RPIExprAST.g:1445:1: keyDIMENSION : {...}? ID ;
    public final RPIExprASTParser.keyDIMENSION_return keyDIMENSION() throws RecognitionException {
        RPIExprASTParser.keyDIMENSION_return retval = new RPIExprASTParser.keyDIMENSION_return();
        retval.start = input.LT(1);
        int keyDIMENSION_StartIndex = input.index();
        Object root_0 = null;

        Token ID1639=null;

        Object ID1639_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }
            // RPIExprAST.g:1445:34: ({...}? ID )
            // RPIExprAST.g:1445:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DIMENSION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDIMENSION", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"DIMENSION\")");
            }
            ID1639=(Token)match(input,ID,FOLLOW_ID_in_keyDIMENSION14441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1639_tree = (Object)adaptor.create(ID1639);
            adaptor.addChild(root_0, ID1639_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 286, keyDIMENSION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDIMENSION"

    public static class keyEMPTY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEMPTY"
    // RPIExprAST.g:1446:1: keyEMPTY : {...}? ID ;
    public final RPIExprASTParser.keyEMPTY_return keyEMPTY() throws RecognitionException {
        RPIExprASTParser.keyEMPTY_return retval = new RPIExprASTParser.keyEMPTY_return();
        retval.start = input.LT(1);
        int keyEMPTY_StartIndex = input.index();
        Object root_0 = null;

        Token ID1640=null;

        Object ID1640_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }
            // RPIExprAST.g:1446:34: ({...}? ID )
            // RPIExprAST.g:1446:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EMPTY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEMPTY", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"EMPTY\")");
            }
            ID1640=(Token)match(input,ID,FOLLOW_ID_in_keyEMPTY14474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1640_tree = (Object)adaptor.create(ID1640);
            adaptor.addChild(root_0, ID1640_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 287, keyEMPTY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEMPTY"

    public static class keyEQUALS_PATH_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEQUALS_PATH"
    // RPIExprAST.g:1447:1: keyEQUALS_PATH : {...}? ID ;
    public final RPIExprASTParser.keyEQUALS_PATH_return keyEQUALS_PATH() throws RecognitionException {
        RPIExprASTParser.keyEQUALS_PATH_return retval = new RPIExprASTParser.keyEQUALS_PATH_return();
        retval.start = input.LT(1);
        int keyEQUALS_PATH_StartIndex = input.index();
        Object root_0 = null;

        Token ID1641=null;

        Object ID1641_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }
            // RPIExprAST.g:1447:34: ({...}? ID )
            // RPIExprAST.g:1447:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEQUALS_PATH", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"EQUALS_PATH\")");
            }
            ID1641=(Token)match(input,ID,FOLLOW_ID_in_keyEQUALS_PATH14501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1641_tree = (Object)adaptor.create(ID1641);
            adaptor.addChild(root_0, ID1641_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 288, keyEQUALS_PATH_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEQUALS_PATH"

    public static class keyESCAPE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyESCAPE"
    // RPIExprAST.g:1448:1: keyESCAPE : {...}? ID ;
    public final RPIExprASTParser.keyESCAPE_return keyESCAPE() throws RecognitionException {
        RPIExprASTParser.keyESCAPE_return retval = new RPIExprASTParser.keyESCAPE_return();
        retval.start = input.LT(1);
        int keyESCAPE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1642=null;

        Object ID1642_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }
            // RPIExprAST.g:1448:34: ({...}? ID )
            // RPIExprAST.g:1448:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ESCAPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyESCAPE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"ESCAPE\")");
            }
            ID1642=(Token)match(input,ID,FOLLOW_ID_in_keyESCAPE14533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1642_tree = (Object)adaptor.create(ID1642);
            adaptor.addChild(root_0, ID1642_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 289, keyESCAPE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyESCAPE"

    public static class keyFIRST_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFIRST"
    // RPIExprAST.g:1449:1: keyFIRST : {...}? ID ;
    public final RPIExprASTParser.keyFIRST_return keyFIRST() throws RecognitionException {
        RPIExprASTParser.keyFIRST_return retval = new RPIExprASTParser.keyFIRST_return();
        retval.start = input.LT(1);
        int keyFIRST_StartIndex = input.index();
        Object root_0 = null;

        Token ID1643=null;

        Object ID1643_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }
            // RPIExprAST.g:1449:34: ({...}? ID )
            // RPIExprAST.g:1449:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FIRST"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIRST", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"FIRST\")");
            }
            ID1643=(Token)match(input,ID,FOLLOW_ID_in_keyFIRST14566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1643_tree = (Object)adaptor.create(ID1643);
            adaptor.addChild(root_0, ID1643_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 290, keyFIRST_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFIRST"

    public static class keyFULL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFULL"
    // RPIExprAST.g:1450:1: keyFULL : {...}? ID ;
    public final RPIExprASTParser.keyFULL_return keyFULL() throws RecognitionException {
        RPIExprASTParser.keyFULL_return retval = new RPIExprASTParser.keyFULL_return();
        retval.start = input.LT(1);
        int keyFULL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1644=null;

        Object ID1644_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }
            // RPIExprAST.g:1450:34: ({...}? ID )
            // RPIExprAST.g:1450:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFULL", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"FULL\")");
            }
            ID1644=(Token)match(input,ID,FOLLOW_ID_in_keyFULL14600); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1644_tree = (Object)adaptor.create(ID1644);
            adaptor.addChild(root_0, ID1644_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 291, keyFULL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFULL"

    public static class keyGROUPING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyGROUPING"
    // RPIExprAST.g:1451:1: keyGROUPING : {...}? ID ;
    public final RPIExprASTParser.keyGROUPING_return keyGROUPING() throws RecognitionException {
        RPIExprASTParser.keyGROUPING_return retval = new RPIExprASTParser.keyGROUPING_return();
        retval.start = input.LT(1);
        int keyGROUPING_StartIndex = input.index();
        Object root_0 = null;

        Token ID1645=null;

        Object ID1645_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }
            // RPIExprAST.g:1451:34: ({...}? ID )
            // RPIExprAST.g:1451:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "GROUPING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyGROUPING", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"GROUPING\")");
            }
            ID1645=(Token)match(input,ID,FOLLOW_ID_in_keyGROUPING14630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1645_tree = (Object)adaptor.create(ID1645);
            adaptor.addChild(root_0, ID1645_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 292, keyGROUPING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyGROUPING"

    public static class keyIGNORE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyIGNORE"
    // RPIExprAST.g:1452:1: keyIGNORE : {...}? ID ;
    public final RPIExprASTParser.keyIGNORE_return keyIGNORE() throws RecognitionException {
        RPIExprASTParser.keyIGNORE_return retval = new RPIExprASTParser.keyIGNORE_return();
        retval.start = input.LT(1);
        int keyIGNORE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1646=null;

        Object ID1646_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }
            // RPIExprAST.g:1452:34: ({...}? ID )
            // RPIExprAST.g:1452:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyIGNORE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"IGNORE\")");
            }
            ID1646=(Token)match(input,ID,FOLLOW_ID_in_keyIGNORE14662); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1646_tree = (Object)adaptor.create(ID1646);
            adaptor.addChild(root_0, ID1646_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 293, keyIGNORE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyIGNORE"

    public static class keyINCREMENT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINCREMENT"
    // RPIExprAST.g:1453:1: keyINCREMENT : {...}? ID ;
    public final RPIExprASTParser.keyINCREMENT_return keyINCREMENT() throws RecognitionException {
        RPIExprASTParser.keyINCREMENT_return retval = new RPIExprASTParser.keyINCREMENT_return();
        retval.start = input.LT(1);
        int keyINCREMENT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1647=null;

        Object ID1647_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }
            // RPIExprAST.g:1453:34: ({...}? ID )
            // RPIExprAST.g:1453:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INCREMENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINCREMENT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"INCREMENT\")");
            }
            ID1647=(Token)match(input,ID,FOLLOW_ID_in_keyINCREMENT14691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1647_tree = (Object)adaptor.create(ID1647);
            adaptor.addChild(root_0, ID1647_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 294, keyINCREMENT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINCREMENT"

    public static class keyINFINITE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINFINITE"
    // RPIExprAST.g:1454:1: keyINFINITE : {...}? ID ;
    public final RPIExprASTParser.keyINFINITE_return keyINFINITE() throws RecognitionException {
        RPIExprASTParser.keyINFINITE_return retval = new RPIExprASTParser.keyINFINITE_return();
        retval.start = input.LT(1);
        int keyINFINITE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1648=null;

        Object ID1648_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }
            // RPIExprAST.g:1454:34: ({...}? ID )
            // RPIExprAST.g:1454:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INFINITE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINFINITE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"INFINITE\")");
            }
            ID1648=(Token)match(input,ID,FOLLOW_ID_in_keyINFINITE14721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1648_tree = (Object)adaptor.create(ID1648);
            adaptor.addChild(root_0, ID1648_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 295, keyINFINITE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINFINITE"

    public static class keyINNER_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINNER"
    // RPIExprAST.g:1455:1: keyINNER : {...}? ID ;
    public final RPIExprASTParser.keyINNER_return keyINNER() throws RecognitionException {
        RPIExprASTParser.keyINNER_return retval = new RPIExprASTParser.keyINNER_return();
        retval.start = input.LT(1);
        int keyINNER_StartIndex = input.index();
        Object root_0 = null;

        Token ID1649=null;

        Object ID1649_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }
            // RPIExprAST.g:1455:34: ({...}? ID )
            // RPIExprAST.g:1455:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INNER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINNER", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"INNER\")");
            }
            ID1649=(Token)match(input,ID,FOLLOW_ID_in_keyINNER14754); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1649_tree = (Object)adaptor.create(ID1649);
            adaptor.addChild(root_0, ID1649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 296, keyINNER_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINNER"

    public static class keyINTERVAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINTERVAL"
    // RPIExprAST.g:1456:1: keyINTERVAL : {...}? ID ;
    public final RPIExprASTParser.keyINTERVAL_return keyINTERVAL() throws RecognitionException {
        RPIExprASTParser.keyINTERVAL_return retval = new RPIExprASTParser.keyINTERVAL_return();
        retval.start = input.LT(1);
        int keyINTERVAL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1650=null;

        Object ID1650_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }
            // RPIExprAST.g:1456:34: ({...}? ID )
            // RPIExprAST.g:1456:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERVAL", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"INTERVAL\")");
            }
            ID1650=(Token)match(input,ID,FOLLOW_ID_in_keyINTERVAL14784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1650_tree = (Object)adaptor.create(ID1650);
            adaptor.addChild(root_0, ID1650_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 297, keyINTERVAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINTERVAL"

    public static class keyITERATE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyITERATE"
    // RPIExprAST.g:1457:1: keyITERATE : {...}? ID ;
    public final RPIExprASTParser.keyITERATE_return keyITERATE() throws RecognitionException {
        RPIExprASTParser.keyITERATE_return retval = new RPIExprASTParser.keyITERATE_return();
        retval.start = input.LT(1);
        int keyITERATE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1651=null;

        Object ID1651_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }
            // RPIExprAST.g:1457:34: ({...}? ID )
            // RPIExprAST.g:1457:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ITERATE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyITERATE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"ITERATE\")");
            }
            ID1651=(Token)match(input,ID,FOLLOW_ID_in_keyITERATE14815); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1651_tree = (Object)adaptor.create(ID1651);
            adaptor.addChild(root_0, ID1651_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 298, keyITERATE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyITERATE"

    public static class keyJOIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyJOIN"
    // RPIExprAST.g:1458:1: keyJOIN : {...}? ID ;
    public final RPIExprASTParser.keyJOIN_return keyJOIN() throws RecognitionException {
        RPIExprASTParser.keyJOIN_return retval = new RPIExprASTParser.keyJOIN_return();
        retval.start = input.LT(1);
        int keyJOIN_StartIndex = input.index();
        Object root_0 = null;

        Token ID1652=null;

        Object ID1652_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }
            // RPIExprAST.g:1458:34: ({...}? ID )
            // RPIExprAST.g:1458:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "JOIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyJOIN", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"JOIN\")");
            }
            ID1652=(Token)match(input,ID,FOLLOW_ID_in_keyJOIN14849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1652_tree = (Object)adaptor.create(ID1652);
            adaptor.addChild(root_0, ID1652_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 299, keyJOIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyJOIN"

    public static class keyKEEP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyKEEP"
    // RPIExprAST.g:1459:1: keyKEEP : {...}? ID ;
    public final RPIExprASTParser.keyKEEP_return keyKEEP() throws RecognitionException {
        RPIExprASTParser.keyKEEP_return retval = new RPIExprASTParser.keyKEEP_return();
        retval.start = input.LT(1);
        int keyKEEP_StartIndex = input.index();
        Object root_0 = null;

        Token ID1653=null;

        Object ID1653_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }
            // RPIExprAST.g:1459:34: ({...}? ID )
            // RPIExprAST.g:1459:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyKEEP", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"KEEP\")");
            }
            ID1653=(Token)match(input,ID,FOLLOW_ID_in_keyKEEP14883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1653_tree = (Object)adaptor.create(ID1653);
            adaptor.addChild(root_0, ID1653_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 300, keyKEEP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyKEEP"

    public static class keyLAST_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLAST"
    // RPIExprAST.g:1460:1: keyLAST : {...}? ID ;
    public final RPIExprASTParser.keyLAST_return keyLAST() throws RecognitionException {
        RPIExprASTParser.keyLAST_return retval = new RPIExprASTParser.keyLAST_return();
        retval.start = input.LT(1);
        int keyLAST_StartIndex = input.index();
        Object root_0 = null;

        Token ID1654=null;

        Object ID1654_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }
            // RPIExprAST.g:1460:34: ({...}? ID )
            // RPIExprAST.g:1460:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LAST"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLAST", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"LAST\")");
            }
            ID1654=(Token)match(input,ID,FOLLOW_ID_in_keyLAST14917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1654_tree = (Object)adaptor.create(ID1654);
            adaptor.addChild(root_0, ID1654_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 301, keyLAST_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLAST"

    public static class keyLEFT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLEFT"
    // RPIExprAST.g:1461:1: keyLEFT : {...}? ID ;
    public final RPIExprASTParser.keyLEFT_return keyLEFT() throws RecognitionException {
        RPIExprASTParser.keyLEFT_return retval = new RPIExprASTParser.keyLEFT_return();
        retval.start = input.LT(1);
        int keyLEFT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1655=null;

        Object ID1655_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }
            // RPIExprAST.g:1461:34: ({...}? ID )
            // RPIExprAST.g:1461:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LEFT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLEFT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"LEFT\")");
            }
            ID1655=(Token)match(input,ID,FOLLOW_ID_in_keyLEFT14951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1655_tree = (Object)adaptor.create(ID1655);
            adaptor.addChild(root_0, ID1655_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 302, keyLEFT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLEFT"

    public static class keyLIKE2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLIKE2"
    // RPIExprAST.g:1462:1: keyLIKE2 : {...}? ID ;
    public final RPIExprASTParser.keyLIKE2_return keyLIKE2() throws RecognitionException {
        RPIExprASTParser.keyLIKE2_return retval = new RPIExprASTParser.keyLIKE2_return();
        retval.start = input.LT(1);
        int keyLIKE2_StartIndex = input.index();
        Object root_0 = null;

        Token ID1656=null;

        Object ID1656_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }
            // RPIExprAST.g:1462:34: ({...}? ID )
            // RPIExprAST.g:1462:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LIKE2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE2", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"LIKE2\")");
            }
            ID1656=(Token)match(input,ID,FOLLOW_ID_in_keyLIKE214984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1656_tree = (Object)adaptor.create(ID1656);
            adaptor.addChild(root_0, ID1656_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 303, keyLIKE2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLIKE2"

    public static class keyLIKE4_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLIKE4"
    // RPIExprAST.g:1463:1: keyLIKE4 : {...}? ID ;
    public final RPIExprASTParser.keyLIKE4_return keyLIKE4() throws RecognitionException {
        RPIExprASTParser.keyLIKE4_return retval = new RPIExprASTParser.keyLIKE4_return();
        retval.start = input.LT(1);
        int keyLIKE4_StartIndex = input.index();
        Object root_0 = null;

        Token ID1657=null;

        Object ID1657_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }
            // RPIExprAST.g:1463:34: ({...}? ID )
            // RPIExprAST.g:1463:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LIKE4"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE4", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"LIKE4\")");
            }
            ID1657=(Token)match(input,ID,FOLLOW_ID_in_keyLIKE415017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1657_tree = (Object)adaptor.create(ID1657);
            adaptor.addChild(root_0, ID1657_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 304, keyLIKE4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLIKE4"

    public static class keyLIKEC_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLIKEC"
    // RPIExprAST.g:1464:1: keyLIKEC : {...}? ID ;
    public final RPIExprASTParser.keyLIKEC_return keyLIKEC() throws RecognitionException {
        RPIExprASTParser.keyLIKEC_return retval = new RPIExprASTParser.keyLIKEC_return();
        retval.start = input.LT(1);
        int keyLIKEC_StartIndex = input.index();
        Object root_0 = null;

        Token ID1658=null;

        Object ID1658_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }
            // RPIExprAST.g:1464:34: ({...}? ID )
            // RPIExprAST.g:1464:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LIKEC"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKEC", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"LIKEC\")");
            }
            ID1658=(Token)match(input,ID,FOLLOW_ID_in_keyLIKEC15050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1658_tree = (Object)adaptor.create(ID1658);
            adaptor.addChild(root_0, ID1658_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 305, keyLIKEC_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLIKEC"

    public static class keyLOCAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLOCAL"
    // RPIExprAST.g:1465:1: keyLOCAL : {...}? ID ;
    public final RPIExprASTParser.keyLOCAL_return keyLOCAL() throws RecognitionException {
        RPIExprASTParser.keyLOCAL_return retval = new RPIExprASTParser.keyLOCAL_return();
        retval.start = input.LT(1);
        int keyLOCAL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1659=null;

        Object ID1659_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }
            // RPIExprAST.g:1465:34: ({...}? ID )
            // RPIExprAST.g:1465:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "LOCAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLOCAL", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"LOCAL\")");
            }
            ID1659=(Token)match(input,ID,FOLLOW_ID_in_keyLOCAL15083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1659_tree = (Object)adaptor.create(ID1659);
            adaptor.addChild(root_0, ID1659_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 306, keyLOCAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLOCAL"

    public static class keyMAIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMAIN"
    // RPIExprAST.g:1466:1: keyMAIN : {...}? ID ;
    public final RPIExprASTParser.keyMAIN_return keyMAIN() throws RecognitionException {
        RPIExprASTParser.keyMAIN_return retval = new RPIExprASTParser.keyMAIN_return();
        retval.start = input.LT(1);
        int keyMAIN_StartIndex = input.index();
        Object root_0 = null;

        Token ID1660=null;

        Object ID1660_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }
            // RPIExprAST.g:1466:34: ({...}? ID )
            // RPIExprAST.g:1466:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "MAIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMAIN", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"MAIN\")");
            }
            ID1660=(Token)match(input,ID,FOLLOW_ID_in_keyMAIN15117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1660_tree = (Object)adaptor.create(ID1660);
            adaptor.addChild(root_0, ID1660_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 307, keyMAIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMAIN"

    public static class keyMEASURES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMEASURES"
    // RPIExprAST.g:1467:1: keyMEASURES : {...}? ID ;
    public final RPIExprASTParser.keyMEASURES_return keyMEASURES() throws RecognitionException {
        RPIExprASTParser.keyMEASURES_return retval = new RPIExprASTParser.keyMEASURES_return();
        retval.start = input.LT(1);
        int keyMEASURES_StartIndex = input.index();
        Object root_0 = null;

        Token ID1661=null;

        Object ID1661_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }
            // RPIExprAST.g:1467:34: ({...}? ID )
            // RPIExprAST.g:1467:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "MEASURES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEASURES", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"MEASURES\")");
            }
            ID1661=(Token)match(input,ID,FOLLOW_ID_in_keyMEASURES15147); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1661_tree = (Object)adaptor.create(ID1661);
            adaptor.addChild(root_0, ID1661_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 308, keyMEASURES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMEASURES"

    public static class keyMEMBER_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMEMBER"
    // RPIExprAST.g:1468:1: keyMEMBER : {...}? ID ;
    public final RPIExprASTParser.keyMEMBER_return keyMEMBER() throws RecognitionException {
        RPIExprASTParser.keyMEMBER_return retval = new RPIExprASTParser.keyMEMBER_return();
        retval.start = input.LT(1);
        int keyMEMBER_StartIndex = input.index();
        Object root_0 = null;

        Token ID1662=null;

        Object ID1662_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }
            // RPIExprAST.g:1468:34: ({...}? ID )
            // RPIExprAST.g:1468:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "MEMBER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEMBER", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"MEMBER\")");
            }
            ID1662=(Token)match(input,ID,FOLLOW_ID_in_keyMEMBER15179); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1662_tree = (Object)adaptor.create(ID1662);
            adaptor.addChild(root_0, ID1662_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 309, keyMEMBER_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMEMBER"

    public static class keyMODEL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMODEL"
    // RPIExprAST.g:1469:1: keyMODEL : {...}? ID ;
    public final RPIExprASTParser.keyMODEL_return keyMODEL() throws RecognitionException {
        RPIExprASTParser.keyMODEL_return retval = new RPIExprASTParser.keyMODEL_return();
        retval.start = input.LT(1);
        int keyMODEL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1663=null;

        Object ID1663_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }
            // RPIExprAST.g:1469:34: ({...}? ID )
            // RPIExprAST.g:1469:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "MODEL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMODEL", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"MODEL\")");
            }
            ID1663=(Token)match(input,ID,FOLLOW_ID_in_keyMODEL15212); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1663_tree = (Object)adaptor.create(ID1663);
            adaptor.addChild(root_0, ID1663_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 310, keyMODEL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMODEL"

    public static class keyMONTH_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMONTH"
    // RPIExprAST.g:1470:1: keyMONTH : {...}? ID ;
    public final RPIExprASTParser.keyMONTH_return keyMONTH() throws RecognitionException {
        RPIExprASTParser.keyMONTH_return retval = new RPIExprASTParser.keyMONTH_return();
        retval.start = input.LT(1);
        int keyMONTH_StartIndex = input.index();
        Object root_0 = null;

        Token ID1664=null;

        Object ID1664_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }
            // RPIExprAST.g:1470:34: ({...}? ID )
            // RPIExprAST.g:1470:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "MONTH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMONTH", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"MONTH\")");
            }
            ID1664=(Token)match(input,ID,FOLLOW_ID_in_keyMONTH15245); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1664_tree = (Object)adaptor.create(ID1664);
            adaptor.addChild(root_0, ID1664_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 311, keyMONTH_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMONTH"

    public static class keyNAN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNAN"
    // RPIExprAST.g:1471:1: keyNAN : {...}? ID ;
    public final RPIExprASTParser.keyNAN_return keyNAN() throws RecognitionException {
        RPIExprASTParser.keyNAN_return retval = new RPIExprASTParser.keyNAN_return();
        retval.start = input.LT(1);
        int keyNAN_StartIndex = input.index();
        Object root_0 = null;

        Token ID1665=null;

        Object ID1665_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }
            // RPIExprAST.g:1471:34: ({...}? ID )
            // RPIExprAST.g:1471:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NAN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAN", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NAN\")");
            }
            ID1665=(Token)match(input,ID,FOLLOW_ID_in_keyNAN15280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1665_tree = (Object)adaptor.create(ID1665);
            adaptor.addChild(root_0, ID1665_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 312, keyNAN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNAN"

    public static class keyNATURAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNATURAL"
    // RPIExprAST.g:1472:1: keyNATURAL : {...}? ID ;
    public final RPIExprASTParser.keyNATURAL_return keyNATURAL() throws RecognitionException {
        RPIExprASTParser.keyNATURAL_return retval = new RPIExprASTParser.keyNATURAL_return();
        retval.start = input.LT(1);
        int keyNATURAL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1666=null;

        Object ID1666_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }
            // RPIExprAST.g:1472:34: ({...}? ID )
            // RPIExprAST.g:1472:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNATURAL", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NATURAL\")");
            }
            ID1666=(Token)match(input,ID,FOLLOW_ID_in_keyNATURAL15311); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1666_tree = (Object)adaptor.create(ID1666);
            adaptor.addChild(root_0, ID1666_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 313, keyNATURAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNATURAL"

    public static class keyNAV_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNAV"
    // RPIExprAST.g:1473:1: keyNAV : {...}? ID ;
    public final RPIExprASTParser.keyNAV_return keyNAV() throws RecognitionException {
        RPIExprASTParser.keyNAV_return retval = new RPIExprASTParser.keyNAV_return();
        retval.start = input.LT(1);
        int keyNAV_StartIndex = input.index();
        Object root_0 = null;

        Token ID1667=null;

        Object ID1667_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }
            // RPIExprAST.g:1473:34: ({...}? ID )
            // RPIExprAST.g:1473:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NAV"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAV", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NAV\")");
            }
            ID1667=(Token)match(input,ID,FOLLOW_ID_in_keyNAV15346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1667_tree = (Object)adaptor.create(ID1667);
            adaptor.addChild(root_0, ID1667_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 314, keyNAV_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNAV"

    public static class keyNOCYCLE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNOCYCLE"
    // RPIExprAST.g:1474:1: keyNOCYCLE : {...}? ID ;
    public final RPIExprASTParser.keyNOCYCLE_return keyNOCYCLE() throws RecognitionException {
        RPIExprASTParser.keyNOCYCLE_return retval = new RPIExprASTParser.keyNOCYCLE_return();
        retval.start = input.LT(1);
        int keyNOCYCLE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1668=null;

        Object ID1668_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }
            // RPIExprAST.g:1474:34: ({...}? ID )
            // RPIExprAST.g:1474:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NOCYCLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNOCYCLE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NOCYCLE\")");
            }
            ID1668=(Token)match(input,ID,FOLLOW_ID_in_keyNOCYCLE15377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1668_tree = (Object)adaptor.create(ID1668);
            adaptor.addChild(root_0, ID1668_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 315, keyNOCYCLE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNOCYCLE"

    public static class keyNULLS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNULLS"
    // RPIExprAST.g:1475:1: keyNULLS : {...}? ID ;
    public final RPIExprASTParser.keyNULLS_return keyNULLS() throws RecognitionException {
        RPIExprASTParser.keyNULLS_return retval = new RPIExprASTParser.keyNULLS_return();
        retval.start = input.LT(1);
        int keyNULLS_StartIndex = input.index();
        Object root_0 = null;

        Token ID1669=null;

        Object ID1669_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }
            // RPIExprAST.g:1475:34: ({...}? ID )
            // RPIExprAST.g:1475:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NULLS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNULLS", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NULLS\")");
            }
            ID1669=(Token)match(input,ID,FOLLOW_ID_in_keyNULLS15410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1669_tree = (Object)adaptor.create(ID1669);
            adaptor.addChild(root_0, ID1669_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 316, keyNULLS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNULLS"

    public static class keyONLY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyONLY"
    // RPIExprAST.g:1476:1: keyONLY : {...}? ID ;
    public final RPIExprASTParser.keyONLY_return keyONLY() throws RecognitionException {
        RPIExprASTParser.keyONLY_return retval = new RPIExprASTParser.keyONLY_return();
        retval.start = input.LT(1);
        int keyONLY_StartIndex = input.index();
        Object root_0 = null;

        Token ID1670=null;

        Object ID1670_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }
            // RPIExprAST.g:1476:34: ({...}? ID )
            // RPIExprAST.g:1476:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ONLY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyONLY", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"ONLY\")");
            }
            ID1670=(Token)match(input,ID,FOLLOW_ID_in_keyONLY15444); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1670_tree = (Object)adaptor.create(ID1670);
            adaptor.addChild(root_0, ID1670_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 317, keyONLY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyONLY"

    public static class keyOUTER_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyOUTER"
    // RPIExprAST.g:1477:1: keyOUTER : {...}? ID ;
    public final RPIExprASTParser.keyOUTER_return keyOUTER() throws RecognitionException {
        RPIExprASTParser.keyOUTER_return retval = new RPIExprASTParser.keyOUTER_return();
        retval.start = input.LT(1);
        int keyOUTER_StartIndex = input.index();
        Object root_0 = null;

        Token ID1671=null;

        Object ID1671_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 318) ) { return retval; }
            // RPIExprAST.g:1477:34: ({...}? ID )
            // RPIExprAST.g:1477:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OUTER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOUTER", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"OUTER\")");
            }
            ID1671=(Token)match(input,ID,FOLLOW_ID_in_keyOUTER15477); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1671_tree = (Object)adaptor.create(ID1671);
            adaptor.addChild(root_0, ID1671_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 318, keyOUTER_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyOUTER"

    public static class keyPARTITION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPARTITION"
    // RPIExprAST.g:1478:1: keyPARTITION : {...}? ID ;
    public final RPIExprASTParser.keyPARTITION_return keyPARTITION() throws RecognitionException {
        RPIExprASTParser.keyPARTITION_return retval = new RPIExprASTParser.keyPARTITION_return();
        retval.start = input.LT(1);
        int keyPARTITION_StartIndex = input.index();
        Object root_0 = null;

        Token ID1672=null;

        Object ID1672_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 319) ) { return retval; }
            // RPIExprAST.g:1478:34: ({...}? ID )
            // RPIExprAST.g:1478:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPARTITION", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"PARTITION\")");
            }
            ID1672=(Token)match(input,ID,FOLLOW_ID_in_keyPARTITION15506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1672_tree = (Object)adaptor.create(ID1672);
            adaptor.addChild(root_0, ID1672_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 319, keyPARTITION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPARTITION"

    public static class keyPRECISION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPRECISION"
    // RPIExprAST.g:1479:1: keyPRECISION : {...}? ID ;
    public final RPIExprASTParser.keyPRECISION_return keyPRECISION() throws RecognitionException {
        RPIExprASTParser.keyPRECISION_return retval = new RPIExprASTParser.keyPRECISION_return();
        retval.start = input.LT(1);
        int keyPRECISION_StartIndex = input.index();
        Object root_0 = null;

        Token ID1673=null;

        Object ID1673_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 320) ) { return retval; }
            // RPIExprAST.g:1479:34: ({...}? ID )
            // RPIExprAST.g:1479:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PRECISION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRECISION", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"PRECISION\")");
            }
            ID1673=(Token)match(input,ID,FOLLOW_ID_in_keyPRECISION15535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1673_tree = (Object)adaptor.create(ID1673);
            adaptor.addChild(root_0, ID1673_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 320, keyPRECISION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPRECISION"

    public static class keyPRESENT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPRESENT"
    // RPIExprAST.g:1480:1: keyPRESENT : {...}? ID ;
    public final RPIExprASTParser.keyPRESENT_return keyPRESENT() throws RecognitionException {
        RPIExprASTParser.keyPRESENT_return retval = new RPIExprASTParser.keyPRESENT_return();
        retval.start = input.LT(1);
        int keyPRESENT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1674=null;

        Object ID1674_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 321) ) { return retval; }
            // RPIExprAST.g:1480:34: ({...}? ID )
            // RPIExprAST.g:1480:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PRESENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRESENT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"PRESENT\")");
            }
            ID1674=(Token)match(input,ID,FOLLOW_ID_in_keyPRESENT15566); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1674_tree = (Object)adaptor.create(ID1674);
            adaptor.addChild(root_0, ID1674_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 321, keyPRESENT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPRESENT"

    public static class keyREFERENCE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREFERENCE"
    // RPIExprAST.g:1481:1: keyREFERENCE : {...}? ID ;
    public final RPIExprASTParser.keyREFERENCE_return keyREFERENCE() throws RecognitionException {
        RPIExprASTParser.keyREFERENCE_return retval = new RPIExprASTParser.keyREFERENCE_return();
        retval.start = input.LT(1);
        int keyREFERENCE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1675=null;

        Object ID1675_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 322) ) { return retval; }
            // RPIExprAST.g:1481:34: ({...}? ID )
            // RPIExprAST.g:1481:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REFERENCE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREFERENCE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"REFERENCE\")");
            }
            ID1675=(Token)match(input,ID,FOLLOW_ID_in_keyREFERENCE15595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1675_tree = (Object)adaptor.create(ID1675);
            adaptor.addChild(root_0, ID1675_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 322, keyREFERENCE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREFERENCE"

    public static class keyREGEXP_LIKE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREGEXP_LIKE"
    // RPIExprAST.g:1482:1: keyREGEXP_LIKE : {...}? ID ;
    public final RPIExprASTParser.keyREGEXP_LIKE_return keyREGEXP_LIKE() throws RecognitionException {
        RPIExprASTParser.keyREGEXP_LIKE_return retval = new RPIExprASTParser.keyREGEXP_LIKE_return();
        retval.start = input.LT(1);
        int keyREGEXP_LIKE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1676=null;

        Object ID1676_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 323) ) { return retval; }
            // RPIExprAST.g:1482:34: ({...}? ID )
            // RPIExprAST.g:1482:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREGEXP_LIKE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"REGEXP_LIKE\")");
            }
            ID1676=(Token)match(input,ID,FOLLOW_ID_in_keyREGEXP_LIKE15622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1676_tree = (Object)adaptor.create(ID1676);
            adaptor.addChild(root_0, ID1676_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 323, keyREGEXP_LIKE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREGEXP_LIKE"

    public static class keyRIGHT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRIGHT"
    // RPIExprAST.g:1484:1: keyRIGHT : {...}? ID ;
    public final RPIExprASTParser.keyRIGHT_return keyRIGHT() throws RecognitionException {
        RPIExprASTParser.keyRIGHT_return retval = new RPIExprASTParser.keyRIGHT_return();
        retval.start = input.LT(1);
        int keyRIGHT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1677=null;

        Object ID1677_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 324) ) { return retval; }
            // RPIExprAST.g:1484:34: ({...}? ID )
            // RPIExprAST.g:1484:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRIGHT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"RIGHT\")");
            }
            ID1677=(Token)match(input,ID,FOLLOW_ID_in_keyRIGHT15656); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1677_tree = (Object)adaptor.create(ID1677);
            adaptor.addChild(root_0, ID1677_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 324, keyRIGHT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRIGHT"

    public static class keyROLLUP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyROLLUP"
    // RPIExprAST.g:1485:1: keyROLLUP : {...}? ID ;
    public final RPIExprASTParser.keyROLLUP_return keyROLLUP() throws RecognitionException {
        RPIExprASTParser.keyROLLUP_return retval = new RPIExprASTParser.keyROLLUP_return();
        retval.start = input.LT(1);
        int keyROLLUP_StartIndex = input.index();
        Object root_0 = null;

        Token ID1678=null;

        Object ID1678_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 325) ) { return retval; }
            // RPIExprAST.g:1485:34: ({...}? ID )
            // RPIExprAST.g:1485:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyROLLUP", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"ROLLUP\")");
            }
            ID1678=(Token)match(input,ID,FOLLOW_ID_in_keyROLLUP15688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1678_tree = (Object)adaptor.create(ID1678);
            adaptor.addChild(root_0, ID1678_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 325, keyROLLUP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyROLLUP"

    public static class keyRULES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRULES"
    // RPIExprAST.g:1486:1: keyRULES : {...}? ID ;
    public final RPIExprASTParser.keyRULES_return keyRULES() throws RecognitionException {
        RPIExprASTParser.keyRULES_return retval = new RPIExprASTParser.keyRULES_return();
        retval.start = input.LT(1);
        int keyRULES_StartIndex = input.index();
        Object root_0 = null;

        Token ID1679=null;

        Object ID1679_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 326) ) { return retval; }
            // RPIExprAST.g:1486:34: ({...}? ID )
            // RPIExprAST.g:1486:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RULES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRULES", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"RULES\")");
            }
            ID1679=(Token)match(input,ID,FOLLOW_ID_in_keyRULES15721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1679_tree = (Object)adaptor.create(ID1679);
            adaptor.addChild(root_0, ID1679_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 326, keyRULES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRULES"

    public static class keySECOND_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySECOND"
    // RPIExprAST.g:1487:1: keySECOND : {...}? ID ;
    public final RPIExprASTParser.keySECOND_return keySECOND() throws RecognitionException {
        RPIExprASTParser.keySECOND_return retval = new RPIExprASTParser.keySECOND_return();
        retval.start = input.LT(1);
        int keySECOND_StartIndex = input.index();
        Object root_0 = null;

        Token ID1680=null;

        Object ID1680_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 327) ) { return retval; }
            // RPIExprAST.g:1487:34: ({...}? ID )
            // RPIExprAST.g:1487:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SECOND"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECOND", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SECOND\")");
            }
            ID1680=(Token)match(input,ID,FOLLOW_ID_in_keySECOND15753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1680_tree = (Object)adaptor.create(ID1680);
            adaptor.addChild(root_0, ID1680_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 327, keySECOND_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySECOND"

    public static class keySECONDS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySECONDS"
    // RPIExprAST.g:1488:1: keySECONDS : {...}? ID ;
    public final RPIExprASTParser.keySECONDS_return keySECONDS() throws RecognitionException {
        RPIExprASTParser.keySECONDS_return retval = new RPIExprASTParser.keySECONDS_return();
        retval.start = input.LT(1);
        int keySECONDS_StartIndex = input.index();
        Object root_0 = null;

        Token ID1681=null;

        Object ID1681_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 328) ) { return retval; }
            // RPIExprAST.g:1488:34: ({...}? ID )
            // RPIExprAST.g:1488:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SECONDS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECONDS", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SECONDS\")");
            }
            ID1681=(Token)match(input,ID,FOLLOW_ID_in_keySECONDS15784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1681_tree = (Object)adaptor.create(ID1681);
            adaptor.addChild(root_0, ID1681_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 328, keySECONDS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySECONDS"

    public static class keySEQUENTIAL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySEQUENTIAL"
    // RPIExprAST.g:1489:1: keySEQUENTIAL : {...}? ID ;
    public final RPIExprASTParser.keySEQUENTIAL_return keySEQUENTIAL() throws RecognitionException {
        RPIExprASTParser.keySEQUENTIAL_return retval = new RPIExprASTParser.keySEQUENTIAL_return();
        retval.start = input.LT(1);
        int keySEQUENTIAL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1682=null;

        Object ID1682_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 329) ) { return retval; }
            // RPIExprAST.g:1489:34: ({...}? ID )
            // RPIExprAST.g:1489:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SEQUENTIAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySEQUENTIAL", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SEQUENTIAL\")");
            }
            ID1682=(Token)match(input,ID,FOLLOW_ID_in_keySEQUENTIAL15812); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1682_tree = (Object)adaptor.create(ID1682);
            adaptor.addChild(root_0, ID1682_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 329, keySEQUENTIAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySEQUENTIAL"

    public static class keySESSIONTIMEZONE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySESSIONTIMEZONE"
    // RPIExprAST.g:1490:1: keySESSIONTIMEZONE : {...}? ID ;
    public final RPIExprASTParser.keySESSIONTIMEZONE_return keySESSIONTIMEZONE() throws RecognitionException {
        RPIExprASTParser.keySESSIONTIMEZONE_return retval = new RPIExprASTParser.keySESSIONTIMEZONE_return();
        retval.start = input.LT(1);
        int keySESSIONTIMEZONE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1683=null;

        Object ID1683_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 330) ) { return retval; }
            // RPIExprAST.g:1490:34: ({...}? ID )
            // RPIExprAST.g:1490:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SESSIONTIMEZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySESSIONTIMEZONE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SESSIONTIMEZONE\")");
            }
            ID1683=(Token)match(input,ID,FOLLOW_ID_in_keySESSIONTIMEZONE15835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1683_tree = (Object)adaptor.create(ID1683);
            adaptor.addChild(root_0, ID1683_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 330, keySESSIONTIMEZONE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySESSIONTIMEZONE"

    public static class keySETS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySETS"
    // RPIExprAST.g:1491:1: keySETS : {...}? ID ;
    public final RPIExprASTParser.keySETS_return keySETS() throws RecognitionException {
        RPIExprASTParser.keySETS_return retval = new RPIExprASTParser.keySETS_return();
        retval.start = input.LT(1);
        int keySETS_StartIndex = input.index();
        Object root_0 = null;

        Token ID1684=null;

        Object ID1684_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 331) ) { return retval; }
            // RPIExprAST.g:1491:34: ({...}? ID )
            // RPIExprAST.g:1491:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SETS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySETS", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SETS\")");
            }
            ID1684=(Token)match(input,ID,FOLLOW_ID_in_keySETS15869); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1684_tree = (Object)adaptor.create(ID1684);
            adaptor.addChild(root_0, ID1684_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 331, keySETS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySETS"

    public static class keySIBLINGS_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySIBLINGS"
    // RPIExprAST.g:1492:1: keySIBLINGS : {...}? ID ;
    public final RPIExprASTParser.keySIBLINGS_return keySIBLINGS() throws RecognitionException {
        RPIExprASTParser.keySIBLINGS_return retval = new RPIExprASTParser.keySIBLINGS_return();
        retval.start = input.LT(1);
        int keySIBLINGS_StartIndex = input.index();
        Object root_0 = null;

        Token ID1685=null;

        Object ID1685_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 332) ) { return retval; }
            // RPIExprAST.g:1492:34: ({...}? ID )
            // RPIExprAST.g:1492:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SIBLINGS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySIBLINGS", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SIBLINGS\")");
            }
            ID1685=(Token)match(input,ID,FOLLOW_ID_in_keySIBLINGS15899); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1685_tree = (Object)adaptor.create(ID1685);
            adaptor.addChild(root_0, ID1685_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 332, keySIBLINGS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySIBLINGS"

    public static class keySINGLE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySINGLE"
    // RPIExprAST.g:1493:1: keySINGLE : {...}? ID ;
    public final RPIExprASTParser.keySINGLE_return keySINGLE() throws RecognitionException {
        RPIExprASTParser.keySINGLE_return retval = new RPIExprASTParser.keySINGLE_return();
        retval.start = input.LT(1);
        int keySINGLE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1686=null;

        Object ID1686_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 333) ) { return retval; }
            // RPIExprAST.g:1493:34: ({...}? ID )
            // RPIExprAST.g:1493:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SINGLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySINGLE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SINGLE\")");
            }
            ID1686=(Token)match(input,ID,FOLLOW_ID_in_keySINGLE15931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1686_tree = (Object)adaptor.create(ID1686);
            adaptor.addChild(root_0, ID1686_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 333, keySINGLE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySINGLE"

    public static class keySOME_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySOME"
    // RPIExprAST.g:1494:1: keySOME : {...}? ID ;
    public final RPIExprASTParser.keySOME_return keySOME() throws RecognitionException {
        RPIExprASTParser.keySOME_return retval = new RPIExprASTParser.keySOME_return();
        retval.start = input.LT(1);
        int keySOME_StartIndex = input.index();
        Object root_0 = null;

        Token ID1687=null;

        Object ID1687_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 334) ) { return retval; }
            // RPIExprAST.g:1494:34: ({...}? ID )
            // RPIExprAST.g:1494:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SOME"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySOME", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SOME\")");
            }
            ID1687=(Token)match(input,ID,FOLLOW_ID_in_keySOME15965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1687_tree = (Object)adaptor.create(ID1687);
            adaptor.addChild(root_0, ID1687_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 334, keySOME_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySOME"

    public static class keySUBMULTISET_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySUBMULTISET"
    // RPIExprAST.g:1495:1: keySUBMULTISET : {...}? ID ;
    public final RPIExprASTParser.keySUBMULTISET_return keySUBMULTISET() throws RecognitionException {
        RPIExprASTParser.keySUBMULTISET_return retval = new RPIExprASTParser.keySUBMULTISET_return();
        retval.start = input.LT(1);
        int keySUBMULTISET_StartIndex = input.index();
        Object root_0 = null;

        Token ID1688=null;

        Object ID1688_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 335) ) { return retval; }
            // RPIExprAST.g:1495:34: ({...}? ID )
            // RPIExprAST.g:1495:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SUBMULTISET"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBMULTISET", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SUBMULTISET\")");
            }
            ID1688=(Token)match(input,ID,FOLLOW_ID_in_keySUBMULTISET15992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1688_tree = (Object)adaptor.create(ID1688);
            adaptor.addChild(root_0, ID1688_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 335, keySUBMULTISET_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySUBMULTISET"

    public static class keyTIME_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTIME"
    // RPIExprAST.g:1496:1: keyTIME : {...}? ID ;
    public final RPIExprASTParser.keyTIME_return keyTIME() throws RecognitionException {
        RPIExprASTParser.keyTIME_return retval = new RPIExprASTParser.keyTIME_return();
        retval.start = input.LT(1);
        int keyTIME_StartIndex = input.index();
        Object root_0 = null;

        Token ID1689=null;

        Object ID1689_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 336) ) { return retval; }
            // RPIExprAST.g:1496:34: ({...}? ID )
            // RPIExprAST.g:1496:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIME"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIME", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"TIME\")");
            }
            ID1689=(Token)match(input,ID,FOLLOW_ID_in_keyTIME16026); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1689_tree = (Object)adaptor.create(ID1689);
            adaptor.addChild(root_0, ID1689_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 336, keyTIME_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTIME"

    public static class keyTIMESTAMP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTIMESTAMP"
    // RPIExprAST.g:1497:1: keyTIMESTAMP : {...}? ID ;
    public final RPIExprASTParser.keyTIMESTAMP_return keyTIMESTAMP() throws RecognitionException {
        RPIExprASTParser.keyTIMESTAMP_return retval = new RPIExprASTParser.keyTIMESTAMP_return();
        retval.start = input.LT(1);
        int keyTIMESTAMP_StartIndex = input.index();
        Object root_0 = null;

        Token ID1690=null;

        Object ID1690_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 337) ) { return retval; }
            // RPIExprAST.g:1497:34: ({...}? ID )
            // RPIExprAST.g:1497:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIMESTAMP", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"TIMESTAMP\")");
            }
            ID1690=(Token)match(input,ID,FOLLOW_ID_in_keyTIMESTAMP16055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1690_tree = (Object)adaptor.create(ID1690);
            adaptor.addChild(root_0, ID1690_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 337, keyTIMESTAMP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTIMESTAMP"

    public static class keyTHE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTHE"
    // RPIExprAST.g:1498:1: keyTHE : {...}? ID ;
    public final RPIExprASTParser.keyTHE_return keyTHE() throws RecognitionException {
        RPIExprASTParser.keyTHE_return retval = new RPIExprASTParser.keyTHE_return();
        retval.start = input.LT(1);
        int keyTHE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1691=null;

        Object ID1691_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 338) ) { return retval; }
            // RPIExprAST.g:1498:34: ({...}? ID )
            // RPIExprAST.g:1498:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "THE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTHE", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"THE\")");
            }
            ID1691=(Token)match(input,ID,FOLLOW_ID_in_keyTHE16090); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1691_tree = (Object)adaptor.create(ID1691);
            adaptor.addChild(root_0, ID1691_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 338, keyTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTHE"

    public static class keyUNDER_PATH_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUNDER_PATH"
    // RPIExprAST.g:1499:1: keyUNDER_PATH : {...}? ID ;
    public final RPIExprASTParser.keyUNDER_PATH_return keyUNDER_PATH() throws RecognitionException {
        RPIExprASTParser.keyUNDER_PATH_return retval = new RPIExprASTParser.keyUNDER_PATH_return();
        retval.start = input.LT(1);
        int keyUNDER_PATH_StartIndex = input.index();
        Object root_0 = null;

        Token ID1692=null;

        Object ID1692_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 339) ) { return retval; }
            // RPIExprAST.g:1499:34: ({...}? ID )
            // RPIExprAST.g:1499:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNDER_PATH", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"UNDER_PATH\")");
            }
            ID1692=(Token)match(input,ID,FOLLOW_ID_in_keyUNDER_PATH16118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1692_tree = (Object)adaptor.create(ID1692);
            adaptor.addChild(root_0, ID1692_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 339, keyUNDER_PATH_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUNDER_PATH"

    public static class keyUNTIL_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUNTIL"
    // RPIExprAST.g:1500:1: keyUNTIL : {...}? ID ;
    public final RPIExprASTParser.keyUNTIL_return keyUNTIL() throws RecognitionException {
        RPIExprASTParser.keyUNTIL_return retval = new RPIExprASTParser.keyUNTIL_return();
        retval.start = input.LT(1);
        int keyUNTIL_StartIndex = input.index();
        Object root_0 = null;

        Token ID1693=null;

        Object ID1693_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 340) ) { return retval; }
            // RPIExprAST.g:1500:34: ({...}? ID )
            // RPIExprAST.g:1500:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UNTIL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNTIL", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"UNTIL\")");
            }
            ID1693=(Token)match(input,ID,FOLLOW_ID_in_keyUNTIL16151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1693_tree = (Object)adaptor.create(ID1693);
            adaptor.addChild(root_0, ID1693_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 340, keyUNTIL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUNTIL"

    public static class keyUPDATED_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUPDATED"
    // RPIExprAST.g:1501:1: keyUPDATED : {...}? ID ;
    public final RPIExprASTParser.keyUPDATED_return keyUPDATED() throws RecognitionException {
        RPIExprASTParser.keyUPDATED_return retval = new RPIExprASTParser.keyUPDATED_return();
        retval.start = input.LT(1);
        int keyUPDATED_StartIndex = input.index();
        Object root_0 = null;

        Token ID1694=null;

        Object ID1694_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 341) ) { return retval; }
            // RPIExprAST.g:1501:34: ({...}? ID )
            // RPIExprAST.g:1501:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UPDATED"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPDATED", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"UPDATED\")");
            }
            ID1694=(Token)match(input,ID,FOLLOW_ID_in_keyUPDATED16182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1694_tree = (Object)adaptor.create(ID1694);
            adaptor.addChild(root_0, ID1694_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 341, keyUPDATED_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUPDATED"

    public static class keyUPSERT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUPSERT"
    // RPIExprAST.g:1502:1: keyUPSERT : {...}? ID ;
    public final RPIExprASTParser.keyUPSERT_return keyUPSERT() throws RecognitionException {
        RPIExprASTParser.keyUPSERT_return retval = new RPIExprASTParser.keyUPSERT_return();
        retval.start = input.LT(1);
        int keyUPSERT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1695=null;

        Object ID1695_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 342) ) { return retval; }
            // RPIExprAST.g:1502:34: ({...}? ID )
            // RPIExprAST.g:1502:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "UPSERT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPSERT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"UPSERT\")");
            }
            ID1695=(Token)match(input,ID,FOLLOW_ID_in_keyUPSERT16214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1695_tree = (Object)adaptor.create(ID1695);
            adaptor.addChild(root_0, ID1695_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 342, keyUPSERT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUPSERT"

    public static class keyWAIT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyWAIT"
    // RPIExprAST.g:1503:1: keyWAIT : {...}? ID ;
    public final RPIExprASTParser.keyWAIT_return keyWAIT() throws RecognitionException {
        RPIExprASTParser.keyWAIT_return retval = new RPIExprASTParser.keyWAIT_return();
        retval.start = input.LT(1);
        int keyWAIT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1696=null;

        Object ID1696_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 343) ) { return retval; }
            // RPIExprAST.g:1503:34: ({...}? ID )
            // RPIExprAST.g:1503:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "WAIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWAIT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"WAIT\")");
            }
            ID1696=(Token)match(input,ID,FOLLOW_ID_in_keyWAIT16248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1696_tree = (Object)adaptor.create(ID1696);
            adaptor.addChild(root_0, ID1696_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 343, keyWAIT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyWAIT"

    public static class keyYEAR_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyYEAR"
    // RPIExprAST.g:1504:1: keyYEAR : {...}? ID ;
    public final RPIExprASTParser.keyYEAR_return keyYEAR() throws RecognitionException {
        RPIExprASTParser.keyYEAR_return retval = new RPIExprASTParser.keyYEAR_return();
        retval.start = input.LT(1);
        int keyYEAR_StartIndex = input.index();
        Object root_0 = null;

        Token ID1697=null;

        Object ID1697_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 344) ) { return retval; }
            // RPIExprAST.g:1504:34: ({...}? ID )
            // RPIExprAST.g:1504:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "YEAR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyYEAR", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"YEAR\")");
            }
            ID1697=(Token)match(input,ID,FOLLOW_ID_in_keyYEAR16282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1697_tree = (Object)adaptor.create(ID1697);
            adaptor.addChild(root_0, ID1697_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 344, keyYEAR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyYEAR"

    public static class keyZONE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyZONE"
    // RPIExprAST.g:1505:1: keyZONE : {...}? ID ;
    public final RPIExprASTParser.keyZONE_return keyZONE() throws RecognitionException {
        RPIExprASTParser.keyZONE_return retval = new RPIExprASTParser.keyZONE_return();
        retval.start = input.LT(1);
        int keyZONE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1698=null;

        Object ID1698_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 345) ) { return retval; }
            // RPIExprAST.g:1505:34: ({...}? ID )
            // RPIExprAST.g:1505:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyZONE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"ZONE\")");
            }
            ID1698=(Token)match(input,ID,FOLLOW_ID_in_keyZONE16316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1698_tree = (Object)adaptor.create(ID1698);
            adaptor.addChild(root_0, ID1698_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 345, keyZONE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyZONE"

    public static class keyARRAY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyARRAY"
    // RPIExprAST.g:1507:1: keyARRAY : {...}? ID ;
    public final RPIExprASTParser.keyARRAY_return keyARRAY() throws RecognitionException {
        RPIExprASTParser.keyARRAY_return retval = new RPIExprASTParser.keyARRAY_return();
        retval.start = input.LT(1);
        int keyARRAY_StartIndex = input.index();
        Object root_0 = null;

        Token ID1699=null;

        Object ID1699_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 346) ) { return retval; }
            // RPIExprAST.g:1507:34: ({...}? ID )
            // RPIExprAST.g:1507:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "ARRAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyARRAY", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"ARRAY\")");
            }
            ID1699=(Token)match(input,ID,FOLLOW_ID_in_keyARRAY16350); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1699_tree = (Object)adaptor.create(ID1699);
            adaptor.addChild(root_0, ID1699_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 346, keyARRAY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyARRAY"

    public static class keyAUTONOMOUS_TRANSACTION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyAUTONOMOUS_TRANSACTION"
    // RPIExprAST.g:1508:1: keyAUTONOMOUS_TRANSACTION : {...}? ID ;
    public final RPIExprASTParser.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION() throws RecognitionException {
        RPIExprASTParser.keyAUTONOMOUS_TRANSACTION_return retval = new RPIExprASTParser.keyAUTONOMOUS_TRANSACTION_return();
        retval.start = input.LT(1);
        int keyAUTONOMOUS_TRANSACTION_StartIndex = input.index();
        Object root_0 = null;

        Token ID1700=null;

        Object ID1700_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 347) ) { return retval; }
            // RPIExprAST.g:1508:34: ({...}? ID )
            // RPIExprAST.g:1508:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "AUTONOMOUS_TRANSACTION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTONOMOUS_TRANSACTION", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"AUTONOMOUS_TRANSACTION\")");
            }
            ID1700=(Token)match(input,ID,FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION16366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1700_tree = (Object)adaptor.create(ID1700);
            adaptor.addChild(root_0, ID1700_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 347, keyAUTONOMOUS_TRANSACTION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyAUTONOMOUS_TRANSACTION"

    public static class keyBODY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBODY"
    // RPIExprAST.g:1509:1: keyBODY : {...}? ID ;
    public final RPIExprASTParser.keyBODY_return keyBODY() throws RecognitionException {
        RPIExprASTParser.keyBODY_return retval = new RPIExprASTParser.keyBODY_return();
        retval.start = input.LT(1);
        int keyBODY_StartIndex = input.index();
        Object root_0 = null;

        Token ID1701=null;

        Object ID1701_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 348) ) { return retval; }
            // RPIExprAST.g:1509:34: ({...}? ID )
            // RPIExprAST.g:1509:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BODY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBODY", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"BODY\")");
            }
            ID1701=(Token)match(input,ID,FOLLOW_ID_in_keyBODY16400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1701_tree = (Object)adaptor.create(ID1701);
            adaptor.addChild(root_0, ID1701_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 348, keyBODY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBODY"

    public static class keyBUILTIN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBUILTIN"
    // RPIExprAST.g:1510:1: keyBUILTIN : {...}? ID ;
    public final RPIExprASTParser.keyBUILTIN_return keyBUILTIN() throws RecognitionException {
        RPIExprASTParser.keyBUILTIN_return retval = new RPIExprASTParser.keyBUILTIN_return();
        retval.start = input.LT(1);
        int keyBUILTIN_StartIndex = input.index();
        Object root_0 = null;

        Token ID1702=null;

        Object ID1702_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 349) ) { return retval; }
            // RPIExprAST.g:1510:34: ({...}? ID )
            // RPIExprAST.g:1510:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBUILTIN", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"BUILTIN\")");
            }
            ID1702=(Token)match(input,ID,FOLLOW_ID_in_keyBUILTIN16431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1702_tree = (Object)adaptor.create(ID1702);
            adaptor.addChild(root_0, ID1702_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 349, keyBUILTIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBUILTIN"

    public static class keyBULK_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBULK"
    // RPIExprAST.g:1511:1: keyBULK : {...}? ID ;
    public final RPIExprASTParser.keyBULK_return keyBULK() throws RecognitionException {
        RPIExprASTParser.keyBULK_return retval = new RPIExprASTParser.keyBULK_return();
        retval.start = input.LT(1);
        int keyBULK_StartIndex = input.index();
        Object root_0 = null;

        Token ID1703=null;

        Object ID1703_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 350) ) { return retval; }
            // RPIExprAST.g:1511:34: ({...}? ID )
            // RPIExprAST.g:1511:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BULK"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBULK", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"BULK\")");
            }
            ID1703=(Token)match(input,ID,FOLLOW_ID_in_keyBULK16465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1703_tree = (Object)adaptor.create(ID1703);
            adaptor.addChild(root_0, ID1703_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 350, keyBULK_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBULK"

    public static class keyBYTE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBYTE"
    // RPIExprAST.g:1512:1: keyBYTE : {...}? ID ;
    public final RPIExprASTParser.keyBYTE_return keyBYTE() throws RecognitionException {
        RPIExprASTParser.keyBYTE_return retval = new RPIExprASTParser.keyBYTE_return();
        retval.start = input.LT(1);
        int keyBYTE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1704=null;

        Object ID1704_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 351) ) { return retval; }
            // RPIExprAST.g:1512:34: ({...}? ID )
            // RPIExprAST.g:1512:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BYTE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBYTE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"BYTE\")");
            }
            ID1704=(Token)match(input,ID,FOLLOW_ID_in_keyBYTE16499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1704_tree = (Object)adaptor.create(ID1704);
            adaptor.addChild(root_0, ID1704_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 351, keyBYTE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBYTE"

    public static class keyCLOSE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCLOSE"
    // RPIExprAST.g:1513:1: keyCLOSE : {...}? ID ;
    public final RPIExprASTParser.keyCLOSE_return keyCLOSE() throws RecognitionException {
        RPIExprASTParser.keyCLOSE_return retval = new RPIExprASTParser.keyCLOSE_return();
        retval.start = input.LT(1);
        int keyCLOSE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1705=null;

        Object ID1705_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 352) ) { return retval; }
            // RPIExprAST.g:1513:34: ({...}? ID )
            // RPIExprAST.g:1513:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCLOSE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"CLOSE\")");
            }
            ID1705=(Token)match(input,ID,FOLLOW_ID_in_keyCLOSE16532); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1705_tree = (Object)adaptor.create(ID1705);
            adaptor.addChild(root_0, ID1705_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 352, keyCLOSE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCLOSE"

    public static class keyCOLLECT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCOLLECT"
    // RPIExprAST.g:1514:1: keyCOLLECT : {...}? ID ;
    public final RPIExprASTParser.keyCOLLECT_return keyCOLLECT() throws RecognitionException {
        RPIExprASTParser.keyCOLLECT_return retval = new RPIExprASTParser.keyCOLLECT_return();
        retval.start = input.LT(1);
        int keyCOLLECT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1706=null;

        Object ID1706_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 353) ) { return retval; }
            // RPIExprAST.g:1514:34: ({...}? ID )
            // RPIExprAST.g:1514:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COLLECT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOLLECT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"COLLECT\")");
            }
            ID1706=(Token)match(input,ID,FOLLOW_ID_in_keyCOLLECT16563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1706_tree = (Object)adaptor.create(ID1706);
            adaptor.addChild(root_0, ID1706_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 353, keyCOLLECT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCOLLECT"

    public static class keyCURSOR_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCURSOR"
    // RPIExprAST.g:1515:1: keyCURSOR : {...}? ID ;
    public final RPIExprASTParser.keyCURSOR_return keyCURSOR() throws RecognitionException {
        RPIExprASTParser.keyCURSOR_return retval = new RPIExprASTParser.keyCURSOR_return();
        retval.start = input.LT(1);
        int keyCURSOR_StartIndex = input.index();
        Object root_0 = null;

        Token ID1707=null;

        Object ID1707_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 354) ) { return retval; }
            // RPIExprAST.g:1515:34: ({...}? ID )
            // RPIExprAST.g:1515:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURSOR", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"CURSOR\")");
            }
            ID1707=(Token)match(input,ID,FOLLOW_ID_in_keyCURSOR16595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1707_tree = (Object)adaptor.create(ID1707);
            adaptor.addChild(root_0, ID1707_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 354, keyCURSOR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCURSOR"

    public static class keyELSIF_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyELSIF"
    // RPIExprAST.g:1516:1: keyELSIF : 'ELSIF' ;
    public final RPIExprASTParser.keyELSIF_return keyELSIF() throws RecognitionException {
        RPIExprASTParser.keyELSIF_return retval = new RPIExprASTParser.keyELSIF_return();
        retval.start = input.LT(1);
        int keyELSIF_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1708=null;

        Object string_literal1708_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 355) ) { return retval; }
            // RPIExprAST.g:1516:34: ( 'ELSIF' )
            // RPIExprAST.g:1516:36: 'ELSIF'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1708=(Token)match(input,213,FOLLOW_213_in_keyELSIF16626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1708_tree = (Object)adaptor.create(string_literal1708);
            adaptor.addChild(root_0, string_literal1708_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 355, keyELSIF_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyELSIF"

    public static class keyEXCEPTION_INIT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEXCEPTION_INIT"
    // RPIExprAST.g:1517:1: keyEXCEPTION_INIT : {...}? ID ;
    public final RPIExprASTParser.keyEXCEPTION_INIT_return keyEXCEPTION_INIT() throws RecognitionException {
        RPIExprASTParser.keyEXCEPTION_INIT_return retval = new RPIExprASTParser.keyEXCEPTION_INIT_return();
        retval.start = input.LT(1);
        int keyEXCEPTION_INIT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1709=null;

        Object ID1709_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 356) ) { return retval; }
            // RPIExprAST.g:1517:34: ({...}? ID )
            // RPIExprAST.g:1517:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EXCEPTION_INIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXCEPTION_INIT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"EXCEPTION_INIT\")");
            }
            ID1709=(Token)match(input,ID,FOLLOW_ID_in_keyEXCEPTION_INIT16651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1709_tree = (Object)adaptor.create(ID1709);
            adaptor.addChild(root_0, ID1709_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 356, keyEXCEPTION_INIT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEXCEPTION_INIT"

    public static class keyEXIT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEXIT"
    // RPIExprAST.g:1518:1: keyEXIT : {...}? ID ;
    public final RPIExprASTParser.keyEXIT_return keyEXIT() throws RecognitionException {
        RPIExprASTParser.keyEXIT_return retval = new RPIExprASTParser.keyEXIT_return();
        retval.start = input.LT(1);
        int keyEXIT_StartIndex = input.index();
        Object root_0 = null;

        Token ID1710=null;

        Object ID1710_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 357) ) { return retval; }
            // RPIExprAST.g:1518:34: ({...}? ID )
            // RPIExprAST.g:1518:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EXIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXIT", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"EXIT\")");
            }
            ID1710=(Token)match(input,ID,FOLLOW_ID_in_keyEXIT16685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1710_tree = (Object)adaptor.create(ID1710);
            adaptor.addChild(root_0, ID1710_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 357, keyEXIT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEXIT"

    public static class keyFIPSFLAG_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFIPSFLAG"
    // RPIExprAST.g:1519:1: keyFIPSFLAG : {...}? ID ;
    public final RPIExprASTParser.keyFIPSFLAG_return keyFIPSFLAG() throws RecognitionException {
        RPIExprASTParser.keyFIPSFLAG_return retval = new RPIExprASTParser.keyFIPSFLAG_return();
        retval.start = input.LT(1);
        int keyFIPSFLAG_StartIndex = input.index();
        Object root_0 = null;

        Token ID1711=null;

        Object ID1711_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 358) ) { return retval; }
            // RPIExprAST.g:1519:34: ({...}? ID )
            // RPIExprAST.g:1519:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIPSFLAG", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"FIPSFLAG\")");
            }
            ID1711=(Token)match(input,ID,FOLLOW_ID_in_keyFIPSFLAG16715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1711_tree = (Object)adaptor.create(ID1711);
            adaptor.addChild(root_0, ID1711_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 358, keyFIPSFLAG_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFIPSFLAG"

    public static class keyFUNCTION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFUNCTION"
    // RPIExprAST.g:1520:1: keyFUNCTION : 'FUNCTION' ;
    public final RPIExprASTParser.keyFUNCTION_return keyFUNCTION() throws RecognitionException {
        RPIExprASTParser.keyFUNCTION_return retval = new RPIExprASTParser.keyFUNCTION_return();
        retval.start = input.LT(1);
        int keyFUNCTION_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1712=null;

        Object string_literal1712_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 359) ) { return retval; }
            // RPIExprAST.g:1520:34: ( 'FUNCTION' )
            // RPIExprAST.g:1520:36: 'FUNCTION'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1712=(Token)match(input,162,FOLLOW_162_in_keyFUNCTION16743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1712_tree = (Object)adaptor.create(string_literal1712);
            adaptor.addChild(root_0, string_literal1712_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 359, keyFUNCTION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFUNCTION"

    public static class keyINTERFACE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINTERFACE"
    // RPIExprAST.g:1521:1: keyINTERFACE : {...}? ID ;
    public final RPIExprASTParser.keyINTERFACE_return keyINTERFACE() throws RecognitionException {
        RPIExprASTParser.keyINTERFACE_return retval = new RPIExprASTParser.keyINTERFACE_return();
        retval.start = input.LT(1);
        int keyINTERFACE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1713=null;

        Object ID1713_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 360) ) { return retval; }
            // RPIExprAST.g:1521:34: ({...}? ID )
            // RPIExprAST.g:1521:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERFACE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"INTERFACE\")");
            }
            ID1713=(Token)match(input,ID,FOLLOW_ID_in_keyINTERFACE16773); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1713_tree = (Object)adaptor.create(ID1713);
            adaptor.addChild(root_0, ID1713_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 360, keyINTERFACE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINTERFACE"

    public static class keyLOOP_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLOOP"
    // RPIExprAST.g:1522:1: keyLOOP : 'LOOP' ;
    public final RPIExprASTParser.keyLOOP_return keyLOOP() throws RecognitionException {
        RPIExprASTParser.keyLOOP_return retval = new RPIExprASTParser.keyLOOP_return();
        retval.start = input.LT(1);
        int keyLOOP_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1714=null;

        Object string_literal1714_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 361) ) { return retval; }
            // RPIExprAST.g:1522:34: ( 'LOOP' )
            // RPIExprAST.g:1522:36: 'LOOP'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1714=(Token)match(input,214,FOLLOW_214_in_keyLOOP16805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1714_tree = (Object)adaptor.create(string_literal1714);
            adaptor.addChild(root_0, string_literal1714_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 361, keyLOOP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLOOP"

    public static class keyNEW_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNEW"
    // RPIExprAST.g:1523:1: keyNEW : {...}? ID ;
    public final RPIExprASTParser.keyNEW_return keyNEW() throws RecognitionException {
        RPIExprASTParser.keyNEW_return retval = new RPIExprASTParser.keyNEW_return();
        retval.start = input.LT(1);
        int keyNEW_StartIndex = input.index();
        Object root_0 = null;

        Token ID1715=null;

        Object ID1715_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 362) ) { return retval; }
            // RPIExprAST.g:1523:34: ({...}? ID )
            // RPIExprAST.g:1523:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NEW"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NEW\")");
            }
            ID1715=(Token)match(input,ID,FOLLOW_ID_in_keyNEW16841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1715_tree = (Object)adaptor.create(ID1715);
            adaptor.addChild(root_0, ID1715_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 362, keyNEW_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNEW"

    public static class keyNEW_NAMES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNEW_NAMES"
    // RPIExprAST.g:1524:1: keyNEW_NAMES : {...}? ID ;
    public final RPIExprASTParser.keyNEW_NAMES_return keyNEW_NAMES() throws RecognitionException {
        RPIExprASTParser.keyNEW_NAMES_return retval = new RPIExprASTParser.keyNEW_NAMES_return();
        retval.start = input.LT(1);
        int keyNEW_NAMES_StartIndex = input.index();
        Object root_0 = null;

        Token ID1716=null;

        Object ID1716_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 363) ) { return retval; }
            // RPIExprAST.g:1524:34: ({...}? ID )
            // RPIExprAST.g:1524:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW_NAMES", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"NEW_NAMES\")");
            }
            ID1716=(Token)match(input,ID,FOLLOW_ID_in_keyNEW_NAMES16870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1716_tree = (Object)adaptor.create(ID1716);
            adaptor.addChild(root_0, ID1716_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 363, keyNEW_NAMES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNEW_NAMES"

    public static class keyOPEN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyOPEN"
    // RPIExprAST.g:1525:1: keyOPEN : {...}? ID ;
    public final RPIExprASTParser.keyOPEN_return keyOPEN() throws RecognitionException {
        RPIExprASTParser.keyOPEN_return retval = new RPIExprASTParser.keyOPEN_return();
        retval.start = input.LT(1);
        int keyOPEN_StartIndex = input.index();
        Object root_0 = null;

        Token ID1717=null;

        Object ID1717_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 364) ) { return retval; }
            // RPIExprAST.g:1525:34: ({...}? ID )
            // RPIExprAST.g:1525:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "OPEN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOPEN", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"OPEN\")");
            }
            ID1717=(Token)match(input,ID,FOLLOW_ID_in_keyOPEN16904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1717_tree = (Object)adaptor.create(ID1717);
            adaptor.addChild(root_0, ID1717_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 364, keyOPEN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyOPEN"

    public static class keyOUT_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyOUT"
    // RPIExprAST.g:1526:1: keyOUT : 'OUT' ;
    public final RPIExprASTParser.keyOUT_return keyOUT() throws RecognitionException {
        RPIExprASTParser.keyOUT_return retval = new RPIExprASTParser.keyOUT_return();
        retval.start = input.LT(1);
        int keyOUT_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1718=null;

        Object string_literal1718_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 365) ) { return retval; }
            // RPIExprAST.g:1526:34: ( 'OUT' )
            // RPIExprAST.g:1526:36: 'OUT'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1718=(Token)match(input,215,FOLLOW_215_in_keyOUT16937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1718_tree = (Object)adaptor.create(string_literal1718);
            adaptor.addChild(root_0, string_literal1718_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 365, keyOUT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyOUT"

    public static class keyPACKAGE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPACKAGE"
    // RPIExprAST.g:1527:1: keyPACKAGE : 'PACKAGE' ;
    public final RPIExprASTParser.keyPACKAGE_return keyPACKAGE() throws RecognitionException {
        RPIExprASTParser.keyPACKAGE_return retval = new RPIExprASTParser.keyPACKAGE_return();
        retval.start = input.LT(1);
        int keyPACKAGE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1719=null;

        Object string_literal1719_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 366) ) { return retval; }
            // RPIExprAST.g:1527:34: ( 'PACKAGE' )
            // RPIExprAST.g:1527:36: 'PACKAGE'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1719=(Token)match(input,216,FOLLOW_216_in_keyPACKAGE16967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1719_tree = (Object)adaptor.create(string_literal1719);
            adaptor.addChild(root_0, string_literal1719_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 366, keyPACKAGE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPACKAGE"

    public static class keyPRAGMA_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPRAGMA"
    // RPIExprAST.g:1528:1: keyPRAGMA : 'PRAGMA' ;
    public final RPIExprASTParser.keyPRAGMA_return keyPRAGMA() throws RecognitionException {
        RPIExprASTParser.keyPRAGMA_return retval = new RPIExprASTParser.keyPRAGMA_return();
        retval.start = input.LT(1);
        int keyPRAGMA_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1720=null;

        Object string_literal1720_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 367) ) { return retval; }
            // RPIExprAST.g:1528:34: ( 'PRAGMA' )
            // RPIExprAST.g:1528:36: 'PRAGMA'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1720=(Token)match(input,217,FOLLOW_217_in_keyPRAGMA16998); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1720_tree = (Object)adaptor.create(string_literal1720);
            adaptor.addChild(root_0, string_literal1720_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 367, keyPRAGMA_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPRAGMA"

    public static class keyRAISE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRAISE"
    // RPIExprAST.g:1529:1: keyRAISE : 'RAISE' ;
    public final RPIExprASTParser.keyRAISE_return keyRAISE() throws RecognitionException {
        RPIExprASTParser.keyRAISE_return retval = new RPIExprASTParser.keyRAISE_return();
        retval.start = input.LT(1);
        int keyRAISE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1721=null;

        Object string_literal1721_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 368) ) { return retval; }
            // RPIExprAST.g:1529:34: ( 'RAISE' )
            // RPIExprAST.g:1529:36: 'RAISE'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1721=(Token)match(input,218,FOLLOW_218_in_keyRAISE17030); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1721_tree = (Object)adaptor.create(string_literal1721);
            adaptor.addChild(root_0, string_literal1721_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 368, keyRAISE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRAISE"

    public static class keyRANGE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRANGE"
    // RPIExprAST.g:1530:1: keyRANGE : {...}? ID ;
    public final RPIExprASTParser.keyRANGE_return keyRANGE() throws RecognitionException {
        RPIExprASTParser.keyRANGE_return retval = new RPIExprASTParser.keyRANGE_return();
        retval.start = input.LT(1);
        int keyRANGE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1722=null;

        Object ID1722_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 369) ) { return retval; }
            // RPIExprAST.g:1530:34: ({...}? ID )
            // RPIExprAST.g:1530:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RANGE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRANGE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"RANGE\")");
            }
            ID1722=(Token)match(input,ID,FOLLOW_ID_in_keyRANGE17064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1722_tree = (Object)adaptor.create(ID1722);
            adaptor.addChild(root_0, ID1722_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 369, keyRANGE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRANGE"

    public static class keyREAD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREAD"
    // RPIExprAST.g:1531:1: keyREAD : {...}? ID ;
    public final RPIExprASTParser.keyREAD_return keyREAD() throws RecognitionException {
        RPIExprASTParser.keyREAD_return retval = new RPIExprASTParser.keyREAD_return();
        retval.start = input.LT(1);
        int keyREAD_StartIndex = input.index();
        Object root_0 = null;

        Token ID1723=null;

        Object ID1723_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 370) ) { return retval; }
            // RPIExprAST.g:1531:34: ({...}? ID )
            // RPIExprAST.g:1531:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "READ"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREAD", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"READ\")");
            }
            ID1723=(Token)match(input,ID,FOLLOW_ID_in_keyREAD17098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1723_tree = (Object)adaptor.create(ID1723);
            adaptor.addChild(root_0, ID1723_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 370, keyREAD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREAD"

    public static class keyRECORD_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRECORD"
    // RPIExprAST.g:1532:1: keyRECORD : 'RECORD' ;
    public final RPIExprASTParser.keyRECORD_return keyRECORD() throws RecognitionException {
        RPIExprASTParser.keyRECORD_return retval = new RPIExprASTParser.keyRECORD_return();
        retval.start = input.LT(1);
        int keyRECORD_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1724=null;

        Object string_literal1724_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 371) ) { return retval; }
            // RPIExprAST.g:1532:34: ( 'RECORD' )
            // RPIExprAST.g:1532:36: 'RECORD'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1724=(Token)match(input,219,FOLLOW_219_in_keyRECORD17128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1724_tree = (Object)adaptor.create(string_literal1724);
            adaptor.addChild(root_0, string_literal1724_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 371, keyRECORD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRECORD"

    public static class keyREF_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREF"
    // RPIExprAST.g:1533:1: keyREF : {...}? ID ;
    public final RPIExprASTParser.keyREF_return keyREF() throws RecognitionException {
        RPIExprASTParser.keyREF_return retval = new RPIExprASTParser.keyREF_return();
        retval.start = input.LT(1);
        int keyREF_StartIndex = input.index();
        Object root_0 = null;

        Token ID1725=null;

        Object ID1725_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 372) ) { return retval; }
            // RPIExprAST.g:1533:34: ({...}? ID )
            // RPIExprAST.g:1533:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REF"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREF", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"REF\")");
            }
            ID1725=(Token)match(input,ID,FOLLOW_ID_in_keyREF17164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1725_tree = (Object)adaptor.create(ID1725);
            adaptor.addChild(root_0, ID1725_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 372, keyREF_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREF"

    public static class keyREPLACE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREPLACE"
    // RPIExprAST.g:1534:1: keyREPLACE : {...}? ID ;
    public final RPIExprASTParser.keyREPLACE_return keyREPLACE() throws RecognitionException {
        RPIExprASTParser.keyREPLACE_return retval = new RPIExprASTParser.keyREPLACE_return();
        retval.start = input.LT(1);
        int keyREPLACE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1726=null;

        Object ID1726_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 373) ) { return retval; }
            // RPIExprAST.g:1534:34: ({...}? ID )
            // RPIExprAST.g:1534:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REPLACE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREPLACE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"REPLACE\")");
            }
            ID1726=(Token)match(input,ID,FOLLOW_ID_in_keyREPLACE17195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1726_tree = (Object)adaptor.create(ID1726);
            adaptor.addChild(root_0, ID1726_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 373, keyREPLACE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREPLACE"

    public static class keyRESTRICT_REFERENCES_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRESTRICT_REFERENCES"
    // RPIExprAST.g:1535:1: keyRESTRICT_REFERENCES : {...}? ID ;
    public final RPIExprASTParser.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES() throws RecognitionException {
        RPIExprASTParser.keyRESTRICT_REFERENCES_return retval = new RPIExprASTParser.keyRESTRICT_REFERENCES_return();
        retval.start = input.LT(1);
        int keyRESTRICT_REFERENCES_StartIndex = input.index();
        Object root_0 = null;

        Token ID1727=null;

        Object ID1727_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 374) ) { return retval; }
            // RPIExprAST.g:1535:34: ({...}? ID )
            // RPIExprAST.g:1535:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RESTRICT_REFERENCES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRESTRICT_REFERENCES", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"RESTRICT_REFERENCES\")");
            }
            ID1727=(Token)match(input,ID,FOLLOW_ID_in_keyRESTRICT_REFERENCES17214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1727_tree = (Object)adaptor.create(ID1727);
            adaptor.addChild(root_0, ID1727_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 374, keyRESTRICT_REFERENCES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRESTRICT_REFERENCES"

    public static class keyRETURN_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRETURN"
    // RPIExprAST.g:1536:1: keyRETURN : 'RETURN' ;
    public final RPIExprASTParser.keyRETURN_return keyRETURN() throws RecognitionException {
        RPIExprASTParser.keyRETURN_return retval = new RPIExprASTParser.keyRETURN_return();
        retval.start = input.LT(1);
        int keyRETURN_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1728=null;

        Object string_literal1728_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 375) ) { return retval; }
            // RPIExprAST.g:1536:34: ( 'RETURN' )
            // RPIExprAST.g:1536:36: 'RETURN'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1728=(Token)match(input,220,FOLLOW_220_in_keyRETURN17244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1728_tree = (Object)adaptor.create(string_literal1728);
            adaptor.addChild(root_0, string_literal1728_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 375, keyRETURN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRETURN"

    public static class keyRETURNING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRETURNING"
    // RPIExprAST.g:1537:1: keyRETURNING : 'RETURNING' ;
    public final RPIExprASTParser.keyRETURNING_return keyRETURNING() throws RecognitionException {
        RPIExprASTParser.keyRETURNING_return retval = new RPIExprASTParser.keyRETURNING_return();
        retval.start = input.LT(1);
        int keyRETURNING_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1729=null;

        Object string_literal1729_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 376) ) { return retval; }
            // RPIExprAST.g:1537:34: ( 'RETURNING' )
            // RPIExprAST.g:1537:36: 'RETURNING'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1729=(Token)match(input,221,FOLLOW_221_in_keyRETURNING17272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1729_tree = (Object)adaptor.create(string_literal1729);
            adaptor.addChild(root_0, string_literal1729_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 376, keyRETURNING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRETURNING"

    public static class keyREVERSE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREVERSE"
    // RPIExprAST.g:1538:1: keyREVERSE : {...}? ID ;
    public final RPIExprASTParser.keyREVERSE_return keyREVERSE() throws RecognitionException {
        RPIExprASTParser.keyREVERSE_return retval = new RPIExprASTParser.keyREVERSE_return();
        retval.start = input.LT(1);
        int keyREVERSE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1730=null;

        Object ID1730_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 377) ) { return retval; }
            // RPIExprAST.g:1538:34: ({...}? ID )
            // RPIExprAST.g:1538:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "REVERSE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREVERSE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"REVERSE\")");
            }
            ID1730=(Token)match(input,ID,FOLLOW_ID_in_keyREVERSE17304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1730_tree = (Object)adaptor.create(ID1730);
            adaptor.addChild(root_0, ID1730_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 377, keyREVERSE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREVERSE"

    public static class keyROLLBACK_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyROLLBACK"
    // RPIExprAST.g:1539:1: keyROLLBACK : 'ROLLBACK' ;
    public final RPIExprASTParser.keyROLLBACK_return keyROLLBACK() throws RecognitionException {
        RPIExprASTParser.keyROLLBACK_return retval = new RPIExprASTParser.keyROLLBACK_return();
        retval.start = input.LT(1);
        int keyROLLBACK_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1731=null;

        Object string_literal1731_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 378) ) { return retval; }
            // RPIExprAST.g:1539:34: ( 'ROLLBACK' )
            // RPIExprAST.g:1539:36: 'ROLLBACK'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1731=(Token)match(input,222,FOLLOW_222_in_keyROLLBACK17332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1731_tree = (Object)adaptor.create(string_literal1731);
            adaptor.addChild(root_0, string_literal1731_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 378, keyROLLBACK_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyROLLBACK"

    public static class keySERIALLY_REUSABLE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySERIALLY_REUSABLE"
    // RPIExprAST.g:1540:1: keySERIALLY_REUSABLE : {...}? ID ;
    public final RPIExprASTParser.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE() throws RecognitionException {
        RPIExprASTParser.keySERIALLY_REUSABLE_return retval = new RPIExprASTParser.keySERIALLY_REUSABLE_return();
        retval.start = input.LT(1);
        int keySERIALLY_REUSABLE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1732=null;

        Object ID1732_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 379) ) { return retval; }
            // RPIExprAST.g:1540:34: ({...}? ID )
            // RPIExprAST.g:1540:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SERIALLY_REUSABLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySERIALLY_REUSABLE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SERIALLY_REUSABLE\")");
            }
            ID1732=(Token)match(input,ID,FOLLOW_ID_in_keySERIALLY_REUSABLE17354); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1732_tree = (Object)adaptor.create(ID1732);
            adaptor.addChild(root_0, ID1732_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 379, keySERIALLY_REUSABLE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySERIALLY_REUSABLE"

    public static class keySUBTYPE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySUBTYPE"
    // RPIExprAST.g:1541:1: keySUBTYPE : {...}? ID ;
    public final RPIExprASTParser.keySUBTYPE_return keySUBTYPE() throws RecognitionException {
        RPIExprASTParser.keySUBTYPE_return retval = new RPIExprASTParser.keySUBTYPE_return();
        retval.start = input.LT(1);
        int keySUBTYPE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1733=null;

        Object ID1733_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 380) ) { return retval; }
            // RPIExprAST.g:1541:34: ({...}? ID )
            // RPIExprAST.g:1541:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBTYPE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SUBTYPE\")");
            }
            ID1733=(Token)match(input,ID,FOLLOW_ID_in_keySUBTYPE17385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1733_tree = (Object)adaptor.create(ID1733);
            adaptor.addChild(root_0, ID1733_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 380, keySUBTYPE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySUBTYPE"

    public static class keyTRANSACTION_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTRANSACTION"
    // RPIExprAST.g:1542:1: keyTRANSACTION : {...}? ID ;
    public final RPIExprASTParser.keyTRANSACTION_return keyTRANSACTION() throws RecognitionException {
        RPIExprASTParser.keyTRANSACTION_return retval = new RPIExprASTParser.keyTRANSACTION_return();
        retval.start = input.LT(1);
        int keyTRANSACTION_StartIndex = input.index();
        Object root_0 = null;

        Token ID1734=null;

        Object ID1734_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 381) ) { return retval; }
            // RPIExprAST.g:1542:34: ({...}? ID )
            // RPIExprAST.g:1542:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRANSACTION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTRANSACTION", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"TRANSACTION\")");
            }
            ID1734=(Token)match(input,ID,FOLLOW_ID_in_keyTRANSACTION17412); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1734_tree = (Object)adaptor.create(ID1734);
            adaptor.addChild(root_0, ID1734_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 381, keyTRANSACTION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTRANSACTION"

    public static class keyTYPE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTYPE"
    // RPIExprAST.g:1543:1: keyTYPE : {...}? ID ;
    public final RPIExprASTParser.keyTYPE_return keyTYPE() throws RecognitionException {
        RPIExprASTParser.keyTYPE_return retval = new RPIExprASTParser.keyTYPE_return();
        retval.start = input.LT(1);
        int keyTYPE_StartIndex = input.index();
        Object root_0 = null;

        Token ID1735=null;

        Object ID1735_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 382) ) { return retval; }
            // RPIExprAST.g:1543:34: ({...}? ID )
            // RPIExprAST.g:1543:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTYPE", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"TYPE\")");
            }
            ID1735=(Token)match(input,ID,FOLLOW_ID_in_keyTYPE17446); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1735_tree = (Object)adaptor.create(ID1735);
            adaptor.addChild(root_0, ID1735_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 382, keyTYPE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTYPE"

    public static class keyUSING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUSING"
    // RPIExprAST.g:1544:1: keyUSING : {...}? ID ;
    public final RPIExprASTParser.keyUSING_return keyUSING() throws RecognitionException {
        RPIExprASTParser.keyUSING_return retval = new RPIExprASTParser.keyUSING_return();
        retval.start = input.LT(1);
        int keyUSING_StartIndex = input.index();
        Object root_0 = null;

        Token ID1736=null;

        Object ID1736_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 383) ) { return retval; }
            // RPIExprAST.g:1544:34: ({...}? ID )
            // RPIExprAST.g:1544:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "USING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUSING", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"USING\")");
            }
            ID1736=(Token)match(input,ID,FOLLOW_ID_in_keyUSING17479); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1736_tree = (Object)adaptor.create(ID1736);
            adaptor.addChild(root_0, ID1736_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 383, keyUSING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUSING"

    public static class keyVARRAY_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyVARRAY"
    // RPIExprAST.g:1545:1: keyVARRAY : {...}? ID ;
    public final RPIExprASTParser.keyVARRAY_return keyVARRAY() throws RecognitionException {
        RPIExprASTParser.keyVARRAY_return retval = new RPIExprASTParser.keyVARRAY_return();
        retval.start = input.LT(1);
        int keyVARRAY_StartIndex = input.index();
        Object root_0 = null;

        Token ID1737=null;

        Object ID1737_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 384) ) { return retval; }
            // RPIExprAST.g:1545:34: ({...}? ID )
            // RPIExprAST.g:1545:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "VARRAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARRAY", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"VARRAY\")");
            }
            ID1737=(Token)match(input,ID,FOLLOW_ID_in_keyVARRAY17511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1737_tree = (Object)adaptor.create(ID1737);
            adaptor.addChild(root_0, ID1737_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 384, keyVARRAY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyVARRAY"

    public static class keyVARYING_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyVARYING"
    // RPIExprAST.g:1546:1: keyVARYING : {...}? ID ;
    public final RPIExprASTParser.keyVARYING_return keyVARYING() throws RecognitionException {
        RPIExprASTParser.keyVARYING_return retval = new RPIExprASTParser.keyVARYING_return();
        retval.start = input.LT(1);
        int keyVARYING_StartIndex = input.index();
        Object root_0 = null;

        Token ID1738=null;

        Object ID1738_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 385) ) { return retval; }
            // RPIExprAST.g:1546:34: ({...}? ID )
            // RPIExprAST.g:1546:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "VARYING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARYING", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"VARYING\")");
            }
            ID1738=(Token)match(input,ID,FOLLOW_ID_in_keyVARYING17542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1738_tree = (Object)adaptor.create(ID1738);
            adaptor.addChild(root_0, ID1738_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 385, keyVARYING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyVARYING"

    public static class keyWHILE_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyWHILE"
    // RPIExprAST.g:1547:1: keyWHILE : 'WHILE' ;
    public final RPIExprASTParser.keyWHILE_return keyWHILE() throws RecognitionException {
        RPIExprASTParser.keyWHILE_return retval = new RPIExprASTParser.keyWHILE_return();
        retval.start = input.LT(1);
        int keyWHILE_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1739=null;

        Object string_literal1739_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 386) ) { return retval; }
            // RPIExprAST.g:1547:34: ( 'WHILE' )
            // RPIExprAST.g:1547:36: 'WHILE'
            {
            root_0 = (Object)adaptor.nil();

            string_literal1739=(Token)match(input,223,FOLLOW_223_in_keyWHILE17573); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1739_tree = (Object)adaptor.create(string_literal1739);
            adaptor.addChild(root_0, string_literal1739_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 386, keyWHILE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyWHILE"

    public static class keyWORK_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyWORK"
    // RPIExprAST.g:1548:1: keyWORK : {...}? ID ;
    public final RPIExprASTParser.keyWORK_return keyWORK() throws RecognitionException {
        RPIExprASTParser.keyWORK_return retval = new RPIExprASTParser.keyWORK_return();
        retval.start = input.LT(1);
        int keyWORK_StartIndex = input.index();
        Object root_0 = null;

        Token ID1740=null;

        Object ID1740_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 387) ) { return retval; }
            // RPIExprAST.g:1548:34: ({...}? ID )
            // RPIExprAST.g:1548:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "WORK"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWORK", "((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"WORK\")");
            }
            ID1740=(Token)match(input,ID,FOLLOW_ID_in_keyWORK17608); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1740_tree = (Object)adaptor.create(ID1740);
            adaptor.addChild(root_0, ID1740_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 387, keyWORK_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyWORK"

    public static class keyLimit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLimit"
    // RPIExprAST.g:1549:1: keyLimit : {...}? ID ;
    public final RPIExprASTParser.keyLimit_return keyLimit() throws RecognitionException {
        RPIExprASTParser.keyLimit_return retval = new RPIExprASTParser.keyLimit_return();
        retval.start = input.LT(1);
        int keyLimit_StartIndex = input.index();
        Object root_0 = null;

        Token ID1741=null;

        Object ID1741_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 388) ) { return retval; }
            // RPIExprAST.g:1549:27: ({...}? ID )
            // RPIExprAST.g:1549:29: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SET_DIM"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLimit", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SET_DIM\")");
            }
            ID1741=(Token)match(input,ID,FOLLOW_ID_in_keyLimit17634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1741_tree = (Object)adaptor.create(ID1741);
            adaptor.addChild(root_0, ID1741_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 388, keyLimit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLimit"

    public static class keyPredicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPredicate"
    // RPIExprAST.g:1550:1: keyPredicate : {...}? ID ;
    public final RPIExprASTParser.keyPredicate_return keyPredicate() throws RecognitionException {
        RPIExprASTParser.keyPredicate_return retval = new RPIExprASTParser.keyPredicate_return();
        retval.start = input.LT(1);
        int keyPredicate_StartIndex = input.index();
        Object root_0 = null;

        Token ID1742=null;

        Object ID1742_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 389) ) { return retval; }
            // RPIExprAST.g:1550:31: ({...}? ID )
            // RPIExprAST.g:1550:33: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "CREATE_PREDICATE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPredicate", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"CREATE_PREDICATE\")");
            }
            ID1742=(Token)match(input,ID,FOLLOW_ID_in_keyPredicate17660); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1742_tree = (Object)adaptor.create(ID1742);
            adaptor.addChild(root_0, ID1742_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 389, keyPredicate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPredicate"

    public static class keyPrint_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPrint"
    // RPIExprAST.g:1551:1: keyPrint : {...}? ID ;
    public final RPIExprASTParser.keyPrint_return keyPrint() throws RecognitionException {
        RPIExprASTParser.keyPrint_return retval = new RPIExprASTParser.keyPrint_return();
        retval.start = input.LT(1);
        int keyPrint_StartIndex = input.index();
        Object root_0 = null;

        Token ID1743=null;

        Object ID1743_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 390) ) { return retval; }
            // RPIExprAST.g:1551:34: ({...}? ID )
            // RPIExprAST.g:1551:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "PRINT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPrint", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"PRINT\")");
            }
            ID1743=(Token)match(input,ID,FOLLOW_ID_in_keyPrint17693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1743_tree = (Object)adaptor.create(ID1743);
            adaptor.addChild(root_0, ID1743_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 390, keyPrint_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPrint"

    public static class keyConnect_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyConnect"
    // RPIExprAST.g:1552:1: keyConnect : {...}? ID ;
    public final RPIExprASTParser.keyConnect_return keyConnect() throws RecognitionException {
        RPIExprASTParser.keyConnect_return retval = new RPIExprASTParser.keyConnect_return();
        retval.start = input.LT(1);
        int keyConnect_StartIndex = input.index();
        Object root_0 = null;

        Token ID1744=null;

        Object ID1744_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 391) ) { return retval; }
            // RPIExprAST.g:1552:34: ({...}? ID )
            // RPIExprAST.g:1552:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "DBCONNECT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyConnect", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"DBCONNECT\")");
            }
            ID1744=(Token)match(input,ID,FOLLOW_ID_in_keyConnect17724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1744_tree = (Object)adaptor.create(ID1744);
            adaptor.addChild(root_0, ID1744_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 391, keyConnect_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyConnect"

    public static class keySetBasePeriod_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySetBasePeriod"
    // RPIExprAST.g:1553:1: keySetBasePeriod : {...}? ID ;
    public final RPIExprASTParser.keySetBasePeriod_return keySetBasePeriod() throws RecognitionException {
        RPIExprASTParser.keySetBasePeriod_return retval = new RPIExprASTParser.keySetBasePeriod_return();
        retval.start = input.LT(1);
        int keySetBasePeriod_StartIndex = input.index();
        Object root_0 = null;

        Token ID1745=null;

        Object ID1745_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 392) ) { return retval; }
            // RPIExprAST.g:1553:34: ({...}? ID )
            // RPIExprAST.g:1553:36: {...}? ID
            {
            root_0 = (Object)adaptor.nil();

            if ( !((((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SET_BASE_PERIOD"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySetBasePeriod", "((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( \"SET_BASE_PERIOD\")");
            }
            ID1745=(Token)match(input,ID,FOLLOW_ID_in_keySetBasePeriod17749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1745_tree = (Object)adaptor.create(ID1745);
            adaptor.addChild(root_0, ID1745_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 392, keySetBasePeriod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySetBasePeriod"

    public static class sql_identifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_identifier"
    // RPIExprAST.g:1555:1: sql_identifier : ( identifier | 'ROWID' );
    public final RPIExprASTParser.sql_identifier_return sql_identifier() throws RecognitionException {
        RPIExprASTParser.sql_identifier_return retval = new RPIExprASTParser.sql_identifier_return();
        retval.start = input.LT(1);
        int sql_identifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal1747=null;
        RPIExprASTParser.identifier_return identifier1746 = null;


        Object string_literal1747_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 393) ) { return retval; }
            // RPIExprAST.g:1556:5: ( identifier | 'ROWID' )
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==ID||LA382_0==DOUBLEQUOTED_STRING) ) {
                alt382=1;
            }
            else if ( (LA382_0==158) ) {
                alt382=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 382, 0, input);

                throw nvae;
            }
            switch (alt382) {
                case 1 :
                    // RPIExprAST.g:1556:9: identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifier_in_sql_identifier17763);
                    identifier1746=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier1746.getTree());

                    }
                    break;
                case 2 :
                    // RPIExprAST.g:1557:9: 'ROWID'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal1747=(Token)match(input,158,FOLLOW_158_in_sql_identifier17773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1747_tree = (Object)adaptor.create(string_literal1747);
                    adaptor.addChild(root_0, string_literal1747_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 393, sql_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_identifier"

    // $ANTLR start synpred45_RPIExprAST
    public final void synpred45_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:131:9: ( boolOp )
        // RPIExprAST.g:131:10: boolOp
        {
        pushFollow(FOLLOW_boolOp_in_synpred45_RPIExprAST1493);
        boolOp();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred45_RPIExprAST

    // $ANTLR start synpred59_RPIExprAST
    public final void synpred59_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:166:9: ( type_declaration )
        // RPIExprAST.g:166:9: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred59_RPIExprAST1819);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred59_RPIExprAST

    // $ANTLR start synpred60_RPIExprAST
    public final void synpred60_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:167:9: ( subtype_declaration )
        // RPIExprAST.g:167:9: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred60_RPIExprAST1829);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_RPIExprAST

    // $ANTLR start synpred73_RPIExprAST
    public final void synpred73_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:186:34: ( keyNEW )
        // RPIExprAST.g:186:34: keyNEW
        {
        pushFollow(FOLLOW_keyNEW_in_synpred73_RPIExprAST2026);
        keyNEW();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_RPIExprAST

    // $ANTLR start synpred89_RPIExprAST
    public final void synpred89_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:216:9: ( assignment_statement )
        // RPIExprAST.g:216:9: assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred89_RPIExprAST2334);
        assignment_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_RPIExprAST

    // $ANTLR start synpred90_RPIExprAST
    public final void synpred90_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:217:9: ( exit_statement )
        // RPIExprAST.g:217:9: exit_statement
        {
        pushFollow(FOLLOW_exit_statement_in_synpred90_RPIExprAST2344);
        exit_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_RPIExprAST

    // $ANTLR start synpred92_RPIExprAST
    public final void synpred92_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:219:9: ( case_statement )
        // RPIExprAST.g:219:9: case_statement
        {
        pushFollow(FOLLOW_case_statement_in_synpred92_RPIExprAST2364);
        case_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_RPIExprAST

    // $ANTLR start synpred94_RPIExprAST
    public final void synpred94_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:221:9: ( loop_statement )
        // RPIExprAST.g:221:9: loop_statement
        {
        pushFollow(FOLLOW_loop_statement_in_synpred94_RPIExprAST2385);
        loop_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred94_RPIExprAST

    // $ANTLR start synpred98_RPIExprAST
    public final void synpred98_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:225:9: ( sql_statement )
        // RPIExprAST.g:225:9: sql_statement
        {
        pushFollow(FOLLOW_sql_statement_in_synpred98_RPIExprAST2426);
        sql_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred98_RPIExprAST

    // $ANTLR start synpred99_RPIExprAST
    public final void synpred99_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:226:9: ( plsql_block )
        // RPIExprAST.g:226:9: plsql_block
        {
        pushFollow(FOLLOW_plsql_block_in_synpred99_RPIExprAST2436);
        plsql_block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred99_RPIExprAST

    // $ANTLR start synpred108_RPIExprAST
    public final void synpred108_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:242:9: ( subtype_declaration )
        // RPIExprAST.g:242:9: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred108_RPIExprAST2607);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred108_RPIExprAST

    // $ANTLR start synpred116_RPIExprAST
    public final void synpred116_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:250:9: ( type_declaration )
        // RPIExprAST.g:250:9: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred116_RPIExprAST2693);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_RPIExprAST

    // $ANTLR start synpred119_RPIExprAST
    public final void synpred119_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:256:13: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN )
        // RPIExprAST.g:256:13: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
        {
        pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_synpred119_RPIExprAST2738);
        keyRESTRICT_REFERENCES();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred119_RPIExprAST2740); if (state.failed) return ;
        // RPIExprAST.g:256:43: ( 'DEFAULT' | function_name )
        int alt389=2;
        int LA389_0 = input.LA(1);

        if ( (LA389_0==117) ) {
            alt389=1;
        }
        else if ( (LA389_0==ID||LA389_0==QUOTED_STRING||LA389_0==DOUBLEQUOTED_STRING) ) {
            alt389=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 389, 0, input);

            throw nvae;
        }
        switch (alt389) {
            case 1 :
                // RPIExprAST.g:256:45: 'DEFAULT'
                {
                match(input,117,FOLLOW_117_in_synpred119_RPIExprAST2744); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:256:57: function_name
                {
                pushFollow(FOLLOW_function_name_in_synpred119_RPIExprAST2748);
                function_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // RPIExprAST.g:256:73: ( COMMA pragma_param )+
        int cnt390=0;
        loop390:
        do {
            int alt390=2;
            int LA390_0 = input.LA(1);

            if ( (LA390_0==COMMA) ) {
                alt390=1;
            }


            switch (alt390) {
        	case 1 :
        	    // RPIExprAST.g:256:75: COMMA pragma_param
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred119_RPIExprAST2754); if (state.failed) return ;
        	    pushFollow(FOLLOW_pragma_param_in_synpred119_RPIExprAST2756);
        	    pragma_param();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt390 >= 1 ) break loop390;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(390, input);
                    throw eee;
            }
            cnt390++;
        } while (true);

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred119_RPIExprAST2761); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred119_RPIExprAST

    // $ANTLR start synpred120_RPIExprAST
    public final void synpred120_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:257:13: ( keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN )
        // RPIExprAST.g:257:13: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
        {
        pushFollow(FOLLOW_keyEXCEPTION_INIT_in_synpred120_RPIExprAST2776);
        keyEXCEPTION_INIT();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred120_RPIExprAST2778); if (state.failed) return ;
        pushFollow(FOLLOW_exception_name_in_synpred120_RPIExprAST2780);
        exception_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred120_RPIExprAST2782); if (state.failed) return ;
        pushFollow(FOLLOW_literal_in_synpred120_RPIExprAST2784);
        literal();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred120_RPIExprAST2786); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred120_RPIExprAST

    // $ANTLR start synpred121_RPIExprAST
    public final void synpred121_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:258:13: ( keyAUTONOMOUS_TRANSACTION )
        // RPIExprAST.g:258:13: keyAUTONOMOUS_TRANSACTION
        {
        pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred121_RPIExprAST2800);
        keyAUTONOMOUS_TRANSACTION();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred121_RPIExprAST

    // $ANTLR start synpred122_RPIExprAST
    public final void synpred122_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:259:13: ( keySERIALLY_REUSABLE )
        // RPIExprAST.g:259:13: keySERIALLY_REUSABLE
        {
        pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_synpred122_RPIExprAST2814);
        keySERIALLY_REUSABLE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_RPIExprAST

    // $ANTLR start synpred123_RPIExprAST
    public final void synpred123_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:260:13: ( keyBUILTIN LPAREN pragma_params RPAREN )
        // RPIExprAST.g:260:13: keyBUILTIN LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyBUILTIN_in_synpred123_RPIExprAST2828);
        keyBUILTIN();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred123_RPIExprAST2830); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred123_RPIExprAST2832);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred123_RPIExprAST2834); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred123_RPIExprAST

    // $ANTLR start synpred124_RPIExprAST
    public final void synpred124_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:261:13: ( keyFIPSFLAG LPAREN pragma_params RPAREN )
        // RPIExprAST.g:261:13: keyFIPSFLAG LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyFIPSFLAG_in_synpred124_RPIExprAST2848);
        keyFIPSFLAG();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred124_RPIExprAST2850); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred124_RPIExprAST2852);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred124_RPIExprAST2854); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_RPIExprAST

    // $ANTLR start synpred125_RPIExprAST
    public final void synpred125_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:263:13: ( keyINTERFACE LPAREN pragma_params RPAREN )
        // RPIExprAST.g:263:13: keyINTERFACE LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyINTERFACE_in_synpred125_RPIExprAST2869);
        keyINTERFACE();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred125_RPIExprAST2871); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred125_RPIExprAST2873);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred125_RPIExprAST2875); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred125_RPIExprAST

    // $ANTLR start synpred126_RPIExprAST
    public final void synpred126_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:264:13: ( keyNEW_NAMES LPAREN pragma_params RPAREN )
        // RPIExprAST.g:264:13: keyNEW_NAMES LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyNEW_NAMES_in_synpred126_RPIExprAST2889);
        keyNEW_NAMES();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred126_RPIExprAST2891); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred126_RPIExprAST2893);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred126_RPIExprAST2895); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred126_RPIExprAST

    // $ANTLR start synpred160_RPIExprAST
    public final void synpred160_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:331:9: ( keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? )
        // RPIExprAST.g:331:9: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred160_RPIExprAST3496);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyDAY_in_synpred160_RPIExprAST3498);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:331:28: ( LPAREN NUMBER RPAREN )?
        int alt399=2;
        int LA399_0 = input.LA(1);

        if ( (LA399_0==LPAREN) ) {
            alt399=1;
        }
        switch (alt399) {
            case 1 :
                // RPIExprAST.g:331:30: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred160_RPIExprAST3502); if (state.failed) return ;
                match(input,NUMBER,FOLLOW_NUMBER_in_synpred160_RPIExprAST3504); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred160_RPIExprAST3506); if (state.failed) return ;

                }
                break;

        }

        match(input,135,FOLLOW_135_in_synpred160_RPIExprAST3511); if (state.failed) return ;
        pushFollow(FOLLOW_keySECOND_in_synpred160_RPIExprAST3513);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:331:69: ( LPAREN NUMBER RPAREN )?
        int alt400=2;
        int LA400_0 = input.LA(1);

        if ( (LA400_0==LPAREN) ) {
            alt400=1;
        }
        switch (alt400) {
            case 1 :
                // RPIExprAST.g:331:71: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred160_RPIExprAST3517); if (state.failed) return ;
                match(input,NUMBER,FOLLOW_NUMBER_in_synpred160_RPIExprAST3519); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred160_RPIExprAST3521); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred160_RPIExprAST

    // $ANTLR start synpred162_RPIExprAST
    public final void synpred162_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:332:9: ( keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH )
        // RPIExprAST.g:332:9: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred162_RPIExprAST3534);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyYEAR_in_synpred162_RPIExprAST3536);
        keyYEAR();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:332:29: ( LPAREN NUMBER RPAREN )?
        int alt401=2;
        int LA401_0 = input.LA(1);

        if ( (LA401_0==LPAREN) ) {
            alt401=1;
        }
        switch (alt401) {
            case 1 :
                // RPIExprAST.g:332:31: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred162_RPIExprAST3540); if (state.failed) return ;
                match(input,NUMBER,FOLLOW_NUMBER_in_synpred162_RPIExprAST3542); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred162_RPIExprAST3544); if (state.failed) return ;

                }
                break;

        }

        match(input,135,FOLLOW_135_in_synpred162_RPIExprAST3549); if (state.failed) return ;
        pushFollow(FOLLOW_keyMONTH_in_synpred162_RPIExprAST3551);
        keyMONTH();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred162_RPIExprAST

    // $ANTLR start synpred163_RPIExprAST
    public final void synpred163_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:333:11: ( keyTIME )
        // RPIExprAST.g:333:11: keyTIME
        {
        pushFollow(FOLLOW_keyTIME_in_synpred163_RPIExprAST3563);
        keyTIME();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred163_RPIExprAST

    // $ANTLR start synpred218_RPIExprAST
    public final void synpred218_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:359:9: ( datatype )
        // RPIExprAST.g:359:9: datatype
        {
        pushFollow(FOLLOW_datatype_in_synpred218_RPIExprAST4150);
        datatype();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred218_RPIExprAST

    // $ANTLR start synpred278_RPIExprAST
    public final void synpred278_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:563:33: ({...}? LPAREN ( call_parameters )? RPAREN )
        // RPIExprAST.g:563:33: {...}? LPAREN ( call_parameters )? RPAREN
        {
        if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred278_RPIExprAST", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
        }
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred278_RPIExprAST5840); if (state.failed) return ;
        // RPIExprAST.g:563:115: ( call_parameters )?
        int alt444=2;
        int LA444_0 = input.LA(1);

        if ( ((LA444_0>=ID && LA444_0<=LPAREN)||(LA444_0>=SQL && LA444_0<=MINUS)||LA444_0==NUMBER||LA444_0==NOT||LA444_0==QUOTED_STRING||LA444_0==DOUBLEQUOTED_STRING||LA444_0==116||LA444_0==158||(LA444_0>=168 && LA444_0<=169)||(LA444_0>=174 && LA444_0<=175)||LA444_0==198) ) {
            alt444=1;
        }
        switch (alt444) {
            case 1 :
                // RPIExprAST.g:563:117: call_parameters
                {
                pushFollow(FOLLOW_call_parameters_in_synpred278_RPIExprAST5844);
                call_parameters();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred278_RPIExprAST5849); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred278_RPIExprAST

    // $ANTLR start synpred284_RPIExprAST
    public final void synpred284_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:598:21: ( numeric_loop_param )
        // RPIExprAST.g:598:23: numeric_loop_param
        {
        pushFollow(FOLLOW_numeric_loop_param_in_synpred284_RPIExprAST6086);
        numeric_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred284_RPIExprAST

    // $ANTLR start synpred285_RPIExprAST
    public final void synpred285_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:599:21: ( cursor_loop_param )
        // RPIExprAST.g:599:23: cursor_loop_param
        {
        pushFollow(FOLLOW_cursor_loop_param_in_synpred285_RPIExprAST6116);
        cursor_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_RPIExprAST

    // $ANTLR start synpred288_RPIExprAST
    public final void synpred288_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:610:27: ( keyREVERSE )
        // RPIExprAST.g:610:27: keyREVERSE
        {
        pushFollow(FOLLOW_keyREVERSE_in_synpred288_RPIExprAST6239);
        keyREVERSE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred288_RPIExprAST

    // $ANTLR start synpred298_RPIExprAST
    public final void synpred298_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:668:9: ( close_statement )
        // RPIExprAST.g:668:9: close_statement
        {
        pushFollow(FOLLOW_close_statement_in_synpred298_RPIExprAST6643);
        close_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred298_RPIExprAST

    // $ANTLR start synpred302_RPIExprAST
    public final void synpred302_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:672:9: ( open_statement )
        // RPIExprAST.g:672:9: open_statement
        {
        pushFollow(FOLLOW_open_statement_in_synpred302_RPIExprAST6683);
        open_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_RPIExprAST

    // $ANTLR start synpred309_RPIExprAST
    public final void synpred309_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:691:18: ( table_reference_list )
        // RPIExprAST.g:691:18: table_reference_list
        {
        pushFollow(FOLLOW_table_reference_list_in_synpred309_RPIExprAST6846);
        table_reference_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred309_RPIExprAST

    // $ANTLR start synpred310_RPIExprAST
    public final void synpred310_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:691:41: ( join_clause )
        // RPIExprAST.g:691:41: join_clause
        {
        pushFollow(FOLLOW_join_clause_in_synpred310_RPIExprAST6850);
        join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred310_RPIExprAST

    // $ANTLR start synpred311_RPIExprAST
    public final void synpred311_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:692:11: ( where_clause )
        // RPIExprAST.g:692:11: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred311_RPIExprAST6872);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_RPIExprAST

    // $ANTLR start synpred312_RPIExprAST
    public final void synpred312_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:692:29: ( hierarchical_query_clause )
        // RPIExprAST.g:692:29: hierarchical_query_clause
        {
        pushFollow(FOLLOW_hierarchical_query_clause_in_synpred312_RPIExprAST6879);
        hierarchical_query_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred312_RPIExprAST

    // $ANTLR start synpred313_RPIExprAST
    public final void synpred313_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:692:60: ( group_by_clause )
        // RPIExprAST.g:692:60: group_by_clause
        {
        pushFollow(FOLLOW_group_by_clause_in_synpred313_RPIExprAST6886);
        group_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_RPIExprAST

    // $ANTLR start synpred314_RPIExprAST
    public final void synpred314_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:693:11: ( 'HAVING' sql_condition )
        // RPIExprAST.g:693:11: 'HAVING' sql_condition
        {
        match(input,180,FOLLOW_180_in_synpred314_RPIExprAST6901); if (state.failed) return ;
        pushFollow(FOLLOW_sql_condition_in_synpred314_RPIExprAST6903);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_RPIExprAST

    // $ANTLR start synpred315_RPIExprAST
    public final void synpred315_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:693:39: ( model_clause )
        // RPIExprAST.g:693:39: model_clause
        {
        pushFollow(FOLLOW_model_clause_in_synpred315_RPIExprAST6910);
        model_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_RPIExprAST

    // $ANTLR start synpred320_RPIExprAST
    public final void synpred320_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:694:13: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery ) )
        // RPIExprAST.g:694:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) ( select_expression | subquery )
        {
        // RPIExprAST.g:694:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
        int alt449=3;
        switch ( input.LA(1) ) {
        case 181:
            {
            alt449=1;
            }
            break;
        case 182:
            {
            alt449=2;
            }
            break;
        case 183:
            {
            alt449=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 449, 0, input);

            throw nvae;
        }

        switch (alt449) {
            case 1 :
                // RPIExprAST.g:694:17: 'UNION' ( 'ALL' )?
                {
                match(input,181,FOLLOW_181_in_synpred320_RPIExprAST6931); if (state.failed) return ;
                // RPIExprAST.g:694:25: ( 'ALL' )?
                int alt448=2;
                int LA448_0 = input.LA(1);

                if ( (LA448_0==177) ) {
                    alt448=1;
                }
                switch (alt448) {
                    case 1 :
                        // RPIExprAST.g:694:27: 'ALL'
                        {
                        match(input,177,FOLLOW_177_in_synpred320_RPIExprAST6935); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // RPIExprAST.g:695:17: 'INTERSECT'
                {
                match(input,182,FOLLOW_182_in_synpred320_RPIExprAST6956); if (state.failed) return ;

                }
                break;
            case 3 :
                // RPIExprAST.g:696:17: 'MINUS'
                {
                match(input,183,FOLLOW_183_in_synpred320_RPIExprAST6974); if (state.failed) return ;

                }
                break;

        }

        // RPIExprAST.g:698:13: ( select_expression | subquery )
        int alt450=2;
        int LA450_0 = input.LA(1);

        if ( (LA450_0==174) ) {
            alt450=1;
        }
        else if ( (LA450_0==LPAREN) ) {
            alt450=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 450, 0, input);

            throw nvae;
        }
        switch (alt450) {
            case 1 :
                // RPIExprAST.g:698:17: select_expression
                {
                pushFollow(FOLLOW_select_expression_in_synpred320_RPIExprAST7006);
                select_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:699:17: subquery
                {
                pushFollow(FOLLOW_subquery_in_synpred320_RPIExprAST7025);
                subquery();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred320_RPIExprAST

    // $ANTLR start synpred321_RPIExprAST
    public final void synpred321_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:702:11: ( order_by_clause )
        // RPIExprAST.g:702:11: order_by_clause
        {
        pushFollow(FOLLOW_order_by_clause_in_synpred321_RPIExprAST7062);
        order_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred321_RPIExprAST

    // $ANTLR start synpred324_RPIExprAST
    public final void synpred324_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:715:26: ( COMMA selected_table )
        // RPIExprAST.g:715:26: COMMA selected_table
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred324_RPIExprAST7147); if (state.failed) return ;
        pushFollow(FOLLOW_selected_table_in_synpred324_RPIExprAST7149);
        selected_table();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_RPIExprAST

    // $ANTLR start synpred325_RPIExprAST
    public final void synpred325_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:719:22: ( inner_cross_join_clause )
        // RPIExprAST.g:719:22: inner_cross_join_clause
        {
        pushFollow(FOLLOW_inner_cross_join_clause_in_synpred325_RPIExprAST7175);
        inner_cross_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_RPIExprAST

    // $ANTLR start synpred326_RPIExprAST
    public final void synpred326_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:719:48: ( outer_join_clause )
        // RPIExprAST.g:719:48: outer_join_clause
        {
        pushFollow(FOLLOW_outer_join_clause_in_synpred326_RPIExprAST7179);
        outer_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_RPIExprAST

    // $ANTLR start synpred329_RPIExprAST
    public final void synpred329_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:722:9: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) )
        // RPIExprAST.g:722:9: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        {
        // RPIExprAST.g:722:9: ( keyINNER )?
        int alt451=2;
        int LA451_0 = input.LA(1);

        if ( (LA451_0==ID) ) {
            int LA451_1 = input.LA(2);

            if ( (LA451_1==ID) ) {
                int LA451_2 = input.LA(3);

                if ( (LA451_2==ID) ) {
                    int LA451_4 = input.LA(4);

                    if ( (LA451_4==ID||LA451_4==184) ) {
                        alt451=1;
                    }
                }
                else if ( (LA451_2==DOUBLEQUOTED_STRING||LA451_2==158) ) {
                    alt451=1;
                }
            }
        }
        switch (alt451) {
            case 1 :
                // RPIExprAST.g:722:11: keyINNER
                {
                pushFollow(FOLLOW_keyINNER_in_synpred329_RPIExprAST7202);
                keyINNER();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_keyJOIN_in_synpred329_RPIExprAST7207);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_table_name_in_synpred329_RPIExprAST7209);
        table_name();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:722:42: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        int alt452=2;
        int LA452_0 = input.LA(1);

        if ( (LA452_0==184) ) {
            alt452=1;
        }
        else if ( (LA452_0==ID) ) {
            alt452=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 452, 0, input);

            throw nvae;
        }
        switch (alt452) {
            case 1 :
                // RPIExprAST.g:722:44: 'ON' sql_condition
                {
                match(input,184,FOLLOW_184_in_synpred329_RPIExprAST7213); if (state.failed) return ;
                pushFollow(FOLLOW_sql_condition_in_synpred329_RPIExprAST7215);
                sql_condition();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:722:65: keyUSING LPAREN column_specs RPAREN
                {
                pushFollow(FOLLOW_keyUSING_in_synpred329_RPIExprAST7219);
                keyUSING();

                state._fsp--;
                if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred329_RPIExprAST7221); if (state.failed) return ;
                pushFollow(FOLLOW_column_specs_in_synpred329_RPIExprAST7223);
                column_specs();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred329_RPIExprAST7225); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred329_RPIExprAST

    // $ANTLR start synpred330_RPIExprAST
    public final void synpred330_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:723:11: ( keyCROSS )
        // RPIExprAST.g:723:11: keyCROSS
        {
        pushFollow(FOLLOW_keyCROSS_in_synpred330_RPIExprAST7239);
        keyCROSS();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred330_RPIExprAST

    // $ANTLR start synpred332_RPIExprAST
    public final void synpred332_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:727:13: ( outer_join_type keyJOIN )
        // RPIExprAST.g:727:13: outer_join_type keyJOIN
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred332_RPIExprAST7292);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyJOIN_in_synpred332_RPIExprAST7294);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_RPIExprAST

    // $ANTLR start synpred333_RPIExprAST
    public final void synpred333_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:728:26: ( outer_join_type )
        // RPIExprAST.g:728:26: outer_join_type
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred333_RPIExprAST7312);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_RPIExprAST

    // $ANTLR start synpred334_RPIExprAST
    public final void synpred334_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:730:22: ( query_partition_clause )
        // RPIExprAST.g:730:22: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred334_RPIExprAST7341);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred334_RPIExprAST

    // $ANTLR start synpred335_RPIExprAST
    public final void synpred335_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:731:11: ( 'ON' sql_condition )
        // RPIExprAST.g:731:11: 'ON' sql_condition
        {
        match(input,184,FOLLOW_184_in_synpred335_RPIExprAST7356); if (state.failed) return ;
        pushFollow(FOLLOW_sql_condition_in_synpred335_RPIExprAST7358);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred335_RPIExprAST

    // $ANTLR start synpred336_RPIExprAST
    public final void synpred336_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:731:32: ( keyUSING LPAREN column_specs RPAREN )
        // RPIExprAST.g:731:32: keyUSING LPAREN column_specs RPAREN
        {
        pushFollow(FOLLOW_keyUSING_in_synpred336_RPIExprAST7362);
        keyUSING();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred336_RPIExprAST7364); if (state.failed) return ;
        pushFollow(FOLLOW_column_specs_in_synpred336_RPIExprAST7366);
        column_specs();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred336_RPIExprAST7368); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred336_RPIExprAST

    // $ANTLR start synpred337_RPIExprAST
    public final void synpred337_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:737:11: ( keyFULL )
        // RPIExprAST.g:737:11: keyFULL
        {
        pushFollow(FOLLOW_keyFULL_in_synpred337_RPIExprAST7413);
        keyFULL();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred337_RPIExprAST

    // $ANTLR start synpred338_RPIExprAST
    public final void synpred338_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:737:21: ( keyLEFT )
        // RPIExprAST.g:737:21: keyLEFT
        {
        pushFollow(FOLLOW_keyLEFT_in_synpred338_RPIExprAST7417);
        keyLEFT();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred338_RPIExprAST

    // $ANTLR start synpred339_RPIExprAST
    public final void synpred339_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:737:44: ( keyOUTER )
        // RPIExprAST.g:737:44: keyOUTER
        {
        pushFollow(FOLLOW_keyOUTER_in_synpred339_RPIExprAST7427);
        keyOUTER();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred339_RPIExprAST

    // $ANTLR start synpred341_RPIExprAST
    public final void synpred341_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:746:60: ( keyNOCYCLE )
        // RPIExprAST.g:746:60: keyNOCYCLE
        {
        pushFollow(FOLLOW_keyNOCYCLE_in_synpred341_RPIExprAST7507);
        keyNOCYCLE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred341_RPIExprAST

    // $ANTLR start synpred342_RPIExprAST
    public final void synpred342_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:752:25: ( COMMA group_by_expr )
        // RPIExprAST.g:752:25: COMMA group_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred342_RPIExprAST7556); if (state.failed) return ;
        pushFollow(FOLLOW_group_by_expr_in_synpred342_RPIExprAST7558);
        group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred342_RPIExprAST

    // $ANTLR start synpred343_RPIExprAST
    public final void synpred343_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:755:9: ( rollup_cube_clause )
        // RPIExprAST.g:755:9: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred343_RPIExprAST7579);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred343_RPIExprAST

    // $ANTLR start synpred344_RPIExprAST
    public final void synpred344_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:756:9: ( grouping_sets_clause )
        // RPIExprAST.g:756:9: grouping_sets_clause
        {
        pushFollow(FOLLOW_grouping_sets_clause_in_synpred344_RPIExprAST7589);
        grouping_sets_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred344_RPIExprAST

    // $ANTLR start synpred345_RPIExprAST
    public final void synpred345_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:760:11: ( keyROLLUP )
        // RPIExprAST.g:760:11: keyROLLUP
        {
        pushFollow(FOLLOW_keyROLLUP_in_synpred345_RPIExprAST7619);
        keyROLLUP();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_RPIExprAST

    // $ANTLR start synpred347_RPIExprAST
    public final void synpred347_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:769:9: ( rollup_cube_clause )
        // RPIExprAST.g:769:9: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred347_RPIExprAST7702);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred347_RPIExprAST

    // $ANTLR start synpred350_RPIExprAST
    public final void synpred350_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:777:13: ( keyIGNORE )
        // RPIExprAST.g:777:13: keyIGNORE
        {
        pushFollow(FOLLOW_keyIGNORE_in_synpred350_RPIExprAST7784);
        keyIGNORE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred350_RPIExprAST

    // $ANTLR start synpred351_RPIExprAST
    public final void synpred351_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:777:11: ( ( keyIGNORE | keyKEEP ) keyNAV )
        // RPIExprAST.g:777:11: ( keyIGNORE | keyKEEP ) keyNAV
        {
        // RPIExprAST.g:777:11: ( keyIGNORE | keyKEEP )
        int alt453=2;
        int LA453_0 = input.LA(1);

        if ( (LA453_0==ID) ) {
            int LA453_1 = input.LA(2);

            if ( ((synpred350_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE")))) ) {
                alt453=1;
            }
            else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))) ) {
                alt453=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 453, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 453, 0, input);

            throw nvae;
        }
        switch (alt453) {
            case 1 :
                // RPIExprAST.g:777:13: keyIGNORE
                {
                pushFollow(FOLLOW_keyIGNORE_in_synpred351_RPIExprAST7784);
                keyIGNORE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:777:25: keyKEEP
                {
                pushFollow(FOLLOW_keyKEEP_in_synpred351_RPIExprAST7788);
                keyKEEP();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_keyNAV_in_synpred351_RPIExprAST7792);
        keyNAV();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred351_RPIExprAST

    // $ANTLR start synpred352_RPIExprAST
    public final void synpred352_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:778:22: ( keyDIMENSION )
        // RPIExprAST.g:778:22: keyDIMENSION
        {
        pushFollow(FOLLOW_keyDIMENSION_in_synpred352_RPIExprAST7811);
        keyDIMENSION();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred352_RPIExprAST

    // $ANTLR start synpred357_RPIExprAST
    public final void synpred357_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:798:11: ( query_partition_clause ( column_spec )? )
        // RPIExprAST.g:798:11: query_partition_clause ( column_spec )?
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred357_RPIExprAST7995);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:798:34: ( column_spec )?
        int alt455=2;
        int LA455_0 = input.LA(1);

        if ( (LA455_0==ID||LA455_0==DOUBLEQUOTED_STRING||LA455_0==158) ) {
            alt455=1;
        }
        switch (alt455) {
            case 1 :
                // RPIExprAST.g:798:36: column_spec
                {
                pushFollow(FOLLOW_column_spec_in_synpred357_RPIExprAST7999);
                column_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred357_RPIExprAST

    // $ANTLR start synpred364_RPIExprAST
    public final void synpred364_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:809:61: ( keyAUTOMATIC )
        // RPIExprAST.g:809:61: keyAUTOMATIC
        {
        pushFollow(FOLLOW_keyAUTOMATIC_in_synpred364_RPIExprAST8142);
        keyAUTOMATIC();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred364_RPIExprAST

    // $ANTLR start synpred376_RPIExprAST
    public final void synpred376_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:826:9: ( sql_condition )
        // RPIExprAST.g:826:9: sql_condition
        {
        pushFollow(FOLLOW_sql_condition_in_synpred376_RPIExprAST8355);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred376_RPIExprAST

    // $ANTLR start synpred377_RPIExprAST
    public final void synpred377_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:826:25: ( sql_expression )
        // RPIExprAST.g:826:25: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred377_RPIExprAST8359);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred377_RPIExprAST

    // $ANTLR start synpred381_RPIExprAST
    public final void synpred381_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:834:63: ( keyINCREMENT )
        // RPIExprAST.g:834:63: keyINCREMENT
        {
        pushFollow(FOLLOW_keyINCREMENT_in_synpred381_RPIExprAST8462);
        keyINCREMENT();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_RPIExprAST

    // $ANTLR start synpred389_RPIExprAST
    public final void synpred389_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:860:25: ( COMMA order_by_expr )
        // RPIExprAST.g:860:25: COMMA order_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred389_RPIExprAST8704); if (state.failed) return ;
        pushFollow(FOLLOW_order_by_expr_in_synpred389_RPIExprAST8706);
        order_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_RPIExprAST

    // $ANTLR start synpred392_RPIExprAST
    public final void synpred392_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:867:31: ( keyNULLS keyFIRST )
        // RPIExprAST.g:867:31: keyNULLS keyFIRST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred392_RPIExprAST8766);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyFIRST_in_synpred392_RPIExprAST8768);
        keyFIRST();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred392_RPIExprAST

    // $ANTLR start synpred393_RPIExprAST
    public final void synpred393_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:867:51: ( keyNULLS keyLAST )
        // RPIExprAST.g:867:51: keyNULLS keyLAST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred393_RPIExprAST8772);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyLAST_in_synpred393_RPIExprAST8774);
        keyLAST();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_RPIExprAST

    // $ANTLR start synpred400_RPIExprAST
    public final void synpred400_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:903:9: ({...}? sql_expression )
        // RPIExprAST.g:903:9: {...}? sql_expression
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred400_RPIExprAST", "  is_sql ");
        }
        pushFollow(FOLLOW_sql_expression_in_synpred400_RPIExprAST9014);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred400_RPIExprAST

    // $ANTLR start synpred402_RPIExprAST
    public final void synpred402_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:922:19: ( 'OR' expr_or )
        // RPIExprAST.g:922:19: 'OR' expr_or
        {
        match(input,OR,FOLLOW_OR_in_synpred402_RPIExprAST9141); if (state.failed) return ;
        pushFollow(FOLLOW_expr_or_in_synpred402_RPIExprAST9143);
        expr_or();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred402_RPIExprAST

    // $ANTLR start synpred403_RPIExprAST
    public final void synpred403_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:925:20: ( 'AND' expr_and )
        // RPIExprAST.g:925:20: 'AND' expr_and
        {
        match(input,AND,FOLLOW_AND_in_synpred403_RPIExprAST9168); if (state.failed) return ;
        pushFollow(FOLLOW_expr_and_in_synpred403_RPIExprAST9170);
        expr_and();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred403_RPIExprAST

    // $ANTLR start synpred405_RPIExprAST
    public final void synpred405_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:932:13: ( relational_op expr_add )
        // RPIExprAST.g:932:13: relational_op expr_add
        {
        pushFollow(FOLLOW_relational_op_in_synpred405_RPIExprAST9231);
        relational_op();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred405_RPIExprAST9233);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred405_RPIExprAST

    // $ANTLR start synpred406_RPIExprAST
    public final void synpred406_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:933:13: ( FOUND_ATTR )
        // RPIExprAST.g:933:13: FOUND_ATTR
        {
        match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_synpred406_RPIExprAST9247); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_RPIExprAST

    // $ANTLR start synpred407_RPIExprAST
    public final void synpred407_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:933:26: ( NOTFOUND_ATTR )
        // RPIExprAST.g:933:26: NOTFOUND_ATTR
        {
        match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_synpred407_RPIExprAST9251); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred407_RPIExprAST

    // $ANTLR start synpred408_RPIExprAST
    public final void synpred408_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:933:42: ( ISOPEN_ATTR )
        // RPIExprAST.g:933:42: ISOPEN_ATTR
        {
        match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_synpred408_RPIExprAST9255); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred408_RPIExprAST

    // $ANTLR start synpred409_RPIExprAST
    public final void synpred409_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:933:56: ( ROWCOUNT_ATTR )
        // RPIExprAST.g:933:56: ROWCOUNT_ATTR
        {
        match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_synpred409_RPIExprAST9259); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_RPIExprAST

    // $ANTLR start synpred410_RPIExprAST
    public final void synpred410_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:933:72: ( BULK_ROWCOUNT_ATTR )
        // RPIExprAST.g:933:72: BULK_ROWCOUNT_ATTR
        {
        match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred410_RPIExprAST9263); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_RPIExprAST

    // $ANTLR start synpred412_RPIExprAST
    public final void synpred412_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:934:13: ( 'IS' ( 'NOT' )? 'NULL' )
        // RPIExprAST.g:934:13: 'IS' ( 'NOT' )? 'NULL'
        {
        match(input,111,FOLLOW_111_in_synpred412_RPIExprAST9277); if (state.failed) return ;
        // RPIExprAST.g:934:18: ( 'NOT' )?
        int alt467=2;
        int LA467_0 = input.LA(1);

        if ( (LA467_0==NOT) ) {
            alt467=1;
        }
        switch (alt467) {
            case 1 :
                // RPIExprAST.g:934:20: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred412_RPIExprAST9281); if (state.failed) return ;

                }
                break;

        }

        match(input,116,FOLLOW_116_in_synpred412_RPIExprAST9286); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_RPIExprAST

    // $ANTLR start synpred414_RPIExprAST
    public final void synpred414_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:935:13: ( ( 'NOT' )? 'LIKE' expr_add )
        // RPIExprAST.g:935:13: ( 'NOT' )? 'LIKE' expr_add
        {
        // RPIExprAST.g:935:13: ( 'NOT' )?
        int alt468=2;
        int LA468_0 = input.LA(1);

        if ( (LA468_0==NOT) ) {
            alt468=1;
        }
        switch (alt468) {
            case 1 :
                // RPIExprAST.g:935:15: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred414_RPIExprAST9302); if (state.failed) return ;

                }
                break;

        }

        match(input,192,FOLLOW_192_in_synpred414_RPIExprAST9307); if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred414_RPIExprAST9309);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_RPIExprAST

    // $ANTLR start synpred416_RPIExprAST
    public final void synpred416_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:936:13: ( ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add )
        // RPIExprAST.g:936:13: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
        {
        // RPIExprAST.g:936:13: ( 'NOT' )?
        int alt469=2;
        int LA469_0 = input.LA(1);

        if ( (LA469_0==NOT) ) {
            alt469=1;
        }
        switch (alt469) {
            case 1 :
                // RPIExprAST.g:936:15: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred416_RPIExprAST9325); if (state.failed) return ;

                }
                break;

        }

        match(input,196,FOLLOW_196_in_synpred416_RPIExprAST9330); if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred416_RPIExprAST9332);
        expr_add();

        state._fsp--;
        if (state.failed) return ;
        match(input,AND,FOLLOW_AND_in_synpred416_RPIExprAST9334); if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred416_RPIExprAST9336);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred416_RPIExprAST

    // $ANTLR start synpred418_RPIExprAST
    public final void synpred418_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:937:13: ( ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )
        // RPIExprAST.g:937:13: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
        {
        // RPIExprAST.g:937:13: ( 'NOT' )?
        int alt470=2;
        int LA470_0 = input.LA(1);

        if ( (LA470_0==NOT) ) {
            alt470=1;
        }
        switch (alt470) {
            case 1 :
                // RPIExprAST.g:937:15: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred418_RPIExprAST9352); if (state.failed) return ;

                }
                break;

        }

        match(input,160,FOLLOW_160_in_synpred418_RPIExprAST9357); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred418_RPIExprAST9359); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expressions_in_synpred418_RPIExprAST9361);
        nested_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred418_RPIExprAST9363); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred418_RPIExprAST

    // $ANTLR start synpred420_RPIExprAST
    public final void synpred420_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:946:26: ( COMMA sql_expression )
        // RPIExprAST.g:946:26: COMMA sql_expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred420_RPIExprAST9420); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expression_in_synpred420_RPIExprAST9422);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred420_RPIExprAST

    // $ANTLR start synpred423_RPIExprAST
    public final void synpred423_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:953:20: ( ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul )
        // RPIExprAST.g:953:20: ( PLUS | MINUS | DOUBLEVERTBAR ) expr_mul
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS)||input.LA(1)==DOUBLEVERTBAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_expr_mul_in_synpred423_RPIExprAST9492);
        expr_mul();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred423_RPIExprAST

    // $ANTLR start synpred425_RPIExprAST
    public final void synpred425_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:956:21: ( ( ASTERISK | DIV ) expr_sign )
        // RPIExprAST.g:956:21: ( ASTERISK | DIV ) expr_sign
        {
        if ( (input.LA(1)>=ASTERISK && input.LA(1)<=DIV) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_expr_sign_in_synpred425_RPIExprAST9527);
        expr_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred425_RPIExprAST

    // $ANTLR start synpred428_RPIExprAST
    public final void synpred428_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:962:21: ( EXPONENT expr_expr )
        // RPIExprAST.g:962:21: EXPONENT expr_expr
        {
        match(input,EXPONENT,FOLLOW_EXPONENT_in_synpred428_RPIExprAST9581); if (state.failed) return ;
        pushFollow(FOLLOW_expr_expr_in_synpred428_RPIExprAST9583);
        expr_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred428_RPIExprAST

    // $ANTLR start synpred429_RPIExprAST
    public final void synpred429_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:965:9: ( expr_paren )
        // RPIExprAST.g:965:11: expr_paren
        {
        pushFollow(FOLLOW_expr_paren_in_synpred429_RPIExprAST9606);
        expr_paren();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred429_RPIExprAST

    // $ANTLR start synpred430_RPIExprAST
    public final void synpred430_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:966:9: ()
        // RPIExprAST.g:966:12: 
        {
        }
    }
    // $ANTLR end synpred430_RPIExprAST

    // $ANTLR start synpred431_RPIExprAST
    public final void synpred431_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:968:9: ( case_expression )
        // RPIExprAST.g:968:11: case_expression
        {
        pushFollow(FOLLOW_case_expression_in_synpred431_RPIExprAST9642);
        case_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred431_RPIExprAST

    // $ANTLR start synpred432_RPIExprAST
    public final void synpred432_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:969:9: ( cursor_expression )
        // RPIExprAST.g:969:11: cursor_expression
        {
        pushFollow(FOLLOW_cursor_expression_in_synpred432_RPIExprAST9660);
        cursor_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred432_RPIExprAST

    // $ANTLR start synpred433_RPIExprAST
    public final void synpred433_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:970:9: ( simple_expression )
        // RPIExprAST.g:970:11: simple_expression
        {
        pushFollow(FOLLOW_simple_expression_in_synpred433_RPIExprAST9678);
        simple_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred433_RPIExprAST

    // $ANTLR start synpred434_RPIExprAST
    public final void synpred434_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:971:9: ( select_expression )
        // RPIExprAST.g:971:11: select_expression
        {
        pushFollow(FOLLOW_select_expression_in_synpred434_RPIExprAST9696);
        select_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred434_RPIExprAST

    // $ANTLR start synpred441_RPIExprAST
    public final void synpred441_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:985:9: ( column_spec )
        // RPIExprAST.g:985:11: column_spec
        {
        pushFollow(FOLLOW_column_spec_in_synpred441_RPIExprAST9773);
        column_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred441_RPIExprAST

    // $ANTLR start synpred455_RPIExprAST
    public final void synpred455_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1036:31: ( keyDBTIMEZONE )
        // RPIExprAST.g:1036:31: keyDBTIMEZONE
        {
        pushFollow(FOLLOW_keyDBTIMEZONE_in_synpred455_RPIExprAST10205);
        keyDBTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred455_RPIExprAST

    // $ANTLR start synpred456_RPIExprAST
    public final void synpred456_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1036:47: ( keySESSIONTIMEZONE )
        // RPIExprAST.g:1036:47: keySESSIONTIMEZONE
        {
        pushFollow(FOLLOW_keySESSIONTIMEZONE_in_synpred456_RPIExprAST10209);
        keySESSIONTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred456_RPIExprAST

    // $ANTLR start synpred458_RPIExprAST
    public final void synpred458_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1041:13: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN )
        // RPIExprAST.g:1041:13: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
        {
        pushFollow(FOLLOW_keyCOUNT_in_synpred458_RPIExprAST10257);
        keyCOUNT();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred458_RPIExprAST10259); if (state.failed) return ;
        // RPIExprAST.g:1041:29: ( ASTERISK | nested_expression )
        int alt471=2;
        int LA471_0 = input.LA(1);

        if ( (LA471_0==ASTERISK) ) {
            alt471=1;
        }
        else if ( ((LA471_0>=ID && LA471_0<=LPAREN)||(LA471_0>=SQL && LA471_0<=MINUS)||LA471_0==NUMBER||LA471_0==NOT||LA471_0==QUOTED_STRING||LA471_0==DOUBLEQUOTED_STRING||LA471_0==116||LA471_0==158||(LA471_0>=168 && LA471_0<=169)||(LA471_0>=174 && LA471_0<=175)||LA471_0==198) ) {
            alt471=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 471, 0, input);

            throw nvae;
        }
        switch (alt471) {
            case 1 :
                // RPIExprAST.g:1041:31: ASTERISK
                {
                match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred458_RPIExprAST10263); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:1041:42: nested_expression
                {
                pushFollow(FOLLOW_nested_expression_in_synpred458_RPIExprAST10267);
                nested_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred458_RPIExprAST10271); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred458_RPIExprAST

    // $ANTLR start synpred460_RPIExprAST
    public final void synpred460_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1042:13: ( keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN )
        // RPIExprAST.g:1042:13: keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN
        {
        pushFollow(FOLLOW_keyTO_CHAR_in_synpred460_RPIExprAST10285);
        keyTO_CHAR();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred460_RPIExprAST10287); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expression_in_synpred460_RPIExprAST10290);
        nested_expression();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:1042:51: ( COMMA quoted_string )?
        int alt472=2;
        int LA472_0 = input.LA(1);

        if ( (LA472_0==COMMA) ) {
            alt472=1;
        }
        switch (alt472) {
            case 1 :
                // RPIExprAST.g:1042:52: COMMA quoted_string
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred460_RPIExprAST10294); if (state.failed) return ;
                pushFollow(FOLLOW_quoted_string_in_synpred460_RPIExprAST10296);
                quoted_string();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred460_RPIExprAST10300); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred460_RPIExprAST

    // $ANTLR start synpred462_RPIExprAST
    public final void synpred462_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1043:13: ( keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN )
        // RPIExprAST.g:1043:13: keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN
        {
        pushFollow(FOLLOW_keySUBSTR_in_synpred462_RPIExprAST10326);
        keySUBSTR();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred462_RPIExprAST10328); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expression_in_synpred462_RPIExprAST10330);
        nested_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred462_RPIExprAST10332); if (state.failed) return ;
        pushFollow(FOLLOW_integer_expr_in_synpred462_RPIExprAST10334);
        integer_expr();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:1043:67: ( COMMA integer_expr )?
        int alt473=2;
        int LA473_0 = input.LA(1);

        if ( (LA473_0==COMMA) ) {
            alt473=1;
        }
        switch (alt473) {
            case 1 :
                // RPIExprAST.g:1043:68: COMMA integer_expr
                {
                match(input,COMMA,FOLLOW_COMMA_in_synpred462_RPIExprAST10337); if (state.failed) return ;
                pushFollow(FOLLOW_integer_expr_in_synpred462_RPIExprAST10339);
                integer_expr();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred462_RPIExprAST10343); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred462_RPIExprAST

    // $ANTLR start synpred463_RPIExprAST
    public final void synpred463_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1044:13: ( keyTRIM LPAREN nested_expression RPAREN )
        // RPIExprAST.g:1044:13: keyTRIM LPAREN nested_expression RPAREN
        {
        pushFollow(FOLLOW_keyTRIM_in_synpred463_RPIExprAST10370);
        keyTRIM();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred463_RPIExprAST10372); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expression_in_synpred463_RPIExprAST10375);
        nested_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred463_RPIExprAST10378); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred463_RPIExprAST

    // $ANTLR start synpred464_RPIExprAST
    public final void synpred464_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1045:26: ( LPAREN nested_expression RPAREN )
        // RPIExprAST.g:1045:26: LPAREN nested_expression RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred464_RPIExprAST10406); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expression_in_synpred464_RPIExprAST10408);
        nested_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred464_RPIExprAST10410); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred464_RPIExprAST

    // $ANTLR start synpred465_RPIExprAST
    public final void synpred465_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1040:9: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN | keyTRIM LPAREN nested_expression RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) ) )
        // RPIExprAST.g:1040:9: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN | keyTRIM LPAREN nested_expression RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) )
        {
        if ( !(( is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred465_RPIExprAST", " is_sql ");
        }
        // RPIExprAST.g:1041:9: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN | keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN | keyTRIM LPAREN nested_expression RPAREN | 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression ) )
        int alt478=5;
        int LA478_0 = input.LA(1);

        if ( (LA478_0==ID) ) {
            int LA478_1 = input.LA(2);

            if ( ((synpred458_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))) ) {
                alt478=1;
            }
            else if ( ((synpred460_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "TO_CHAR")))) ) {
                alt478=2;
            }
            else if ( ((synpred462_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().trim().toUpperCase().equals( "SUBSTR")))) ) {
                alt478=3;
            }
            else if ( ((synpred463_RPIExprAST()&&(((CommonToken)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TRIM")))) ) {
                alt478=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 478, 1, input);

                throw nvae;
            }
        }
        else if ( (LA478_0==175) ) {
            alt478=5;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 478, 0, input);

            throw nvae;
        }
        switch (alt478) {
            case 1 :
                // RPIExprAST.g:1041:13: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                {
                pushFollow(FOLLOW_keyCOUNT_in_synpred465_RPIExprAST10257);
                keyCOUNT();

                state._fsp--;
                if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred465_RPIExprAST10259); if (state.failed) return ;
                // RPIExprAST.g:1041:29: ( ASTERISK | nested_expression )
                int alt474=2;
                int LA474_0 = input.LA(1);

                if ( (LA474_0==ASTERISK) ) {
                    alt474=1;
                }
                else if ( ((LA474_0>=ID && LA474_0<=LPAREN)||(LA474_0>=SQL && LA474_0<=MINUS)||LA474_0==NUMBER||LA474_0==NOT||LA474_0==QUOTED_STRING||LA474_0==DOUBLEQUOTED_STRING||LA474_0==116||LA474_0==158||(LA474_0>=168 && LA474_0<=169)||(LA474_0>=174 && LA474_0<=175)||LA474_0==198) ) {
                    alt474=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 474, 0, input);

                    throw nvae;
                }
                switch (alt474) {
                    case 1 :
                        // RPIExprAST.g:1041:31: ASTERISK
                        {
                        match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred465_RPIExprAST10263); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // RPIExprAST.g:1041:42: nested_expression
                        {
                        pushFollow(FOLLOW_nested_expression_in_synpred465_RPIExprAST10267);
                        nested_expression();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred465_RPIExprAST10271); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:1042:13: keyTO_CHAR LPAREN nested_expression ( COMMA quoted_string )? RPAREN
                {
                pushFollow(FOLLOW_keyTO_CHAR_in_synpred465_RPIExprAST10285);
                keyTO_CHAR();

                state._fsp--;
                if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred465_RPIExprAST10287); if (state.failed) return ;
                pushFollow(FOLLOW_nested_expression_in_synpred465_RPIExprAST10290);
                nested_expression();

                state._fsp--;
                if (state.failed) return ;
                // RPIExprAST.g:1042:51: ( COMMA quoted_string )?
                int alt475=2;
                int LA475_0 = input.LA(1);

                if ( (LA475_0==COMMA) ) {
                    alt475=1;
                }
                switch (alt475) {
                    case 1 :
                        // RPIExprAST.g:1042:52: COMMA quoted_string
                        {
                        match(input,COMMA,FOLLOW_COMMA_in_synpred465_RPIExprAST10294); if (state.failed) return ;
                        pushFollow(FOLLOW_quoted_string_in_synpred465_RPIExprAST10296);
                        quoted_string();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred465_RPIExprAST10300); if (state.failed) return ;

                }
                break;
            case 3 :
                // RPIExprAST.g:1043:13: keySUBSTR LPAREN nested_expression COMMA integer_expr ( COMMA integer_expr )? RPAREN
                {
                pushFollow(FOLLOW_keySUBSTR_in_synpred465_RPIExprAST10326);
                keySUBSTR();

                state._fsp--;
                if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred465_RPIExprAST10328); if (state.failed) return ;
                pushFollow(FOLLOW_nested_expression_in_synpred465_RPIExprAST10330);
                nested_expression();

                state._fsp--;
                if (state.failed) return ;
                match(input,COMMA,FOLLOW_COMMA_in_synpred465_RPIExprAST10332); if (state.failed) return ;
                pushFollow(FOLLOW_integer_expr_in_synpred465_RPIExprAST10334);
                integer_expr();

                state._fsp--;
                if (state.failed) return ;
                // RPIExprAST.g:1043:67: ( COMMA integer_expr )?
                int alt476=2;
                int LA476_0 = input.LA(1);

                if ( (LA476_0==COMMA) ) {
                    alt476=1;
                }
                switch (alt476) {
                    case 1 :
                        // RPIExprAST.g:1043:68: COMMA integer_expr
                        {
                        match(input,COMMA,FOLLOW_COMMA_in_synpred465_RPIExprAST10337); if (state.failed) return ;
                        pushFollow(FOLLOW_integer_expr_in_synpred465_RPIExprAST10339);
                        integer_expr();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }

                match(input,RPAREN,FOLLOW_RPAREN_in_synpred465_RPIExprAST10343); if (state.failed) return ;

                }
                break;
            case 4 :
                // RPIExprAST.g:1044:13: keyTRIM LPAREN nested_expression RPAREN
                {
                pushFollow(FOLLOW_keyTRIM_in_synpred465_RPIExprAST10370);
                keyTRIM();

                state._fsp--;
                if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred465_RPIExprAST10372); if (state.failed) return ;
                pushFollow(FOLLOW_nested_expression_in_synpred465_RPIExprAST10375);
                nested_expression();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred465_RPIExprAST10378); if (state.failed) return ;

                }
                break;
            case 5 :
                // RPIExprAST.g:1045:13: 'DISTINCT' ( LPAREN nested_expression RPAREN | nested_expression )
                {
                match(input,175,FOLLOW_175_in_synpred465_RPIExprAST10402); if (state.failed) return ;
                // RPIExprAST.g:1045:24: ( LPAREN nested_expression RPAREN | nested_expression )
                int alt477=2;
                int LA477_0 = input.LA(1);

                if ( (LA477_0==LPAREN) ) {
                    int LA477_1 = input.LA(2);

                    if ( (synpred464_RPIExprAST()) ) {
                        alt477=1;
                    }
                    else if ( ((( !is_sql )||(  is_sql ))) ) {
                        alt477=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 477, 1, input);

                        throw nvae;
                    }
                }
                else if ( (LA477_0==ID||(LA477_0>=SQL && LA477_0<=MINUS)||LA477_0==NUMBER||LA477_0==NOT||LA477_0==QUOTED_STRING||LA477_0==DOUBLEQUOTED_STRING||LA477_0==116||LA477_0==158||(LA477_0>=168 && LA477_0<=169)||(LA477_0>=174 && LA477_0<=175)||LA477_0==198) ) {
                    alt477=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 477, 0, input);

                    throw nvae;
                }
                switch (alt477) {
                    case 1 :
                        // RPIExprAST.g:1045:26: LPAREN nested_expression RPAREN
                        {
                        match(input,LPAREN,FOLLOW_LPAREN_in_synpred465_RPIExprAST10406); if (state.failed) return ;
                        pushFollow(FOLLOW_nested_expression_in_synpred465_RPIExprAST10408);
                        nested_expression();

                        state._fsp--;
                        if (state.failed) return ;
                        match(input,RPAREN,FOLLOW_RPAREN_in_synpred465_RPIExprAST10410); if (state.failed) return ;

                        }
                        break;
                    case 2 :
                        // RPIExprAST.g:1045:60: nested_expression
                        {
                        pushFollow(FOLLOW_nested_expression_in_synpred465_RPIExprAST10414);
                        nested_expression();

                        state._fsp--;
                        if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred465_RPIExprAST

    // $ANTLR start synpred471_RPIExprAST
    public final void synpred471_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1058:13: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? )
        // RPIExprAST.g:1058:13: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
        {
        pushFollow(FOLLOW_keyDAY_in_synpred471_RPIExprAST10564);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:1058:20: ( LPAREN leading_field_precision RPAREN )?
        int alt480=2;
        int LA480_0 = input.LA(1);

        if ( (LA480_0==LPAREN) ) {
            alt480=1;
        }
        switch (alt480) {
            case 1 :
                // RPIExprAST.g:1058:22: LPAREN leading_field_precision RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred471_RPIExprAST10568); if (state.failed) return ;
                pushFollow(FOLLOW_leading_field_precision_in_synpred471_RPIExprAST10570);
                leading_field_precision();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred471_RPIExprAST10572); if (state.failed) return ;

                }
                break;

        }

        match(input,135,FOLLOW_135_in_synpred471_RPIExprAST10577); if (state.failed) return ;
        pushFollow(FOLLOW_keySECOND_in_synpred471_RPIExprAST10579);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprAST.g:1058:78: ( LPAREN fractional_second_precision RPAREN )?
        int alt481=2;
        int LA481_0 = input.LA(1);

        if ( (LA481_0==LPAREN) ) {
            alt481=1;
        }
        switch (alt481) {
            case 1 :
                // RPIExprAST.g:1058:80: LPAREN fractional_second_precision RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred471_RPIExprAST10583); if (state.failed) return ;
                pushFollow(FOLLOW_fractional_second_precision_in_synpred471_RPIExprAST10585);
                fractional_second_precision();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred471_RPIExprAST10587); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred471_RPIExprAST

    // $ANTLR start synpred478_RPIExprAST
    public final void synpred478_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1119:26: ( DOT sql_identifier )
        // RPIExprAST.g:1119:26: DOT sql_identifier
        {
        match(input,DOT,FOLLOW_DOT_in_synpred478_RPIExprAST10963); if (state.failed) return ;
        pushFollow(FOLLOW_sql_identifier_in_synpred478_RPIExprAST10965);
        sql_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred478_RPIExprAST

    // $ANTLR start synpred482_RPIExprAST
    public final void synpred482_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1132:11: ( table_spec )
        // RPIExprAST.g:1132:11: table_spec
        {
        pushFollow(FOLLOW_table_spec_in_synpred482_RPIExprAST11020);
        table_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred482_RPIExprAST

    // $ANTLR start synpred485_RPIExprAST
    public final void synpred485_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1132:59: ( alias )
        // RPIExprAST.g:1132:59: alias
        {
        pushFollow(FOLLOW_alias_in_synpred485_RPIExprAST11041);
        alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred485_RPIExprAST

    // $ANTLR start synpred491_RPIExprAST
    public final void synpred491_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1147:9: ({...}? condition_or )
        // RPIExprAST.g:1147:9: {...}? condition_or
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred491_RPIExprAST", "  is_sql ");
        }
        pushFollow(FOLLOW_condition_or_in_synpred491_RPIExprAST11164);
        condition_or();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred491_RPIExprAST

    // $ANTLR start synpred492_RPIExprAST
    public final void synpred492_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1159:25: ( 'OR' condition_and )
        // RPIExprAST.g:1159:25: 'OR' condition_and
        {
        match(input,OR,FOLLOW_OR_in_synpred492_RPIExprAST11252); if (state.failed) return ;
        pushFollow(FOLLOW_condition_and_in_synpred492_RPIExprAST11254);
        condition_and();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred492_RPIExprAST

    // $ANTLR start synpred493_RPIExprAST
    public final void synpred493_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1162:25: ( 'AND' condition_not )
        // RPIExprAST.g:1162:25: 'AND' condition_not
        {
        match(input,AND,FOLLOW_AND_in_synpred493_RPIExprAST11279); if (state.failed) return ;
        pushFollow(FOLLOW_condition_not_in_synpred493_RPIExprAST11281);
        condition_not();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred493_RPIExprAST

    // $ANTLR start synpred496_RPIExprAST
    public final void synpred496_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1170:9: ( condition_is )
        // RPIExprAST.g:1170:9: condition_is
        {
        pushFollow(FOLLOW_condition_is_in_synpred496_RPIExprAST11342);
        condition_is();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred496_RPIExprAST

    // $ANTLR start synpred497_RPIExprAST
    public final void synpred497_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1171:9: ( condition_comparison )
        // RPIExprAST.g:1171:9: condition_comparison
        {
        pushFollow(FOLLOW_condition_comparison_in_synpred497_RPIExprAST11352);
        condition_comparison();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred497_RPIExprAST

    // $ANTLR start synpred498_RPIExprAST
    public final void synpred498_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1172:9: ( condition_group_comparison )
        // RPIExprAST.g:1172:9: condition_group_comparison
        {
        pushFollow(FOLLOW_condition_group_comparison_in_synpred498_RPIExprAST11362);
        condition_group_comparison();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred498_RPIExprAST

    // $ANTLR start synpred499_RPIExprAST
    public final void synpred499_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1173:9: ( condition_in )
        // RPIExprAST.g:1173:9: condition_in
        {
        pushFollow(FOLLOW_condition_in_in_synpred499_RPIExprAST11372);
        condition_in();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred499_RPIExprAST

    // $ANTLR start synpred500_RPIExprAST
    public final void synpred500_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1174:9: ( condition_is_a_set )
        // RPIExprAST.g:1174:9: condition_is_a_set
        {
        pushFollow(FOLLOW_condition_is_a_set_in_synpred500_RPIExprAST11382);
        condition_is_a_set();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred500_RPIExprAST

    // $ANTLR start synpred501_RPIExprAST
    public final void synpred501_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1175:9: ( condition_is_any )
        // RPIExprAST.g:1175:9: condition_is_any
        {
        pushFollow(FOLLOW_condition_is_any_in_synpred501_RPIExprAST11392);
        condition_is_any();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred501_RPIExprAST

    // $ANTLR start synpred502_RPIExprAST
    public final void synpred502_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1176:9: ( condition_is_empty )
        // RPIExprAST.g:1176:9: condition_is_empty
        {
        pushFollow(FOLLOW_condition_is_empty_in_synpred502_RPIExprAST11402);
        condition_is_empty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred502_RPIExprAST

    // $ANTLR start synpred503_RPIExprAST
    public final void synpred503_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1177:9: ( condition_is_of_type )
        // RPIExprAST.g:1177:9: condition_is_of_type
        {
        pushFollow(FOLLOW_condition_is_of_type_in_synpred503_RPIExprAST11412);
        condition_is_of_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred503_RPIExprAST

    // $ANTLR start synpred504_RPIExprAST
    public final void synpred504_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1178:9: ( condition_is_present )
        // RPIExprAST.g:1178:9: condition_is_present
        {
        pushFollow(FOLLOW_condition_is_present_in_synpred504_RPIExprAST11422);
        condition_is_present();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred504_RPIExprAST

    // $ANTLR start synpred505_RPIExprAST
    public final void synpred505_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1179:9: ( condition_like )
        // RPIExprAST.g:1179:9: condition_like
        {
        pushFollow(FOLLOW_condition_like_in_synpred505_RPIExprAST11432);
        condition_like();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred505_RPIExprAST

    // $ANTLR start synpred506_RPIExprAST
    public final void synpred506_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1180:9: ( condition_memeber )
        // RPIExprAST.g:1180:9: condition_memeber
        {
        pushFollow(FOLLOW_condition_memeber_in_synpred506_RPIExprAST11442);
        condition_memeber();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred506_RPIExprAST

    // $ANTLR start synpred507_RPIExprAST
    public final void synpred507_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1181:9: ( condition_between )
        // RPIExprAST.g:1181:9: condition_between
        {
        pushFollow(FOLLOW_condition_between_in_synpred507_RPIExprAST11452);
        condition_between();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred507_RPIExprAST

    // $ANTLR start synpred508_RPIExprAST
    public final void synpred508_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1182:9: ( condition_regexp_like )
        // RPIExprAST.g:1182:9: condition_regexp_like
        {
        pushFollow(FOLLOW_condition_regexp_like_in_synpred508_RPIExprAST11462);
        condition_regexp_like();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred508_RPIExprAST

    // $ANTLR start synpred509_RPIExprAST
    public final void synpred509_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1183:9: ( condition_submultiset )
        // RPIExprAST.g:1183:9: condition_submultiset
        {
        pushFollow(FOLLOW_condition_submultiset_in_synpred509_RPIExprAST11472);
        condition_submultiset();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred509_RPIExprAST

    // $ANTLR start synpred510_RPIExprAST
    public final void synpred510_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1184:9: ( condition_equals_path )
        // RPIExprAST.g:1184:9: condition_equals_path
        {
        pushFollow(FOLLOW_condition_equals_path_in_synpred510_RPIExprAST11482);
        condition_equals_path();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred510_RPIExprAST

    // $ANTLR start synpred511_RPIExprAST
    public final void synpred511_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1185:9: ( condition_under_path )
        // RPIExprAST.g:1185:9: condition_under_path
        {
        pushFollow(FOLLOW_condition_under_path_in_synpred511_RPIExprAST11492);
        condition_under_path();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred511_RPIExprAST

    // $ANTLR start synpred513_RPIExprAST
    public final void synpred513_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1192:42: ( keyNAN )
        // RPIExprAST.g:1192:42: keyNAN
        {
        pushFollow(FOLLOW_keyNAN_in_synpred513_RPIExprAST11557);
        keyNAN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred513_RPIExprAST

    // $ANTLR start synpred514_RPIExprAST
    public final void synpred514_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1192:51: ( keyINFINITE )
        // RPIExprAST.g:1192:51: keyINFINITE
        {
        pushFollow(FOLLOW_keyINFINITE_in_synpred514_RPIExprAST11561);
        keyINFINITE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred514_RPIExprAST

    // $ANTLR start synpred517_RPIExprAST
    public final void synpred517_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1195:107: ( outer_join_sign )
        // RPIExprAST.g:1195:107: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred517_RPIExprAST11616);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred517_RPIExprAST

    // $ANTLR start synpred518_RPIExprAST
    public final void synpred518_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1195:9: ( LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )? )
        // RPIExprAST.g:1195:9: LPAREN sql_expressions RPAREN ( outer_join_sign )? ( EQ | NOT_EQ ) LPAREN select_command RPAREN ( outer_join_sign )?
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred518_RPIExprAST11585); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred518_RPIExprAST11587);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred518_RPIExprAST11589); if (state.failed) return ;
        // RPIExprAST.g:1195:39: ( outer_join_sign )?
        int alt483=2;
        int LA483_0 = input.LA(1);

        if ( (LA483_0==LPAREN) ) {
            alt483=1;
        }
        switch (alt483) {
            case 1 :
                // RPIExprAST.g:1195:41: outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred518_RPIExprAST11593);
                outer_join_sign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred518_RPIExprAST11608); if (state.failed) return ;
        pushFollow(FOLLOW_select_command_in_synpred518_RPIExprAST11610);
        select_command();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred518_RPIExprAST11612); if (state.failed) return ;
        // RPIExprAST.g:1195:105: ( outer_join_sign )?
        int alt484=2;
        int LA484_0 = input.LA(1);

        if ( (LA484_0==LPAREN) ) {
            alt484=1;
        }
        switch (alt484) {
            case 1 :
                // RPIExprAST.g:1195:107: outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred518_RPIExprAST11616);
                outer_join_sign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred518_RPIExprAST

    // $ANTLR start synpred527_RPIExprAST
    public final void synpred527_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1196:137: ( sql_expression )
        // RPIExprAST.g:1196:137: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred527_RPIExprAST11680);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred527_RPIExprAST

    // $ANTLR start synpred528_RPIExprAST
    public final void synpred528_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1196:187: ( outer_join_sign )
        // RPIExprAST.g:1196:187: outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred528_RPIExprAST11694);
        outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred528_RPIExprAST

    // $ANTLR start synpred532_RPIExprAST
    public final void synpred532_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1199:92: ( grouping_expression_list )
        // RPIExprAST.g:1199:92: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred532_RPIExprAST11749);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred532_RPIExprAST

    // $ANTLR start synpred533_RPIExprAST
    public final void synpred533_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1199:9: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // RPIExprAST.g:1199:9: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred533_RPIExprAST11715); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred533_RPIExprAST11717);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred533_RPIExprAST11719); if (state.failed) return ;
        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        // RPIExprAST.g:1199:55: ( 'ANY' | keySOME | 'ALL' )
        int alt485=3;
        switch ( input.LA(1) ) {
        case 202:
            {
            alt485=1;
            }
            break;
        case ID:
            {
            alt485=2;
            }
            break;
        case 177:
            {
            alt485=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 485, 0, input);

            throw nvae;
        }

        switch (alt485) {
            case 1 :
                // RPIExprAST.g:1199:57: 'ANY'
                {
                match(input,202,FOLLOW_202_in_synpred533_RPIExprAST11733); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:1199:65: keySOME
                {
                pushFollow(FOLLOW_keySOME_in_synpred533_RPIExprAST11737);
                keySOME();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // RPIExprAST.g:1199:75: 'ALL'
                {
                match(input,177,FOLLOW_177_in_synpred533_RPIExprAST11741); if (state.failed) return ;

                }
                break;

        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred533_RPIExprAST11745); if (state.failed) return ;
        // RPIExprAST.g:1199:90: ( grouping_expression_list | select_command )
        int alt486=2;
        int LA486_0 = input.LA(1);

        if ( ((LA486_0>=ID && LA486_0<=LPAREN)||(LA486_0>=SQL && LA486_0<=MINUS)||LA486_0==NUMBER||LA486_0==QUOTED_STRING||LA486_0==DOUBLEQUOTED_STRING||LA486_0==116||LA486_0==158||(LA486_0>=168 && LA486_0<=169)||LA486_0==175||LA486_0==198) ) {
            alt486=1;
        }
        else if ( (LA486_0==174) ) {
            int LA486_13 = input.LA(2);

            if ( (synpred532_RPIExprAST()) ) {
                alt486=1;
            }
            else if ( (true) ) {
                alt486=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 486, 13, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 486, 0, input);

            throw nvae;
        }
        switch (alt486) {
            case 1 :
                // RPIExprAST.g:1199:92: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred533_RPIExprAST11749);
                grouping_expression_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:1199:119: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred533_RPIExprAST11753);
                select_command();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred533_RPIExprAST11757); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred533_RPIExprAST

    // $ANTLR start synpred541_RPIExprAST
    public final void synpred541_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1200:125: ( sql_expressions )
        // RPIExprAST.g:1200:125: sql_expressions
        {
        pushFollow(FOLLOW_sql_expressions_in_synpred541_RPIExprAST11813);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred541_RPIExprAST

    // $ANTLR start synpred543_RPIExprAST
    public final void synpred543_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1203:64: ( grouping_expression_list )
        // RPIExprAST.g:1203:64: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred543_RPIExprAST11858);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred543_RPIExprAST

    // $ANTLR start synpred544_RPIExprAST
    public final void synpred544_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1203:9: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // RPIExprAST.g:1203:9: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred544_RPIExprAST11839); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred544_RPIExprAST11841);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred544_RPIExprAST11843); if (state.failed) return ;
        // RPIExprAST.g:1203:39: ( 'NOT' )?
        int alt487=2;
        int LA487_0 = input.LA(1);

        if ( (LA487_0==NOT) ) {
            alt487=1;
        }
        switch (alt487) {
            case 1 :
                // RPIExprAST.g:1203:41: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred544_RPIExprAST11847); if (state.failed) return ;

                }
                break;

        }

        match(input,160,FOLLOW_160_in_synpred544_RPIExprAST11852); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred544_RPIExprAST11854); if (state.failed) return ;
        // RPIExprAST.g:1203:62: ( grouping_expression_list | select_command )
        int alt488=2;
        int LA488_0 = input.LA(1);

        if ( ((LA488_0>=ID && LA488_0<=LPAREN)||(LA488_0>=SQL && LA488_0<=MINUS)||LA488_0==NUMBER||LA488_0==QUOTED_STRING||LA488_0==DOUBLEQUOTED_STRING||LA488_0==116||LA488_0==158||(LA488_0>=168 && LA488_0<=169)||LA488_0==175||LA488_0==198) ) {
            alt488=1;
        }
        else if ( (LA488_0==174) ) {
            int LA488_13 = input.LA(2);

            if ( (synpred543_RPIExprAST()) ) {
                alt488=1;
            }
            else if ( (true) ) {
                alt488=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 488, 13, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 488, 0, input);

            throw nvae;
        }
        switch (alt488) {
            case 1 :
                // RPIExprAST.g:1203:64: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred544_RPIExprAST11858);
                grouping_expression_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprAST.g:1203:91: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred544_RPIExprAST11862);
                select_command();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred544_RPIExprAST11866); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred544_RPIExprAST

    // $ANTLR start synpred546_RPIExprAST
    public final void synpred546_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1204:49: ( expression_list )
        // RPIExprAST.g:1204:49: expression_list
        {
        pushFollow(FOLLOW_expression_list_in_synpred546_RPIExprAST11891);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred546_RPIExprAST

    // $ANTLR start synpred556_RPIExprAST
    public final void synpred556_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1228:46: ( keyLIKEC )
        // RPIExprAST.g:1228:46: keyLIKEC
        {
        pushFollow(FOLLOW_keyLIKEC_in_synpred556_RPIExprAST12135);
        keyLIKEC();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred556_RPIExprAST

    // $ANTLR start synpred557_RPIExprAST
    public final void synpred557_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1228:57: ( keyLIKE2 )
        // RPIExprAST.g:1228:57: keyLIKE2
        {
        pushFollow(FOLLOW_keyLIKE2_in_synpred557_RPIExprAST12139);
        keyLIKE2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred557_RPIExprAST

    // $ANTLR start synpred558_RPIExprAST
    public final void synpred558_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1228:96: ( keyESCAPE sql_expression )
        // RPIExprAST.g:1228:96: keyESCAPE sql_expression
        {
        pushFollow(FOLLOW_keyESCAPE_in_synpred558_RPIExprAST12151);
        keyESCAPE();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_sql_expression_in_synpred558_RPIExprAST12153);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred558_RPIExprAST

    // $ANTLR start synpred567_RPIExprAST
    public final void synpred567_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1258:27: ( COMMA expression_list )
        // RPIExprAST.g:1258:27: COMMA expression_list
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred567_RPIExprAST12444); if (state.failed) return ;
        pushFollow(FOLLOW_expression_list_in_synpred567_RPIExprAST12446);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred567_RPIExprAST

    // $ANTLR start synpred568_RPIExprAST
    public final void synpred568_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1261:9: ( LPAREN sql_expressions RPAREN )
        // RPIExprAST.g:1261:9: LPAREN sql_expressions RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred568_RPIExprAST12467); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred568_RPIExprAST12469);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred568_RPIExprAST12471); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred568_RPIExprAST

    // $ANTLR start synpred576_RPIExprAST
    public final void synpred576_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1279:9: ( sql_expression )
        // RPIExprAST.g:1279:11: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred576_RPIExprAST12613);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred576_RPIExprAST

    // $ANTLR start synpred579_RPIExprAST
    public final void synpred579_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1293:17: ( 'PRIOR' )
        // RPIExprAST.g:1293:17: 'PRIOR'
        {
        match(input,197,FOLLOW_197_in_synpred579_RPIExprAST12761); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred579_RPIExprAST

    // $ANTLR start synpred580_RPIExprAST
    public final void synpred580_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1293:13: ( ( 'PRIOR' )? sql_condition )
        // RPIExprAST.g:1293:15: ( 'PRIOR' )? sql_condition
        {
        // RPIExprAST.g:1293:15: ( 'PRIOR' )?
        int alt489=2;
        int LA489_0 = input.LA(1);

        if ( (LA489_0==197) ) {
            int LA489_1 = input.LA(2);

            if ( (synpred579_RPIExprAST()) ) {
                alt489=1;
            }
        }
        switch (alt489) {
            case 1 :
                // RPIExprAST.g:1293:17: 'PRIOR'
                {
                match(input,197,FOLLOW_197_in_synpred580_RPIExprAST12761); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_sql_condition_in_synpred580_RPIExprAST12766);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred580_RPIExprAST

    // $ANTLR start synpred581_RPIExprAST
    public final void synpred581_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1293:48: ( 'PRIOR' )
        // RPIExprAST.g:1293:48: 'PRIOR'
        {
        match(input,197,FOLLOW_197_in_synpred581_RPIExprAST12773); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred581_RPIExprAST

    // $ANTLR start synpred590_RPIExprAST
    public final void synpred590_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1312:11: ( sql_expression )
        // RPIExprAST.g:1312:13: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred590_RPIExprAST12976);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred590_RPIExprAST

    // $ANTLR start synpred591_RPIExprAST
    public final void synpred591_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1312:50: ( NUMBER )
        // RPIExprAST.g:1312:52: NUMBER
        {
        match(input,NUMBER,FOLLOW_NUMBER_in_synpred591_RPIExprAST12988); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred591_RPIExprAST

    // $ANTLR start synpred612_RPIExprAST
    public final void synpred612_RPIExprAST_fragment() throws RecognitionException {   
        // RPIExprAST.g:1383:13: ( variable_names )
        // RPIExprAST.g:1383:13: variable_names
        {
        pushFollow(FOLLOW_variable_names_in_synpred612_RPIExprAST13669);
        variable_names();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred612_RPIExprAST

    // Delegated rules

    public final boolean synpred321_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred580_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred580_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred544_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred544_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred342_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred342_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred504_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred504_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred400_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred400_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred428_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred428_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred433_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred433_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred590_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred590_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred456_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred456_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred567_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred567_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred465_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred465_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred458_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred458_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred343_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred343_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred541_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred541_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred556_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred556_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred364_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred364_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred463_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred463_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred376_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred376_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred498_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred498_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred407_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred407_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred330_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred330_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred485_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred485_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred514_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred514_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred579_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred579_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred162_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred162_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred377_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred377_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred441_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred441_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred478_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred478_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred511_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred511_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred352_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred352_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred392_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred392_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred344_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred344_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred284_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred284_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred418_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred418_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred492_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred492_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred513_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred513_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred423_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred423_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred336_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred336_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred491_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred491_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred460_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred460_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred612_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred612_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred527_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred527_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred471_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred471_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred350_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred350_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred591_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred591_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred509_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred509_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred503_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred503_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred351_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred351_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred546_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred546_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred462_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred462_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred408_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred408_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred528_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred528_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred329_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred329_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred506_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred506_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred496_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred496_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred425_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred425_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred576_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred576_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred403_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred403_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred533_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred533_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred508_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred508_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred455_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred455_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred500_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred500_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred337_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred337_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred429_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred429_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred557_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred557_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred543_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred543_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred339_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred339_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred431_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred431_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred581_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred581_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred510_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred510_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred420_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred420_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred402_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred402_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred505_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred505_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred416_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred416_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred532_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred532_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred335_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred335_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred464_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred464_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred501_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred501_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred507_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred507_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred568_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred568_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred502_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred502_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred334_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred334_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred341_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred341_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred499_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred499_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred482_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred482_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred405_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred405_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred558_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred558_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred493_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred493_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred347_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred347_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred432_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred432_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred298_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred298_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred434_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred434_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred517_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred517_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred518_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred518_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred430_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred430_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred497_RPIExprAST() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred497_RPIExprAST_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA26 dfa26 = new DFA26(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA45 dfa45 = new DFA45(this);
    protected DFA48 dfa48 = new DFA48(this);
    static final String DFA26_eotS =
        "\u02c4\uffff";
    static final String DFA26_eofS =
        "\u02c4\uffff";
    static final String DFA26_minS =
        "\3\25\3\uffff\1\25\5\31\3\26\2\31\1\26\3\31\1\26\1\31\2\25\2\26"+
        "\2\25\2\26\1\u008f\7\31\1\26\2\uffff\3\25\1\26\2\25\2\31\1\uffff"+
        "\1\25\1\40\1\26\2\40\1\25\1\40\1\31\1\26\1\40\1\u0091\1\40\1\u0091"+
        "\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\1\40\1\26\1"+
        "\102\1\27\1\25\1\uffff\30\25\1\u008f\11\25\3\uffff\1\40\2\25\2\113"+
        "\1\25\5\27\6\25\4\27\1\26\1\40\1\25\1\102\1\27\2\25\1\40\1\25\1"+
        "\31\1\25\5\27\3\26\2\27\1\25\3\27\1\26\1\27\2\25\2\26\2\25\2\26"+
        "\1\u008f\7\27\2\26\1\25\1\157\4\25\1\164\1\25\1\0\2\25\1\uffff\1"+
        "\40\1\25\3\40\2\25\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\25\1"+
        "\40\1\25\3\40\1\25\1\u0091\1\25\2\40\1\27\1\26\3\25\1\40\5\31\2"+
        "\27\2\31\1\102\2\27\2\31\1\102\2\27\2\31\1\102\4\31\1\27\1\31\1"+
        "\102\1\31\1\26\2\112\1\40\1\26\2\40\1\25\1\40\1\25\1\26\1\25\2\27"+
        "\1\40\1\27\1\26\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\26\1\40"+
        "\1\26\3\40\1\25\1\u0091\1\25\2\40\2\25\1\102\1\27\1\25\1\31\1\40"+
        "\1\25\2\113\4\27\6\25\4\27\1\25\1\40\1\25\1\102\2\27\1\u0087\1\40"+
        "\1\31\1\27\1\40\1\27\1\25\1\31\1\25\1\31\1\25\2\31\1\25\1\31\1\25"+
        "\3\27\1\26\1\102\1\27\1\25\1\40\1\25\2\113\1\27\6\25\4\27\1\26\1"+
        "\40\1\25\1\102\2\27\1\25\5\27\3\26\2\27\1\25\3\27\1\26\1\27\2\25"+
        "\2\26\2\25\2\26\1\u008f\7\27\2\26\4\25\1\27\1\25\1\40\4\25\2\27"+
        "\2\25\1\102\2\27\2\25\1\102\2\27\2\25\1\102\4\25\1\27\1\25\1\102"+
        "\2\25\1\27\1\25\1\27\10\102\1\26\1\40\3\27\2\25\1\27\1\25\1\27\1"+
        "\26\5\27\1\102\4\27\1\102\4\27\1\102\6\27\1\102\2\27\1\40\1\26\3"+
        "\40\2\25\1\27\1\26\1\25\1\27\1\40\1\27\1\26\1\40\1\u0091\1\40\1"+
        "\u0091\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\2\40\1"+
        "\25\2\112\1\uffff\1\25\1\31\1\40\1\27\11\25\2\31\4\25\1\27\1\26"+
        "\2\112\1\27\1\u0087\1\40\1\25\1\27\1\25\1\27\1\25\2\27\1\25\5\27"+
        "\1\25\2\113\1\40\1\25\1\26\1\102\1\27\6\25\4\27\1\26\1\40\1\25\1"+
        "\102\2\27\1\25\1\27\10\102\10\111\1\25\1\27\10\102\1\40\4\27\1\25"+
        "\1\27\1\26\2\25\5\27\1\102\4\27\1\102\4\27\1\102\6\27\1\102\2\27"+
        "\6\25\1\26\1\27\4\25\2\27\1\u0087\1\40\1\26\2\112\1\25\1\27\1\25"+
        "\1\27\1\25\2\27\1\25\1\27\20\111\1\27\1\25\10\102\1\27\1\26\4\25"+
        "\10\111";
    static final String DFA26_maxS =
        "\1\u00d9\2\u009f\3\uffff\1\u00dc\6\165\1\u0084\3\165\1\u00dc\5\165"+
        "\1\25\3\u0090\4\165\1\u0090\3\165\1\u0090\4\165\2\uffff\1\u009e"+
        "\1\126\1\u00db\1\u0087\1\25\1\u009e\2\165\1\uffff\1\u009f\1\40\1"+
        "\165\2\40\1\126\1\40\1\165\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40"+
        "\1\u0091\1\165\1\40\1\165\3\40\1\165\1\u0091\1\u009e\1\40\1\165"+
        "\1\123\1\27\1\u00a0\1\uffff\1\u009f\6\74\1\u0084\10\74\1\25\3\u0090"+
        "\4\74\1\u0090\3\74\1\u0090\2\74\1\123\1\74\1\123\3\uffff\1\40\2"+
        "\25\2\113\1\u009f\1\32\4\27\1\u008f\1\u009e\1\u008f\1\u009e\1\u008f"+
        "\1\u009e\4\27\1\165\1\40\1\u009e\1\123\1\27\1\u00db\1\u009e\1\40"+
        "\1\u009e\1\u0088\1\u009f\6\32\1\u0084\3\32\1\u0088\5\32\1\25\3\u0090"+
        "\4\32\1\u0090\3\32\1\u0090\2\32\1\123\1\32\1\123\1\126\1\u00dc\1"+
        "\u009e\1\74\1\u00c6\1\25\1\164\1\u0088\1\0\1\u009e\1\74\1\uffff"+
        "\1\40\1\74\3\40\1\74\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091"+
        "\1\107\1\40\1\107\3\40\1\74\1\u0091\1\u009e\2\40\1\27\2\165\1\u00c6"+
        "\1\u0088\1\40\5\165\2\27\1\u0090\1\165\1\111\2\27\1\u0090\1\165"+
        "\1\111\2\27\1\u0090\1\165\1\111\4\165\1\27\1\165\1\111\2\165\2\112"+
        "\1\40\1\32\2\40\1\u009e\1\40\1\25\1\u0087\1\u009e\2\32\1\40\1\32"+
        "\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\32\1\40\1\32\3"+
        "\40\1\32\1\u0091\1\u009e\2\40\1\u00a0\2\123\1\u00c4\1\25\1\31\1"+
        "\40\1\25\2\113\1\32\3\27\1\u008f\1\u009e\1\u008f\1\u009e\1\u008f"+
        "\1\u009e\4\27\1\107\1\40\1\u009e\1\123\2\27\1\u0087\1\40\1\165\1"+
        "\u00c4\1\40\1\27\1\u009e\1\165\1\u009e\1\165\1\u009e\2\165\1\u009e"+
        "\1\165\1\126\1\32\2\27\2\123\1\27\1\25\1\40\1\25\2\113\1\27\1\u008f"+
        "\1\u009e\1\u008f\1\u009e\1\u008f\1\u009e\4\27\1\32\1\40\1\u009e"+
        "\1\123\2\27\1\u009f\6\32\1\u0084\3\32\1\u0088\5\32\1\25\3\u0090"+
        "\4\32\1\u0090\3\32\1\u0090\2\32\1\123\1\32\1\123\2\u009e\1\u00a4"+
        "\1\74\1\27\1\74\1\40\4\74\2\27\1\u0090\2\111\2\27\1\u0090\2\111"+
        "\2\27\1\u0090\2\111\4\74\1\27\2\111\2\74\1\27\1\u0088\1\27\10\111"+
        "\1\165\1\40\3\32\2\u009e\1\u0088\1\32\1\27\2\32\2\27\1\u0090\2\111"+
        "\2\27\1\u0090\2\111\2\27\1\u0090\2\111\4\32\1\27\2\111\2\32\1\40"+
        "\1\32\3\40\1\25\1\u009e\1\32\1\u0087\1\u009e\1\32\1\40\1\32\1\u0090"+
        "\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\32\1\40\1\32\3\40\1\32"+
        "\1\u0091\1\u009e\2\40\3\112\1\uffff\1\107\1\u00a4\1\40\1\27\1\u009e"+
        "\1\74\1\u009e\1\74\1\u009e\2\74\1\u009e\1\74\1\165\1\u0088\4\u009e"+
        "\1\27\3\112\1\32\1\u0087\1\40\1\u009e\1\32\1\u009e\1\32\1\u009e"+
        "\2\32\1\u009e\2\32\3\27\1\25\2\113\1\40\1\25\2\123\1\27\1\u008f"+
        "\1\u009e\1\u008f\1\u009e\1\u008f\1\u009e\4\27\1\32\1\40\1\u009e"+
        "\1\123\2\27\1\126\1\27\20\111\1\126\1\27\10\111\1\40\3\32\1\u0088"+
        "\1\32\1\27\1\32\2\u009e\1\32\2\27\1\u0090\2\111\2\27\1\u0090\2\111"+
        "\2\27\1\u0090\2\111\4\32\1\27\2\111\2\32\1\102\1\74\4\u009e\1\102"+
        "\1\32\4\u009e\1\27\1\32\1\u0087\1\40\3\112\1\u009e\1\32\1\u009e"+
        "\1\32\1\u009e\2\32\1\u009e\1\32\20\111\1\27\1\126\10\111\1\32\1"+
        "\102\4\u009e\10\111";
    static final String DFA26_acceptS =
        "\3\uffff\1\11\1\12\1\14\42\uffff\1\13\1\1\10\uffff\1\10\35\uffff"+
        "\1\5\42\uffff\1\2\1\4\1\7\115\uffff\1\3\u013d\uffff\1\6\u00c2\uffff";
    static final String DFA26_specialS =
        "\u00c0\uffff\1\0\u0203\uffff}>";
    static final String[] DFA26_transitionS = {
            "\1\1\100\uffff\1\2\112\uffff\1\3\1\4\66\uffff\1\5",
            "\1\6\54\uffff\1\50\23\uffff\1\21\34\uffff\1\51\3\uffff\1\50"+
            "\2\uffff\1\7\1\10\1\11\1\12\1\13\4\14\1\15\1\16\1\17\1\20\2"+
            "\uffff\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\33\1\uffff\1\31"+
            "\1\32\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
            "\1\47",
            "\1\51\54\uffff\1\50\23\uffff\1\51\34\uffff\1\51\3\uffff\1\50"+
            "\2\uffff\15\51\2\uffff\10\51\1\uffff\16\51",
            "",
            "",
            "",
            "\1\55\1\53\2\uffff\1\51\42\uffff\1\51\5\uffff\1\52\1\51\6\uffff"+
            "\1\61\1\60\7\uffff\1\57\33\uffff\1\54\5\uffff\1\51\22\uffff"+
            "\1\56\123\uffff\1\62",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\64\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\66\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51\16\uffff\1\65",
            "\1\67\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\70\2\uffff\1\51\42\uffff\1\51\5\uffff\1\52\1\51\6\uffff"+
            "\1\61\1\60\7\uffff\1\57\33\uffff\1\54\5\uffff\1\51\146\uffff"+
            "\1\62",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\71\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\72",
            "\1\73\1\74\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff"+
            "\1\63\5\uffff\1\51\32\uffff\1\75",
            "\1\76\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51\32\uffff\1\77",
            "\1\100\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51\32\uffff\1\101",
            "\1\102\1\103\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff"+
            "\1\63\5\uffff\1\51",
            "\1\104\1\105\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff"+
            "\1\63\5\uffff\1\51",
            "\1\106\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\107\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\2\110",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51"+
            "\32\uffff\1\111",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\5\uffff\1\112\1\51\6\uffff\1\61\1\60\7"+
            "\uffff\1\57\33\uffff\1\63\5\uffff\1\51",
            "\1\113\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "",
            "",
            "\1\114\100\uffff\1\114\107\uffff\1\115",
            "\1\117\12\uffff\1\116\65\uffff\1\117",
            "\1\121\1\163\77\uffff\1\162\43\uffff\1\122\1\123\1\124\1\125"+
            "\1\126\4\127\1\130\1\131\1\132\1\133\2\uffff\1\134\1\135\1\136"+
            "\1\137\1\140\1\141\1\142\1\145\1\uffff\1\143\1\144\1\146\1\147"+
            "\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
            "\3\uffff\1\120\12\uffff\1\165\54\uffff\1\164",
            "\1\166\160\uffff\1\167",
            "\1\170",
            "\1\171\100\uffff\1\171\107\uffff\1\172",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "",
            "\1\173\1\163\77\uffff\1\162\43\uffff\1\122\1\123\1\124\1\125"+
            "\1\126\4\127\1\130\1\131\1\132\1\133\2\uffff\1\134\1\135\1\136"+
            "\1\137\1\140\1\141\1\142\1\145\1\uffff\1\143\1\144\1\146\1\147"+
            "\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161",
            "\1\174",
            "\1\66\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\175",
            "\1\176",
            "\1\117\12\uffff\1\177\65\uffff\1\117",
            "\1\u0080",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\74\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51\32\uffff\1\75",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\103\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\u0087",
            "\1\105\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63"+
            "\5\uffff\1\51",
            "\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\u008b\1\u008c\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53"+
            "\uffff\1\63\5\uffff\1\51",
            "\1\u008d",
            "\1\u008e\100\uffff\1\u008e\107\uffff\1\115",
            "\1\u008f",
            "\1\u0092\2\uffff\1\51\42\uffff\1\51\5\uffff\1\u0091\1\51\6"+
            "\uffff\1\61\1\60\7\uffff\1\57\33\uffff\1\u0090\5\uffff\1\51",
            "\1\u0093\7\uffff\1\61\1\60\7\uffff\1\57",
            "\1\u0094",
            "\1\u00a0\1\uffff\1\u00b9\2\uffff\1\u00b8\73\uffff\1\u00b7\43"+
            "\uffff\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\4\u009b\1\u009c"+
            "\1\u009d\1\u009e\1\u009f\2\uffff\1\u00a1\1\u00a2\1\u00a3\1\u00a4"+
            "\1\u00a5\1\u00a6\1\u00a7\1\u00aa\1\uffff\1\u00a8\1\u00a9\1\u00ab"+
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3"+
            "\1\u00b4\1\u00b5\1\u00b6\1\u0095",
            "",
            "\1\u00bf\1\u00bc\2\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1"+
            "\u00ba\7\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1\2\uffff\1\163"+
            "\43\uffff\15\163\1\uffff\1\u00bd\10\163\1\uffff\16\163",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00c4\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00c6\2\uffff\1\u00c0\42\uffff\1\u00be\107\uffff"+
            "\1\u00c5",
            "\1\u00c3\1\u00c7\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00c8\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c9",
            "\1\u00ca\1\u00cb\2\uffff\1\u00c0\42\uffff\1\u00be\123\uffff"+
            "\1\u00cc",
            "\1\u00c3\1\u00cd\2\uffff\1\u00c0\42\uffff\1\u00be\123\uffff"+
            "\1\u00ce",
            "\1\u00c3\1\u00cf\2\uffff\1\u00c0\42\uffff\1\u00be\123\uffff"+
            "\1\u00d0",
            "\1\u00d1\1\u00d2\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00d3\1\u00d4\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00d5\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00d6\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\2\u00d7",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\123\uffff\1\u00d8",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1\u00d9\7"+
            "\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1",
            "\1\u00c3\1\u00da\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00db\2\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1"+
            "\u00ba\7\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1",
            "",
            "",
            "",
            "\1\u00dc",
            "\1\u00dd",
            "\1\u00de",
            "\1\60",
            "\1\60",
            "\1\u00e0\1\u00df\2\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1"+
            "\u00ba\7\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1\2\uffff\1\163"+
            "\43\uffff\15\163\1\uffff\1\u00bd\10\163\1\uffff\16\163",
            "\1\u00e2\2\uffff\1\u00e1",
            "\1\u00e3",
            "\1\u00e4",
            "\1\u00e5",
            "\1\u00e6",
            "\1\u00e7\1\uffff\1\u00e9\167\uffff\1\u00e8",
            "\1\u00ea\100\uffff\1\u00ea\107\uffff\1\u00eb",
            "\1\u00ec\1\uffff\1\u00ee\167\uffff\1\u00ed",
            "\1\u00ef\100\uffff\1\u00ef\107\uffff\1\u00f0",
            "\1\u00f1\1\uffff\1\u00f3\167\uffff\1\u00f2",
            "\1\u00f4\100\uffff\1\u00f4\107\uffff\1\u00f5",
            "\1\u00f6",
            "\1\u00f7",
            "\1\u00f8",
            "\1\u00f9",
            "\1\u008c\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1"+
            "\63\5\uffff\1\51",
            "\1\u00fa",
            "\1\u00fb\100\uffff\1\u00fb\107\uffff\1\u00fc",
            "\1\u0093\7\uffff\1\61\1\60\7\uffff\1\57",
            "\1\u00fd",
            "\1\121\1\163\77\uffff\1\162\43\uffff\1\122\1\123\1\124\1\125"+
            "\1\126\4\127\1\130\1\131\1\132\1\133\2\uffff\1\134\1\135\1\136"+
            "\1\137\1\140\1\141\1\142\1\145\1\uffff\1\143\1\144\1\146\1\147"+
            "\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
            "\3\uffff\1\120\67\uffff\1\164",
            "\1\u00fe\100\uffff\1\u00fe\107\uffff\1\u00ff",
            "\1\177",
            "\1\u0100\100\uffff\1\u0100\107\uffff\1\u00ff",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51"+
            "\22\uffff\1\56",
            "\1\u00a0\1\uffff\1\u00b9\2\uffff\1\u00b8\73\uffff\1\u00b7\43"+
            "\uffff\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\4\u009b\1\u009c"+
            "\1\u009d\1\u009e\1\u009f\2\uffff\1\u00a1\1\u00a2\1\u00a3\1\u00a4"+
            "\1\u00a5\1\u00a6\1\u00a7\1\u00aa\1\uffff\1\u00a8\1\u00a9\1\u00ab"+
            "\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3"+
            "\1\u00b4\1\u00b5\1\u00b6",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0101\1\u00b9\2\uffff\1\u00b8",
            "\1\u0103\1\u00b9\2\uffff\1\u00b8\151\uffff\1\u0102",
            "\1\u0104\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0108\1\u0106\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0105\7"+
            "\uffff\1\u010b\1\u010a\7\uffff\1\u0109\64\uffff\1\u0107",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u010c\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u010d",
            "\1\u010e\1\u010f\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0110",
            "\1\u0111\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0112",
            "\1\u0113\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0114",
            "\1\u0115\1\u0116\1\u00b9\2\uffff\1\u00b8",
            "\1\u0117\1\u0118\1\u00b9\2\uffff\1\u00b8",
            "\1\u0119\1\u00b9\2\uffff\1\u00b8",
            "\1\u011a\1\u00b9\2\uffff\1\u00b8",
            "\2\u011b",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u011c",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u011d\7\uffff\1\u010b\1"+
            "\u010a\7\uffff\1\u0109",
            "\1\u011e\1\u00b9\2\uffff\1\u00b8",
            "\1\u011f\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0105\7\uffff\1"+
            "\u010b\1\u010a\7\uffff\1\u0109",
            "\1\u0120\100\uffff\1\u0120",
            "\1\165\154\uffff\1\62",
            "\1\u0121\100\uffff\1\u0121\107\uffff\1\u0122",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\2\163\4\uffff\3\163\2\uffff\1\u0123\33\uffff\1\163\12\uffff"+
            "\1\163\16\uffff\1\163\35\uffff\1\163\51\uffff\1\163\11\uffff"+
            "\2\163\4\uffff\2\163\26\uffff\1\163",
            "\1\u0124",
            "\1\u0125",
            "\1\163\1\u0126\2\uffff\1\163\2\uffff\2\u00c3\2\uffff\1\u00c3"+
            "\33\uffff\1\163\5\uffff\1\163\4\uffff\1\u00c3\2\uffff\2\163"+
            "\7\uffff\1\163\63\uffff\1\u0127\1\163",
            "\1\uffff",
            "\1\u0128\100\uffff\1\u0128\107\uffff\1\u0129",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "",
            "\1\u012a",
            "\1\u00c3\1\u00c6\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u012b",
            "\1\u012c",
            "\1\u012d",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\1\u00cb\2\uffff\1\u00c0\2\uffff\2\u00c3\2\uffff\1"+
            "\u00c3\33\uffff\1\u00be\12\uffff\1\u00c3\110\uffff\1\u00cc",
            "\1\u012e",
            "\1\u012f",
            "\1\u0130",
            "\1\u0131",
            "\1\u0132",
            "\1\u0133",
            "\1\u00c3\1\u00d2\2\uffff\1\u00c0\2\uffff\2\u00c3\2\uffff\1"+
            "\u00c3\33\uffff\1\u00be\12\uffff\1\u00c3",
            "\1\u0134",
            "\1\u00c3\1\u00d4\2\uffff\1\u00c0\2\uffff\2\u00c3\2\uffff\1"+
            "\u00c3\33\uffff\1\u00be\12\uffff\1\u00c3",
            "\1\u0135",
            "\1\u0136",
            "\1\u0137",
            "\1\u0138\1\u0139\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u013a",
            "\1\u013b\100\uffff\1\u013b\107\uffff\1\u0122",
            "\1\u013c",
            "\1\u013d",
            "\1\u013e",
            "\1\u013f\2\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1"+
            "\63\5\uffff\1\51",
            "\1\u0140\3\uffff\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1"+
            "\63\5\uffff\1\51",
            "\2\163\4\uffff\3\163\2\uffff\1\u0141\33\uffff\1\163\12\uffff"+
            "\1\163\16\uffff\1\163\35\uffff\1\163\51\uffff\1\163\11\uffff"+
            "\2\163\4\uffff\2\163\26\uffff\1\163",
            "\1\163\1\u0142\2\uffff\1\163\2\uffff\2\u00c3\2\uffff\1\u00c3"+
            "\33\uffff\1\163\5\uffff\1\163\4\uffff\1\u00c3\2\uffff\2\163"+
            "\7\uffff\1\163\63\uffff\1\u0127\1\163",
            "\1\u0143",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u00e9",
            "\1\u00e9",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51"+
            "\32\uffff\1\75",
            "\1\51\42\uffff\1\51\5\uffff\1\u0144\1\51\5\uffff\1\u0145\45"+
            "\uffff\1\63\5\uffff\1\51",
            "\1\u0144\6\uffff\1\u0145",
            "\1\u00ee",
            "\1\u00ee",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51"+
            "\32\uffff\1\77",
            "\1\51\42\uffff\1\51\5\uffff\1\u0146\1\51\5\uffff\1\u0147\45"+
            "\uffff\1\63\5\uffff\1\51",
            "\1\u0146\6\uffff\1\u0147",
            "\1\u00f3",
            "\1\u00f3",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51"+
            "\32\uffff\1\101",
            "\1\51\42\uffff\1\51\5\uffff\1\u0148\1\51\5\uffff\1\u0149\45"+
            "\uffff\1\63\5\uffff\1\51",
            "\1\u0148\6\uffff\1\u0149",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u014a",
            "\1\51\42\uffff\1\51\5\uffff\1\u014b\1\51\5\uffff\1\u014c\45"+
            "\uffff\1\63\5\uffff\1\51",
            "\1\u014b\6\uffff\1\u014c",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u0092\2\uffff\1\51\42\uffff\1\51\5\uffff\1\u014d\1\51\6"+
            "\uffff\1\61\44\uffff\1\u0090\5\uffff\1\51",
            "\1\61",
            "\1\61",
            "\1\u014e",
            "\1\u0103\1\u00b9\2\uffff\1\u00b8",
            "\1\u014f",
            "\1\u0150",
            "\1\u0151\100\uffff\1\u0151\107\uffff\1\u0152",
            "\1\u0153",
            "\1\u0154",
            "\1\u0155\160\uffff\1\u0156",
            "\1\u0157\100\uffff\1\u0157\107\uffff\1\u0158",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0159",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u010f\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0110",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\u015d",
            "\1\u015e",
            "\1\u015f",
            "\1\u0116\1\u00b9\2\uffff\1\u00b8",
            "\1\u0160",
            "\1\u0118\1\u00b9\2\uffff\1\u00b8",
            "\1\u0161",
            "\1\u0162",
            "\1\u0163",
            "\1\u0164\1\u0165\1\u00b9\2\uffff\1\u00b8",
            "\1\u0166",
            "\1\u0167\100\uffff\1\u0167\107\uffff\1\u0152",
            "\1\u0168",
            "\1\u0169",
            "\1\u0175\1\uffff\1\u00b9\2\uffff\1\u00b8\73\uffff\1\u018c\43"+
            "\uffff\1\u016b\1\u016c\1\u016d\1\u016e\1\u016f\4\u0170\1\u0171"+
            "\1\u0172\1\u0173\1\u0174\2\uffff\1\u0176\1\u0177\1\u0178\1\u0179"+
            "\1\u017a\1\u017b\1\u017c\1\u017f\1\uffff\1\u017d\1\u017e\1\u0180"+
            "\1\u0181\1\u0182\1\u0183\1\u0184\1\u0185\1\u0186\1\u0187\1\u0188"+
            "\1\u0189\1\u018a\1\u018b\1\u016a",
            "\1\u00c3\1\u00db\2\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1"+
            "\u018d\7\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1",
            "\1\u018e\7\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1",
            "\1\u018f\1\163\1\uffff\1\163\1\uffff\4\163\32\uffff\3\163\1"+
            "\uffff\4\163\12\uffff\7\163\1\uffff\1\163\32\uffff\1\163\60"+
            "\uffff\1\163\37\uffff\1\163\3\uffff\1\163",
            "\1\u0190",
            "\1\u00c0",
            "\1\u0191",
            "\1\u0192",
            "\1\u00c2",
            "\1\u00c2",
            "\1\u0194\2\uffff\1\u0193",
            "\1\u0195",
            "\1\u0196",
            "\1\u0197",
            "\1\u0198\1\uffff\1\u019a\167\uffff\1\u0199",
            "\1\u019b\100\uffff\1\u019b\107\uffff\1\u019c",
            "\1\u019d\1\uffff\1\u019f\167\uffff\1\u019e",
            "\1\u01a0\100\uffff\1\u01a0\107\uffff\1\u01a1",
            "\1\u01a2\1\uffff\1\u01a4\167\uffff\1\u01a3",
            "\1\u01a5\100\uffff\1\u01a5\107\uffff\1\u01a6",
            "\1\u01a7",
            "\1\u01a8",
            "\1\u01a9",
            "\1\u01aa",
            "\1\u00c3\1\u0139\2\uffff\1\u00c0\2\uffff\2\u00c3\2\uffff\1"+
            "\u00c3\33\uffff\1\u00be\12\uffff\1\u00c3",
            "\1\u01ab",
            "\1\u01ac\100\uffff\1\u01ac\107\uffff\1\u01ad",
            "\1\u018e\7\uffff\1\u00bb\1\u00c2\7\uffff\1\u00c1",
            "\1\u01ae",
            "\1\u01af",
            "\1\167",
            "\1\u01b0",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u01b1\1\163\1\uffff\1\163\1\uffff\4\163\32\uffff\3\163\1"+
            "\uffff\4\163\12\uffff\7\163\1\uffff\1\163\32\uffff\1\163\60"+
            "\uffff\1\163\37\uffff\1\163\3\uffff\1\163",
            "\1\u01b2",
            "\1\u00e2",
            "\1\u01b3\100\uffff\1\u01b3\107\uffff\1\u01b4",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u01b5\100\uffff\1\u01b5\107\uffff\1\u01b6",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u01b7\100\uffff\1\u01b7\107\uffff\1\u01b8",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u01b9\100\uffff\1\u01b9\107\uffff\1\u01ba",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\u01bb\100\uffff\1\u01bb",
            "\1\u01bd\2\uffff\1\u01bc",
            "\1\u01be",
            "\1\u01bf",
            "\1\u011f\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u01c0\7\uffff\1"+
            "\u010b\1\u010a\7\uffff\1\u0109",
            "\1\u01c1\7\uffff\1\u010b\1\u010a\7\uffff\1\u0109",
            "\1\u01c2",
            "\1\u01c3",
            "\1\u01c4",
            "\1\u01c5",
            "\1\u010a",
            "\1\u010a",
            "\1\u01c6",
            "\1\u01c7\1\uffff\1\u01c9\167\uffff\1\u01c8",
            "\1\u01ca\100\uffff\1\u01ca\107\uffff\1\u01cb",
            "\1\u01cc\1\uffff\1\u01ce\167\uffff\1\u01cd",
            "\1\u01cf\100\uffff\1\u01cf\107\uffff\1\u01d0",
            "\1\u01d1\1\uffff\1\u01d3\167\uffff\1\u01d2",
            "\1\u01d4\100\uffff\1\u01d4\107\uffff\1\u01d5",
            "\1\u01d6",
            "\1\u01d7",
            "\1\u01d8",
            "\1\u01d9",
            "\1\u0165\1\u00b9\2\uffff\1\u00b8",
            "\1\u01da",
            "\1\u01db\100\uffff\1\u01db\107\uffff\1\u01dc",
            "\1\u01c1\7\uffff\1\u010b\1\u010a\7\uffff\1\u0109",
            "\1\u01dd",
            "\1\u01de",
            "\1\u0175\1\uffff\1\u00b9\2\uffff\1\u00b8\73\uffff\1\u018c\43"+
            "\uffff\1\u016b\1\u016c\1\u016d\1\u016e\1\u016f\4\u0170\1\u0171"+
            "\1\u0172\1\u0173\1\u0174\2\uffff\1\u0176\1\u0177\1\u0178\1\u0179"+
            "\1\u017a\1\u017b\1\u017c\1\u017f\1\uffff\1\u017d\1\u017e\1\u0180"+
            "\1\u0181\1\u0182\1\u0183\1\u0184\1\u0185\1\u0186\1\u0187\1\u0188"+
            "\1\u0189\1\u018a\1\u018b",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01df\1\u00b9\2\uffff\1\u00b8",
            "\1\u01e1\1\u00b9\2\uffff\1\u00b8\151\uffff\1\u01e0",
            "\1\u01e2\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01e7\1\u01e3\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u01e8\7"+
            "\uffff\1\u01e9\1\u01e6\7\uffff\1\u01e5\64\uffff\1\u01e4",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01ea\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01eb",
            "\1\u01ec\1\u01ed\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01ee",
            "\1\u01ef\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01f0",
            "\1\u01f1\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01f2",
            "\1\u01f3\1\u01f4\1\u00b9\2\uffff\1\u00b8",
            "\1\u01f5\1\u01f6\1\u00b9\2\uffff\1\u00b8",
            "\1\u01f7\1\u00b9\2\uffff\1\u00b8",
            "\1\u01f8\1\u00b9\2\uffff\1\u00b8",
            "\2\u01f9",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01fa",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u01fb\7\uffff\1\u01e9\1"+
            "\u01e6\7\uffff\1\u01e5",
            "\1\u01fc\1\u00b9\2\uffff\1\u00b8",
            "\1\u01fd\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u01e8\7\uffff\1"+
            "\u01e9\1\u01e6\7\uffff\1\u01e5",
            "\1\u01fe\100\uffff\1\u01fe\107\uffff\1\u01ff",
            "\1\u0200\100\uffff\1\u0200\107\uffff\1\u01ff",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\113\uffff\1\u00bd"+
            "\33\uffff\1\u0201",
            "\1\u0202\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u0203",
            "\1\u00c3\1\u0204\2\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u0205",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u019a",
            "\1\u019a",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\123\uffff\1\u00cc",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1\u0206\6"+
            "\uffff\1\u0207",
            "\1\u0206\6\uffff\1\u0207",
            "\1\u019f",
            "\1\u019f",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\123\uffff\1\u00ce",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1\u0208\6"+
            "\uffff\1\u0209",
            "\1\u0208\6\uffff\1\u0209",
            "\1\u01a4",
            "\1\u01a4",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\123\uffff\1\u00d0",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1\u020a\6"+
            "\uffff\1\u020b",
            "\1\u020a\6\uffff\1\u020b",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u020c",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1\u020d\6"+
            "\uffff\1\u020e",
            "\1\u020d\6\uffff\1\u020e",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u020f",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be\113\uffff\1\u00bd",
            "\1\u0210",
            "\1\u0211\6\uffff\1\u0145",
            "\1\u0211\6\uffff\1\u0145",
            "\1\u0212\6\uffff\1\u0147",
            "\1\u0212\6\uffff\1\u0147",
            "\1\u0213\6\uffff\1\u0149",
            "\1\u0213\6\uffff\1\u0149",
            "\1\u0214\6\uffff\1\u014c",
            "\1\u0214\6\uffff\1\u014c",
            "\1\u0092\2\uffff\1\51\42\uffff\1\51\5\uffff\1\u014d\1\51\53"+
            "\uffff\1\u0090\5\uffff\1\51",
            "\1\u0215",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0216\100\uffff\1\u0216\107\uffff\1\u0217",
            "\1\u0218\100\uffff\1\u0218\107\uffff\1\u0217",
            "\1\u00b9\2\uffff\1\u00b8\155\uffff\1\u0107",
            "\1\u0219\1\uffff\1\u00b9\2\uffff\1\u00b8",
            "\1\u021a",
            "\1\u021b\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01c9",
            "\1\u01c9",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0110",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u021c\6\uffff\1\u021d",
            "\1\u021c\6\uffff\1\u021d",
            "\1\u01ce",
            "\1\u01ce",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0112",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u021e\6\uffff\1\u021f",
            "\1\u021e\6\uffff\1\u021f",
            "\1\u01d3",
            "\1\u01d3",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u0114",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0220\6\uffff\1\u0221",
            "\1\u0220\6\uffff\1\u0221",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0222",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0223\6\uffff\1\u0224",
            "\1\u0223\6\uffff\1\u0224",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0225",
            "\1\u01e1\1\u00b9\2\uffff\1\u00b8",
            "\1\u0226",
            "\1\u0227",
            "\1\u0228",
            "\1\u0229",
            "\1\u022a\100\uffff\1\u022a\107\uffff\1\u022b",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u022c\160\uffff\1\u022d",
            "\1\u022e\100\uffff\1\u022e\107\uffff\1\u022f",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0230",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01ed\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01ee",
            "\1\u0231",
            "\1\u0232",
            "\1\u0233",
            "\1\u0234",
            "\1\u0235",
            "\1\u0236",
            "\1\u01f4\1\u00b9\2\uffff\1\u00b8",
            "\1\u0237",
            "\1\u01f6\1\u00b9\2\uffff\1\u00b8",
            "\1\u0238",
            "\1\u0239",
            "\1\u023a",
            "\1\u023b\1\u023c\1\u00b9\2\uffff\1\u00b8",
            "\1\u023d",
            "\1\u023e\100\uffff\1\u023e\107\uffff\1\u022f",
            "\1\u023f",
            "\1\u0240",
            "\1\u00c3\1\u00db\2\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1"+
            "\u0241\7\uffff\1\u00bb",
            "\1\u00bb",
            "\1\u00bb",
            "",
            "\1\u00c3\3\uffff\1\u00c0\2\uffff\2\u00c3\2\uffff\1\u00c3\33"+
            "\uffff\1\u00be\12\uffff\1\u00c3",
            "\1\163\42\uffff\1\163\112\uffff\1\u0127\1\163\33\uffff\1\u0201",
            "\1\u0242",
            "\1\u0194",
            "\1\u0243\100\uffff\1\u0243\107\uffff\1\u0244",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u0245\100\uffff\1\u0245\107\uffff\1\u0246",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u0247\100\uffff\1\u0247\107\uffff\1\u0248",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u0249\100\uffff\1\u0249\107\uffff\1\u024a",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\51\42\uffff\1\51\6\uffff\1\51\53\uffff\1\63\5\uffff\1\51",
            "\1\163\42\uffff\1\163\112\uffff\1\u0127\1\163",
            "\1\u024b\100\uffff\1\u024b\107\uffff\1\u024c",
            "\1\u024d\100\uffff\1\u024d\107\uffff\1\u024e",
            "\1\u024f\100\uffff\1\u024f\107\uffff\1\u0250",
            "\1\u0251\100\uffff\1\u0251\107\uffff\1\u0252",
            "\1\u01bd",
            "\1\u011f\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0253\7\uffff\1"+
            "\u010b",
            "\1\u010b",
            "\1\u010b",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0156",
            "\1\u0254",
            "\1\u0255\100\uffff\1\u0255\107\uffff\1\u0256",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0257\100\uffff\1\u0257\107\uffff\1\u0258",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0259\100\uffff\1\u0259\107\uffff\1\u025a",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u025b\100\uffff\1\u025b\107\uffff\1\u025c",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u025e\2\uffff\1\u025d",
            "\1\u025f",
            "\1\u0260",
            "\1\u0261",
            "\1\u0262",
            "\1\u01e6",
            "\1\u01e6",
            "\1\u0263",
            "\1\u0264",
            "\1\u01fd\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0265\7\uffff\1"+
            "\u01e9\1\u01e6\7\uffff\1\u01e5",
            "\1\u0266\7\uffff\1\u01e9\1\u01e6\7\uffff\1\u01e5",
            "\1\u0267",
            "\1\u0268\1\uffff\1\u026a\167\uffff\1\u0269",
            "\1\u026b\100\uffff\1\u026b\107\uffff\1\u026c",
            "\1\u026d\1\uffff\1\u026f\167\uffff\1\u026e",
            "\1\u0270\100\uffff\1\u0270\107\uffff\1\u0271",
            "\1\u0272\1\uffff\1\u0274\167\uffff\1\u0273",
            "\1\u0275\100\uffff\1\u0275\107\uffff\1\u0276",
            "\1\u0277",
            "\1\u0278",
            "\1\u0279",
            "\1\u027a",
            "\1\u023c\1\u00b9\2\uffff\1\u00b8",
            "\1\u027b",
            "\1\u027c\100\uffff\1\u027c\107\uffff\1\u027d",
            "\1\u0266\7\uffff\1\u01e9\1\u01e6\7\uffff\1\u01e5",
            "\1\u027e",
            "\1\u027f",
            "\1\u0280\100\uffff\1\u0280",
            "\1\u0281",
            "\1\u0282\6\uffff\1\u0207",
            "\1\u0282\6\uffff\1\u0207",
            "\1\u0283\6\uffff\1\u0209",
            "\1\u0283\6\uffff\1\u0209",
            "\1\u0284\6\uffff\1\u020b",
            "\1\u0284\6\uffff\1\u020b",
            "\1\u0285\6\uffff\1\u020e",
            "\1\u0285\6\uffff\1\u020e",
            "\1\u0145",
            "\1\u0145",
            "\1\u0147",
            "\1\u0147",
            "\1\u0149",
            "\1\u0149",
            "\1\u014c",
            "\1\u014c",
            "\1\u0286\100\uffff\1\u0286",
            "\1\u0287",
            "\1\u0288\6\uffff\1\u021d",
            "\1\u0288\6\uffff\1\u021d",
            "\1\u0289\6\uffff\1\u021f",
            "\1\u0289\6\uffff\1\u021f",
            "\1\u028a\6\uffff\1\u0221",
            "\1\u028a\6\uffff\1\u0221",
            "\1\u028b\6\uffff\1\u0224",
            "\1\u028b\6\uffff\1\u0224",
            "\1\u028c",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8\155\uffff\1\u01e4",
            "\1\u028d\1\uffff\1\u00b9\2\uffff\1\u00b8",
            "\1\u028e",
            "\1\u028f\1\u00b9\2\uffff\1\u00b8",
            "\1\u0290\100\uffff\1\u0290\107\uffff\1\u0291",
            "\1\u0292\100\uffff\1\u0292\107\uffff\1\u0291",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u026a",
            "\1\u026a",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01ee",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0293\6\uffff\1\u0294",
            "\1\u0293\6\uffff\1\u0294",
            "\1\u026f",
            "\1\u026f",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01f0",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0295\6\uffff\1\u0296",
            "\1\u0295\6\uffff\1\u0296",
            "\1\u0274",
            "\1\u0274",
            "\1\u00b9\2\uffff\1\u00b8\165\uffff\1\u01f2",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0297\6\uffff\1\u0298",
            "\1\u0297\6\uffff\1\u0298",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0299",
            "\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u029a\6\uffff\1\u029b",
            "\1\u029a\6\uffff\1\u029b",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00c3\1\u00db\2\uffff\1\u00c0\42\uffff\1\u00be\5\uffff\1"+
            "\u0241",
            "\1\u00c3\3\uffff\1\u00c0\42\uffff\1\u00be",
            "\1\u029c\100\uffff\1\u029c\107\uffff\1\u029d",
            "\1\u029e\100\uffff\1\u029e\107\uffff\1\u029f",
            "\1\u02a0\100\uffff\1\u02a0\107\uffff\1\u02a1",
            "\1\u02a2\100\uffff\1\u02a2\107\uffff\1\u02a3",
            "\1\u011f\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u0253",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u02a4\100\uffff\1\u02a4\107\uffff\1\u02a5",
            "\1\u02a6\100\uffff\1\u02a6\107\uffff\1\u02a7",
            "\1\u02a8\100\uffff\1\u02a8\107\uffff\1\u02a9",
            "\1\u02aa\100\uffff\1\u02aa\107\uffff\1\u02ab",
            "\1\u025e",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u022d",
            "\1\u02ac",
            "\1\u01fd\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u02ad\7\uffff\1"+
            "\u01e9",
            "\1\u01e9",
            "\1\u01e9",
            "\1\u02ae\100\uffff\1\u02ae\107\uffff\1\u02af",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u02b0\100\uffff\1\u02b0\107\uffff\1\u02b1",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u02b2\100\uffff\1\u02b2\107\uffff\1\u02b3",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u02b4\100\uffff\1\u02b4\107\uffff\1\u02b5",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u0207",
            "\1\u0207",
            "\1\u0209",
            "\1\u0209",
            "\1\u020b",
            "\1\u020b",
            "\1\u020e",
            "\1\u020e",
            "\1\u021d",
            "\1\u021d",
            "\1\u021f",
            "\1\u021f",
            "\1\u0221",
            "\1\u0221",
            "\1\u0224",
            "\1\u0224",
            "\1\u02b6",
            "\1\u02b7\100\uffff\1\u02b7",
            "\1\u02b8\6\uffff\1\u0294",
            "\1\u02b8\6\uffff\1\u0294",
            "\1\u02b9\6\uffff\1\u0296",
            "\1\u02b9\6\uffff\1\u0296",
            "\1\u02ba\6\uffff\1\u0298",
            "\1\u02ba\6\uffff\1\u0298",
            "\1\u02bb\6\uffff\1\u029b",
            "\1\u02bb\6\uffff\1\u029b",
            "\1\u00b9\2\uffff\1\u00b8",
            "\1\u01fd\1\u00b9\2\uffff\1\u00b8\47\uffff\1\u02ad",
            "\1\u02bc\100\uffff\1\u02bc\107\uffff\1\u02bd",
            "\1\u02be\100\uffff\1\u02be\107\uffff\1\u02bf",
            "\1\u02c0\100\uffff\1\u02c0\107\uffff\1\u02c1",
            "\1\u02c2\100\uffff\1\u02c2\107\uffff\1\u02c3",
            "\1\u0294",
            "\1\u0294",
            "\1\u0296",
            "\1\u0296",
            "\1\u0298",
            "\1\u0298",
            "\1\u029b",
            "\1\u029b"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "164:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_192 = input.LA(1);

                         
                        int index26_192 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred59_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))) ) {s = 115;}

                        else if ( ((synpred60_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE")))) ) {s = 195;}

                         
                        input.seek(index26_192);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA35_eotS =
        "\u00c3\uffff";
    static final String DFA35_eofS =
        "\u00c3\uffff";
    static final String DFA35_minS =
        "\3\25\1\73\4\uffff\5\31\3\26\2\31\1\25\3\31\1\26\1\31\2\25\2\26"+
        "\2\25\2\26\1\u008f\7\31\2\26\1\uffff\1\25\1\uffff\1\40\1\26\2\40"+
        "\4\25\1\26\1\31\1\25\1\31\1\40\1\31\1\26\1\40\1\u0091\1\40\1\u0091"+
        "\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\1\40\1\25\1"+
        "\u00a1\4\27\1\uffff\1\25\1\uffff\1\25\1\uffff\1\26\1\102\1\40\1"+
        "\25\2\113\1\27\6\25\4\27\1\26\1\40\1\25\1\102\2\27\1\40\4\31\1\25"+
        "\1\26\1\40\2\25\1\40\1\25\1\27\1\26\1\31\2\27\2\31\1\102\2\27\2"+
        "\31\1\102\2\27\2\31\1\102\4\31\1\27\1\31\1\102\2\31\1\27\1\31\1"+
        "\40\1\27\1\26\2\112\1\u0087\1\40\1\25\1\31\1\25\1\31\1\25\2\31\1"+
        "\25\1\31\1\27\2\25\1\27\10\102\1\u0087\1\uffff\1\26\1\31\4\25\10"+
        "\111";
    static final String DFA35_maxS =
        "\1\u00d9\2\u009f\1\u00a2\4\uffff\6\165\1\u0084\3\165\1\u0088\5\165"+
        "\1\25\3\u0090\4\165\1\u0090\3\165\1\u0090\5\165\1\uffff\1\25\1\uffff"+
        "\1\40\1\165\2\40\1\126\1\25\1\u00db\1\u009e\1\u0087\1\165\1\u009e"+
        "\1\165\1\40\1\165\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091"+
        "\1\165\1\40\1\165\3\40\1\165\1\u0091\1\u009e\1\40\1\126\1\u00a2"+
        "\1\32\3\27\1\uffff\1\25\1\uffff\1\u0088\1\uffff\1\165\1\123\1\40"+
        "\1\25\2\113\1\27\1\u008f\1\u009e\1\u008f\1\u009e\1\u008f\1\u009e"+
        "\4\27\1\165\1\40\1\u009e\1\123\2\27\1\40\3\165\1\u0088\1\165\1\u0087"+
        "\1\40\1\u009e\1\u00db\1\40\1\u009e\1\27\2\165\2\27\1\u0090\1\165"+
        "\1\111\2\27\1\u0090\1\165\1\111\2\27\1\u0090\1\165\1\111\4\165\1"+
        "\27\1\165\1\111\2\165\1\27\1\165\1\40\1\27\1\165\2\112\1\u0087\1"+
        "\40\1\u009e\1\165\1\u009e\1\165\1\u009e\2\165\1\u009e\1\165\1\27"+
        "\1\u00a4\1\126\1\27\10\111\1\u00a4\1\uffff\2\165\4\u009e\10\111";
    static final String DFA35_acceptS =
        "\4\uffff\1\10\1\11\1\12\1\1\42\uffff\1\4\1\uffff\1\2\45\uffff\1"+
        "\3\1\uffff\1\6\1\uffff\1\5\135\uffff\1\7\16\uffff";
    static final String DFA35_specialS =
        "\u00c3\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\1\100\uffff\1\2\27\uffff\1\3\62\uffff\1\4\1\5\66\uffff\1"+
            "\6",
            "\1\22\54\uffff\1\52\23\uffff\1\51\34\uffff\1\7\3\uffff\1\52"+
            "\2\uffff\1\10\1\11\1\12\1\13\1\14\4\15\1\16\1\17\1\20\1\21\2"+
            "\uffff\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\34\1\uffff\1\32"+
            "\1\33\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50",
            "\1\7\54\uffff\1\52\23\uffff\1\7\34\uffff\1\7\3\uffff\1\52\2"+
            "\uffff\15\7\2\uffff\10\7\1\uffff\16\7",
            "\1\53\145\uffff\1\4\1\5",
            "",
            "",
            "",
            "",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\55\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\57\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7\16\uffff\1\56",
            "\1\60\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\65\1\61\2\uffff\1\7\42\uffff\1\7\5\uffff\1\64\1\7\6\uffff"+
            "\1\66\1\70\7\uffff\1\67\33\uffff\1\63\5\uffff\1\7\22\uffff\1"+
            "\62",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\71\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\72",
            "\1\73\1\74\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1"+
            "\54\5\uffff\1\7\32\uffff\1\75",
            "\1\76\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7\32\uffff\1\77",
            "\1\100\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7\32\uffff\1\101",
            "\1\102\1\103\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\104\1\105\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\106\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\107\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\2\110",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7\32"+
            "\uffff\1\111",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\5\uffff\1\112\1\7\6\uffff\1\66\1\70\7\uffff"+
            "\1\67\33\uffff\1\54\5\uffff\1\7",
            "\1\113\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\114\2\uffff\1\7\42\uffff\1\7\5\uffff\1\64\1\7\6\uffff\1"+
            "\66\1\70\7\uffff\1\67\33\uffff\1\63\5\uffff\1\7",
            "",
            "\1\115",
            "",
            "\1\116",
            "\1\57\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\117",
            "\1\120",
            "\1\122\12\uffff\1\121\65\uffff\1\122",
            "\1\123",
            "\1\125\100\uffff\1\54\43\uffff\15\54\2\uffff\10\54\1\uffff"+
            "\16\54\3\uffff\1\124\12\uffff\1\122\54\uffff\1\126",
            "\1\127\100\uffff\1\127\107\uffff\1\130",
            "\1\131\160\uffff\1\132",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\133\100\uffff\1\133\107\uffff\1\134",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\135",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\74\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7\32\uffff\1\75",
            "\1\136",
            "\1\137",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\103\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\144",
            "\1\105\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\145",
            "\1\146",
            "\1\147",
            "\1\150\1\151\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\152",
            "\1\153\100\uffff\1\153\107\uffff\1\130",
            "\1\154",
            "\1\122\12\uffff\1\155\65\uffff\1\122",
            "\1\4\1\5",
            "\1\157\2\uffff\1\156",
            "\1\160",
            "\1\161",
            "\1\162",
            "",
            "\1\163",
            "",
            "\1\164\1\165\2\uffff\1\54\42\uffff\1\54\5\uffff\1\54\7\uffff"+
            "\2\54\7\uffff\1\54\64\uffff\1\54",
            "",
            "\1\170\2\uffff\1\7\42\uffff\1\7\5\uffff\1\166\1\7\6\uffff\1"+
            "\66\1\70\7\uffff\1\67\33\uffff\1\167\5\uffff\1\7",
            "\1\171\7\uffff\1\66\1\70\7\uffff\1\67",
            "\1\172",
            "\1\173",
            "\1\70",
            "\1\70",
            "\1\174",
            "\1\175\1\uffff\1\177\167\uffff\1\176",
            "\1\u0080\100\uffff\1\u0080\107\uffff\1\u0081",
            "\1\u0082\1\uffff\1\u0084\167\uffff\1\u0083",
            "\1\u0085\100\uffff\1\u0085\107\uffff\1\u0086",
            "\1\u0087\1\uffff\1\u0089\167\uffff\1\u0088",
            "\1\u008a\100\uffff\1\u008a\107\uffff\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\151\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5"+
            "\uffff\1\7",
            "\1\u0090",
            "\1\u0091\100\uffff\1\u0091\107\uffff\1\u0092",
            "\1\171\7\uffff\1\66\1\70\7\uffff\1\67",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7\22"+
            "\uffff\1\62",
            "\1\u0096\3\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54"+
            "\5\uffff\1\7",
            "\1\u0097\5\uffff\2\54\2\uffff\1\54\46\uffff\1\54\77\uffff\1"+
            "\54",
            "\1\u0098",
            "\1\u0099\100\uffff\1\u0099\107\uffff\1\u009a",
            "\1\125\100\uffff\1\54\43\uffff\15\54\2\uffff\10\54\1\uffff"+
            "\16\54\3\uffff\1\124\67\uffff\1\126",
            "\1\155",
            "\1\u009b\100\uffff\1\u009b\107\uffff\1\u009a",
            "\1\u009c",
            "\1\u009d\2\uffff\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54"+
            "\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\177",
            "\1\177",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7\32"+
            "\uffff\1\75",
            "\1\7\42\uffff\1\7\5\uffff\1\u009e\1\7\5\uffff\1\u009f\45\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\u009e\6\uffff\1\u009f",
            "\1\u0084",
            "\1\u0084",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7\32"+
            "\uffff\1\77",
            "\1\7\42\uffff\1\7\5\uffff\1\u00a0\1\7\5\uffff\1\u00a1\45\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\u00a0\6\uffff\1\u00a1",
            "\1\u0089",
            "\1\u0089",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7\32"+
            "\uffff\1\101",
            "\1\7\42\uffff\1\7\5\uffff\1\u00a2\1\7\5\uffff\1\u00a3\45\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\u00a2\6\uffff\1\u00a3",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00a4",
            "\1\7\42\uffff\1\7\5\uffff\1\u00a5\1\7\5\uffff\1\u00a6\45\uffff"+
            "\1\54\5\uffff\1\7",
            "\1\u00a5\6\uffff\1\u00a6",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\157",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00a7",
            "\1\u00a8",
            "\1\170\2\uffff\1\7\42\uffff\1\7\5\uffff\1\u00a9\1\7\6\uffff"+
            "\1\66\44\uffff\1\167\5\uffff\1\7",
            "\1\66",
            "\1\66",
            "\1\132",
            "\1\u00aa",
            "\1\u00ab\100\uffff\1\u00ab\107\uffff\1\u00ac",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00ad\100\uffff\1\u00ad\107\uffff\1\u00ae",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00af\100\uffff\1\u00af\107\uffff\1\u00b0",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00b1\100\uffff\1\u00b1\107\uffff\1\u00b2",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00b3",
            "\1\54\3\uffff\1\54\42\uffff\1\54\113\uffff\1\54\33\uffff\1"+
            "\u00b4",
            "\1\u00b5\100\uffff\1\u00b5",
            "\1\u00b6",
            "\1\u00b7\6\uffff\1\u009f",
            "\1\u00b7\6\uffff\1\u009f",
            "\1\u00b8\6\uffff\1\u00a1",
            "\1\u00b8\6\uffff\1\u00a1",
            "\1\u00b9\6\uffff\1\u00a3",
            "\1\u00b9\6\uffff\1\u00a3",
            "\1\u00ba\6\uffff\1\u00a6",
            "\1\u00ba\6\uffff\1\u00a6",
            "\1\54\34\uffff\1\u00b4",
            "",
            "\1\170\2\uffff\1\7\42\uffff\1\7\5\uffff\1\u00a9\1\7\53\uffff"+
            "\1\167\5\uffff\1\7",
            "\1\7\42\uffff\1\7\6\uffff\1\7\53\uffff\1\54\5\uffff\1\7",
            "\1\u00bb\100\uffff\1\u00bb\107\uffff\1\u00bc",
            "\1\u00bd\100\uffff\1\u00bd\107\uffff\1\u00be",
            "\1\u00bf\100\uffff\1\u00bf\107\uffff\1\u00c0",
            "\1\u00c1\100\uffff\1\u00c1\107\uffff\1\u00c2",
            "\1\u009f",
            "\1\u009f",
            "\1\u00a1",
            "\1\u00a1",
            "\1\u00a3",
            "\1\u00a3",
            "\1\u00a6",
            "\1\u00a6"
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "198:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );";
        }
    }
    static final String DFA45_eotS =
        "\u0170\uffff";
    static final String DFA45_eofS =
        "\u0170\uffff";
    static final String DFA45_minS =
        "\3\25\1\73\3\uffff\1\25\5\31\3\26\2\31\1\26\3\31\1\26\1\31\2\25"+
        "\2\26\2\25\2\26\1\u008f\7\31\1\26\2\uffff\4\25\1\26\1\25\1\31\1"+
        "\25\1\31\1\25\1\40\1\26\2\40\1\25\1\40\1\31\1\26\1\40\1\u0091\1"+
        "\40\1\u0091\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\1"+
        "\40\1\u00a1\1\27\1\uffff\1\25\2\uffff\30\25\1\u008f\11\25\1\uffff"+
        "\1\40\1\25\1\26\1\102\2\113\1\25\5\27\6\25\4\27\1\26\1\40\1\25\1"+
        "\102\1\27\1\31\1\25\1\164\1\0\1\uffff\1\40\1\25\2\40\7\25\1\40\2"+
        "\25\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\25\1\40\1\25\3\40\1"+
        "\25\1\u0091\1\25\2\40\1\27\1\26\2\25\1\40\3\25\1\40\5\31\2\27\2"+
        "\31\1\102\2\27\2\31\1\102\2\27\2\31\1\102\4\31\1\27\1\31\1\102\3"+
        "\31\3\27\1\25\1\102\1\27\1\25\1\40\1\25\2\113\1\27\6\25\4\27\1\25"+
        "\1\40\1\25\1\102\2\27\1\u0087\1\40\1\26\2\112\1\27\1\40\1\27\1\25"+
        "\1\31\1\25\1\31\1\25\2\31\1\25\1\31\1\40\7\25\1\27\2\25\2\27\2\25"+
        "\1\102\2\27\2\25\1\102\2\27\2\25\1\102\4\25\1\27\1\25\1\102\2\25"+
        "\1\27\2\25\1\27\10\102\1\27\1\25\2\112\1\uffff\1\25\1\31\1\40\11"+
        "\25\1\31\1\26\1\31\5\25\1\27\10\102\10\111\6\25\10\111";
    static final String DFA45_maxS =
        "\1\u00d9\2\u009f\1\u00a2\3\uffff\1\u0088\6\165\1\u0084\11\165\1"+
        "\25\3\u0090\4\165\1\u0090\3\165\1\u0090\4\165\2\uffff\1\25\1\126"+
        "\1\25\1\u00db\1\u0087\1\u009e\1\165\1\u009e\1\165\1\u009f\1\40\1"+
        "\165\2\40\1\126\1\40\1\165\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40"+
        "\1\u0091\1\165\1\40\1\165\3\40\1\165\1\u0091\1\u009e\1\40\1\u00a2"+
        "\1\27\1\uffff\1\25\2\uffff\6\74\1\u0084\3\74\1\u009f\5\74\1\25\3"+
        "\u0090\4\74\1\u0090\3\74\1\u0090\2\74\1\123\1\74\1\123\1\uffff\1"+
        "\40\1\25\1\165\1\123\2\113\1\u009f\1\32\4\27\1\u008f\1\u009e\1\u008f"+
        "\1\u009e\1\u008f\1\u009e\4\27\1\165\1\40\1\u009e\1\123\1\27\1\u0088"+
        "\1\165\1\164\1\0\1\uffff\1\40\1\74\2\40\1\u009e\1\u00c6\1\25\1\u0088"+
        "\1\74\1\u009e\1\74\1\40\1\74\1\u0090\1\40\1\u0091\1\40\1\u0091\1"+
        "\40\1\u0091\1\107\1\40\1\107\3\40\1\74\1\u0091\1\u009e\2\40\1\27"+
        "\1\165\1\u009e\1\u00db\1\40\1\u009e\1\u00c6\1\u0088\1\40\5\165\2"+
        "\27\1\u0090\1\165\1\111\2\27\1\u0090\1\165\1\111\2\27\1\u0090\1"+
        "\165\1\111\4\165\1\27\1\165\1\111\2\165\1\31\1\32\2\27\2\123\1\u00c4"+
        "\1\25\1\40\1\25\2\113\1\27\1\u008f\1\u009e\1\u008f\1\u009e\1\u008f"+
        "\1\u009e\4\27\1\107\1\40\1\u009e\1\123\2\27\1\u0087\1\40\1\165\2"+
        "\112\1\u00c4\1\40\1\27\1\u009e\1\165\1\u009e\1\165\1\u009e\2\165"+
        "\1\u009e\1\165\1\40\3\74\2\u009e\1\u00a4\1\74\1\27\2\74\2\27\1\u0090"+
        "\2\111\2\27\1\u0090\2\111\2\27\1\u0090\2\111\4\74\1\27\2\111\2\74"+
        "\1\27\1\126\1\u0088\1\27\10\111\1\27\3\112\1\uffff\1\107\1\u00a4"+
        "\1\40\1\u009e\1\74\1\u009e\1\74\1\u009e\2\74\1\u009e\1\74\2\165"+
        "\1\u0088\4\u009e\1\126\1\27\20\111\1\102\1\74\4\u009e\10\111";
    static final String DFA45_acceptS =
        "\4\uffff\1\10\1\11\1\13\42\uffff\1\4\1\1\44\uffff\1\3\1\uffff\1"+
        "\6\1\5\42\uffff\1\12\37\uffff\1\2\u00a6\uffff\1\7\63\uffff";
    static final String DFA45_specialS =
        "\u0094\uffff\1\0\u00db\uffff}>";
    static final String[] DFA45_transitionS = {
            "\1\1\100\uffff\1\2\27\uffff\1\3\62\uffff\1\4\1\5\66\uffff\1"+
            "\6",
            "\1\7\54\uffff\1\51\23\uffff\1\22\34\uffff\1\52\3\uffff\1\51"+
            "\2\uffff\1\10\1\11\1\12\1\13\1\14\4\15\1\16\1\17\1\20\1\21\2"+
            "\uffff\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\34\1\uffff\1\32"+
            "\1\33\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50",
            "\1\52\54\uffff\1\51\23\uffff\1\52\34\uffff\1\52\3\uffff\1\51"+
            "\2\uffff\15\52\2\uffff\10\52\1\uffff\16\52",
            "\1\53\145\uffff\1\4\1\5",
            "",
            "",
            "",
            "\1\57\1\54\2\uffff\1\52\42\uffff\1\52\5\uffff\1\60\1\52\6\uffff"+
            "\1\61\1\63\7\uffff\1\62\33\uffff\1\56\5\uffff\1\52\22\uffff"+
            "\1\55",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\65\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\67\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52\16\uffff\1\66",
            "\1\70\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\71\2\uffff\1\52\42\uffff\1\52\5\uffff\1\60\1\52\6\uffff"+
            "\1\61\1\63\7\uffff\1\62\33\uffff\1\56\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\72\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\73",
            "\1\74\1\75\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff"+
            "\1\64\5\uffff\1\52\32\uffff\1\76",
            "\1\77\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52\32\uffff\1\100",
            "\1\101\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52\32\uffff\1\102",
            "\1\103\1\104\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff"+
            "\1\64\5\uffff\1\52",
            "\1\105\1\106\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff"+
            "\1\64\5\uffff\1\52",
            "\1\107\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\110\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\2\111",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52"+
            "\32\uffff\1\112",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\5\uffff\1\113\1\52\6\uffff\1\61\1\63\7"+
            "\uffff\1\62\33\uffff\1\64\5\uffff\1\52",
            "\1\114\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "",
            "",
            "\1\115",
            "\1\117\12\uffff\1\116\65\uffff\1\117",
            "\1\120",
            "\1\135\1\165\77\uffff\1\164\43\uffff\1\123\1\124\1\125\1\126"+
            "\1\127\4\130\1\131\1\132\1\133\1\134\2\uffff\1\136\1\137\1\140"+
            "\1\141\1\142\1\143\1\144\1\147\1\uffff\1\145\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
            "\3\uffff\1\121\12\uffff\1\117\54\uffff\1\122",
            "\1\166\160\uffff\1\167",
            "\1\170\100\uffff\1\170\107\uffff\1\171",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\172\100\uffff\1\172\107\uffff\1\173",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\174\1\165\77\uffff\1\164\43\uffff\1\123\1\124\1\125\1\126"+
            "\1\127\4\130\1\131\1\132\1\133\1\134\2\uffff\1\136\1\137\1\140"+
            "\1\141\1\142\1\143\1\144\1\147\1\uffff\1\145\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163",
            "\1\175",
            "\1\67\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\176",
            "\1\177",
            "\1\117\12\uffff\1\u0080\65\uffff\1\117",
            "\1\u0081",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\75\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52\32\uffff\1\76",
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\1\104\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\u0088",
            "\1\106\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64"+
            "\5\uffff\1\52",
            "\1\u0089",
            "\1\u008a",
            "\1\u008b",
            "\1\u008c\1\u008d\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53"+
            "\uffff\1\64\5\uffff\1\52",
            "\1\u008e",
            "\1\u008f\100\uffff\1\u008f\107\uffff\1\171",
            "\1\u0090",
            "\1\4\1\5",
            "\1\u0091",
            "",
            "\1\u0092",
            "",
            "",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u0096\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u0098\2\uffff\1\u0094\42\uffff\1\u0093\107\uffff"+
            "\1\u0097",
            "\1\u0095\1\u0099\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u009d\1\u009b\2\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1"+
            "\u009a\7\uffff\1\u009e\1\u00a0\7\uffff\1\u009f\2\uffff\1\165"+
            "\43\uffff\15\165\1\uffff\1\u009c\10\165\1\uffff\16\165",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u00a1\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u00a2",
            "\1\u00a3\1\u00a4\2\uffff\1\u0094\42\uffff\1\u0093\123\uffff"+
            "\1\u00a5",
            "\1\u0095\1\u00a6\2\uffff\1\u0094\42\uffff\1\u0093\123\uffff"+
            "\1\u00a7",
            "\1\u0095\1\u00a8\2\uffff\1\u0094\42\uffff\1\u0093\123\uffff"+
            "\1\u00a9",
            "\1\u00aa\1\u00ab\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u00ac\1\u00ad\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u00ae\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u00af\2\uffff\1\u0094\42\uffff\1\u0093",
            "\2\u00b0",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\123\uffff\1\u00b1",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1\u00b2\7"+
            "\uffff\1\u009e\1\u00a0\7\uffff\1\u009f",
            "\1\u0095\1\u00b3\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u00b4\2\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1"+
            "\u009a\7\uffff\1\u009e\1\u00a0\7\uffff\1\u009f",
            "",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00b9\2\uffff\1\52\42\uffff\1\52\5\uffff\1\u00b7\1\52\6"+
            "\uffff\1\61\1\63\7\uffff\1\62\33\uffff\1\u00b8\5\uffff\1\52",
            "\1\u00ba\7\uffff\1\61\1\63\7\uffff\1\62",
            "\1\63",
            "\1\63",
            "\1\u00bc\1\u00bb\2\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1"+
            "\u009a\7\uffff\1\u009e\1\u00a0\7\uffff\1\u009f\2\uffff\1\165"+
            "\43\uffff\15\165\1\uffff\1\u009c\10\165\1\uffff\16\165",
            "\1\u00be\2\uffff\1\u00bd",
            "\1\u00bf",
            "\1\u00c0",
            "\1\u00c1",
            "\1\u00c2",
            "\1\u00c3\1\uffff\1\u00c5\167\uffff\1\u00c4",
            "\1\u00c6\100\uffff\1\u00c6\107\uffff\1\u00c7",
            "\1\u00c8\1\uffff\1\u00ca\167\uffff\1\u00c9",
            "\1\u00cb\100\uffff\1\u00cb\107\uffff\1\u00cc",
            "\1\u00cd\1\uffff\1\u00cf\167\uffff\1\u00ce",
            "\1\u00d0\100\uffff\1\u00d0\107\uffff\1\u00d1",
            "\1\u00d2",
            "\1\u00d3",
            "\1\u00d4",
            "\1\u00d5",
            "\1\u008d\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1"+
            "\64\5\uffff\1\52",
            "\1\u00d6",
            "\1\u00d7\100\uffff\1\u00d7\107\uffff\1\u00d8",
            "\1\u00ba\7\uffff\1\61\1\63\7\uffff\1\62",
            "\1\u00d9",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52"+
            "\22\uffff\1\55",
            "\1\u00da\3\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1"+
            "\64\5\uffff\1\52",
            "\1\u00db",
            "\1\uffff",
            "",
            "\1\u00dc",
            "\1\u0095\1\u0098\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u00dd",
            "\1\u00de",
            "\1\u00df\100\uffff\1\u00df\107\uffff\1\u00e0",
            "\2\165\4\uffff\3\165\2\uffff\1\u00e1\33\uffff\1\165\12\uffff"+
            "\1\165\16\uffff\1\165\35\uffff\1\165\51\uffff\1\165\11\uffff"+
            "\2\165\4\uffff\2\165\26\uffff\1\165",
            "\1\u00e2",
            "\1\165\1\u00e3\2\uffff\1\165\2\uffff\2\u0095\2\uffff\1\u0095"+
            "\33\uffff\1\165\5\uffff\1\165\4\uffff\1\u0095\2\uffff\2\165"+
            "\7\uffff\1\165\63\uffff\1\u00e4\1\165",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u00e5\100\uffff\1\u00e5\107\uffff\1\u00e6",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u00e7",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\1\u00a4\2\uffff\1\u0094\2\uffff\2\u0095\2\uffff\1"+
            "\u0095\33\uffff\1\u0093\12\uffff\1\u0095\110\uffff\1\u00a5",
            "\1\u00e8",
            "\1\u00e9",
            "\1\u00ea",
            "\1\u00eb",
            "\1\u00ec",
            "\1\u00ed",
            "\1\u0095\1\u00ab\2\uffff\1\u0094\2\uffff\2\u0095\2\uffff\1"+
            "\u0095\33\uffff\1\u0093\12\uffff\1\u0095",
            "\1\u00ee",
            "\1\u0095\1\u00ad\2\uffff\1\u0094\2\uffff\2\u0095\2\uffff\1"+
            "\u0095\33\uffff\1\u0093\12\uffff\1\u0095",
            "\1\u00ef",
            "\1\u00f0",
            "\1\u00f1",
            "\1\u00f2\1\u00f3\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u00f4",
            "\1\u00f5\100\uffff\1\u00f5\107\uffff\1\u00e0",
            "\1\u00f6",
            "\1\u00f7",
            "\1\u00f8",
            "\1\u00f9\2\uffff\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1"+
            "\64\5\uffff\1\52",
            "\1\u00fa\100\uffff\1\u00fa\107\uffff\1\u00fb",
            "\1\135\1\165\77\uffff\1\164\43\uffff\1\123\1\124\1\125\1\126"+
            "\1\127\4\130\1\131\1\132\1\133\1\134\2\uffff\1\136\1\137\1\140"+
            "\1\141\1\142\1\143\1\144\1\147\1\uffff\1\145\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
            "\3\uffff\1\121\67\uffff\1\122",
            "\1\u0080",
            "\1\u00fc\100\uffff\1\u00fc\107\uffff\1\u00fb",
            "\2\165\4\uffff\3\165\2\uffff\1\u00fd\33\uffff\1\165\12\uffff"+
            "\1\165\16\uffff\1\165\35\uffff\1\165\51\uffff\1\165\11\uffff"+
            "\2\165\4\uffff\2\165\26\uffff\1\165",
            "\1\165\1\u00fe\2\uffff\1\165\2\uffff\2\u0095\2\uffff\1\u0095"+
            "\33\uffff\1\165\5\uffff\1\165\4\uffff\1\u0095\2\uffff\2\165"+
            "\7\uffff\1\165\63\uffff\1\u00e4\1\165",
            "\1\u00ff",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u00c5",
            "\1\u00c5",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52"+
            "\32\uffff\1\76",
            "\1\52\42\uffff\1\52\5\uffff\1\u0100\1\52\5\uffff\1\u0101\45"+
            "\uffff\1\64\5\uffff\1\52",
            "\1\u0100\6\uffff\1\u0101",
            "\1\u00ca",
            "\1\u00ca",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52"+
            "\32\uffff\1\100",
            "\1\52\42\uffff\1\52\5\uffff\1\u0102\1\52\5\uffff\1\u0103\45"+
            "\uffff\1\64\5\uffff\1\52",
            "\1\u0102\6\uffff\1\u0103",
            "\1\u00cf",
            "\1\u00cf",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52"+
            "\32\uffff\1\102",
            "\1\52\42\uffff\1\52\5\uffff\1\u0104\1\52\5\uffff\1\u0105\45"+
            "\uffff\1\64\5\uffff\1\52",
            "\1\u0104\6\uffff\1\u0105",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u0106",
            "\1\52\42\uffff\1\52\5\uffff\1\u0107\1\52\5\uffff\1\u0108\45"+
            "\uffff\1\64\5\uffff\1\52",
            "\1\u0107\6\uffff\1\u0108",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u0094",
            "\1\u010a\2\uffff\1\u0109",
            "\1\u010b",
            "\1\u010c",
            "\1\u0095\1\u00b4\2\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1"+
            "\u010d\7\uffff\1\u009e\1\u00a0\7\uffff\1\u009f",
            "\1\u010e\7\uffff\1\u009e\1\u00a0\7\uffff\1\u009f",
            "\1\u010f\1\165\1\uffff\1\165\1\uffff\4\165\32\uffff\3\165\1"+
            "\uffff\4\165\12\uffff\7\165\1\uffff\1\165\32\uffff\1\165\60"+
            "\uffff\1\165\37\uffff\1\165\3\uffff\1\165",
            "\1\u0110",
            "\1\u0111",
            "\1\u0112",
            "\1\u00a0",
            "\1\u00a0",
            "\1\u0113",
            "\1\u0114\1\uffff\1\u0116\167\uffff\1\u0115",
            "\1\u0117\100\uffff\1\u0117\107\uffff\1\u0118",
            "\1\u0119\1\uffff\1\u011b\167\uffff\1\u011a",
            "\1\u011c\100\uffff\1\u011c\107\uffff\1\u011d",
            "\1\u011e\1\uffff\1\u0120\167\uffff\1\u011f",
            "\1\u0121\100\uffff\1\u0121\107\uffff\1\u0122",
            "\1\u0123",
            "\1\u0124",
            "\1\u0125",
            "\1\u0126",
            "\1\u0095\1\u00f3\2\uffff\1\u0094\2\uffff\2\u0095\2\uffff\1"+
            "\u0095\33\uffff\1\u0093\12\uffff\1\u0095",
            "\1\u0127",
            "\1\u0128\100\uffff\1\u0128\107\uffff\1\u0129",
            "\1\u010e\7\uffff\1\u009e\1\u00a0\7\uffff\1\u009f",
            "\1\u012a",
            "\1\u012b",
            "\1\167",
            "\1\u012c",
            "\1\u00b9\2\uffff\1\52\42\uffff\1\52\5\uffff\1\u012d\1\52\6"+
            "\uffff\1\61\44\uffff\1\u00b8\5\uffff\1\52",
            "\1\61",
            "\1\61",
            "\1\u012e\1\165\1\uffff\1\165\1\uffff\4\165\32\uffff\3\165\1"+
            "\uffff\4\165\12\uffff\7\165\1\uffff\1\165\32\uffff\1\165\60"+
            "\uffff\1\165\37\uffff\1\165\3\uffff\1\165",
            "\1\u012f",
            "\1\u00be",
            "\1\u0130\100\uffff\1\u0130\107\uffff\1\u0131",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u0132\100\uffff\1\u0132\107\uffff\1\u0133",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u0134\100\uffff\1\u0134\107\uffff\1\u0135",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u0136\100\uffff\1\u0136\107\uffff\1\u0137",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u0138",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0139\100\uffff\1\u0139\107\uffff\1\u013a",
            "\1\u013b\100\uffff\1\u013b\107\uffff\1\u013a",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\113\uffff\1\u009c"+
            "\33\uffff\1\u013c",
            "\1\u013d\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u013e",
            "\1\u0095\1\u013f\2\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0116",
            "\1\u0116",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\123\uffff\1\u00a5",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1\u0140\6"+
            "\uffff\1\u0141",
            "\1\u0140\6\uffff\1\u0141",
            "\1\u011b",
            "\1\u011b",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\123\uffff\1\u00a7",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1\u0142\6"+
            "\uffff\1\u0143",
            "\1\u0142\6\uffff\1\u0143",
            "\1\u0120",
            "\1\u0120",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\123\uffff\1\u00a9",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1\u0144\6"+
            "\uffff\1\u0145",
            "\1\u0144\6\uffff\1\u0145",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0146",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1\u0147\6"+
            "\uffff\1\u0148",
            "\1\u0147\6\uffff\1\u0148",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0149",
            "\1\u014a\100\uffff\1\u014a",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093\113\uffff\1\u009c",
            "\1\u014b",
            "\1\u014c\6\uffff\1\u0101",
            "\1\u014c\6\uffff\1\u0101",
            "\1\u014d\6\uffff\1\u0103",
            "\1\u014d\6\uffff\1\u0103",
            "\1\u014e\6\uffff\1\u0105",
            "\1\u014e\6\uffff\1\u0105",
            "\1\u014f\6\uffff\1\u0108",
            "\1\u014f\6\uffff\1\u0108",
            "\1\u010a",
            "\1\u0095\1\u00b4\2\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1"+
            "\u0150\7\uffff\1\u009e",
            "\1\u009e",
            "\1\u009e",
            "",
            "\1\u0095\3\uffff\1\u0094\2\uffff\2\u0095\2\uffff\1\u0095\33"+
            "\uffff\1\u0093\12\uffff\1\u0095",
            "\1\165\42\uffff\1\165\112\uffff\1\u00e4\1\165\33\uffff\1\u013c",
            "\1\u0151",
            "\1\u0152\100\uffff\1\u0152\107\uffff\1\u0153",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0154\100\uffff\1\u0154\107\uffff\1\u0155",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0156\100\uffff\1\u0156\107\uffff\1\u0157",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0158\100\uffff\1\u0158\107\uffff\1\u0159",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\52\42\uffff\1\52\6\uffff\1\52\53\uffff\1\64\5\uffff\1\52",
            "\1\u00b9\2\uffff\1\52\42\uffff\1\52\5\uffff\1\u012d\1\52\53"+
            "\uffff\1\u00b8\5\uffff\1\52",
            "\1\165\42\uffff\1\165\112\uffff\1\u00e4\1\165",
            "\1\u015a\100\uffff\1\u015a\107\uffff\1\u015b",
            "\1\u015c\100\uffff\1\u015c\107\uffff\1\u015d",
            "\1\u015e\100\uffff\1\u015e\107\uffff\1\u015f",
            "\1\u0160\100\uffff\1\u0160\107\uffff\1\u0161",
            "\1\u0162\100\uffff\1\u0162",
            "\1\u0163",
            "\1\u0164\6\uffff\1\u0141",
            "\1\u0164\6\uffff\1\u0141",
            "\1\u0165\6\uffff\1\u0143",
            "\1\u0165\6\uffff\1\u0143",
            "\1\u0166\6\uffff\1\u0145",
            "\1\u0166\6\uffff\1\u0145",
            "\1\u0167\6\uffff\1\u0148",
            "\1\u0167\6\uffff\1\u0148",
            "\1\u0101",
            "\1\u0101",
            "\1\u0103",
            "\1\u0103",
            "\1\u0105",
            "\1\u0105",
            "\1\u0108",
            "\1\u0108",
            "\1\u0095\1\u00b4\2\uffff\1\u0094\42\uffff\1\u0093\5\uffff\1"+
            "\u0150",
            "\1\u0095\3\uffff\1\u0094\42\uffff\1\u0093",
            "\1\u0168\100\uffff\1\u0168\107\uffff\1\u0169",
            "\1\u016a\100\uffff\1\u016a\107\uffff\1\u016b",
            "\1\u016c\100\uffff\1\u016c\107\uffff\1\u016d",
            "\1\u016e\100\uffff\1\u016e\107\uffff\1\u016f",
            "\1\u0141",
            "\1\u0141",
            "\1\u0143",
            "\1\u0143",
            "\1\u0145",
            "\1\u0145",
            "\1\u0148",
            "\1\u0148"
    };

    static final short[] DFA45_eot = DFA.unpackEncodedString(DFA45_eotS);
    static final short[] DFA45_eof = DFA.unpackEncodedString(DFA45_eofS);
    static final char[] DFA45_min = DFA.unpackEncodedStringToUnsignedChars(DFA45_minS);
    static final char[] DFA45_max = DFA.unpackEncodedStringToUnsignedChars(DFA45_maxS);
    static final short[] DFA45_accept = DFA.unpackEncodedString(DFA45_acceptS);
    static final short[] DFA45_special = DFA.unpackEncodedString(DFA45_specialS);
    static final short[][] DFA45_transition;

    static {
        int numStates = DFA45_transitionS.length;
        DFA45_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA45_transition[i] = DFA.unpackEncodedString(DFA45_transitionS[i]);
        }
    }

    class DFA45 extends DFA {

        public DFA45(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 45;
            this.eot = DFA45_eot;
            this.eof = DFA45_eof;
            this.min = DFA45_min;
            this.max = DFA45_max;
            this.accept = DFA45_accept;
            this.special = DFA45_special;
            this.transition = DFA45_transition;
        }
        public String getDescription() {
            return "240:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA45_148 = input.LA(1);

                         
                        int index45_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred108_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE")))) ) {s = 149;}

                        else if ( ((synpred116_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))) ) {s = 117;}

                         
                        input.seek(index45_148);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 45, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA48_eotS =
        "\41\uffff";
    static final String DFA48_eofS =
        "\41\uffff";
    static final String DFA48_minS =
        "\1\25\1\26\1\25\2\uffff\1\40\3\27\1\uffff\1\25\1\0\2\25\1\uffff"+
        "\1\40\3\27\5\uffff\1\40\3\27\1\40\2\27\2\0";
    static final String DFA48_maxS =
        "\1\25\1\26\1\165\2\uffff\1\40\2\32\1\102\1\uffff\1\126\1\0\2\126"+
        "\1\uffff\1\40\3\32\5\uffff\1\40\3\32\1\40\2\32\2\0";
    static final String DFA48_acceptS =
        "\3\uffff\1\3\1\4\4\uffff\1\1\4\uffff\1\2\4\uffff\1\5\1\6\1\7\1\10"+
        "\1\11\11\uffff";
    static final String DFA48_specialS =
        "\1\uffff\1\0\11\uffff\1\3\23\uffff\1\2\1\1}>";
    static final String[] DFA48_transitionS = {
            "\1\1",
            "\1\2",
            "\1\10\6\uffff\2\5\2\uffff\1\6\46\uffff\1\7\16\uffff\1\10\36"+
            "\uffff\1\11",
            "",
            "",
            "\1\6",
            "\1\13\2\uffff\1\12",
            "\1\13\2\uffff\1\14",
            "\1\13\2\uffff\1\15\47\uffff\1\16",
            "",
            "\1\22\6\uffff\2\17\2\uffff\1\20\46\uffff\1\21\16\uffff\1\22",
            "\1\uffff",
            "\1\33\6\uffff\2\30\2\uffff\1\31\46\uffff\1\32\16\uffff\1\33",
            "\1\33\6\uffff\2\34\2\uffff\1\35\46\uffff\1\36\16\uffff\1\33",
            "",
            "\1\20",
            "\1\13\2\uffff\1\12",
            "\1\13\2\uffff\1\12",
            "\1\13\2\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "\1\31",
            "\1\37\2\uffff\1\14",
            "\1\37\2\uffff\1\14",
            "\1\37\2\uffff\1\14",
            "\1\35",
            "\1\40\2\uffff\1\14",
            "\1\40\2\uffff\1\14",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "256:9: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_1 = input.LA(1);

                         
                        int index48_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA48_1==LPAREN) ) {s = 2;}

                        else if ( ((synpred121_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "AUTONOMOUS_TRANSACTION")))) ) {s = 3;}

                        else if ( ((synpred122_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "SERIALLY_REUSABLE")))) ) {s = 4;}

                         
                        input.seek(index48_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_32 = input.LA(1);

                         
                        int index48_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred119_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RESTRICT_REFERENCES")))) ) {s = 9;}

                        else if ( ((synpred120_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "EXCEPTION_INIT")))) ) {s = 14;}

                        else if ( ((synpred123_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN")))) ) {s = 19;}

                        else if ( ((synpred124_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG")))) ) {s = 20;}

                        else if ( ((synpred125_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE")))) ) {s = 21;}

                        else if ( ((synpred126_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES")))) ) {s = 22;}

                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {s = 23;}

                         
                        input.seek(index48_32);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_31 = input.LA(1);

                         
                        int index48_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred119_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "RESTRICT_REFERENCES")))) ) {s = 9;}

                        else if ( ((synpred123_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN")))) ) {s = 19;}

                        else if ( ((synpred124_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG")))) ) {s = 20;}

                        else if ( ((synpred125_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE")))) ) {s = 21;}

                        else if ( ((synpred126_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES")))) ) {s = 22;}

                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {s = 23;}

                         
                        input.seek(index48_31);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_11 = input.LA(1);

                         
                        int index48_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred123_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN")))) ) {s = 19;}

                        else if ( ((synpred124_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG")))) ) {s = 20;}

                        else if ( ((synpred125_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE")))) ) {s = 21;}

                        else if ( ((synpred126_RPIExprAST()&&(((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES")))) ) {s = 22;}

                        else if ( ((((Tree)RPIExprASTParser.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {s = 23;}

                         
                        input.seek(index48_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_CREATE_MODEL_in_model151 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DBLQUOTE_in_model153 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_model155 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_DBLQUOTE_in_model157 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_108_in_model159 = new BitSet(new long[]{0x0000000002200000L,0x0000200000000000L});
    public static final BitSet FOLLOW_stats_in_model161 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_model163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stat_in_stats192 = new BitSet(new long[]{0x0000000002200002L});
    public static final BitSet FOLLOW_ID_in_stat204 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_stat206 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_varlist_in_stat208 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_stat210 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_stat212 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_stat214 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_stat216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLimit_in_stat239 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_stat241 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_stat243 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_stat245 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quotedstringlist_in_stat247 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_stat249 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_stat251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPrint_in_stat271 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_stat273 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_stat275 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_stat277 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_stat279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySetBasePeriod_in_stat297 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_stat299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat301 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_stat303 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_stat305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyConnect_in_stat323 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_stat325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat327 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_stat329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat331 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_stat333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat335 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_stat337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat339 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_stat341 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_stat343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SEMICOLON_in_stat367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quoted_string_in_quotedstringlist395 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_quotedstringtail_in_quotedstringlist397 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_quotedstringtail437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_quotedstringtail439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_varlist457 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_varlisttail_in_varlist459 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_varlisttail489 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_varlisttail491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_sql514 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_sql516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_expression_in_sql518 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_sql520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multExpr_in_expr554 = new BitSet(new long[]{0x0000000030000002L});
    public static final BitSet FOLLOW_PLUS_in_expr568 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_multExpr_in_expr571 = new BitSet(new long[]{0x0000000030000002L});
    public static final BitSet FOLLOW_MINUS_in_expr586 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_multExpr_in_expr589 = new BitSet(new long[]{0x0000000030000002L});
    public static final BitSet FOLLOW_atom_in_multExpr619 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_ASTERISK_in_multExpr623 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_atom_in_multExpr626 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_DIV_in_multExpr630 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_atom_in_multExpr633 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_NUMBER_in_atom655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_atom666 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_atom668 = new BitSet(new long[]{0x0000000200000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COMPMODIFIER_in_atom670 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_atom673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atom702 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_atom704 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_atom706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_atom720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPredicate_in_atom734 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_atom736 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_sql_in_atom738 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_atom741 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_varlist_in_atom743 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_atom747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist775 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_exprtail_in_exprlist777 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_exprtail801 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_exprtail803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_function833 = new BitSet(new long[]{0x01AAFFF800000000L});
    public static final BitSet FOLLOW_MAXOF_in_function844 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function846 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function848 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function850 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function852 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function854 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_LEASTOF_in_function872 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function874 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function876 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function878 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function880 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function882 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_ABS_in_function900 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function902 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function904 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function906 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_IFTHEN_in_function922 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function924 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolExpr_in_function926 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function928 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function930 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function932 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function934 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function936 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_QTR_in_function956 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function958 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function960 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_NONZEROCOUNT_in_function972 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function974 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_exprlist_in_function976 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function978 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_NONZEROAVG_in_function994 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function996 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_exprlist_in_function998 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1000 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_AVG_in_function1016 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1018 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_exprlist_in_function1020 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1022 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_IFZERO_in_function1038 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1040 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function1042 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function1044 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function1046 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1048 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_ACCRUE_in_function1066 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1068 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_function1070 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1072 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_ACCRUEFROMBASE_in_function1088 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1090 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_function1092 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1094 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_ACCRUEFROM_in_function1110 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1112 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_function1114 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function1116 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_function1118 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1120 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_SERIESAVERAGE_in_function1138 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1140 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_function1142 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function1144 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_AVGBASIS_in_function1146 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1148 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_DATE_in_function1166 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1168 = new BitSet(new long[]{0x0004000100000000L});
    public static final BitSet FOLLOW_DATEFORMAT_in_function1171 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_NUMBER_in_function1175 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1178 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_XFCN_in_function1198 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1200 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_function1202 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function1204 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_XFCNARG_in_function1206 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_function1209 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_XFCNARG_in_function1211 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1215 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_AGG_in_function1234 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1236 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_AGGRULE_in_function1238 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function1240 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_function1242 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1244 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_GETCURRPERIOD_in_function1262 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1264 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1266 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_GETBASEPERIOD_in_function1278 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function1280 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function1282 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_function1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_boolFunc1348 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_boolFunc1350 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolAtom_in_boolFunc1352 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_boolFunc1354 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolAtom_in_boolFunc1356 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_boolFunc1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_boolFunc1378 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_boolFunc1380 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolAtom_in_boolFunc1382 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_boolFunc1384 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolAtom_in_boolFunc1386 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_boolFunc1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_boolFunc1408 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_boolFunc1410 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolAtom_in_boolFunc1412 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_boolFunc1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_boolOp1446 = new BitSet(new long[]{0xE000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_BOOLOP_EQ_in_boolOp1449 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_BOOLOP_LT_in_boolOp1454 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_BOOLOP_GT_in_boolOp1459 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_BOOLOP_GE_in_boolOp1464 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_BOOLOP_LE_in_boolOp1469 = new BitSet(new long[]{0x0000000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_expr_in_boolOp1473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolOp_in_boolAtom1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolFunc_in_boolAtom1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_boolAtom1518 = new BitSet(new long[]{0x1C00000500600000L,0x0000100000000000L});
    public static final BitSet FOLLOW_boolExpr_in_boolAtom1520 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_boolAtom1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_create_package_in_start_rule1548 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_EOF_in_start_rule1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_create_package1571 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OR_in_create_package1575 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyREPLACE_in_create_package1577 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_package_spec_in_create_package1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_create_package1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_spec1621 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_spec1623 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_package_spec1625 = new BitSet(new long[]{0x0000000000200000L,0x0002000000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_package_obj_spec_in_package_spec1646 = new BitSet(new long[]{0x0000000000200000L,0x0002000000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_113_in_package_spec1659 = new BitSet(new long[]{0x0000000002200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_spec1662 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_spec1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_body1689 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyBODY_in_package_body1693 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_body1697 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_package_body1699 = new BitSet(new long[]{0x0000000000200000L,0x0006400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_package_obj_body_in_package_body1719 = new BitSet(new long[]{0x0000000000200000L,0x0006400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_package_body1734 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_package_body1736 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_package_body1751 = new BitSet(new long[]{0x0000000002200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_body1755 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_body1760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_package_name1781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_package_name1783 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_package_name1788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_package_obj_spec1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_spec1851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_spec1862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_spec_in_package_obj_spec1883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_obj_spec1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_declaration1946 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_115_in_variable_declaration1949 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_variable_declaration1961 = new BitSet(new long[]{0x1000000002000000L,0x0020000000000008L});
    public static final BitSet FOLLOW_NOT_in_variable_declaration1964 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_variable_declaration1966 = new BitSet(new long[]{0x0000000002000000L,0x0020000000000008L});
    public static final BitSet FOLLOW_set_in_variable_declaration1981 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_variable_declaration1991 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_declaration1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_type_declaration2018 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_type_declaration2020 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_type_declaration2022 = new BitSet(new long[]{0x0000000000600000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_keyNEW_in_type_declaration2026 = new BitSet(new long[]{0x0000000000600000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_type_declaration2033 = new BitSet(new long[]{0x1000000002000000L});
    public static final BitSet FOLLOW_NOT_in_type_declaration2037 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration2039 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_LPAREN_in_type_declaration2046 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_type_declaration2048 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_type_declaration2050 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBTYPE_in_subtype_declaration2077 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration2079 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_subtype_declaration2081 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration2083 = new BitSet(new long[]{0x1000000002200000L});
    public static final BitSet FOLLOW_NOT_in_subtype_declaration2087 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_subtype_declaration2089 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyRANGE_in_subtype_declaration2093 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration2095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_subtype_declaration2097 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration2099 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_subtype_declaration2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_declaration2130 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_declaration2132 = new BitSet(new long[]{0x0000000000400000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_declaration2144 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_declaration2146 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_declaration2148 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_cursor_declaration2161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_cursor_declaration2163 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_cursor_declaration2165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_body2183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body2194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body2205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_body2216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_body2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_body2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_body2249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_package_obj_body2259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_package_obj_body2270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_body2281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements2300 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements2302 = new BitSet(new long[]{0x0000000000200002L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements2306 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements2308 = new BitSet(new long[]{0x0000000000200002L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_assignment_statement_in_statement2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statement2344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statement2354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_statement2364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement2374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement2385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_statement_in_statement2396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statement2406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statement2416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_statement2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_statement2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_statement2447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_plsql_block2476 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_plsql_block2478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RLABEL_in_plsql_block2480 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_118_in_plsql_block2497 = new BitSet(new long[]{0x0000000000200000L,0x0040400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_declare_spec_in_plsql_block2503 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_plsql_block2521 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_plsql_block2533 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_plsql_block2545 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_plsql_block2549 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_plsql_block2568 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_plsql_block2572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_declare_spec2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_declare_spec2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_declare_spec2618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_declare_spec2629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_declare_spec2640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_declare_spec2651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_declare_spec2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_declare_spec2672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_declaration_in_declare_spec2683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_declare_spec2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_declare_spec2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPRAGMA_in_pragma_declaration2723 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration2738 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2740 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_117_in_pragma_declaration2744 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_function_name_in_pragma_declaration2748 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration2754 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_declaration2756 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2761 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration2776 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2778 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_pragma_declaration2780 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration2782 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_pragma_declaration2784 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2786 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration2800 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration2814 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyBUILTIN_in_pragma_declaration2828 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2830 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2832 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2834 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_pragma_declaration2848 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2850 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2852 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2854 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyINTERFACE_in_pragma_declaration2869 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2871 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2873 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2875 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_pragma_declaration2889 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2891 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2893 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2895 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_pragma_declaration2909 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2911 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2913 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2915 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pragma_declaration2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params2954 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_pragma_params2958 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params2960 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_set_in_pragma_param2982 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_pragma_param2993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pragma_param3003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_pragma_param3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_assignment_statement3043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SQL_ASSIGN_in_assignment_statement3045 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_assignment_statement3047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalues3067 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_lvalues3071 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400100L});
    public static final BitSet FOLLOW_lvalue_in_lvalues3073 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_variable_name_in_lvalue3094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_lvalue3104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_lvalue3106 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_name_in_lvalue3108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_lvalue3118 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_lvalue3120 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_subscript_in_lvalue3122 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_lvalue3124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_lvalue3128 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_name_in_lvalue3130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_lvalue3143 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue3145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_lvalue3149 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_name3173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_subscript3196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_host_variable3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_goto_statement3243 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_goto_statement3245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_label_name3268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXIT_in_exit_statement3290 = new BitSet(new long[]{0x0000000000200002L,0x0200000000400000L});
    public static final BitSet FOLLOW_label_name_in_exit_statement3294 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_exit_statement3301 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_exit_statement3303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_datatype3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_datatype3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_datatype3350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_datatype3360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_datatype3371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_datatype3382 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3402 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3404 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_datatype3408 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3410 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_datatype3428 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_datatype3432 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3438 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3440 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_datatype3455 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3459 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3461 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_datatype3476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_datatype3486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype3496 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDAY_in_datatype3498 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3502 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3504 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_datatype3511 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_datatype3513 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3517 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3519 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype3534 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyYEAR_in_datatype3536 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3540 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3542 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_datatype3549 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMONTH_in_datatype3551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datatype3563 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_datatype3567 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3573 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3575 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_datatype3584 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datatype3588 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyTIME_in_datatype3593 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyZONE_in_datatype3595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_datatype3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_datatype3617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_datatype3627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_datatype3637 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3641 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3643 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_datatype3658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_datatype3668 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyPRECISION_in_datatype3670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_datatype3680 = new BitSet(new long[]{0x0000000000600002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3689 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3696 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3698 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3702 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_143_in_datatype3706 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3720 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_datatype3745 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3767 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3769 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3773 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_143_in_datatype3777 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3791 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_datatype3816 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3837 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3839 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3843 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_143_in_datatype3847 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3861 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_datatype3886 = new BitSet(new long[]{0x0000000000600002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3890 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3897 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3899 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_datatype3914 = new BitSet(new long[]{0x0000000000600002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3922 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3929 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3931 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_datatype3946 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3951 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3953 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_datatype3968 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3972 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3974 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_datatype3989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_set_in_datatype3992 = new BitSet(new long[]{0x0000000000600002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype4004 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype4011 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype4013 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype4015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_datatype4028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_datatype4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_datatype4048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_datatype4058 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype4062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype4064 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype4068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype4072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype4074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_datatype4089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_datatype4099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_datatype4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_datatype4120 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype4124 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype4126 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype4128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datatype_in_type_spec4150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_type_spec4162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TYPE_ATTR_in_type_spec4164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_type_spec4175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ROWTYPE_ATTR_in_type_spec4177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type_spec4188 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_type_spec4192 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_type_spec4194 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_type_spec4196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_name4218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_type_name4222 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_type_name4224 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs4246 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_parameter_specs4250 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs4252 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_parameter_name_in_parameter_spec4274 = new BitSet(new long[]{0x0000000000200002L,0xFC08000000400000L,0x00000001FFFDFE7FL});
    public static final BitSet FOLLOW_160_in_parameter_spec4278 = new BitSet(new long[]{0x0000000000200002L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_parameter_spec4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_parameter_name4310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_spec4329 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_spec4331 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_spec4344 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_spec4346 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_spec4348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyRETURN_in_cursor_spec4361 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_return_type_in_cursor_spec4363 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_cursor_spec4365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_procedure_spec4384 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec4386 = new BitSet(new long[]{0x0000000002400000L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_spec4395 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_arguments_in_procedure_spec4397 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_spec4399 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_spec4404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_function_spec4423 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_function_name_in_function_spec4425 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_spec4438 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_arguments_in_function_spec4440 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_spec4442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_spec4455 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_return_type_in_function_spec4457 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_spec4459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_declaration4478 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_exception_declaration4480 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_exception_declaration4482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_names4501 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_exception_names4505 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_exception_names4507 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_exception_package_name_in_exception_name4531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_exception_name4533 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_exception_name4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_exception_package_name4557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_type_dec_in_record_declaration4590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_record_type_dec4611 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_record_type_dec4613 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_record_type_dec4615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_keyRECORD_in_record_type_dec4617 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_record_type_dec4628 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_specs_in_record_type_dec4630 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_record_type_dec4632 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_record_type_dec4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_spec_in_field_specs4657 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_field_specs4661 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_spec_in_field_specs4663 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_column_name_in_field_spec4684 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_field_spec4686 = new BitSet(new long[]{0x1000000000000002L,0x0020000000000008L});
    public static final BitSet FOLLOW_NOT_in_field_spec4697 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_field_spec4699 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000008L});
    public static final BitSet FOLLOW_set_in_field_spec4714 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_field_spec4724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_type_dec_in_plsql_table_declaration4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_table_type_dec4765 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_table_type_dec4767 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_table_type_dec4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_table_type_dec4771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_table_type_dec4782 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_table_type_dec4784 = new BitSet(new long[]{0x1000000002000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_NOT_in_table_type_dec4788 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_table_type_dec4790 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_table_type_dec4807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_table_type_dec4809 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_122_in_table_type_dec4828 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_table_type_dec4846 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_147_in_table_type_dec4864 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_table_type_dec4866 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_integer_in_table_type_dec4868 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_table_type_dec4870 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_table_type_dec4905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_table_var_dec4924 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_table_var_dec4926 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_table_var_dec4928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name4947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_plsql_table_name4951 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name4953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_keyTYPE_in_varray_declaration4975 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_varray_declaration4977 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_varray_declaration4979 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyVARRAY_in_varray_declaration4992 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyVARYING_in_varray_declaration4996 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyARRAY_in_varray_declaration4998 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_varray_declaration5002 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_integer_in_varray_declaration5004 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_varray_declaration5006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_varray_declaration5016 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_varray_declaration5018 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_NOT_in_varray_declaration5022 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_varray_declaration5024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_procedure_declaration5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_procedure_body5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_procedure_body5072 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body5075 = new BitSet(new long[]{0x0000000000400000L,0x0001800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_body5088 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_argument_in_procedure_body5090 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_procedure_body5094 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_argument_in_procedure_body5096 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_body5101 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_procedure_body5115 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_declare_spec_in_procedure_body5154 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_procedure_body5171 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_procedure_body5185 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_procedure_body5199 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_procedure_body5203 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_procedure_body5219 = new BitSet(new long[]{0x0000000002200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body5223 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_body5228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_begin_block5247 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_begin_block5259 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_begin_block5273 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_begin_block5277 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_begin_block5293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_exception_handler5313 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_names_in_exception_handler5315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_exception_handler5317 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_exception_handler5327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_proc_fun_start5346 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_proc_fun_start5350 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyREPLACE_in_proc_fun_start5352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_function_body5376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_function_body5381 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_function_name_in_function_body5384 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_body5397 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_arguments_in_function_body5399 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_body5401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_body5415 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_return_type_in_function_body5417 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_function_body5419 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_declare_spec_in_function_body5458 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_function_body5475 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_function_body5489 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_function_body5503 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_function_body5507 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_function_body5523 = new BitSet(new long[]{0x0000000002200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_function_name_in_function_body5527 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_body5532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_function_name5551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_function_name5555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_procedure_name5575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_procedure_name5579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arguments5599 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_arguments5603 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_argument_in_arguments5605 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_argument_name_in_argument5627 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000001FFFDFE7FL,0x0000000000800000L});
    public static final BitSet FOLLOW_keyOUT_in_argument5631 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_160_in_argument5635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keyOUT_in_argument5637 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_160_in_argument5641 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_argument_type_in_argument5647 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000008L});
    public static final BitSet FOLLOW_set_in_argument5662 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_argument5672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_argument_name5694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_argument_type5713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_value5732 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_value5743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quoted_string_in_value5753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_value5763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_value5767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_value5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_return_type5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_function_declaration5815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_user_defined_function_in_function_call5834 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_function_call5840 = new BitSet(new long[]{0x1000000138E00000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameters_in_function_call5844 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_call5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_collection_function_call5876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_names5895 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_names5899 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_variable_name_in_variable_names5901 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_identifier_in_variable_name5922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_null_statement5941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRAISE_in_raise_statement5961 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_raise_statement5965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_statement5991 = new BitSet(new long[]{0x1000000138600002L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_return_statement5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_loop_statement6019 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_loop_statement6021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RLABEL_in_loop_statement6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_keyWHILE_in_loop_statement6040 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_loop_statement6043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_170_in_loop_statement6061 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_numeric_loop_param_in_loop_statement6092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement6122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement6176 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement6186 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_loop_statement6196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement6198 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_loop_statement6211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_name_in_numeric_loop_param6233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_numeric_loop_param6235 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyREVERSE_in_numeric_loop_param6239 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param6244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_numeric_loop_param6246 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param6248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_index_name6267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_integer_expr6287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_name6306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param6325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_cursor_loop_param6327 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param6341 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param6345 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_cursor_loop_param6347 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param6349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param6366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_loop_param6368 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param6370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_name6399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_commit_statement6418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_if_statement6437 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement6440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_if_statement6442 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement6444 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keyELSIF_in_if_statement6471 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement6473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_if_statement6475 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement6477 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_173_in_if_statement6500 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement6502 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_if_statement6515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_if_statement6517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_command_in_sql_statement6536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_modify_data_in_sql_command6555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_control_data_in_sql_command6565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_command_in_to_modify_data6584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_command_in_to_modify_data6594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_command_in_to_modify_data6604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_command_in_to_modify_data6614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_command_in_to_modify_data6624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_to_control_data6643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_to_control_data6653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_to_control_data6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_to_control_data6673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_to_control_data6683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_to_control_data6693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_to_control_data6703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_select_command6722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_select_statement6750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_select_expression6779 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_set_in_select_expression6783 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_select_list_in_select_expression6798 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_keyBULK_in_select_expression6810 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_select_expression6812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_178_in_select_expression6827 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400100L});
    public static final BitSet FOLLOW_lvalues_in_select_expression6829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_select_expression6842 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_select_expression6846 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9EF0000000000000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression6850 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9EF0000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_select_expression6854 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression6856 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_select_expression6858 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9EF0000000000000L});
    public static final BitSet FOLLOW_where_clause_in_select_expression6872 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9CF0000000000000L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_select_expression6879 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x90F0000000000000L});
    public static final BitSet FOLLOW_group_by_clause_in_select_expression6886 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x80F0000000000000L});
    public static final BitSet FOLLOW_180_in_select_expression6901 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_select_expression6903 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x80E0000000000000L});
    public static final BitSet FOLLOW_model_clause_in_select_expression6910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x80E0000000000000L});
    public static final BitSet FOLLOW_181_in_select_expression6931 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0002400840000000L});
    public static final BitSet FOLLOW_177_in_select_expression6935 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_182_in_select_expression6956 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_183_in_select_expression6974 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_select_expression_in_select_expression7006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_subquery_in_select_expression7025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_select_expression7062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_select_list7084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_displayed_column_in_select_list7094 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_select_list7098 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_displayed_column_in_select_list7100 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_179_in_table_reference_list_from7122 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_table_reference_list_from7124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list7143 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_table_reference_list7147 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list7149 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_table_name_in_join_clause7171 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_join_clause7175 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_outer_join_clause_in_join_clause7179 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause7202 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause7207 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause7209 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_inner_cross_join_clause7213 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_inner_cross_join_clause7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_inner_cross_join_clause7219 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_inner_cross_join_clause7221 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_inner_cross_join_clause7223 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_inner_cross_join_clause7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_inner_cross_join_clause7239 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyNATURAL_in_inner_cross_join_clause7243 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause7247 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause7253 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause7255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause7275 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause7292 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause7294 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keyNATURAL_in_outer_join_clause7308 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause7312 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause7317 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_outer_join_clause7337 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause7341 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_outer_join_clause7356 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_outer_join_clause7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_outer_join_clause7362 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_clause7364 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_outer_join_clause7366 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_clause7368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPARTITION_in_query_partition_clause7389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_query_partition_clause7391 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_outer_join_type7413 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyLEFT_in_outer_join_type7417 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyRIGHT_in_outer_join_type7421 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyOUTER_in_outer_join_type7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_sign7448 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_PLUS_in_outer_join_sign7450 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_sign7452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_where_clause7470 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_where_clause7472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_hierarchical_query_clause7492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_hierarchical_query_clause7494 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause7496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_hierarchical_query_clause7501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_hierarchical_query_clause7503 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_hierarchical_query_clause7507 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause7512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_group_by_clause7530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_group_by_clause7532 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_group_by_exprs_in_group_by_clause7534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs7552 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_group_by_exprs7556 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs7558 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_expr7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_expr7589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_group_by_expr7599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLUP_in_rollup_cube_clause7619 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyCUBE_in_rollup_cube_clause7623 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_rollup_cube_clause7627 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_rollup_cube_clause7629 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_rollup_cube_clause7631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyGROUPING_in_grouping_sets_clause7649 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySETS_in_grouping_sets_clause7651 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_grouping_sets_clause7653 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_clause7655 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_grouping_sets_clause7657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7675 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_grouping_sets_exprs7679 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7681 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_expr7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_expr7706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMODEL_in_model_clause7724 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause7728 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause7742 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_reference_model_in_model_clause7757 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_main_model_in_model_clause7762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_cell_reference_options7784 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyKEEP_in_cell_reference_options7788 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyNAV_in_cell_reference_options7792 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_cell_reference_options7807 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_cell_reference_options7811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySINGLE_in_cell_reference_options7815 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyREFERENCE_in_cell_reference_options7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_rows_clause7840 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_keyUPDATED_in_return_rows_clause7844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_177_in_return_rows_clause7848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_return_rows_clause7852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREFERENCE_in_reference_model7870 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model7872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_reference_model7874 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_reference_model7876 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_reference_model7878 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_reference_model7880 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model7890 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model7894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_reference_model_name7914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMAIN_in_main_model7934 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_main_model_name_in_main_model7936 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model7941 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model7953 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model7957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_main_model_name7975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_model_column_clauses7995 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_model_column_clauses7999 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_model_column_clauses8015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_model_column_clauses8017 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses8019 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses8021 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses8023 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMEASURES_in_model_column_clauses8033 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses8035 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses8037 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses8039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_in_model_columns8057 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_model_columns8061 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_model_column_in_model_columns8063 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_model_column8084 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_112_in_model_column8090 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_model_column8095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRULES_in_model_rules_clause8118 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_model_rules_clause8122 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_clause8126 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_model_rules_clause8130 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_model_rules_clause8142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_keySEQUENTIAL_in_model_rules_clause8146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_model_rules_clause8150 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyITERATE_in_model_rules_clause8168 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause8170 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_model_rules_clause8172 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause8174 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyUNTIL_in_model_rules_clause8178 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause8180 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_model_rules_clause8182 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause8184 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause8200 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_model_rules_exprs_in_model_rules_clause8202 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause8204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs8222 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_model_rules_exprs8226 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs8228 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_190_in_model_rules_expr8251 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_expr8255 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4002000040000000L});
    public static final BitSet FOLLOW_177_in_model_rules_expr8259 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_cell_assignment_in_model_rules_expr8267 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_expr8271 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_model_rules_expr8276 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_model_rules_expr8278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measure_column_in_cell_assignment8296 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_LBRACK_in_cell_assignment8298 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_multi_column_for_loop_in_cell_assignment8302 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_cell_assignment_exprs_in_cell_assignment8306 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_cell_assignment8310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8328 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_cell_assignment_exprs8332 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8334 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_condition_in_cell_assignment_expr8355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_cell_assignment_expr8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_column_for_loop_in_cell_assignment_expr8363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_measure_column8381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_single_column_for_loop8399 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_single_column_for_loop8401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000100000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_160_in_single_column_for_loop8415 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_single_column_for_loop8417 = new BitSet(new long[]{0x0000000130600000L,0x0000000000400080L,0x0000000840000000L});
    public static final BitSet FOLLOW_literals_in_single_column_for_loop8421 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_subquery_in_single_column_for_loop8425 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_single_column_for_loop8429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_single_column_for_loop8445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pattern_in_single_column_for_loop8447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_single_column_for_loop8452 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop8454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_single_column_for_loop8456 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop8458 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyINCREMENT_in_single_column_for_loop8462 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyDECREMENT_in_single_column_for_loop8466 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop8470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal8498 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_literal8509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_literal8519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_literals8537 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_literals8541 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_literals8543 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_bracket_literals8564 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literals_in_bracket_literals8566 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_bracket_literals8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list8586 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_bracket_literals_list8590 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list8592 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pattern8613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_multi_column_for_loop8631 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop8633 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_multi_column_for_loop8635 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop8637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_multi_column_for_loop8639 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop8641 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_bracket_literals_list_in_multi_column_for_loop8645 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_subquery_in_multi_column_for_loop8649 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_order_by_clause8671 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keySIBLINGS_in_order_by_clause8675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_order_by_clause8680 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_order_by_exprs_in_order_by_clause8682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs8700 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_order_by_exprs8704 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs8706 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_order_by_expr8731 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_order_by_expr8753 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr8766 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyFIRST_in_order_by_expr8768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr8772 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLAST_in_order_by_expr8774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_for_update_clause8795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_for_update_clause8797 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_164_in_for_update_clause8801 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_for_update_clause8803 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_keyWAIT_in_for_update_clause8810 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_integer_in_for_update_clause8812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_for_update_clause8816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_where_condition_whole8838 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_where_condition_whole8840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_where_condition8859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_displayed_column8882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_displayed_column8884 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_ASTERISK_in_displayed_column8886 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_expression_in_displayed_column8902 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_alias_in_displayed_column8924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_schema_name8946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_table_name8965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions8984 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_nested_expressions8988 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions8990 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_nested_expression9014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_nested_expression9026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_condition9057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions9076 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_plsql_expressions9080 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions9082 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_expression9117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool9137 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_expr_bool9141 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool9143 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_expr_and_in_expr_or9164 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_AND_in_expr_or9168 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_and_in_expr_or9170 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_NOT_in_expr_and9193 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_not_in_expr_and9198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9216 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_relational_op_in_expr_not9231 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9233 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_expr_not9247 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_expr_not9251 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_expr_not9255 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_expr_not9259 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not9263 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_111_in_expr_not9277 = new BitSet(new long[]{0x1000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_NOT_in_expr_not9281 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_expr_not9286 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOT_in_expr_not9302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_expr_not9307 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9309 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOT_in_expr_not9325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_expr_not9330 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9332 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_expr_not9334 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9336 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOT_in_expr_not9352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_expr_not9357 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_expr_not9359 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expressions_in_expr_not9361 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_expr_not9363 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_set_in_boolean_literal0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions9416 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_sql_expressions9420 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions9422 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_expr_add_in_sql_expression9456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add9474 = new BitSet(new long[]{0x0000000030000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_set_in_expr_add9478 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add9492 = new BitSet(new long[]{0x0000000030000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul9513 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_set_in_expr_mul9517 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul9527 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_set_in_expr_sign9548 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_pow_in_expr_sign9559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow9577 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_EXPONENT_in_expr_pow9581 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow9583 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_expr_paren_in_expr_expr9612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_expr_expr9629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_expr_expr9648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_expr_expr9666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_expr_expr9684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_expr_expr9702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_simple_expression9729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_simple_expression9739 = new BitSet(new long[]{0x0000000000000000L,0x000000000001F000L});
    public static final BitSet FOLLOW_set_in_simple_expression9741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_simple_expression9779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_simple_expression9789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_simple_expression9799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_simple_expression9812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_prior_in_compound_expression9832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_expr_paren9852 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_expr_paren9854 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_expr_paren9856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_expr_prior9874 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_prior9876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_case_expression9894 = new BitSet(new long[]{0x1000000138600000L,0x03544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_simple_case_expression_in_case_expression9898 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_searched_case_expression_in_case_expression9902 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_else_case_expression_in_case_expression9908 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_case_expression9913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression9931 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_case_expression9935 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression9937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_simple_case_expression9939 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression9941 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_searched_case_expression9964 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_nested_condition_in_searched_case_expression9966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_searched_case_expression9968 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_searched_case_expression9970 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_173_in_else_case_expression9991 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_else_case_expression9993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_case_statement10013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_case_statement10018 = new BitSet(new long[]{0x1000000138600000L,0x03544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_simple_case_statement_in_case_statement10023 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_searched_case_statement_in_case_statement10027 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_else_case_statement_in_case_statement10033 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_case_statement10038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_case_statement10040 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_case_statement10044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement10065 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_case_statement10069 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement10071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_simple_case_statement10073 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_simple_case_statement10075 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_searched_case_statement10098 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_searched_case_statement10100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_searched_case_statement10102 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_searched_case_statement10104 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_173_in_else_case_statement10125 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_else_case_statement10127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_expression10145 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_expression10147 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_cursor_expression10149 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_expression10151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_datetime_expression10169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_datetime_expression10171 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datetime_expression10185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datetime_expression10199 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyZONE_in_datetime_expression10201 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyDBTIMEZONE_in_datetime_expression10205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_datetime_expression10209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_datetime_expression10213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_function_expression10257 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10259 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_function_expression10263 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10267 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTO_CHAR_in_function_expression10285 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10287 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10290 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_function_expression10294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_function_expression10296 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBSTR_in_function_expression10326 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10328 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10330 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_function_expression10332 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_function_expression10334 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_function_expression10337 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_function_expression10339 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTRIM_in_function_expression10370 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10372 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10375 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_function_expression10402 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10406 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10408 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_function_expression10447 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_function_expression10451 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_special_expression10488 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_special_expression10490 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_special_expression10494 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_special_expression10498 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_special_expression10502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_special_expression10516 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_special_expression10518 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_special_expression10520 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_special_expression10522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_interval_expression10550 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDAY_in_interval_expression10564 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression10568 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_interval_expression10570 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression10572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_interval_expression10577 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_interval_expression10579 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression10583 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_fractional_second_precision_in_interval_expression10585 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression10587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyYEAR_in_interval_expression10604 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression10608 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_interval_expression10610 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression10612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_interval_expression10617 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMONTH_in_interval_expression10619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_leading_field_precision10647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_fractional_second_precision10666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sequence_name10755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_integer10773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_alias10795 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_alias10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_column_specs10819 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_column_specs10823 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_column_specs10825 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec10847 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_column_spec10850 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec10852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_column_spec10855 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec10857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_name10887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_nested_table10905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_nested_table_column_name10925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name10927 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_nested_table_column_name10932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name10934 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_nested_table_in_nested_table_column_name10936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name10938 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_nested_table_column_name10940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function10959 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function10963 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function10965 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function10972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000320L});
    public static final BitSet FOLLOW_set_in_user_defined_function10974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_selected_table11020 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_163_in_selected_table11026 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_keyTHE_in_selected_table11030 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_selected_table11035 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_alias_in_selected_table11041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_table_spec11065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_table_spec11067 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_table_spec11072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_spec11076 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_link_name_in_table_spec11078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_table_alias11102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_table_alias11104 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_table_alias11109 = new BitSet(new long[]{0x0000000000200002L,0x0001000000480000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_alias11113 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_link_name_in_table_alias11115 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_alias_in_table_alias11122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_link_name11144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_nested_condition11164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_nested_condition11176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_sql_condition11207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_paren11226 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_condition_paren11228 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_paren11230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_and_in_condition_or11248 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_condition_or11252 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_and_in_condition_or11254 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_condition_not_in_condition_and11275 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_AND_in_condition_and11279 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_not_in_condition_and11281 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_NOT_in_condition_not11302 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not11304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not11314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_exists_in_condition_expr11332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_condition_expr11342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_condition_expr11352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_condition_expr11362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_condition_expr11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_condition_expr11382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_condition_expr11392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_condition_expr11402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_condition_expr11412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_condition_expr11422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_condition_expr11432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_memeber_in_condition_expr11442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_condition_expr11452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_condition_expr11462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_condition_expr11472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_condition_expr11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_condition_expr11492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_paren_in_condition_expr11502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_condition_exists11520 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_exists11522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_exists11524 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_exists11526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is11544 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is11546 = new BitSet(new long[]{0x1000000000200000L,0x0010000000000000L});
    public static final BitSet FOLLOW_NOT_in_condition_is11550 = new BitSet(new long[]{0x0000000000200000L,0x0010000000000000L});
    public static final BitSet FOLLOW_keyNAN_in_condition_is11557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_condition_is11561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_condition_is11565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison11585 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_comparison11587 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison11589 = new BitSet(new long[]{0x0000000001400000L,0x0000000000100000L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison11593 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_condition_comparison11598 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison11608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison11610 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison11612 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison11616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_condition_comparison11631 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison11636 = new BitSet(new long[]{0xC000000001400000L,0x0000000000100003L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison11640 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_set_in_condition_comparison11645 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_197_in_condition_comparison11673 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison11680 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison11684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison11686 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison11688 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison11694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison11715 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison11717 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison11719 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_condition_group_comparison11721 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_condition_group_comparison11733 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison11737 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_177_in_condition_group_comparison11741 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison11745 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_group_comparison11749 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison11753 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison11757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_group_comparison11767 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_set_in_condition_group_comparison11769 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_condition_group_comparison11797 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison11801 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_177_in_condition_group_comparison11805 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison11809 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison11813 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison11817 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison11821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in11839 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_in11841 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in11843 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NOT_in_condition_in11847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_condition_in11852 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in11854 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_in11858 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_in11862 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in11866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_in11876 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NOT_in_condition_in11880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_condition_in11885 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in11887 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_condition_in11891 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_in11895 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in11899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_a_set11917 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_a_set11919 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_is_a_set11923 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keyA_in_condition_is_a_set11928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_condition_is_a_set11930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_condition_is_any11950 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_any11952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_condition_is_any11957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_empty11975 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_empty11977 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_is_empty11981 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keyEMPTY_in_condition_is_empty11986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is_of_type12004 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_of_type12006 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_NOT_in_condition_is_of_type12010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_condition_is_of_type12015 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyTYPE_in_condition_is_of_type12019 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_is_of_type12024 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type12026 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_is_of_type12028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12046 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_condition_is_of_type_names12050 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12052 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_keyONLY_in_condition_is_of_type_name12075 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type_name12080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_in_condition_is_present12098 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_present12100 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyPRESENT_in_condition_is_present12102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like12120 = new BitSet(new long[]{0x1000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NOT_in_condition_like12124 = new BitSet(new long[]{0x1000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_condition_like12131 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyLIKEC_in_condition_like12135 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyLIKE2_in_condition_like12139 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyLIKE4_in_condition_like12143 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like12147 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyESCAPE_in_condition_like12151 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like12153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_memeber12174 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_memeber12178 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keyMEMBER_in_condition_memeber12183 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000001040000000L});
    public static final BitSet FOLLOW_164_in_condition_memeber12187 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_memeber12192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between12210 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NOT_in_condition_between12214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_condition_between12219 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between12221 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_condition_between12223 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between12225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like12243 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_regexp_like12245 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameters_in_condition_regexp_like12247 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_regexp_like12249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset12267 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_submultiset12271 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keySUBMULTISET_in_condition_submultiset12276 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000001040000000L});
    public static final BitSet FOLLOW_164_in_condition_submultiset12280 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset12285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEQUALS_PATH_in_condition_equals_path12303 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_equals_path12305 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_condition_equals_path12307 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path12309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_path_string_in_condition_equals_path12311 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path12315 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_equals_path12317 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_equals_path12322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUNDER_PATH_in_condition_under_path12340 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_under_path12342 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_condition_under_path12344 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path12348 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_levels_in_condition_under_path12350 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path12355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_path_string_in_condition_under_path12357 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path12361 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_under_path12363 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_under_path12368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_levels12386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_correlation_integer12404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_path_string12422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list12440 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_grouping_expression_list12444 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list12446 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_expression_list12467 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list12469 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_expression_list12471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list12481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_cell_reference12499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters12517 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_call_parameters12521 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters12523 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_parameter_name_in_call_parameter12546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ARROW_in_call_parameter12548 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_call_parameter12553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_relational_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_exp_set12619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_exp_set12629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subquery12648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_subquery12650 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_subquery12652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_connect_clause12673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_connect_clause12675 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause12677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_connect_clause12690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_connect_clause12692 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_197_in_connect_clause12707 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause12709 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause12711 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause12713 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause12727 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause12729 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause12731 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_connect_clause12733 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_197_in_connect_clause12773 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause12777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause12791 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause12793 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_197_in_connect_clause12797 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause12802 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_connect_clause12806 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause12808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_186_in_connect_clause12833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_connect_clause12835 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause12837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_group_clause12859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_group_clause12861 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_group_clause12863 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_group_clause12867 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_group_clause12869 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_180_in_group_clause12876 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_group_clause12878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_set_clause12904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_set_clause12906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_182_in_set_clause12912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_183_in_set_clause12916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_set_clause12920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_order_clause12940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_order_clause12942 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sorted_def_in_order_clause12944 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_order_clause12948 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sorted_def_in_order_clause12950 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_sorted_def12982 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_NUMBER_in_sorted_def12994 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_sorted_def12998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_update_clause13026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_update_clause13028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_164_in_update_clause13032 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_update_clause13034 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_update_clause13038 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_update_clause13040 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_update_clause13050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_insert_command13072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_insert_command13074 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_insert_command13076 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000400000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command13088 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_insert_command13090 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command13092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_insert_command13109 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command13111 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_insert_command13113 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command13115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_select_statement_in_insert_command13129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_returning_clause_in_insert_command13151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_update_command13173 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_update_command13175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_update_command13185 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_update_nested_column_specs_in_update_command13200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_update_column_specs_in_update_command13214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_185_in_update_command13238 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_update_command13256 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_update_command13258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sql_condition_in_update_command13276 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_returning_clause_in_update_command13313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs13335 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_update_column_specs13339 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs13341 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_column_spec_in_update_column_spec13363 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_update_column_spec13365 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_update_column_spec13367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs13386 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_update_nested_column_specs13390 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs13392 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_update_nested_column_spec13414 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_update_nested_column_spec13416 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_update_nested_column_spec13418 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_update_nested_column_spec13420 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_update_nested_column_spec13422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_delete_command13441 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0008000840000000L});
    public static final BitSet FOLLOW_179_in_delete_command13445 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_delete_command13450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_185_in_delete_command13465 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_delete_command13483 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_delete_command13485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sql_condition_in_delete_command13503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_returning_clause_in_delete_command13540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_returning_clause13564 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyRETURNING_in_returning_clause13568 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_select_list_in_returning_clause13572 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_keyBULK_in_returning_clause13576 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_returning_clause13578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_returning_clause13583 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400100L});
    public static final BitSet FOLLOW_lvalues_in_returning_clause13585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_set_transaction_command13604 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyTRANSACTION_in_set_transaction_command13606 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyREAD_in_set_transaction_command13608 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyONLY_in_set_transaction_command13610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCLOSE_in_close_statement13629 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_close_statement13631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_fetch_statement13650 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_fetch_statement13652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_fetch_statement13654 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_variable_names_in_fetch_statement13669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_fetch_statement13683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_lock_table_statement13712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_lock_table_statement13714 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_lock_table_statement13716 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_lock_table_statement13726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000070000L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement13728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_lock_table_statement13730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_lock_table_statement13734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_lock_mode13756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_lock_mode13758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_lock_mode13768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_lock_mode13770 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_lock_mode13780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_lock_mode13782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_lock_mode13792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_lock_mode13802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_lock_mode13804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_lock_mode13806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_lock_mode13816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOPEN_in_open_statement13835 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_open_statement13837 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_open_statement13841 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_open_statement13843 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_open_statement13845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLBACK_in_rollback_statement13867 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_keyWORK_in_rollback_statement13871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_135_in_rollback_statement13886 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_rollback_statement13890 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_savepoint_name_in_rollback_statement13895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_rollback_statement13910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_rollback_statement13912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_savepoint_statement13934 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement13936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_savepoint_name13955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_identifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_quoted_string14005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_match_string14024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyA14066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyAUTOMATIC14095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCOUNT14128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTO_CHAR14159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBSTR14191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTRIM14225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCROSS14258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCUBE14292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCURRENT_OF14320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDAY14355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDBTIMEZONE14383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDECREMENT14412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDIMENSION14441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEMPTY14474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEQUALS_PATH14501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyESCAPE14533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFIRST14566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFULL14600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyGROUPING14630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyIGNORE14662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINCREMENT14691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINFINITE14721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINNER14754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINTERVAL14784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyITERATE14815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyJOIN14849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyKEEP14883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLAST14917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLEFT14951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKE214984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKE415017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKEC15050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLOCAL15083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMAIN15117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMEASURES15147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMEMBER15179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMODEL15212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMONTH15245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNAN15280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNATURAL15311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNAV15346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNOCYCLE15377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNULLS15410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyONLY15444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyOUTER15477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPARTITION15506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPRECISION15535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPRESENT15566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREFERENCE15595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREGEXP_LIKE15622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRIGHT15656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyROLLUP15688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRULES15721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySECOND15753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySECONDS15784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySEQUENTIAL15812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySESSIONTIMEZONE15835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySETS15869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySIBLINGS15899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySINGLE15931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySOME15965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBMULTISET15992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTIME16026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTIMESTAMP16055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTHE16090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUNDER_PATH16118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUNTIL16151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUPDATED16182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUPSERT16214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyWAIT16248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyYEAR16282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyZONE16316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyARRAY16350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION16366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBODY16400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBUILTIN16431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBULK16465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBYTE16499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCLOSE16532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCOLLECT16563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCURSOR16595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_keyELSIF16626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEXCEPTION_INIT16651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEXIT16685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFIPSFLAG16715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_keyFUNCTION16743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINTERFACE16773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_keyLOOP16805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNEW16841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNEW_NAMES16870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyOPEN16904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_keyOUT16937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_keyPACKAGE16967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_keyPRAGMA16998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_keyRAISE17030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRANGE17064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREAD17098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_keyRECORD17128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREF17164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREPLACE17195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRESTRICT_REFERENCES17214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_keyRETURN17244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_keyRETURNING17272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREVERSE17304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_keyROLLBACK17332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySERIALLY_REUSABLE17354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBTYPE17385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTRANSACTION17412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTYPE17446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUSING17479 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyVARRAY17511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyVARYING17542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_keyWHILE17573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyWORK17608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLimit17634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPredicate17660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPrint17693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyConnect17724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySetBasePeriod17749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sql_identifier17763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_sql_identifier17773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolOp_in_synpred45_RPIExprAST1493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred59_RPIExprAST1819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred60_RPIExprAST1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNEW_in_synpred73_RPIExprAST2026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_synpred89_RPIExprAST2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_synpred90_RPIExprAST2344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred92_RPIExprAST2364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_synpred94_RPIExprAST2385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_synpred98_RPIExprAST2426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_synpred99_RPIExprAST2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred108_RPIExprAST2607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred116_RPIExprAST2693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_synpred119_RPIExprAST2738 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred119_RPIExprAST2740 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_117_in_synpred119_RPIExprAST2744 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_function_name_in_synpred119_RPIExprAST2748 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred119_RPIExprAST2754 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_param_in_synpred119_RPIExprAST2756 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred119_RPIExprAST2761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_synpred120_RPIExprAST2776 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred120_RPIExprAST2778 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_synpred120_RPIExprAST2780 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred120_RPIExprAST2782 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_synpred120_RPIExprAST2784 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred120_RPIExprAST2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred121_RPIExprAST2800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_synpred122_RPIExprAST2814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyBUILTIN_in_synpred123_RPIExprAST2828 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred123_RPIExprAST2830 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred123_RPIExprAST2832 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred123_RPIExprAST2834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_synpred124_RPIExprAST2848 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred124_RPIExprAST2850 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred124_RPIExprAST2852 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred124_RPIExprAST2854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERFACE_in_synpred125_RPIExprAST2869 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred125_RPIExprAST2871 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred125_RPIExprAST2873 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred125_RPIExprAST2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_synpred126_RPIExprAST2889 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred126_RPIExprAST2891 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred126_RPIExprAST2893 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred126_RPIExprAST2895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_synpred160_RPIExprAST3496 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDAY_in_synpred160_RPIExprAST3498 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_synpred160_RPIExprAST3502 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred160_RPIExprAST3504 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred160_RPIExprAST3506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred160_RPIExprAST3511 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_synpred160_RPIExprAST3513 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred160_RPIExprAST3517 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred160_RPIExprAST3519 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred160_RPIExprAST3521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_synpred162_RPIExprAST3534 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyYEAR_in_synpred162_RPIExprAST3536 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_synpred162_RPIExprAST3540 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred162_RPIExprAST3542 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred162_RPIExprAST3544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred162_RPIExprAST3549 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMONTH_in_synpred162_RPIExprAST3551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_synpred163_RPIExprAST3563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datatype_in_synpred218_RPIExprAST4150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred278_RPIExprAST5840 = new BitSet(new long[]{0x1000000138E00000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameters_in_synpred278_RPIExprAST5844 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred278_RPIExprAST5849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_loop_param_in_synpred284_RPIExprAST6086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_loop_param_in_synpred285_RPIExprAST6116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREVERSE_in_synpred288_RPIExprAST6239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_synpred298_RPIExprAST6643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_synpred302_RPIExprAST6683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_reference_list_in_synpred309_RPIExprAST6846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_synpred310_RPIExprAST6850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_synpred311_RPIExprAST6872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_synpred312_RPIExprAST6879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_clause_in_synpred313_RPIExprAST6886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred314_RPIExprAST6901 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred314_RPIExprAST6903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_clause_in_synpred315_RPIExprAST6910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred320_RPIExprAST6931 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0002400840000000L});
    public static final BitSet FOLLOW_177_in_synpred320_RPIExprAST6935 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_182_in_synpred320_RPIExprAST6956 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_183_in_synpred320_RPIExprAST6974 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_select_expression_in_synpred320_RPIExprAST7006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_synpred320_RPIExprAST7025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_clause_in_synpred321_RPIExprAST7062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred324_RPIExprAST7147 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_synpred324_RPIExprAST7149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_synpred325_RPIExprAST7175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_clause_in_synpred326_RPIExprAST7179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINNER_in_synpred329_RPIExprAST7202 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_synpred329_RPIExprAST7207 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_synpred329_RPIExprAST7209 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_synpred329_RPIExprAST7213 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred329_RPIExprAST7215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred329_RPIExprAST7219 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred329_RPIExprAST7221 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_synpred329_RPIExprAST7223 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred329_RPIExprAST7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_synpred330_RPIExprAST7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_synpred332_RPIExprAST7292 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_synpred332_RPIExprAST7294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_synpred333_RPIExprAST7312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred334_RPIExprAST7341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred335_RPIExprAST7356 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred335_RPIExprAST7358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred336_RPIExprAST7362 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred336_RPIExprAST7364 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_synpred336_RPIExprAST7366 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred336_RPIExprAST7368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_synpred337_RPIExprAST7413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLEFT_in_synpred338_RPIExprAST7417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOUTER_in_synpred339_RPIExprAST7427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_synpred341_RPIExprAST7507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred342_RPIExprAST7556 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_group_by_expr_in_synpred342_RPIExprAST7558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred343_RPIExprAST7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_synpred344_RPIExprAST7589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLUP_in_synpred345_RPIExprAST7619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred347_RPIExprAST7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_synpred350_RPIExprAST7784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_synpred351_RPIExprAST7784 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyKEEP_in_synpred351_RPIExprAST7788 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyNAV_in_synpred351_RPIExprAST7792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDIMENSION_in_synpred352_RPIExprAST7811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred357_RPIExprAST7995 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_synpred357_RPIExprAST7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_synpred364_RPIExprAST8142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_synpred376_RPIExprAST8355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred377_RPIExprAST8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINCREMENT_in_synpred381_RPIExprAST8462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred389_RPIExprAST8704 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_order_by_expr_in_synpred389_RPIExprAST8706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred392_RPIExprAST8766 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyFIRST_in_synpred392_RPIExprAST8768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred393_RPIExprAST8772 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLAST_in_synpred393_RPIExprAST8774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred400_RPIExprAST9014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_synpred402_RPIExprAST9141 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_or_in_synpred402_RPIExprAST9143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_synpred403_RPIExprAST9168 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_and_in_synpred403_RPIExprAST9170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_op_in_synpred405_RPIExprAST9231 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred405_RPIExprAST9233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_synpred406_RPIExprAST9247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_synpred407_RPIExprAST9251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_synpred408_RPIExprAST9255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_synpred409_RPIExprAST9259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred410_RPIExprAST9263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_synpred412_RPIExprAST9277 = new BitSet(new long[]{0x1000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_NOT_in_synpred412_RPIExprAST9281 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_synpred412_RPIExprAST9286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred414_RPIExprAST9302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_synpred414_RPIExprAST9307 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred414_RPIExprAST9309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred416_RPIExprAST9325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_synpred416_RPIExprAST9330 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred416_RPIExprAST9332 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_synpred416_RPIExprAST9334 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred416_RPIExprAST9336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred418_RPIExprAST9352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_synpred418_RPIExprAST9357 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred418_RPIExprAST9359 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expressions_in_synpred418_RPIExprAST9361 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred418_RPIExprAST9363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred420_RPIExprAST9420 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_synpred420_RPIExprAST9422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred423_RPIExprAST9478 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_mul_in_synpred423_RPIExprAST9492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred425_RPIExprAST9517 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_sign_in_synpred425_RPIExprAST9527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPONENT_in_synpred428_RPIExprAST9581 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_expr_in_synpred428_RPIExprAST9583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_paren_in_synpred429_RPIExprAST9606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_synpred431_RPIExprAST9642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_synpred432_RPIExprAST9660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_synpred433_RPIExprAST9678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_synpred434_RPIExprAST9696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_synpred441_RPIExprAST9773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDBTIMEZONE_in_synpred455_RPIExprAST10205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_synpred456_RPIExprAST10209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_synpred458_RPIExprAST10257 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred458_RPIExprAST10259 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred458_RPIExprAST10263 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_synpred458_RPIExprAST10267 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred458_RPIExprAST10271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTO_CHAR_in_synpred460_RPIExprAST10285 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred460_RPIExprAST10287 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred460_RPIExprAST10290 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_synpred460_RPIExprAST10294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_synpred460_RPIExprAST10296 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred460_RPIExprAST10300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBSTR_in_synpred462_RPIExprAST10326 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred462_RPIExprAST10328 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred462_RPIExprAST10330 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred462_RPIExprAST10332 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_synpred462_RPIExprAST10334 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_synpred462_RPIExprAST10337 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_synpred462_RPIExprAST10339 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred462_RPIExprAST10343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTRIM_in_synpred463_RPIExprAST10370 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred463_RPIExprAST10372 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred463_RPIExprAST10375 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred463_RPIExprAST10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred464_RPIExprAST10406 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred464_RPIExprAST10408 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred464_RPIExprAST10410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_synpred465_RPIExprAST10257 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred465_RPIExprAST10259 = new BitSet(new long[]{0x1000000178600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred465_RPIExprAST10263 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_synpred465_RPIExprAST10267 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred465_RPIExprAST10271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTO_CHAR_in_synpred465_RPIExprAST10285 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred465_RPIExprAST10287 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred465_RPIExprAST10290 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_synpred465_RPIExprAST10294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_synpred465_RPIExprAST10296 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred465_RPIExprAST10300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBSTR_in_synpred465_RPIExprAST10326 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred465_RPIExprAST10328 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred465_RPIExprAST10330 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred465_RPIExprAST10332 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_synpred465_RPIExprAST10334 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_synpred465_RPIExprAST10337 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_synpred465_RPIExprAST10339 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred465_RPIExprAST10343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTRIM_in_synpred465_RPIExprAST10370 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred465_RPIExprAST10372 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred465_RPIExprAST10375 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred465_RPIExprAST10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_synpred465_RPIExprAST10402 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_LPAREN_in_synpred465_RPIExprAST10406 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred465_RPIExprAST10408 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred465_RPIExprAST10410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_synpred465_RPIExprAST10414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDAY_in_synpred471_RPIExprAST10564 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_synpred471_RPIExprAST10568 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_synpred471_RPIExprAST10570 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred471_RPIExprAST10572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred471_RPIExprAST10577 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_synpred471_RPIExprAST10579 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred471_RPIExprAST10583 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_fractional_second_precision_in_synpred471_RPIExprAST10585 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred471_RPIExprAST10587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred478_RPIExprAST10963 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_synpred478_RPIExprAST10965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_synpred482_RPIExprAST11020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred485_RPIExprAST11041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_synpred491_RPIExprAST11164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_synpred492_RPIExprAST11252 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_and_in_synpred492_RPIExprAST11254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_synpred493_RPIExprAST11279 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_not_in_synpred493_RPIExprAST11281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_synpred496_RPIExprAST11342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_synpred497_RPIExprAST11352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_synpred498_RPIExprAST11362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_synpred499_RPIExprAST11372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_synpred500_RPIExprAST11382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_synpred501_RPIExprAST11392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_synpred502_RPIExprAST11402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_synpred503_RPIExprAST11412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_synpred504_RPIExprAST11422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_synpred505_RPIExprAST11432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_memeber_in_synpred506_RPIExprAST11442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_synpred507_RPIExprAST11452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_synpred508_RPIExprAST11462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_synpred509_RPIExprAST11472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_synpred510_RPIExprAST11482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_synpred511_RPIExprAST11492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNAN_in_synpred513_RPIExprAST11557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_synpred514_RPIExprAST11561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred517_RPIExprAST11616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred518_RPIExprAST11585 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred518_RPIExprAST11587 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred518_RPIExprAST11589 = new BitSet(new long[]{0x0000000001400000L,0x0000000000100000L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred518_RPIExprAST11593 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_synpred518_RPIExprAST11598 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred518_RPIExprAST11608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_synpred518_RPIExprAST11610 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred518_RPIExprAST11612 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred518_RPIExprAST11616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred527_RPIExprAST11680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred528_RPIExprAST11694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred532_RPIExprAST11749 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred533_RPIExprAST11715 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred533_RPIExprAST11717 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred533_RPIExprAST11719 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_synpred533_RPIExprAST11721 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_synpred533_RPIExprAST11733 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySOME_in_synpred533_RPIExprAST11737 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_177_in_synpred533_RPIExprAST11741 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred533_RPIExprAST11745 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred533_RPIExprAST11749 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_synpred533_RPIExprAST11753 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred533_RPIExprAST11757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred541_RPIExprAST11813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred543_RPIExprAST11858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred544_RPIExprAST11839 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred544_RPIExprAST11841 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred544_RPIExprAST11843 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NOT_in_synpred544_RPIExprAST11847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_synpred544_RPIExprAST11852 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred544_RPIExprAST11854 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred544_RPIExprAST11858 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_synpred544_RPIExprAST11862 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred544_RPIExprAST11866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_synpred546_RPIExprAST11891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLIKEC_in_synpred556_RPIExprAST12135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLIKE2_in_synpred557_RPIExprAST12139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyESCAPE_in_synpred558_RPIExprAST12151 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_synpred558_RPIExprAST12153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred567_RPIExprAST12444 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_synpred567_RPIExprAST12446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred568_RPIExprAST12467 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred568_RPIExprAST12469 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred568_RPIExprAST12471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred576_RPIExprAST12613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_synpred579_RPIExprAST12761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_synpred580_RPIExprAST12761 = new BitSet(new long[]{0x1000000138600000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred580_RPIExprAST12766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_synpred581_RPIExprAST12773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred590_RPIExprAST12976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred591_RPIExprAST12988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_names_in_synpred612_RPIExprAST13669 = new BitSet(new long[]{0x0000000000000002L});

}