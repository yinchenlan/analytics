// $ANTLR 3.1.2 RPIExprWalker.g 2011-03-09 16:14:09

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;


import org.antlr.runtime.*;
import org.antlr.runtime.tree.*;import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class RPIExprWalker extends TreeParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "EXPRLIST", "BOOLOP", "REF", "VARLIST", "ASSIGN", "DIM", "PRINT", "CREATEPREDICATE", "QUOTEDSTRINGLIST", "SETBASEPERIOD", "SETLEVEL", "SUBSTR", "TO_CHAR", "DBCONNECT", "TRIM", "CREATE_MODEL", "DBLQUOTE", "ID", "LPAREN", "RPAREN", "EQ", "SEMICOLON", "COMMA", "SQL", "PLUS", "MINUS", "ASTERISK", "DIV", "NUMBER", "COMPMODIFIER", "LBRACK", "MAXOF", "LEASTOF", "ABS", "IFTHEN", "QTR", "NONZEROCOUNT", "NONZEROAVG", "AVG", "IFZERO", "ACCRUE", "ACCRUEFROMBASE", "ACCRUEFROM", "SERIESAVERAGE", "AVGBASIS", "DATE", "DATEFORMAT", "XFCN", "XFCNARG", "AGG", "AGGRULE", "GETCURRPERIOD", "GETBASEPERIOD", "RBRACK", "AND", "OR", "NOT", "BOOLOP_EQ", "BOOLOP_LT", "BOOLOP_GT", "BOOLOP_GE", "BOOLOP_LE", "DOT", "SQL_ASSIGN", "DOUBLEDOT", "LLABEL", "RLABEL", "QUOTED_STRING", "COLON", "CHARSET_ATTR", "TYPE_ATTR", "ROWTYPE_ATTR", "FOUND_ATTR", "NOTFOUND_ATTR", "ISOPEN_ATTR", "ROWCOUNT_ATTR", "BULK_ROWCOUNT_ATTR", "DOUBLEVERTBAR", "EXPONENT", "AT_SIGN", "NOT_EQ", "ARROW", "DOUBLEQUOTED_STRING", "CREATEGROUP", "ADDPRODUCTSELECTOR", "SETPOSTPROCESSCLASS", "SETSCENARIOUICLASS", "SETUSERINPUTUICLASS", "SETPRODUCTUICLASS", "SETMODELPROCCLASS", "SETREPORTUICLASS", "PRODUCTSELECTOR", "FORECASTABLETYPE", "PERIODICITY", "NEWLINE", "WS", "ML_COMMENT", "SL_COMMENT", "POINT", "PERCENTAGE", "VERTBAR", "N", "QUOTE", "SQLSL_COMMENT", "'{'", "'}'", "'CREATE'", "'IS'", "'AS'", "'END'", "'BEGIN'", "'CONSTANT'", "'NULL'", "'DEFAULT'", "'DECLARE'", "'EXCEPTION'", "'GOTO'", "'WHEN'", "'BINARY_INTEGER'", "'BINARY_FLOAT'", "'BINARY_DOUBLE'", "'NATURAL'", "'POSITIVE'", "'NUMBER'", "'NUMERIC'", "'DECIMAL'", "'DEC'", "'LONG'", "'RAW'", "'BOOLEAN'", "'DATE'", "'TO'", "'WITH'", "'INTEGER'", "'INT'", "'SMALLINT'", "'FLOAT'", "'REAL'", "'DOUBLE'", "'CHAR'", "'CHARACTER'", "'SET'", "'VARCHAR'", "'VARCHAR2'", "'NCHAR'", "'NVARCHAR'", "'NVARCHAR2'", "'NATIONAL'", "'MLSLABEL'", "'PLS_INTEGER'", "'BLOB'", "'CLOB'", "'NCLOB'", "'BFILE'", "'ROWID'", "'UROWID'", "'IN'", "'PROCEDURE'", "'FUNCTION'", "'TABLE'", "'OF'", "'INDEX'", "'BY'", "'THEN'", "'TRUE'", "'FALSE'", "'FOR'", "'COMMIT'", "'IF'", "'ELSE'", "'SELECT'", "'DISTINCT'", "'UNIQUE'", "'ALL'", "'INTO'", "'FROM'", "'HAVING'", "'UNION'", "'INTERSECT'", "'MINUS'", "'ON'", "'WHERE'", "'START'", "'CONNECT'", "'GROUP'", "'ROWS'", "'UPDATE'", "'ORDER'", "'LIKE'", "'ASC'", "'DESC'", "'NOWAIT'", "'BETWEEN'", "'PRIOR'", "'CASE'", "'AT'", "'EXISTS'", "'DELETE'", "'ANY'", "'INSERT'", "'VALUES'", "'FETCH'", "'LOCK'", "'MODE'", "'ROW'", "'SHARE'", "'EXCLUSIVE'", "'SAVEPOINT'", "'COMMENT'", "'ELSIF'", "'LOOP'", "'OUT'", "'PACKAGE'", "'PRAGMA'", "'RAISE'", "'RECORD'", "'RETURN'", "'RETURNING'", "'ROLLBACK'", "'WHILE'"
    };
    public static final int BULK_ROWCOUNT_ATTR=80;
    public static final int T__159=159;
    public static final int T__158=158;
    public static final int NONZEROAVG=41;
    public static final int T__160=160;
    public static final int NOT=60;
    public static final int ACCRUEFROM=46;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int EOF=-1;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int RPAREN=23;
    public static final int T__148=148;
    public static final int T__147=147;
    public static final int T__149=149;
    public static final int CREATEGROUP=87;
    public static final int BOOLOP_EQ=61;
    public static final int EQ=24;
    public static final int SETUSERINPUTUICLASS=91;
    public static final int T__154=154;
    public static final int SETPOSTPROCESSCLASS=89;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__139=139;
    public static final int RBRACK=57;
    public static final int T__138=138;
    public static final int T__137=137;
    public static final int T__136=136;
    public static final int BOOLOP_GE=64;
    public static final int N=105;
    public static final int NUMBER=32;
    public static final int AT_SIGN=83;
    public static final int SEMICOLON=25;
    public static final int AGGRULE=54;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__140=140;
    public static final int T__145=145;
    public static final int PERCENTAGE=103;
    public static final int T__146=146;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int ABS=37;
    public static final int T__126=126;
    public static final int T__125=125;
    public static final int T__128=128;
    public static final int SQL_ASSIGN=67;
    public static final int T__127=127;
    public static final int ACCRUE=44;
    public static final int WS=99;
    public static final int T__129=129;
    public static final int SETMODELPROCCLASS=93;
    public static final int DBLQUOTE=20;
    public static final int SL_COMMENT=101;
    public static final int TRIM=18;
    public static final int BOOLOP_GT=63;
    public static final int GETBASEPERIOD=56;
    public static final int T__130=130;
    public static final int DBCONNECT=17;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int ROWTYPE_ATTR=75;
    public static final int T__135=135;
    public static final int T__215=215;
    public static final int T__216=216;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int LBRACK=34;
    public static final int T__219=219;
    public static final int PRODUCTSELECTOR=95;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int POINT=102;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__124=124;
    public static final int SERIESAVERAGE=47;
    public static final int T__123=123;
    public static final int LLABEL=69;
    public static final int T__122=122;
    public static final int T__121=121;
    public static final int T__120=120;
    public static final int T__223=223;
    public static final int T__222=222;
    public static final int CREATEPREDICATE=11;
    public static final int LPAREN=22;
    public static final int ASTERISK=30;
    public static final int TYPE_ATTR=74;
    public static final int T__221=221;
    public static final int T__220=220;
    public static final int RLABEL=70;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__108=108;
    public static final int SUBSTR=15;
    public static final int T__109=109;
    public static final int AVG=42;
    public static final int LEASTOF=36;
    public static final int T__111=111;
    public static final int T__110=110;
    public static final int T__113=113;
    public static final int SETSCENARIOUICLASS=90;
    public static final int T__112=112;
    public static final int QUOTEDSTRINGLIST=12;
    public static final int PLUS=28;
    public static final int T__210=210;
    public static final int CREATE_MODEL=19;
    public static final int T__212=212;
    public static final int NONZEROCOUNT=40;
    public static final int NOTFOUND_ATTR=77;
    public static final int T__211=211;
    public static final int FORECASTABLETYPE=96;
    public static final int MINUS=29;
    public static final int AGG=53;
    public static final int GETCURRPERIOD=55;
    public static final int PRINT=10;
    public static final int NOT_EQ=84;
    public static final int VERTBAR=104;
    public static final int COLON=72;
    public static final int BOOLOP_LT=62;
    public static final int DIM=9;
    public static final int IFTHEN=38;
    public static final int ARROW=85;
    public static final int BOOLOP_LE=65;
    public static final int DIV=31;
    public static final int SQLSL_COMMENT=107;
    public static final int IFZERO=43;
    public static final int SETPRODUCTUICLASS=92;
    public static final int EXPONENT=82;
    public static final int DOUBLEDOT=68;
    public static final int FOUND_ATTR=76;
    public static final int XFCNARG=52;
    public static final int QUOTE=106;
    public static final int SQL=27;
    public static final int COMPMODIFIER=33;
    public static final int QTR=39;
    public static final int SETREPORTUICLASS=94;
    public static final int ROWCOUNT_ATTR=79;
    public static final int DOUBLEVERTBAR=81;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int OR=59;
    public static final int VARLIST=7;
    public static final int ADDPRODUCTSELECTOR=88;
    public static final int AVGBASIS=48;
    public static final int XFCN=51;
    public static final int ID=21;
    public static final int AND=58;
    public static final int ACCRUEFROMBASE=45;
    public static final int DATEFORMAT=50;
    public static final int ML_COMMENT=100;
    public static final int T__199=199;
    public static final int T__198=198;
    public static final int T__197=197;
    public static final int T__196=196;
    public static final int T__195=195;
    public static final int T__194=194;
    public static final int T__193=193;
    public static final int T__192=192;
    public static final int COMMA=26;
    public static final int T__191=191;
    public static final int T__190=190;
    public static final int QUOTED_STRING=71;
    public static final int DOT=66;
    public static final int ISOPEN_ATTR=78;
    public static final int T__184=184;
    public static final int T__183=183;
    public static final int T__186=186;
    public static final int SETBASEPERIOD=13;
    public static final int T__185=185;
    public static final int T__188=188;
    public static final int T__187=187;
    public static final int T__189=189;
    public static final int DOUBLEQUOTED_STRING=86;
    public static final int EXPRLIST=4;
    public static final int T__180=180;
    public static final int BOOLOP=5;
    public static final int T__182=182;
    public static final int T__181=181;
    public static final int SETLEVEL=14;
    public static final int REF=6;
    public static final int T__175=175;
    public static final int T__174=174;
    public static final int T__173=173;
    public static final int T__172=172;
    public static final int TO_CHAR=16;
    public static final int T__179=179;
    public static final int T__178=178;
    public static final int T__177=177;
    public static final int NEWLINE=98;
    public static final int T__176=176;
    public static final int T__171=171;
    public static final int T__170=170;
    public static final int ASSIGN=8;
    public static final int MAXOF=35;
    public static final int DATE=49;
    public static final int T__169=169;
    public static final int CHARSET_ATTR=73;
    public static final int PERIODICITY=97;

    // delegates
    // delegators


        public RPIExprWalker(TreeNodeStream input) {
            this(input, new RecognizerSharedState());
        }
        public RPIExprWalker(TreeNodeStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[985+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return RPIExprWalker.tokenNames; }
    public String getGrammarFileName() { return "RPIExprWalker.g"; }


        private boolean is_sql = false;
        private String userName;
        private String password;
        private String hostName;
        private String sid;
        Map sqlMemory;
        Map valueMemory;
        Map<String, String> connectionMemory;
        Map<String, List<String>> limits; 
        public void setSQLMemory(Map memory) {
           this.sqlMemory = memory;
        }     
        public void setValueMemory(Map memory) {
           this.valueMemory = memory;
        }    
        public void setLimits(Map<String, List<String>> limits) {
           this.limits = limits;
        } 
        public void setConnectionMemory(Map<String, String> memory) {
           this.connectionMemory = memory;
        }
        public String getUsername() {
           return connectionMemory.get("username");
        }
        public String getPassword() {
           return connectionMemory.get("password");
        }
        public String getHostname() {
           return connectionMemory.get("hostname");
        }
        public String getSid() {
           return connectionMemory.get("sid");
        }


    public static class stat_return extends TreeRuleReturnScope {
        public List<String> inputDims;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stat"
    // RPIExprWalker.g:59:1: stat[boolean checkSelfReference, String calcPeriod, String aggRule] returns [List<String> inputDims, boolean calculatePeriodByPeriod] : ( ^( ASSIGN id1= ID v1= varlist expr[$v1.inputDims, $id1.text.trim(), checkSelfReference, calcPeriod, aggRule] ) | ^( DIM id2= ID q1= quotedstringlist ) | ^( PRINT id3= ID ) | ^( SETBASEPERIOD quoted_string ) | ^( DBCONNECT uname= quoted_string passwd= quoted_string hname= quoted_string SID= quoted_string ) | ^( SETLEVEL ID ID q2= quotedstringlist ) );
    public final RPIExprWalker.stat_return stat(boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.stat_return retval = new RPIExprWalker.stat_return();
        retval.start = input.LT(1);
        int stat_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree id1=null;
        CommonTree id2=null;
        CommonTree id3=null;
        CommonTree ASSIGN1=null;
        CommonTree DIM3=null;
        CommonTree PRINT4=null;
        CommonTree SETBASEPERIOD5=null;
        CommonTree DBCONNECT7=null;
        CommonTree SETLEVEL8=null;
        CommonTree ID9=null;
        CommonTree ID10=null;
        RPIExprWalker.varlist_return v1 = null;

        RPIExprWalker.quotedstringlist_return q1 = null;

        RPIExprWalker.quoted_string_return uname = null;

        RPIExprWalker.quoted_string_return passwd = null;

        RPIExprWalker.quoted_string_return hname = null;

        RPIExprWalker.quoted_string_return SID = null;

        RPIExprWalker.quotedstringlist_return q2 = null;

        RPIExprWalker.expr_return expr2 = null;

        RPIExprWalker.quoted_string_return quoted_string6 = null;


        CommonTree id1_tree=null;
        CommonTree id2_tree=null;
        CommonTree id3_tree=null;
        CommonTree ASSIGN1_tree=null;
        CommonTree DIM3_tree=null;
        CommonTree PRINT4_tree=null;
        CommonTree SETBASEPERIOD5_tree=null;
        CommonTree DBCONNECT7_tree=null;
        CommonTree SETLEVEL8_tree=null;
        CommonTree ID9_tree=null;
        CommonTree ID10_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // RPIExprWalker.g:60:5: ( ^( ASSIGN id1= ID v1= varlist expr[$v1.inputDims, $id1.text.trim(), checkSelfReference, calcPeriod, aggRule] ) | ^( DIM id2= ID q1= quotedstringlist ) | ^( PRINT id3= ID ) | ^( SETBASEPERIOD quoted_string ) | ^( DBCONNECT uname= quoted_string passwd= quoted_string hname= quoted_string SID= quoted_string ) | ^( SETLEVEL ID ID q2= quotedstringlist ) )
            int alt1=6;
            switch ( input.LA(1) ) {
            case ASSIGN:
                {
                alt1=1;
                }
                break;
            case DIM:
                {
                alt1=2;
                }
                break;
            case PRINT:
                {
                alt1=3;
                }
                break;
            case SETBASEPERIOD:
                {
                alt1=4;
                }
                break;
            case DBCONNECT:
                {
                alt1=5;
                }
                break;
            case SETLEVEL:
                {
                alt1=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // RPIExprWalker.g:60:7: ^( ASSIGN id1= ID v1= varlist expr[$v1.inputDims, $id1.text.trim(), checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    ASSIGN1=(CommonTree)match(input,ASSIGN,FOLLOW_ASSIGN_in_stat60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSIGN1_tree = (CommonTree)adaptor.dupNode(ASSIGN1);

                    root_1 = (CommonTree)adaptor.becomeRoot(ASSIGN1_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    id1=(CommonTree)match(input,ID,FOLLOW_ID_in_stat64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id1_tree = (CommonTree)adaptor.dupNode(id1);

                    adaptor.addChild(root_1, id1_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_varlist_in_stat68);
                    v1=varlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, v1.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_stat71);
                    expr2=expr((v1!=null?v1.inputDims:null), (id1!=null?id1.getText():null).trim(), checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, expr2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                        
                             if (!checkSelfReference) {
                                if(calcPeriod == null) {
                                   valueMemory.put((id1!=null?id1.getText():null), (expr2!=null?expr2.value:null)); 
                                } else {
                                   Tuples tuples = (Tuples) valueMemory.get((id1!=null?id1.getText():null));
                                   Tuple matchTuple = new Tuple();
                                   matchTuple.map.put("PERIOD", calcPeriod);
                                   tuples.updateOnMatch((expr2!=null?expr2.value:null), matchTuple);
                                }         
                             } else {
                                retval.calculatePeriodByPeriod = (expr2!=null?expr2.calculatePeriodByPeriod:false);
                                retval.inputDims = (v1!=null?v1.inputDims:null);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:76:7: ^( DIM id2= ID q1= quotedstringlist )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    DIM3=(CommonTree)match(input,DIM,FOLLOW_DIM_in_stat89); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIM3_tree = (CommonTree)adaptor.dupNode(DIM3);

                    root_1 = (CommonTree)adaptor.becomeRoot(DIM3_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    id2=(CommonTree)match(input,ID,FOLLOW_ID_in_stat93); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id2_tree = (CommonTree)adaptor.dupNode(id2);

                    adaptor.addChild(root_1, id2_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quotedstringlist_in_stat97);
                    q1=quotedstringlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, q1.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                       
                              if(!checkSelfReference) {       
                            	   String dim = (id2!=null?id2.getText():null);
                            	   limits.put(dim, (q1!=null?q1.limits:null));
                                 /*
                            	   System.out.print("Setting limits for dimension " + dim + "=");
                            	   for(String limit : (q1!=null?q1.limits:null)) {
                            	      System.out.print(limit + " ");
                            	   }
                            	   System.out.println();
                            	   System.out.flush();
                                 */
                            	}
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:91:7: ^( PRINT id3= ID )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    PRINT4=(CommonTree)match(input,PRINT,FOLLOW_PRINT_in_stat115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRINT4_tree = (CommonTree)adaptor.dupNode(PRINT4);

                    root_1 = (CommonTree)adaptor.becomeRoot(PRINT4_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    id3=(CommonTree)match(input,ID,FOLLOW_ID_in_stat119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    id3_tree = (CommonTree)adaptor.dupNode(id3);

                    adaptor.addChild(root_1, id3_tree);
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {
                        
                               if (!checkSelfReference) {
                                  Tuples v = (Tuples)valueMemory.get((id3!=null?id3.getText():null));
                                  System.out.println("Print results for " + (id3!=null?id3.getText():null) + ":");
                                  System.out.println(v);
                                  System.out.flush();
                               }
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:100:7: ^( SETBASEPERIOD quoted_string )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    SETBASEPERIOD5=(CommonTree)match(input,SETBASEPERIOD,FOLLOW_SETBASEPERIOD_in_stat138); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SETBASEPERIOD5_tree = (CommonTree)adaptor.dupNode(SETBASEPERIOD5);

                    root_1 = (CommonTree)adaptor.becomeRoot(SETBASEPERIOD5_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_stat140);
                    quoted_string6=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, quoted_string6.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                               if (!checkSelfReference) {
                                  String basePeriod = (quoted_string6!=null?quoted_string6.value:null).toString().trim().replaceAll("'", "");
                                  valueMemory.put("_BASE_PERIOD", basePeriod);
                                  //System.out.println("Base Period is set to " + basePeriod);
                               }
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:108:7: ^( DBCONNECT uname= quoted_string passwd= quoted_string hname= quoted_string SID= quoted_string )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    DBCONNECT7=(CommonTree)match(input,DBCONNECT,FOLLOW_DBCONNECT_in_stat159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DBCONNECT7_tree = (CommonTree)adaptor.dupNode(DBCONNECT7);

                    root_1 = (CommonTree)adaptor.becomeRoot(DBCONNECT7_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_stat163);
                    uname=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, uname.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_stat167);
                    passwd=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, passwd.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_stat171);
                    hname=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, hname.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_stat175);
                    SID=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, SID.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                              String username = (uname!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(uname.start),
                        input.getTreeAdaptor().getTokenStopIndex(uname.start))):null).trim().replaceAll("'", "");
                              connectionMemory.put("username", username);
                              String password = (passwd!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(passwd.start),
                        input.getTreeAdaptor().getTokenStopIndex(passwd.start))):null).trim().replaceAll("'", "");
                              connectionMemory.put("password", password);
                              String hostname = (hname!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(hname.start),
                        input.getTreeAdaptor().getTokenStopIndex(hname.start))):null).trim().replaceAll("'", "");
                              connectionMemory.put("hostname", hostname);
                              String sid = (SID!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(SID.start),
                        input.getTreeAdaptor().getTokenStopIndex(SID.start))):null).trim().replaceAll("'", "");
                              connectionMemory.put("sid", sid);
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:119:7: ^( SETLEVEL ID ID q2= quotedstringlist )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    SETLEVEL8=(CommonTree)match(input,SETLEVEL,FOLLOW_SETLEVEL_in_stat195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SETLEVEL8_tree = (CommonTree)adaptor.dupNode(SETLEVEL8);

                    root_1 = (CommonTree)adaptor.becomeRoot(SETLEVEL8_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    ID9=(CommonTree)match(input,ID,FOLLOW_ID_in_stat197); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID9_tree = (CommonTree)adaptor.dupNode(ID9);

                    adaptor.addChild(root_1, ID9_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    ID10=(CommonTree)match(input,ID,FOLLOW_ID_in_stat199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID10_tree = (CommonTree)adaptor.dupNode(ID10);

                    adaptor.addChild(root_1, ID10_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quotedstringlist_in_stat203);
                    q2=quotedstringlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, q2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                               
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, stat_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stat"

    public static class stats_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stats"
    // RPIExprWalker.g:124:1: stats : ( stat[false, null, null] )+ ;
    public final RPIExprWalker.stats_return stats() throws RecognitionException {
        RPIExprWalker.stats_return retval = new RPIExprWalker.stats_return();
        retval.start = input.LT(1);
        int stats_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.stat_return stat11 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // RPIExprWalker.g:125:5: ( ( stat[false, null, null] )+ )
            // RPIExprWalker.g:125:7: ( stat[false, null, null] )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:125:7: ( stat[false, null, null] )+
            int cnt2=0;
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=ASSIGN && LA2_0<=PRINT)||(LA2_0>=SETBASEPERIOD && LA2_0<=SETLEVEL)||LA2_0==DBCONNECT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // RPIExprWalker.g:125:8: stat[false, null, null]
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_stat_in_stats229);
            	    stat11=stat(false, null, null);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, stat11.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt2 >= 1 ) break loop2;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(2, input);
                        throw eee;
                }
                cnt2++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, stats_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stats"

    public static class quotedstringlist_return extends TreeRuleReturnScope {
        public List<String> limits;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quotedstringlist"
    // RPIExprWalker.g:128:1: quotedstringlist returns [List<String> limits] : ^( ( QUOTEDSTRINGLIST ) (q1= quoted_string )+ ) ;
    public final RPIExprWalker.quotedstringlist_return quotedstringlist() throws RecognitionException {
        RPIExprWalker.quotedstringlist_return retval = new RPIExprWalker.quotedstringlist_return();
        retval.start = input.LT(1);
        int quotedstringlist_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTEDSTRINGLIST12=null;
        RPIExprWalker.quoted_string_return q1 = null;


        CommonTree QUOTEDSTRINGLIST12_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // RPIExprWalker.g:129:5: ( ^( ( QUOTEDSTRINGLIST ) (q1= quoted_string )+ ) )
            // RPIExprWalker.g:129:9: ^( ( QUOTEDSTRINGLIST ) (q1= quoted_string )+ )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();// RPIExprWalker.g:129:11: ( QUOTEDSTRINGLIST )
            // RPIExprWalker.g:129:12: QUOTEDSTRINGLIST
            {
            _last = (CommonTree)input.LT(1);
            QUOTEDSTRINGLIST12=(CommonTree)match(input,QUOTEDSTRINGLIST,FOLLOW_QUOTEDSTRINGLIST_in_quotedstringlist253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTEDSTRINGLIST12_tree = (CommonTree)adaptor.dupNode(QUOTEDSTRINGLIST12);

            adaptor.addChild(root_1, QUOTEDSTRINGLIST12_tree);
            }
            if ( state.backtracking==0 ) {

                         retval.limits = new ArrayList<String>();
                      
            }

            if ( state.backtracking==0 ) {
            }
            }



            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RPIExprWalker.g:132:12: (q1= quoted_string )+
            int cnt3=0;
            loop3:
            do {
                int alt3=2;
                int LA3_0 = input.LA(1);

                if ( (LA3_0==QUOTED_STRING) ) {
                    alt3=1;
                }


                switch (alt3) {
            	case 1 :
            	    // RPIExprWalker.g:132:13: q1= quoted_string
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_quoted_string_in_quotedstringlist269);
            	    q1=quoted_string();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_1, q1.getTree());
            	    if ( state.backtracking==0 ) {

            	                 retval.limits.add((q1!=null?(input.getTokenStream().toString(
            	        input.getTreeAdaptor().getTokenStartIndex(q1.start),
            	        input.getTreeAdaptor().getTokenStopIndex(q1.start))):null).trim().replaceAll("'", "").replaceAll(",", ""));           
            	              
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt3 >= 1 ) break loop3;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(3, input);
                        throw eee;
                }
                cnt3++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, quotedstringlist_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quotedstringlist"

    public static class varlist_return extends TreeRuleReturnScope {
        public List<String> inputDims;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varlist"
    // RPIExprWalker.g:138:1: varlist returns [List<String> inputDims] : ^( ( VARLIST ) (id= ID )+ ) ;
    public final RPIExprWalker.varlist_return varlist() throws RecognitionException {
        RPIExprWalker.varlist_return retval = new RPIExprWalker.varlist_return();
        retval.start = input.LT(1);
        int varlist_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree id=null;
        CommonTree VARLIST13=null;

        CommonTree id_tree=null;
        CommonTree VARLIST13_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // RPIExprWalker.g:139:5: ( ^( ( VARLIST ) (id= ID )+ ) )
            // RPIExprWalker.g:139:7: ^( ( VARLIST ) (id= ID )+ )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();// RPIExprWalker.g:139:9: ( VARLIST )
            // RPIExprWalker.g:139:10: VARLIST
            {
            _last = (CommonTree)input.LT(1);
            VARLIST13=(CommonTree)match(input,VARLIST,FOLLOW_VARLIST_in_varlist310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VARLIST13_tree = (CommonTree)adaptor.dupNode(VARLIST13);

            adaptor.addChild(root_1, VARLIST13_tree);
            }
            if ( state.backtracking==0 ) {

                       retval.inputDims = new ArrayList<String>();
                    
            }

            if ( state.backtracking==0 ) {
            }
            }



            match(input, Token.DOWN, null); if (state.failed) return retval;
            // RPIExprWalker.g:142:10: (id= ID )+
            int cnt4=0;
            loop4:
            do {
                int alt4=2;
                int LA4_0 = input.LA(1);

                if ( (LA4_0==ID) ) {
                    alt4=1;
                }


                switch (alt4) {
            	case 1 :
            	    // RPIExprWalker.g:142:11: id= ID
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    id=(CommonTree)match(input,ID,FOLLOW_ID_in_varlist325); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    id_tree = (CommonTree)adaptor.dupNode(id);

            	    adaptor.addChild(root_1, id_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      retval.inputDims.add((id!=null?id.getText():null).trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt4 >= 1 ) break loop4;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(4, input);
                        throw eee;
                }
                cnt4++;
            } while (true);


            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, varlist_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varlist"

    public static class expr_return extends TreeRuleReturnScope {
        public Tuples value;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // RPIExprWalker.g:145:1: expr[List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule] returns [Tuples value, boolean calculatePeriodByPeriod] : (e= atom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] | ^( PLUS a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( MINUS a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( ASTERISK a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( DIV a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) );
    public final RPIExprWalker.expr_return expr(List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.expr_return retval = new RPIExprWalker.expr_return();
        retval.start = input.LT(1);
        int expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS14=null;
        CommonTree MINUS15=null;
        CommonTree ASTERISK16=null;
        CommonTree DIV17=null;
        RPIExprWalker.atom_return e = null;

        RPIExprWalker.expr_return a = null;

        RPIExprWalker.expr_return b = null;


        CommonTree PLUS14_tree=null;
        CommonTree MINUS15_tree=null;
        CommonTree ASTERISK16_tree=null;
        CommonTree DIV17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // RPIExprWalker.g:147:5: (e= atom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] | ^( PLUS a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( MINUS a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( ASTERISK a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( DIV a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) )
            int alt5=5;
            switch ( input.LA(1) ) {
            case REF:
            case CREATEPREDICATE:
            case NUMBER:
            case IFTHEN:
            case AGG:
            case GETCURRPERIOD:
            case GETBASEPERIOD:
                {
                alt5=1;
                }
                break;
            case PLUS:
                {
                alt5=2;
                }
                break;
            case MINUS:
                {
                alt5=3;
                }
                break;
            case ASTERISK:
                {
                alt5=4;
                }
                break;
            case DIV:
                {
                alt5=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }

            switch (alt5) {
                case 1 :
                    // RPIExprWalker.g:147:7: e= atom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule]
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_atom_in_expr356);
                    e=atom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, e.getTree());
                    if ( state.backtracking==0 ) {

                             retval.value = (e!=null?e.value:null);
                             retval.calculatePeriodByPeriod = (e!=null?e.calculatePeriodByPeriod:false);
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:152:7: ^( PLUS a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    PLUS14=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr373); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS14_tree = (CommonTree)adaptor.dupNode(PLUS14);

                    root_1 = (CommonTree)adaptor.becomeRoot(PLUS14_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr377);
                    a=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, a.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr382);
                    b=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                               if (!checkSelfReference) {
                                  retval.value = (a!=null?a.value:null).add((b!=null?b.value:null), inputDims, limits, calcPeriod, aggRule);
                               } else {
                                  retval.calculatePeriodByPeriod = (a!=null?a.calculatePeriodByPeriod:false) || (b!=null?b.calculatePeriodByPeriod:false);
                               }
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:160:7: ^( MINUS a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    MINUS15=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr402); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS15_tree = (CommonTree)adaptor.dupNode(MINUS15);

                    root_1 = (CommonTree)adaptor.becomeRoot(MINUS15_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr406);
                    a=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, a.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr411);
                    b=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (a!=null?a.value:null).subtract((b!=null?b.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (a!=null?a.calculatePeriodByPeriod:false) || (b!=null?b.calculatePeriodByPeriod:false);
                             }   
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:168:7: ^( ASTERISK a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    ASTERISK16=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK16_tree = (CommonTree)adaptor.dupNode(ASTERISK16);

                    root_1 = (CommonTree)adaptor.becomeRoot(ASTERISK16_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr433);
                    a=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, a.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr438);
                    b=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (a!=null?a.value:null).multiply((b!=null?b.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (a!=null?a.calculatePeriodByPeriod:false) || (b!=null?b.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:176:7: ^( DIV a= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    DIV17=(CommonTree)match(input,DIV,FOLLOW_DIV_in_expr456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DIV17_tree = (CommonTree)adaptor.dupNode(DIV17);

                    root_1 = (CommonTree)adaptor.becomeRoot(DIV17_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr460);
                    a=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, a.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_expr465);
                    b=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (a!=null?a.value:null).divide((b!=null?b.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (a!=null?a.calculatePeriodByPeriod:false) || (b!=null?b.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class atom_return extends TreeRuleReturnScope {
        public Tuples value;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atom"
    // RPIExprWalker.g:186:1: atom[List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule] returns [Tuples value, boolean calculatePeriodByPeriod] : ( NUMBER | ^( REF ID (c= COMPMODIFIER )? ) | ^( CREATEPREDICATE sql ( varlist )? ) | function[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] );
    public final RPIExprWalker.atom_return atom(List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.atom_return retval = new RPIExprWalker.atom_return();
        retval.start = input.LT(1);
        int atom_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree c=null;
        CommonTree NUMBER18=null;
        CommonTree REF19=null;
        CommonTree ID20=null;
        CommonTree CREATEPREDICATE21=null;
        RPIExprWalker.sql_return sql22 = null;

        RPIExprWalker.varlist_return varlist23 = null;

        RPIExprWalker.function_return function24 = null;


        CommonTree c_tree=null;
        CommonTree NUMBER18_tree=null;
        CommonTree REF19_tree=null;
        CommonTree ID20_tree=null;
        CommonTree CREATEPREDICATE21_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // RPIExprWalker.g:188:5: ( NUMBER | ^( REF ID (c= COMPMODIFIER )? ) | ^( CREATEPREDICATE sql ( varlist )? ) | function[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
            int alt8=4;
            switch ( input.LA(1) ) {
            case NUMBER:
                {
                alt8=1;
                }
                break;
            case REF:
                {
                alt8=2;
                }
                break;
            case CREATEPREDICATE:
                {
                alt8=3;
                }
                break;
            case IFTHEN:
            case AGG:
            case GETCURRPERIOD:
            case GETBASEPERIOD:
                {
                alt8=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // RPIExprWalker.g:188:7: NUMBER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    NUMBER18=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_atom502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER18_tree = (CommonTree)adaptor.dupNode(NUMBER18);

                    adaptor.addChild(root_0, NUMBER18_tree);
                    }
                    if ( state.backtracking==0 ) {

                               retval.value = Tuples.number(new BigDecimal((NUMBER18!=null?NUMBER18.getText():null)).setScale(10, BigDecimal.ROUND_HALF_UP), inputDims, limits, calcPeriod, aggRule);
                               retval.value.dimensions = inputDims;
                               retval.calculatePeriodByPeriod = true;
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:194:7: ^( REF ID (c= COMPMODIFIER )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    REF19=(CommonTree)match(input,REF,FOLLOW_REF_in_atom520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REF19_tree = (CommonTree)adaptor.dupNode(REF19);

                    root_1 = (CommonTree)adaptor.becomeRoot(REF19_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    ID20=(CommonTree)match(input,ID,FOLLOW_ID_in_atom522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID20_tree = (CommonTree)adaptor.dupNode(ID20);

                    adaptor.addChild(root_1, ID20_tree);
                    }
                    // RPIExprWalker.g:194:17: (c= COMPMODIFIER )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==COMPMODIFIER) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // RPIExprWalker.g:0:0: c= COMPMODIFIER
                            {
                            _last = (CommonTree)input.LT(1);
                            c=(CommonTree)match(input,COMPMODIFIER,FOLLOW_COMPMODIFIER_in_atom526); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            c_tree = (CommonTree)adaptor.dupNode(c);

                            adaptor.addChild(root_1, c_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                                 if (checkSelfReference && lhsName.equals((ID20!=null?ID20.getText():null).trim())) {
                                    retval.calculatePeriodByPeriod = true;
                                 } else {
                                    Tuples v = (Tuples)valueMemory.get((ID20!=null?ID20.getText():null));
                                    int periodOffset = 0;           
                                    if (c != null) {
                                       String t = (c!=null?c.getText():null).trim();
                                       periodOffset = -1 * Integer.parseInt(t.substring(3, t.length()));
                                    }
                                    if ( v!=null ) {
                                       retval.value = v.identity(inputDims, limits, periodOffset, aggRule);
                                    } else {
                                       System.err.println("undefined variable "+(ID20!=null?ID20.getText():null));
                                       System.exit(0);
                                    }
                                    retval.calculatePeriodByPeriod = true;
                                 }
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:213:7: ^( CREATEPREDICATE sql ( varlist )? )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    CREATEPREDICATE21=(CommonTree)match(input,CREATEPREDICATE,FOLLOW_CREATEPREDICATE_in_atom539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CREATEPREDICATE21_tree = (CommonTree)adaptor.dupNode(CREATEPREDICATE21);

                    root_1 = (CommonTree)adaptor.becomeRoot(CREATEPREDICATE21_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_in_atom541);
                    sql22=sql();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, sql22.getTree());
                    // RPIExprWalker.g:213:29: ( varlist )?
                    int alt7=2;
                    int LA7_0 = input.LA(1);

                    if ( (LA7_0==VARLIST) ) {
                        alt7=1;
                    }
                    switch (alt7) {
                        case 1 :
                            // RPIExprWalker.g:0:0: varlist
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_varlist_in_atom543);
                            varlist23=varlist();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, varlist23.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                               if(!checkSelfReference) {
                                  retval.value = Tuples.getValueBySQL((sql22!=null?sql22.value:null).toString(), (sql22!=null?sql22.dimensions:null), inputDims, limits, aggRule, getUsername(), getPassword(), getHostname(), getSid());
                                  retval.calculatePeriodByPeriod = false;
                               }
                            
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:220:7: function[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule]
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_in_atom562);
                    function24=function(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function24.getTree());
                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (function24!=null?function24.value:null);
                             } else {
                                retval.calculatePeriodByPeriod = (function24!=null?function24.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, atom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "atom"

    public static class sql_return extends TreeRuleReturnScope {
        public StringBuffer value;
        public List<String> dimensions;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql"
    // RPIExprWalker.g:230:1: sql returns [StringBuffer value, List<String> dimensions] : ^( SQL select_expression ) ;
    public final RPIExprWalker.sql_return sql() throws RecognitionException {
        RPIExprWalker.sql_return retval = new RPIExprWalker.sql_return();
        retval.start = input.LT(1);
        int sql_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SQL25=null;
        RPIExprWalker.select_expression_return select_expression26 = null;


        CommonTree SQL25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // RPIExprWalker.g:231:5: ( ^( SQL select_expression ) )
            // RPIExprWalker.g:231:9: ^( SQL select_expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            {
            CommonTree _save_last_1 = _last;
            CommonTree _first_1 = null;
            CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
            SQL25=(CommonTree)match(input,SQL,FOLLOW_SQL_in_sql598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL25_tree = (CommonTree)adaptor.dupNode(SQL25);

            root_1 = (CommonTree)adaptor.becomeRoot(SQL25_tree, root_1);
            }


            match(input, Token.DOWN, null); if (state.failed) return retval;
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_expression_in_sql600);
            select_expression26=select_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_1, select_expression26.getTree());

            match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
            }

            if ( state.backtracking==0 ) {

                         retval.value = (select_expression26!=null?select_expression26.value:null);
                         retval.dimensions = (select_expression26!=null?select_expression26.dimensions:null);
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, sql_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql"

    public static class boolExpr_return extends TreeRuleReturnScope {
        public Tuples value;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolExpr"
    // RPIExprWalker.g:238:1: boolExpr[List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule] returns [Tuples value, boolean calculatePeriodByPeriod] : (b1= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] | ^( AND b2= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b3= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( OR b4= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b5= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( NOT b6= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) );
    public final RPIExprWalker.boolExpr_return boolExpr(List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.boolExpr_return retval = new RPIExprWalker.boolExpr_return();
        retval.start = input.LT(1);
        int boolExpr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree AND27=null;
        CommonTree OR28=null;
        CommonTree NOT29=null;
        RPIExprWalker.boolAtom_return b1 = null;

        RPIExprWalker.boolAtom_return b2 = null;

        RPIExprWalker.boolAtom_return b3 = null;

        RPIExprWalker.boolAtom_return b4 = null;

        RPIExprWalker.boolAtom_return b5 = null;

        RPIExprWalker.boolAtom_return b6 = null;


        CommonTree AND27_tree=null;
        CommonTree OR28_tree=null;
        CommonTree NOT29_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // RPIExprWalker.g:240:5: (b1= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] | ^( AND b2= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b3= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( OR b4= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b5= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( NOT b6= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) )
            int alt9=4;
            switch ( input.LA(1) ) {
            case BOOLOP_EQ:
            case BOOLOP_LT:
            case BOOLOP_GT:
            case BOOLOP_GE:
            case BOOLOP_LE:
                {
                alt9=1;
                }
                break;
            case AND:
                {
                alt9=2;
                }
                break;
            case OR:
                {
                alt9=3;
                }
                break;
            case NOT:
                {
                alt9=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // RPIExprWalker.g:240:9: b1= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule]
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolAtom_in_boolExpr644);
                    b1=boolAtom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, b1.getTree());
                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (b1!=null?b1.value:null);
                             } else {
                                retval.calculatePeriodByPeriod = (b1!=null?b1.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:248:9: ^( AND b2= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b3= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    AND27=(CommonTree)match(input,AND,FOLLOW_AND_in_boolExpr663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AND27_tree = (CommonTree)adaptor.dupNode(AND27);

                    root_1 = (CommonTree)adaptor.becomeRoot(AND27_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolAtom_in_boolExpr667);
                    b2=boolAtom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b2.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolAtom_in_boolExpr672);
                    b3=boolAtom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b3.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (b2!=null?b2.value:null).and((b3!=null?b3.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (b2!=null?b2.calculatePeriodByPeriod:false) || (b3!=null?b3.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:256:9: ^( OR b4= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] b5= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    OR28=(CommonTree)match(input,OR,FOLLOW_OR_in_boolExpr692); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OR28_tree = (CommonTree)adaptor.dupNode(OR28);

                    root_1 = (CommonTree)adaptor.becomeRoot(OR28_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolAtom_in_boolExpr696);
                    b4=boolAtom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b4.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolAtom_in_boolExpr701);
                    b5=boolAtom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b5.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if(!checkSelfReference) {
                                retval.value = (b4!=null?b4.value:null).or( (b5!=null?b5.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (b4!=null?b4.calculatePeriodByPeriod:false) || (b5!=null?b5.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:264:9: ^( NOT b6= boolAtom[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    NOT29=(CommonTree)match(input,NOT,FOLLOW_NOT_in_boolExpr721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT29_tree = (CommonTree)adaptor.dupNode(NOT29);

                    root_1 = (CommonTree)adaptor.becomeRoot(NOT29_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolAtom_in_boolExpr725);
                    b6=boolAtom(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, b6.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (b6!=null?b6.value:null).not(inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (b6!=null?b6.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, boolExpr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolExpr"

    public static class boolOp_return extends TreeRuleReturnScope {
        public Tuples value;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolOp"
    // RPIExprWalker.g:274:1: boolOp[List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule] returns [Tuples value, boolean calculatePeriodByPeriod] : ( ^( BOOLOP_EQ e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e2= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_LT e3= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e4= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_GT e5= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e6= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_GE e7= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e8= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_LE e9= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e10= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) );
    public final RPIExprWalker.boolOp_return boolOp(List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.boolOp_return retval = new RPIExprWalker.boolOp_return();
        retval.start = input.LT(1);
        int boolOp_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree BOOLOP_EQ30=null;
        CommonTree BOOLOP_LT31=null;
        CommonTree BOOLOP_GT32=null;
        CommonTree BOOLOP_GE33=null;
        CommonTree BOOLOP_LE34=null;
        RPIExprWalker.expr_return e1 = null;

        RPIExprWalker.expr_return e2 = null;

        RPIExprWalker.expr_return e3 = null;

        RPIExprWalker.expr_return e4 = null;

        RPIExprWalker.expr_return e5 = null;

        RPIExprWalker.expr_return e6 = null;

        RPIExprWalker.expr_return e7 = null;

        RPIExprWalker.expr_return e8 = null;

        RPIExprWalker.expr_return e9 = null;

        RPIExprWalker.expr_return e10 = null;


        CommonTree BOOLOP_EQ30_tree=null;
        CommonTree BOOLOP_LT31_tree=null;
        CommonTree BOOLOP_GT32_tree=null;
        CommonTree BOOLOP_GE33_tree=null;
        CommonTree BOOLOP_LE34_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // RPIExprWalker.g:276:5: ( ^( BOOLOP_EQ e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e2= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_LT e3= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e4= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_GT e5= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e6= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_GE e7= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e8= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | ^( BOOLOP_LE e9= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e10= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) )
            int alt10=5;
            switch ( input.LA(1) ) {
            case BOOLOP_EQ:
                {
                alt10=1;
                }
                break;
            case BOOLOP_LT:
                {
                alt10=2;
                }
                break;
            case BOOLOP_GT:
                {
                alt10=3;
                }
                break;
            case BOOLOP_GE:
                {
                alt10=4;
                }
                break;
            case BOOLOP_LE:
                {
                alt10=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // RPIExprWalker.g:276:9: ^( BOOLOP_EQ e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e2= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    BOOLOP_EQ30=(CommonTree)match(input,BOOLOP_EQ,FOLLOW_BOOLOP_EQ_in_boolOp765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_EQ30_tree = (CommonTree)adaptor.dupNode(BOOLOP_EQ30);

                    root_1 = (CommonTree)adaptor.becomeRoot(BOOLOP_EQ30_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp769);
                    e1=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp774);
                    e2=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (e1!=null?e1.value:null).eq((e2!=null?e2.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (e1!=null?e1.calculatePeriodByPeriod:false) || (e2!=null?e2.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:284:9: ^( BOOLOP_LT e3= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e4= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    BOOLOP_LT31=(CommonTree)match(input,BOOLOP_LT,FOLLOW_BOOLOP_LT_in_boolOp794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_LT31_tree = (CommonTree)adaptor.dupNode(BOOLOP_LT31);

                    root_1 = (CommonTree)adaptor.becomeRoot(BOOLOP_LT31_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp798);
                    e3=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e3.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp803);
                    e4=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e4.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (e3!=null?e3.value:null).lt((e4!=null?e4.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (e3!=null?e3.calculatePeriodByPeriod:false) || (e4!=null?e4.calculatePeriodByPeriod:false);
                             }
                             
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:293:9: ^( BOOLOP_GT e5= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e6= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    BOOLOP_GT32=(CommonTree)match(input,BOOLOP_GT,FOLLOW_BOOLOP_GT_in_boolOp823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_GT32_tree = (CommonTree)adaptor.dupNode(BOOLOP_GT32);

                    root_1 = (CommonTree)adaptor.becomeRoot(BOOLOP_GT32_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp827);
                    e5=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e5.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp832);
                    e6=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e6.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {       
                                retval.value = (e5!=null?e5.value:null).gt((e6!=null?e6.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (e5!=null?e5.calculatePeriodByPeriod:false) || (e6!=null?e6.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:301:9: ^( BOOLOP_GE e7= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e8= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    BOOLOP_GE33=(CommonTree)match(input,BOOLOP_GE,FOLLOW_BOOLOP_GE_in_boolOp852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_GE33_tree = (CommonTree)adaptor.dupNode(BOOLOP_GE33);

                    root_1 = (CommonTree)adaptor.becomeRoot(BOOLOP_GE33_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp856);
                    e7=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e7.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp861);
                    e8=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e8.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (e7!=null?e7.value:null).ge((e8!=null?e8.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (e7!=null?e7.calculatePeriodByPeriod:false) || (e8!=null?e8.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:309:9: ^( BOOLOP_LE e9= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e10= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    BOOLOP_LE34=(CommonTree)match(input,BOOLOP_LE,FOLLOW_BOOLOP_LE_in_boolOp881); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BOOLOP_LE34_tree = (CommonTree)adaptor.dupNode(BOOLOP_LE34);

                    root_1 = (CommonTree)adaptor.becomeRoot(BOOLOP_LE34_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp885);
                    e9=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e9.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_boolOp890);
                    e10=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e10.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (!checkSelfReference) {
                                retval.value = (e9!=null?e9.value:null).le((e10!=null?e10.value:null), inputDims, limits, calcPeriod, aggRule);
                             } else {
                                retval.calculatePeriodByPeriod = (e9!=null?e9.calculatePeriodByPeriod:false) || (e10!=null?e10.calculatePeriodByPeriod:false);
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, boolOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolOp"

    public static class boolAtom_return extends TreeRuleReturnScope {
        public Tuples value;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolAtom"
    // RPIExprWalker.g:319:1: boolAtom[List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule] returns [Tuples value, boolean calculatePeriodByPeriod] : boolOp[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ;
    public final RPIExprWalker.boolAtom_return boolAtom(List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.boolAtom_return retval = new RPIExprWalker.boolAtom_return();
        retval.start = input.LT(1);
        int boolAtom_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.boolOp_return boolOp35 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // RPIExprWalker.g:321:5: ( boolOp[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
            // RPIExprWalker.g:321:7: boolOp[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule]
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_boolOp_in_boolAtom923);
            boolOp35=boolOp(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, boolOp35.getTree());
            if ( state.backtracking==0 ) {

                     if (!checkSelfReference) {
                        retval.value = (boolOp35!=null?boolOp35.value:null).identity(inputDims, limits, aggRule); 
                     } else {
                        retval.calculatePeriodByPeriod = (boolOp35!=null?boolOp35.calculatePeriodByPeriod:false);
                     }     
                  
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, boolAtom_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolAtom"

    public static class function_return extends TreeRuleReturnScope {
        public Tuples value;
        public boolean calculatePeriodByPeriod;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function"
    // RPIExprWalker.g:333:1: function[List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule] returns [Tuples value, boolean calculatePeriodByPeriod] : ( ^( IFTHEN boolExpr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e2= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | GETBASEPERIOD | GETCURRPERIOD | ^( AGG a= AGGRULE e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, $a.text.trim()] ) );
    public final RPIExprWalker.function_return function(List<String> inputDims, String lhsName, boolean checkSelfReference, String calcPeriod, String aggRule) throws RecognitionException {
        RPIExprWalker.function_return retval = new RPIExprWalker.function_return();
        retval.start = input.LT(1);
        int function_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree a=null;
        CommonTree IFTHEN36=null;
        CommonTree GETBASEPERIOD38=null;
        CommonTree GETCURRPERIOD39=null;
        CommonTree AGG40=null;
        RPIExprWalker.expr_return e1 = null;

        RPIExprWalker.expr_return e2 = null;

        RPIExprWalker.boolExpr_return boolExpr37 = null;


        CommonTree a_tree=null;
        CommonTree IFTHEN36_tree=null;
        CommonTree GETBASEPERIOD38_tree=null;
        CommonTree GETCURRPERIOD39_tree=null;
        CommonTree AGG40_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // RPIExprWalker.g:335:5: ( ^( IFTHEN boolExpr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e2= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] ) | GETBASEPERIOD | GETCURRPERIOD | ^( AGG a= AGGRULE e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, $a.text.trim()] ) )
            int alt11=4;
            switch ( input.LA(1) ) {
            case IFTHEN:
                {
                alt11=1;
                }
                break;
            case GETBASEPERIOD:
                {
                alt11=2;
                }
                break;
            case GETCURRPERIOD:
                {
                alt11=3;
                }
                break;
            case AGG:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // RPIExprWalker.g:335:7: ^( IFTHEN boolExpr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] e2= expr[inputDims, lhsName, checkSelfReference, calcPeriod, aggRule] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    IFTHEN36=(CommonTree)match(input,IFTHEN,FOLLOW_IFTHEN_in_function975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IFTHEN36_tree = (CommonTree)adaptor.dupNode(IFTHEN36);

                    root_1 = (CommonTree)adaptor.becomeRoot(IFTHEN36_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolExpr_in_function977);
                    boolExpr37=boolExpr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, boolExpr37.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_function987);
                    e1=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_function992);
                    e2=expr(inputDims, lhsName, checkSelfReference, calcPeriod, aggRule);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e2.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                             if (checkSelfReference) {
                                retval.calculatePeriodByPeriod = (e1!=null?e1.calculatePeriodByPeriod:false) || (e2!=null?e2.calculatePeriodByPeriod:false);
                             } else {
                                retval.value = (boolExpr37!=null?boolExpr37.value:null).ifThen((e1!=null?e1.value:null), (e2!=null?e2.value:null), inputDims, limits, calcPeriod, aggRule);
                                retval.value.dimensions = inputDims;
                             }
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:345:9: GETBASEPERIOD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    GETBASEPERIOD38=(CommonTree)match(input,GETBASEPERIOD,FOLLOW_GETBASEPERIOD_in_function1011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GETBASEPERIOD38_tree = (CommonTree)adaptor.dupNode(GETBASEPERIOD38);

                    adaptor.addChild(root_0, GETBASEPERIOD38_tree);
                    }
                    if ( state.backtracking==0 ) {

                              retval.value = Tuples.number(new BigDecimal((String)valueMemory.get("_BASE_PERIOD")).setScale(10, BigDecimal.ROUND_HALF_UP), inputDims, limits, null, aggRule);
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:349:9: GETCURRPERIOD
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    GETCURRPERIOD39=(CommonTree)match(input,GETCURRPERIOD,FOLLOW_GETCURRPERIOD_in_function1028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GETCURRPERIOD39_tree = (CommonTree)adaptor.dupNode(GETCURRPERIOD39);

                    adaptor.addChild(root_0, GETCURRPERIOD39_tree);
                    }
                    if ( state.backtracking==0 ) {

                              retval.value = Tuples.getCurrPeriod(inputDims, limits, aggRule);
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:353:9: ^( AGG a= AGGRULE e1= expr[inputDims, lhsName, checkSelfReference, calcPeriod, $a.text.trim()] )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    AGG40=(CommonTree)match(input,AGG,FOLLOW_AGG_in_function1045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AGG40_tree = (CommonTree)adaptor.dupNode(AGG40);

                    root_1 = (CommonTree)adaptor.becomeRoot(AGG40_tree, root_1);
                    }


                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    a=(CommonTree)match(input,AGGRULE,FOLLOW_AGGRULE_in_function1050); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    a_tree = (CommonTree)adaptor.dupNode(a);

                    adaptor.addChild(root_1, a_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_in_function1054);
                    e1=expr(inputDims, lhsName, checkSelfReference, calcPeriod, (a!=null?a.getText():null).trim());

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, e1.getTree());

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }

                    if ( state.backtracking==0 ) {

                      	retval.value = (e1!=null?e1.value:null);
                          
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function"

    public static class start_rule_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "start_rule"
    // RPIExprWalker.g:359:1: start_rule : ( create_package )* EOF ;
    public final RPIExprWalker.start_rule_return start_rule() throws RecognitionException {
        RPIExprWalker.start_rule_return retval = new RPIExprWalker.start_rule_return();
        retval.start = input.LT(1);
        int start_rule_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EOF42=null;
        RPIExprWalker.create_package_return create_package41 = null;


        CommonTree EOF42_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // RPIExprWalker.g:360:5: ( ( create_package )* EOF )
            // RPIExprWalker.g:360:9: ( create_package )* EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:360:9: ( create_package )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==110) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // RPIExprWalker.g:360:10: create_package
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_create_package_in_start_rule1082);
            	    create_package41=create_package();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, create_package41.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);

            _last = (CommonTree)input.LT(1);
            EOF42=(CommonTree)match(input,EOF,FOLLOW_EOF_in_start_rule1086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF42_tree = (CommonTree)adaptor.dupNode(EOF42);

            adaptor.addChild(root_0, EOF42_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, start_rule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "start_rule"

    public static class create_package_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "create_package"
    // RPIExprWalker.g:363:1: create_package : 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) ;
    public final RPIExprWalker.create_package_return create_package() throws RecognitionException {
        RPIExprWalker.create_package_return retval = new RPIExprWalker.create_package_return();
        retval.start = input.LT(1);
        int create_package_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal43=null;
        CommonTree string_literal44=null;
        RPIExprWalker.keyREPLACE_return keyREPLACE45 = null;

        RPIExprWalker.package_spec_return package_spec46 = null;

        RPIExprWalker.package_body_return package_body47 = null;


        CommonTree string_literal43_tree=null;
        CommonTree string_literal44_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // RPIExprWalker.g:364:5: ( 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body ) )
            // RPIExprWalker.g:364:9: 'CREATE' ( 'OR' keyREPLACE )? ( package_spec | package_body )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal43=(CommonTree)match(input,110,FOLLOW_110_in_create_package1105); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal43_tree = (CommonTree)adaptor.dupNode(string_literal43);

            adaptor.addChild(root_0, string_literal43_tree);
            }
            // RPIExprWalker.g:364:18: ( 'OR' keyREPLACE )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==OR) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // RPIExprWalker.g:364:20: 'OR' keyREPLACE
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal44=(CommonTree)match(input,OR,FOLLOW_OR_in_create_package1109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal44_tree = (CommonTree)adaptor.dupNode(string_literal44);

                    adaptor.addChild(root_0, string_literal44_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyREPLACE_in_create_package1111);
                    keyREPLACE45=keyREPLACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyREPLACE45.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:365:9: ( package_spec | package_body )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==216) ) {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==ID) ) {
                    int LA14_2 = input.LA(3);

                    if ( (LA14_2==DOT||(LA14_2>=111 && LA14_2<=112)) ) {
                        alt14=1;
                    }
                    else if ( (LA14_2==ID||LA14_2==DOUBLEQUOTED_STRING||LA14_2==158) ) {
                        alt14=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA14_1==DOUBLEQUOTED_STRING||LA14_1==158) ) {
                    alt14=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // RPIExprWalker.g:365:11: package_spec
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_package_spec_in_create_package1126);
                    package_spec46=package_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, package_spec46.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:365:26: package_body
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_package_body_in_create_package1130);
                    package_body47=package_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, package_body47.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, create_package_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "create_package"

    public static class package_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_spec"
    // RPIExprWalker.g:368:1: package_spec : keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMICOLON ;
    public final RPIExprWalker.package_spec_return package_spec() throws RecognitionException {
        RPIExprWalker.package_spec_return retval = new RPIExprWalker.package_spec_return();
        retval.start = input.LT(1);
        int package_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set50=null;
        CommonTree string_literal52=null;
        CommonTree SEMICOLON54=null;
        RPIExprWalker.keyPACKAGE_return keyPACKAGE48 = null;

        RPIExprWalker.package_name_return package_name49 = null;

        RPIExprWalker.package_obj_spec_return package_obj_spec51 = null;

        RPIExprWalker.package_name_return package_name53 = null;


        CommonTree set50_tree=null;
        CommonTree string_literal52_tree=null;
        CommonTree SEMICOLON54_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // RPIExprWalker.g:369:5: ( keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMICOLON )
            // RPIExprWalker.g:369:9: keyPACKAGE package_name ( 'IS' | 'AS' ) ( package_obj_spec )* 'END' ( package_name )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyPACKAGE_in_package_spec1155);
            keyPACKAGE48=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyPACKAGE48.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_package_name_in_package_spec1157);
            package_name49=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, package_name49.getTree());
            _last = (CommonTree)input.LT(1);
            set50=(CommonTree)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();

                if ( state.backtracking==0 ) {
                set50_tree = (CommonTree)adaptor.dupNode(set50);

                adaptor.addChild(root_0, set50_tree);
                }
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprWalker.g:370:9: ( package_obj_spec )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID||LA15_0==DOUBLEQUOTED_STRING||(LA15_0>=161 && LA15_0<=162)||LA15_0==217) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // RPIExprWalker.g:370:11: package_obj_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_package_obj_spec_in_package_spec1180);
            	    package_obj_spec51=package_obj_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, package_obj_spec51.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            _last = (CommonTree)input.LT(1);
            string_literal52=(CommonTree)match(input,113,FOLLOW_113_in_package_spec1193); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal52_tree = (CommonTree)adaptor.dupNode(string_literal52);

            adaptor.addChild(root_0, string_literal52_tree);
            }
            // RPIExprWalker.g:371:15: ( package_name )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==ID||LA16_0==DOUBLEQUOTED_STRING||LA16_0==158) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // RPIExprWalker.g:371:16: package_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_package_name_in_package_spec1196);
                    package_name53=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, package_name53.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON54=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_spec1200); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON54_tree = (CommonTree)adaptor.dupNode(SEMICOLON54);

            adaptor.addChild(root_0, SEMICOLON54_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, package_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_spec"

    public static class package_body_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_body"
    // RPIExprWalker.g:374:1: package_body : keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMICOLON ;
    public final RPIExprWalker.package_body_return package_body() throws RecognitionException {
        RPIExprWalker.package_body_return retval = new RPIExprWalker.package_body_return();
        retval.start = input.LT(1);
        int package_body_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set58=null;
        CommonTree string_literal60=null;
        CommonTree string_literal62=null;
        CommonTree SEMICOLON64=null;
        RPIExprWalker.keyPACKAGE_return keyPACKAGE55 = null;

        RPIExprWalker.keyBODY_return keyBODY56 = null;

        RPIExprWalker.package_name_return package_name57 = null;

        RPIExprWalker.package_obj_body_return package_obj_body59 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements61 = null;

        RPIExprWalker.package_name_return package_name63 = null;


        CommonTree set58_tree=null;
        CommonTree string_literal60_tree=null;
        CommonTree string_literal62_tree=null;
        CommonTree SEMICOLON64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // RPIExprWalker.g:375:5: ( keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMICOLON )
            // RPIExprWalker.g:375:9: keyPACKAGE ( keyBODY ) package_name ( 'IS' | 'AS' ) ( package_obj_body )* ( 'BEGIN' seq_of_statements )? 'END' ( package_name )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyPACKAGE_in_package_body1223);
            keyPACKAGE55=keyPACKAGE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyPACKAGE55.getTree());
            // RPIExprWalker.g:375:20: ( keyBODY )
            // RPIExprWalker.g:375:22: keyBODY
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyBODY_in_package_body1227);
            keyBODY56=keyBODY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyBODY56.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_package_name_in_package_body1231);
            package_name57=package_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, package_name57.getTree());
            _last = (CommonTree)input.LT(1);
            set58=(CommonTree)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();

                if ( state.backtracking==0 ) {
                set58_tree = (CommonTree)adaptor.dupNode(set58);

                adaptor.addChild(root_0, set58_tree);
                }
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprWalker.g:376:9: ( package_obj_body )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==ID||LA17_0==DOUBLEQUOTED_STRING||LA17_0==110||(LA17_0>=161 && LA17_0<=162)||LA17_0==217) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // RPIExprWalker.g:376:11: package_obj_body
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_package_obj_body_in_package_body1253);
            	    package_obj_body59=package_obj_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, package_obj_body59.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            // RPIExprWalker.g:377:9: ( 'BEGIN' seq_of_statements )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==114) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // RPIExprWalker.g:377:11: 'BEGIN' seq_of_statements
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal60=(CommonTree)match(input,114,FOLLOW_114_in_package_body1268); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal60_tree = (CommonTree)adaptor.dupNode(string_literal60);

                    adaptor.addChild(root_0, string_literal60_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_seq_of_statements_in_package_body1270);
                    seq_of_statements61=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, seq_of_statements61.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal62=(CommonTree)match(input,113,FOLLOW_113_in_package_body1285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal62_tree = (CommonTree)adaptor.dupNode(string_literal62);

            adaptor.addChild(root_0, string_literal62_tree);
            }
            // RPIExprWalker.g:378:15: ( package_name )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ID||LA19_0==DOUBLEQUOTED_STRING||LA19_0==158) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // RPIExprWalker.g:378:17: package_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_package_name_in_package_body1289);
                    package_name63=package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, package_name63.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON64=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_package_body1294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON64_tree = (CommonTree)adaptor.dupNode(SEMICOLON64);

            adaptor.addChild(root_0, SEMICOLON64_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, package_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_body"

    public static class package_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_name"
    // RPIExprWalker.g:381:1: package_name : ( schema_name DOT )? identifier ;
    public final RPIExprWalker.package_name_return package_name() throws RecognitionException {
        RPIExprWalker.package_name_return retval = new RPIExprWalker.package_name_return();
        retval.start = input.LT(1);
        int package_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT66=null;
        RPIExprWalker.schema_name_return schema_name65 = null;

        RPIExprWalker.identifier_return identifier67 = null;


        CommonTree DOT66_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // RPIExprWalker.g:382:5: ( ( schema_name DOT )? identifier )
            // RPIExprWalker.g:382:9: ( schema_name DOT )? identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:382:9: ( schema_name DOT )?
            int alt20=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA20_1 = input.LA(2);

                    if ( (LA20_1==DOT) ) {
                        alt20=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA20_2 = input.LA(2);

                    if ( (LA20_2==DOT) ) {
                        alt20=1;
                    }
                    }
                    break;
                case 158:
                    {
                    alt20=1;
                    }
                    break;
            }

            switch (alt20) {
                case 1 :
                    // RPIExprWalker.g:382:11: schema_name DOT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_schema_name_in_package_name1315);
                    schema_name65=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, schema_name65.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT66=(CommonTree)match(input,DOT,FOLLOW_DOT_in_package_name1317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT66_tree = (CommonTree)adaptor.dupNode(DOT66);

                    adaptor.addChild(root_0, DOT66_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_package_name1322);
            identifier67=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier67.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, package_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_name"

    public static class package_obj_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_obj_spec"
    // RPIExprWalker.g:385:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );
    public final RPIExprWalker.package_obj_spec_return package_obj_spec() throws RecognitionException {
        RPIExprWalker.package_obj_spec_return retval = new RPIExprWalker.package_obj_spec_return();
        retval.start = input.LT(1);
        int package_obj_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.variable_declaration_return variable_declaration68 = null;

        RPIExprWalker.type_declaration_return type_declaration69 = null;

        RPIExprWalker.subtype_declaration_return subtype_declaration70 = null;

        RPIExprWalker.record_declaration_return record_declaration71 = null;

        RPIExprWalker.plsql_table_declaration_return plsql_table_declaration72 = null;

        RPIExprWalker.varray_declaration_return varray_declaration73 = null;

        RPIExprWalker.cursor_declaration_return cursor_declaration74 = null;

        RPIExprWalker.cursor_spec_return cursor_spec75 = null;

        RPIExprWalker.procedure_spec_return procedure_spec76 = null;

        RPIExprWalker.function_spec_return function_spec77 = null;

        RPIExprWalker.exception_declaration_return exception_declaration78 = null;

        RPIExprWalker.pragma_declaration_return pragma_declaration79 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // RPIExprWalker.g:386:5: ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration )
            int alt21=12;
            alt21 = dfa21.predict(input);
            switch (alt21) {
                case 1 :
                    // RPIExprWalker.g:386:9: variable_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_variable_declaration_in_package_obj_spec1342);
                    variable_declaration68=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, variable_declaration68.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:387:9: type_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_declaration_in_package_obj_spec1353);
                    type_declaration69=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, type_declaration69.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:388:9: subtype_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_spec1363);
                    subtype_declaration70=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subtype_declaration70.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:389:9: record_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_record_declaration_in_package_obj_spec1374);
                    record_declaration71=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, record_declaration71.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:390:9: plsql_table_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_spec1385);
                    plsql_table_declaration72=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_table_declaration72.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:391:9: varray_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_varray_declaration_in_package_obj_spec1396);
                    varray_declaration73=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, varray_declaration73.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:392:9: cursor_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_spec1406);
                    cursor_declaration74=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cursor_declaration74.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:393:9: cursor_spec
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cursor_spec_in_package_obj_spec1417);
                    cursor_spec75=cursor_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cursor_spec75.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:394:9: procedure_spec
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_procedure_spec_in_package_obj_spec1428);
                    procedure_spec76=procedure_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, procedure_spec76.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RPIExprWalker.g:395:9: function_spec
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_spec_in_package_obj_spec1439);
                    function_spec77=function_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_spec77.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RPIExprWalker.g:396:9: exception_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exception_declaration_in_package_obj_spec1450);
                    exception_declaration78=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exception_declaration78.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // RPIExprWalker.g:397:9: pragma_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_spec1461);
                    pragma_declaration79=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_declaration79.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, package_obj_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_obj_spec"

    public static class variable_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_declaration"
    // RPIExprWalker.g:400:1: variable_declaration : variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? SEMICOLON ;
    public final RPIExprWalker.variable_declaration_return variable_declaration() throws RecognitionException {
        RPIExprWalker.variable_declaration_return retval = new RPIExprWalker.variable_declaration_return();
        retval.start = input.LT(1);
        int variable_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal81=null;
        CommonTree string_literal83=null;
        CommonTree string_literal84=null;
        CommonTree set85=null;
        CommonTree SEMICOLON87=null;
        RPIExprWalker.variable_name_return variable_name80 = null;

        RPIExprWalker.type_spec_return type_spec82 = null;

        RPIExprWalker.plsql_expression_return plsql_expression86 = null;


        CommonTree string_literal81_tree=null;
        CommonTree string_literal83_tree=null;
        CommonTree string_literal84_tree=null;
        CommonTree set85_tree=null;
        CommonTree SEMICOLON87_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // RPIExprWalker.g:401:5: ( variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? SEMICOLON )
            // RPIExprWalker.g:401:9: variable_name ( 'CONSTANT' )? type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_variable_name_in_variable_declaration1480);
            variable_name80=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, variable_name80.getTree());
            // RPIExprWalker.g:401:23: ( 'CONSTANT' )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==115) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // RPIExprWalker.g:401:24: 'CONSTANT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal81=(CommonTree)match(input,115,FOLLOW_115_in_variable_declaration1483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal81_tree = (CommonTree)adaptor.dupNode(string_literal81);

                    adaptor.addChild(root_0, string_literal81_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_variable_declaration1495);
            type_spec82=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec82.getTree());
            // RPIExprWalker.g:402:19: ( 'NOT' 'NULL' )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==NOT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // RPIExprWalker.g:402:20: 'NOT' 'NULL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal83=(CommonTree)match(input,NOT,FOLLOW_NOT_in_variable_declaration1498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal83_tree = (CommonTree)adaptor.dupNode(string_literal83);

                    adaptor.addChild(root_0, string_literal83_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal84=(CommonTree)match(input,116,FOLLOW_116_in_variable_declaration1500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal84_tree = (CommonTree)adaptor.dupNode(string_literal84);

                    adaptor.addChild(root_0, string_literal84_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:403:9: ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==SQL_ASSIGN||LA24_0==117) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // RPIExprWalker.g:403:11: ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    set85=(CommonTree)input.LT(1);
                    if ( input.LA(1)==SQL_ASSIGN||input.LA(1)==117 ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set85_tree = (CommonTree)adaptor.dupNode(set85);

                        adaptor.addChild(root_0, set85_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expression_in_variable_declaration1525);
                    plsql_expression86=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expression86.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON87=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_variable_declaration1529); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON87_tree = (CommonTree)adaptor.dupNode(SEMICOLON87);

            adaptor.addChild(root_0, SEMICOLON87_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, variable_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_declaration"

    public static class type_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_declaration"
    // RPIExprWalker.g:406:1: type_declaration : keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMICOLON ;
    public final RPIExprWalker.type_declaration_return type_declaration() throws RecognitionException {
        RPIExprWalker.type_declaration_return retval = new RPIExprWalker.type_declaration_return();
        retval.start = input.LT(1);
        int type_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal90=null;
        CommonTree string_literal93=null;
        CommonTree string_literal94=null;
        CommonTree LPAREN95=null;
        CommonTree RPAREN97=null;
        CommonTree SEMICOLON98=null;
        RPIExprWalker.keyTYPE_return keyTYPE88 = null;

        RPIExprWalker.type_spec_return type_spec89 = null;

        RPIExprWalker.keyNEW_return keyNEW91 = null;

        RPIExprWalker.type_spec_return type_spec92 = null;

        RPIExprWalker.plsql_expressions_return plsql_expressions96 = null;


        CommonTree string_literal90_tree=null;
        CommonTree string_literal93_tree=null;
        CommonTree string_literal94_tree=null;
        CommonTree LPAREN95_tree=null;
        CommonTree RPAREN97_tree=null;
        CommonTree SEMICOLON98_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // RPIExprWalker.g:407:5: ( keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMICOLON )
            // RPIExprWalker.g:407:9: keyTYPE type_spec 'IS' ( keyNEW )? ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN ) SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyTYPE_in_type_declaration1552);
            keyTYPE88=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyTYPE88.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_type_declaration1554);
            type_spec89=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec89.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal90=(CommonTree)match(input,111,FOLLOW_111_in_type_declaration1556); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal90_tree = (CommonTree)adaptor.dupNode(string_literal90);

            adaptor.addChild(root_0, string_literal90_tree);
            }
            // RPIExprWalker.g:407:32: ( keyNEW )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ID) ) {
                switch ( input.LA(2) ) {
                    case LPAREN:
                        {
                        int LA25_3 = input.LA(3);

                        if ( (LA25_3==NUMBER) ) {
                            int LA25_6 = input.LA(4);

                            if ( (LA25_6==RPAREN) ) {
                                int LA25_8 = input.LA(5);

                                if ( ((synpred54_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NEW")))) ) {
                                    alt25=1;
                                }
                            }
                            else if ( (LA25_6==EQ||LA25_6==COMMA||(LA25_6>=PLUS && LA25_6<=DIV)||(LA25_6>=AND && LA25_6<=NOT)||(LA25_6>=BOOLOP_LT && LA25_6<=BOOLOP_LE)||(LA25_6>=FOUND_ATTR && LA25_6<=EXPONENT)||LA25_6==NOT_EQ||LA25_6==111||LA25_6==160||LA25_6==192||LA25_6==196) ) {
                                alt25=1;
                            }
                        }
                        else if ( ((LA25_3>=SUBSTR && LA25_3<=TO_CHAR)||LA25_3==TRIM||(LA25_3>=ID && LA25_3<=LPAREN)||(LA25_3>=SQL && LA25_3<=MINUS)||LA25_3==NOT||LA25_3==QUOTED_STRING||LA25_3==DOUBLEQUOTED_STRING||LA25_3==116||LA25_3==158||(LA25_3>=168 && LA25_3<=169)||(LA25_3>=174 && LA25_3<=175)||LA25_3==198) ) {
                            alt25=1;
                        }
                        }
                        break;
                    case ID:
                        {
                        int LA25_4 = input.LA(3);

                        if ( (LA25_4==ID||LA25_4==SEMICOLON||LA25_4==NOT||LA25_4==DOT||(LA25_4>=TYPE_ATTR && LA25_4<=ROWTYPE_ATTR)||LA25_4==AT_SIGN||LA25_4==136) ) {
                            alt25=1;
                        }
                        else if ( (LA25_4==LPAREN) ) {
                            int LA25_7 = input.LA(4);

                            if ( (LA25_7==NUMBER) ) {
                                int LA25_9 = input.LA(5);

                                if ( (LA25_9==RPAREN) ) {
                                    int LA25_10 = input.LA(6);

                                    if ( (LA25_10==SEMICOLON||LA25_10==NOT||LA25_10==136) ) {
                                        alt25=1;
                                    }
                                }
                            }
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt25=1;
                        }
                        break;
                }

            }
            switch (alt25) {
                case 1 :
                    // RPIExprWalker.g:407:34: keyNEW
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNEW_in_type_declaration1560);
                    keyNEW91=keyNEW();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNEW91.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:407:44: ( type_spec ( 'NOT' 'NULL' )? | LPAREN plsql_expressions RPAREN )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==ID||LA27_0==DOUBLEQUOTED_STRING||(LA27_0>=122 && LA27_0<=134)||(LA27_0>=137 && LA27_0<=144)||(LA27_0>=146 && LA27_0<=159)) ) {
                alt27=1;
            }
            else if ( (LA27_0==LPAREN) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // RPIExprWalker.g:407:46: type_spec ( 'NOT' 'NULL' )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_spec_in_type_declaration1567);
                    type_spec92=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, type_spec92.getTree());
                    // RPIExprWalker.g:407:56: ( 'NOT' 'NULL' )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==NOT) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // RPIExprWalker.g:407:58: 'NOT' 'NULL'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal93=(CommonTree)match(input,NOT,FOLLOW_NOT_in_type_declaration1571); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal93_tree = (CommonTree)adaptor.dupNode(string_literal93);

                            adaptor.addChild(root_0, string_literal93_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            string_literal94=(CommonTree)match(input,116,FOLLOW_116_in_type_declaration1573); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal94_tree = (CommonTree)adaptor.dupNode(string_literal94);

                            adaptor.addChild(root_0, string_literal94_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:407:76: LPAREN plsql_expressions RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN95=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_type_declaration1580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN95_tree = (CommonTree)adaptor.dupNode(LPAREN95);

                    adaptor.addChild(root_0, LPAREN95_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expressions_in_type_declaration1582);
                    plsql_expressions96=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expressions96.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN97=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_type_declaration1584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN97_tree = (CommonTree)adaptor.dupNode(RPAREN97);

                    adaptor.addChild(root_0, RPAREN97_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON98=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_type_declaration1588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON98_tree = (CommonTree)adaptor.dupNode(SEMICOLON98);

            adaptor.addChild(root_0, SEMICOLON98_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, type_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_declaration"

    public static class subtype_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subtype_declaration"
    // RPIExprWalker.g:410:1: subtype_declaration : keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMICOLON ;
    public final RPIExprWalker.subtype_declaration_return subtype_declaration() throws RecognitionException {
        RPIExprWalker.subtype_declaration_return retval = new RPIExprWalker.subtype_declaration_return();
        retval.start = input.LT(1);
        int subtype_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal101=null;
        CommonTree string_literal103=null;
        CommonTree string_literal104=null;
        CommonTree DOUBLEDOT107=null;
        CommonTree SEMICOLON109=null;
        RPIExprWalker.keySUBTYPE_return keySUBTYPE99 = null;

        RPIExprWalker.type_spec_return type_spec100 = null;

        RPIExprWalker.type_spec_return type_spec102 = null;

        RPIExprWalker.keyRANGE_return keyRANGE105 = null;

        RPIExprWalker.literal_return literal106 = null;

        RPIExprWalker.literal_return literal108 = null;


        CommonTree string_literal101_tree=null;
        CommonTree string_literal103_tree=null;
        CommonTree string_literal104_tree=null;
        CommonTree DOUBLEDOT107_tree=null;
        CommonTree SEMICOLON109_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // RPIExprWalker.g:411:5: ( keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMICOLON )
            // RPIExprWalker.g:411:9: keySUBTYPE type_spec 'IS' type_spec ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keySUBTYPE_in_subtype_declaration1611);
            keySUBTYPE99=keySUBTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keySUBTYPE99.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_subtype_declaration1613);
            type_spec100=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec100.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal101=(CommonTree)match(input,111,FOLLOW_111_in_subtype_declaration1615); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal101_tree = (CommonTree)adaptor.dupNode(string_literal101);

            adaptor.addChild(root_0, string_literal101_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_subtype_declaration1617);
            type_spec102=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec102.getTree());
            // RPIExprWalker.g:411:45: ( 'NOT' 'NULL' | keyRANGE literal DOUBLEDOT literal )?
            int alt28=3;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==NOT) ) {
                alt28=1;
            }
            else if ( (LA28_0==ID) ) {
                alt28=2;
            }
            switch (alt28) {
                case 1 :
                    // RPIExprWalker.g:411:47: 'NOT' 'NULL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal103=(CommonTree)match(input,NOT,FOLLOW_NOT_in_subtype_declaration1621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal103_tree = (CommonTree)adaptor.dupNode(string_literal103);

                    adaptor.addChild(root_0, string_literal103_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal104=(CommonTree)match(input,116,FOLLOW_116_in_subtype_declaration1623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal104_tree = (CommonTree)adaptor.dupNode(string_literal104);

                    adaptor.addChild(root_0, string_literal104_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:411:62: keyRANGE literal DOUBLEDOT literal
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyRANGE_in_subtype_declaration1627);
                    keyRANGE105=keyRANGE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyRANGE105.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_subtype_declaration1629);
                    literal106=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, literal106.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOUBLEDOT107=(CommonTree)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_subtype_declaration1631); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLEDOT107_tree = (CommonTree)adaptor.dupNode(DOUBLEDOT107);

                    adaptor.addChild(root_0, DOUBLEDOT107_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_subtype_declaration1633);
                    literal108=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, literal108.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON109=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_subtype_declaration1638); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON109_tree = (CommonTree)adaptor.dupNode(SEMICOLON109);

            adaptor.addChild(root_0, SEMICOLON109_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, subtype_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subtype_declaration"

    public static class cursor_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_declaration"
    // RPIExprWalker.g:414:1: cursor_declaration : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMICOLON ;
    public final RPIExprWalker.cursor_declaration_return cursor_declaration() throws RecognitionException {
        RPIExprWalker.cursor_declaration_return retval = new RPIExprWalker.cursor_declaration_return();
        retval.start = input.LT(1);
        int cursor_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN112=null;
        CommonTree RPAREN114=null;
        CommonTree string_literal115=null;
        CommonTree SEMICOLON117=null;
        RPIExprWalker.keyCURSOR_return keyCURSOR110 = null;

        RPIExprWalker.cursor_name_return cursor_name111 = null;

        RPIExprWalker.parameter_specs_return parameter_specs113 = null;

        RPIExprWalker.select_command_return select_command116 = null;


        CommonTree LPAREN112_tree=null;
        CommonTree RPAREN114_tree=null;
        CommonTree string_literal115_tree=null;
        CommonTree SEMICOLON117_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // RPIExprWalker.g:415:5: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMICOLON )
            // RPIExprWalker.g:415:9: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? 'IS' select_command SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyCURSOR_in_cursor_declaration1664);
            keyCURSOR110=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyCURSOR110.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cursor_name_in_cursor_declaration1666);
            cursor_name111=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cursor_name111.getTree());
            // RPIExprWalker.g:416:9: ( LPAREN parameter_specs RPAREN )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==LPAREN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // RPIExprWalker.g:416:11: LPAREN parameter_specs RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN112=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_declaration1678); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN112_tree = (CommonTree)adaptor.dupNode(LPAREN112);

                    adaptor.addChild(root_0, LPAREN112_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parameter_specs_in_cursor_declaration1680);
                    parameter_specs113=parameter_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, parameter_specs113.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN114=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_declaration1682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN114_tree = (CommonTree)adaptor.dupNode(RPAREN114);

                    adaptor.addChild(root_0, RPAREN114_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal115=(CommonTree)match(input,111,FOLLOW_111_in_cursor_declaration1695); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal115_tree = (CommonTree)adaptor.dupNode(string_literal115);

            adaptor.addChild(root_0, string_literal115_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_command_in_cursor_declaration1697);
            select_command116=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_command116.getTree());
            _last = (CommonTree)input.LT(1);
            SEMICOLON117=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_cursor_declaration1699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON117_tree = (CommonTree)adaptor.dupNode(SEMICOLON117);

            adaptor.addChild(root_0, SEMICOLON117_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, cursor_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_declaration"

    public static class package_obj_body_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "package_obj_body"
    // RPIExprWalker.g:419:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );
    public final RPIExprWalker.package_obj_body_return package_obj_body() throws RecognitionException {
        RPIExprWalker.package_obj_body_return retval = new RPIExprWalker.package_obj_body_return();
        retval.start = input.LT(1);
        int package_obj_body_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.variable_declaration_return variable_declaration118 = null;

        RPIExprWalker.subtype_declaration_return subtype_declaration119 = null;

        RPIExprWalker.cursor_declaration_return cursor_declaration120 = null;

        RPIExprWalker.exception_declaration_return exception_declaration121 = null;

        RPIExprWalker.record_declaration_return record_declaration122 = null;

        RPIExprWalker.plsql_table_declaration_return plsql_table_declaration123 = null;

        RPIExprWalker.varray_declaration_return varray_declaration124 = null;

        RPIExprWalker.procedure_body_return procedure_body125 = null;

        RPIExprWalker.function_body_return function_body126 = null;

        RPIExprWalker.pragma_declaration_return pragma_declaration127 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // RPIExprWalker.g:420:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration )
            int alt30=10;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // RPIExprWalker.g:420:9: variable_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_variable_declaration_in_package_obj_body1717);
                    variable_declaration118=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, variable_declaration118.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:421:9: subtype_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subtype_declaration_in_package_obj_body1728);
                    subtype_declaration119=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subtype_declaration119.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:422:9: cursor_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cursor_declaration_in_package_obj_body1739);
                    cursor_declaration120=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cursor_declaration120.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:423:9: exception_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exception_declaration_in_package_obj_body1750);
                    exception_declaration121=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exception_declaration121.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:424:9: record_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_record_declaration_in_package_obj_body1761);
                    record_declaration122=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, record_declaration122.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:425:9: plsql_table_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_table_declaration_in_package_obj_body1772);
                    plsql_table_declaration123=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_table_declaration123.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:426:9: varray_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_varray_declaration_in_package_obj_body1783);
                    varray_declaration124=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, varray_declaration124.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:427:9: procedure_body
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_procedure_body_in_package_obj_body1793);
                    procedure_body125=procedure_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, procedure_body125.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:428:9: function_body
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_body_in_package_obj_body1804);
                    function_body126=function_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_body126.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RPIExprWalker.g:429:9: pragma_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_declaration_in_package_obj_body1815);
                    pragma_declaration127=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_declaration127.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, package_obj_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "package_obj_body"

    public static class seq_of_statements_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "seq_of_statements"
    // RPIExprWalker.g:432:1: seq_of_statements : statement SEMICOLON ( statement SEMICOLON )* ;
    public final RPIExprWalker.seq_of_statements_return seq_of_statements() throws RecognitionException {
        RPIExprWalker.seq_of_statements_return retval = new RPIExprWalker.seq_of_statements_return();
        retval.start = input.LT(1);
        int seq_of_statements_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SEMICOLON129=null;
        CommonTree SEMICOLON131=null;
        RPIExprWalker.statement_return statement128 = null;

        RPIExprWalker.statement_return statement130 = null;


        CommonTree SEMICOLON129_tree=null;
        CommonTree SEMICOLON131_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // RPIExprWalker.g:433:5: ( statement SEMICOLON ( statement SEMICOLON )* )
            // RPIExprWalker.g:433:9: statement SEMICOLON ( statement SEMICOLON )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_statement_in_seq_of_statements1834);
            statement128=statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, statement128.getTree());
            _last = (CommonTree)input.LT(1);
            SEMICOLON129=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements1836); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON129_tree = (CommonTree)adaptor.dupNode(SEMICOLON129);

            adaptor.addChild(root_0, SEMICOLON129_tree);
            }
            // RPIExprWalker.g:433:29: ( statement SEMICOLON )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ID||LA31_0==LLABEL||LA31_0==COLON||LA31_0==DOUBLEQUOTED_STRING||LA31_0==110||LA31_0==114||LA31_0==116||LA31_0==118||LA31_0==120||LA31_0==145||LA31_0==158||(LA31_0>=161 && LA31_0<=162)||(LA31_0>=170 && LA31_0<=172)||LA31_0==174||LA31_0==190||LA31_0==198||LA31_0==201||LA31_0==203||(LA31_0>=205 && LA31_0<=206)||LA31_0==211||LA31_0==214||(LA31_0>=217 && LA31_0<=218)||LA31_0==220||(LA31_0>=222 && LA31_0<=223)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // RPIExprWalker.g:433:31: statement SEMICOLON
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_statement_in_seq_of_statements1840);
            	    statement130=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, statement130.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    SEMICOLON131=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_seq_of_statements1842); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMICOLON131_tree = (CommonTree)adaptor.dupNode(SEMICOLON131);

            	    adaptor.addChild(root_0, SEMICOLON131_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, seq_of_statements_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "seq_of_statements"

    public static class statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // RPIExprWalker.g:436:1: statement : ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call );
    public final RPIExprWalker.statement_return statement() throws RecognitionException {
        RPIExprWalker.statement_return retval = new RPIExprWalker.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.assignment_statement_return assignment_statement132 = null;

        RPIExprWalker.exit_statement_return exit_statement133 = null;

        RPIExprWalker.goto_statement_return goto_statement134 = null;

        RPIExprWalker.case_statement_return case_statement135 = null;

        RPIExprWalker.if_statement_return if_statement136 = null;

        RPIExprWalker.loop_statement_return loop_statement137 = null;

        RPIExprWalker.null_statement_return null_statement138 = null;

        RPIExprWalker.raise_statement_return raise_statement139 = null;

        RPIExprWalker.return_statement_return return_statement140 = null;

        RPIExprWalker.sql_statement_return sql_statement141 = null;

        RPIExprWalker.plsql_block_return plsql_block142 = null;

        RPIExprWalker.function_call_return function_call143 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // RPIExprWalker.g:437:5: ( assignment_statement | exit_statement | goto_statement | case_statement | if_statement | loop_statement | null_statement | raise_statement | return_statement | sql_statement | plsql_block | function_call )
            int alt32=12;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA32_1 = input.LA(2);

                if ( (synpred70_RPIExprWalker()) ) {
                    alt32=1;
                }
                else if ( ((synpred71_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EXIT")))) ) {
                    alt32=2;
                }
                else if ( (synpred73_RPIExprWalker()) ) {
                    alt32=4;
                }
                else if ( (((synpred79_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OPEN")))||(synpred79_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE"))))) ) {
                    alt32=10;
                }
                else if ( (((synpred80_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR")))||synpred80_RPIExprWalker()||(synpred80_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))||(synpred80_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))||(synpred80_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))||(synpred80_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE")))||(synpred80_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE"))))) ) {
                    alt32=11;
                }
                else if ( (true) ) {
                    alt32=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 32, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA32_2 = input.LA(2);

                if ( (synpred70_RPIExprWalker()) ) {
                    alt32=1;
                }
                else if ( (synpred73_RPIExprWalker()) ) {
                    alt32=4;
                }
                else if ( (synpred80_RPIExprWalker()) ) {
                    alt32=11;
                }
                else if ( (true) ) {
                    alt32=12;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 32, 2, input);

                    throw nvae;
                }
                }
                break;
            case COLON:
                {
                alt32=1;
                }
                break;
            case 120:
                {
                alt32=3;
                }
                break;
            case 198:
                {
                alt32=4;
                }
                break;
            case 172:
                {
                alt32=5;
                }
                break;
            case LLABEL:
                {
                int LA32_7 = input.LA(2);

                if ( (synpred75_RPIExprWalker()) ) {
                    alt32=6;
                }
                else if ( (synpred80_RPIExprWalker()) ) {
                    alt32=11;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 32, 7, input);

                    throw nvae;
                }
                }
                break;
            case 170:
            case 214:
            case 223:
                {
                alt32=6;
                }
                break;
            case 116:
                {
                alt32=7;
                }
                break;
            case 218:
                {
                alt32=8;
                }
                break;
            case 220:
                {
                alt32=9;
                }
                break;
            case 145:
            case 171:
            case 174:
            case 190:
            case 201:
            case 203:
            case 205:
            case 206:
            case 211:
            case 222:
                {
                alt32=10;
                }
                break;
            case 110:
            case 114:
            case 118:
            case 161:
            case 162:
            case 217:
                {
                alt32=11;
                }
                break;
            case 158:
                {
                alt32=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }

            switch (alt32) {
                case 1 :
                    // RPIExprWalker.g:437:9: assignment_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_assignment_statement_in_statement1868);
                    assignment_statement132=assignment_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, assignment_statement132.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:438:9: exit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exit_statement_in_statement1878);
                    exit_statement133=exit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exit_statement133.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:439:9: goto_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_goto_statement_in_statement1888);
                    goto_statement134=goto_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, goto_statement134.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:440:9: case_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_case_statement_in_statement1898);
                    case_statement135=case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, case_statement135.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:441:9: if_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_if_statement_in_statement1908);
                    if_statement136=if_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, if_statement136.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:442:9: loop_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_loop_statement_in_statement1919);
                    loop_statement137=loop_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, loop_statement137.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:443:9: null_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_null_statement_in_statement1930);
                    null_statement138=null_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, null_statement138.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:444:9: raise_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_raise_statement_in_statement1940);
                    raise_statement139=raise_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, raise_statement139.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:445:9: return_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_return_statement_in_statement1950);
                    return_statement140=return_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, return_statement140.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RPIExprWalker.g:446:9: sql_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_statement_in_statement1960);
                    sql_statement141=sql_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_statement141.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RPIExprWalker.g:447:9: plsql_block
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_block_in_statement1970);
                    plsql_block142=plsql_block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_block142.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // RPIExprWalker.g:449:9: function_call
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_call_in_statement1981);
                    function_call143=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_call143.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class plsql_block_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_block"
    // RPIExprWalker.g:452:1: plsql_block : ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) ;
    public final RPIExprWalker.plsql_block_return plsql_block() throws RecognitionException {
        RPIExprWalker.plsql_block_return retval = new RPIExprWalker.plsql_block_return();
        retval.start = input.LT(1);
        int plsql_block_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LLABEL144=null;
        CommonTree RLABEL146=null;
        CommonTree string_literal147=null;
        CommonTree string_literal149=null;
        CommonTree string_literal151=null;
        CommonTree string_literal153=null;
        RPIExprWalker.label_name_return label_name145 = null;

        RPIExprWalker.declare_spec_return declare_spec148 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements150 = null;

        RPIExprWalker.exception_handler_return exception_handler152 = null;

        RPIExprWalker.label_name_return label_name154 = null;


        CommonTree LLABEL144_tree=null;
        CommonTree RLABEL146_tree=null;
        CommonTree string_literal147_tree=null;
        CommonTree string_literal149_tree=null;
        CommonTree string_literal151_tree=null;
        CommonTree string_literal153_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // RPIExprWalker.g:453:5: ( ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? ) )
            // RPIExprWalker.g:453:9: ( LLABEL label_name RLABEL )? ( ( 'DECLARE' )? ( declare_spec )+ )? ( 'BEGIN' ) seq_of_statements ( 'EXCEPTION' ( exception_handler )+ )? ( 'END' ( label_name )? )
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:453:9: ( LLABEL label_name RLABEL )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==LLABEL) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // RPIExprWalker.g:453:11: LLABEL label_name RLABEL
                    {
                    _last = (CommonTree)input.LT(1);
                    LLABEL144=(CommonTree)match(input,LLABEL,FOLLOW_LLABEL_in_plsql_block2010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLABEL144_tree = (CommonTree)adaptor.dupNode(LLABEL144);

                    adaptor.addChild(root_0, LLABEL144_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_plsql_block2012);
                    label_name145=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name145.getTree());
                    _last = (CommonTree)input.LT(1);
                    RLABEL146=(CommonTree)match(input,RLABEL,FOLLOW_RLABEL_in_plsql_block2014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RLABEL146_tree = (CommonTree)adaptor.dupNode(RLABEL146);

                    adaptor.addChild(root_0, RLABEL146_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:454:9: ( ( 'DECLARE' )? ( declare_spec )+ )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==ID||LA36_0==DOUBLEQUOTED_STRING||LA36_0==110||LA36_0==118||(LA36_0>=161 && LA36_0<=162)||LA36_0==217) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // RPIExprWalker.g:454:11: ( 'DECLARE' )? ( declare_spec )+
                    {
                    // RPIExprWalker.g:454:11: ( 'DECLARE' )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==118) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // RPIExprWalker.g:454:13: 'DECLARE'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal147=(CommonTree)match(input,118,FOLLOW_118_in_plsql_block2031); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal147_tree = (CommonTree)adaptor.dupNode(string_literal147);

                            adaptor.addChild(root_0, string_literal147_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:454:26: ( declare_spec )+
                    int cnt35=0;
                    loop35:
                    do {
                        int alt35=2;
                        int LA35_0 = input.LA(1);

                        if ( (LA35_0==ID||LA35_0==DOUBLEQUOTED_STRING||LA35_0==110||(LA35_0>=161 && LA35_0<=162)||LA35_0==217) ) {
                            alt35=1;
                        }


                        switch (alt35) {
                    	case 1 :
                    	    // RPIExprWalker.g:454:27: declare_spec
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_declare_spec_in_plsql_block2037);
                    	    declare_spec148=declare_spec();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, declare_spec148.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt35 >= 1 ) break loop35;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(35, input);
                                throw eee;
                        }
                        cnt35++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:455:9: ( 'BEGIN' )
            // RPIExprWalker.g:455:11: 'BEGIN'
            {
            _last = (CommonTree)input.LT(1);
            string_literal149=(CommonTree)match(input,114,FOLLOW_114_in_plsql_block2055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal149_tree = (CommonTree)adaptor.dupNode(string_literal149);

            adaptor.addChild(root_0, string_literal149_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_plsql_block2067);
            seq_of_statements150=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements150.getTree());
            // RPIExprWalker.g:457:9: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==119) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // RPIExprWalker.g:457:11: 'EXCEPTION' ( exception_handler )+
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal151=(CommonTree)match(input,119,FOLLOW_119_in_plsql_block2079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal151_tree = (CommonTree)adaptor.dupNode(string_literal151);

                    adaptor.addChild(root_0, string_literal151_tree);
                    }
                    // RPIExprWalker.g:457:23: ( exception_handler )+
                    int cnt37=0;
                    loop37:
                    do {
                        int alt37=2;
                        int LA37_0 = input.LA(1);

                        if ( (LA37_0==121) ) {
                            alt37=1;
                        }


                        switch (alt37) {
                    	case 1 :
                    	    // RPIExprWalker.g:457:25: exception_handler
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_exception_handler_in_plsql_block2083);
                    	    exception_handler152=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, exception_handler152.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt37 >= 1 ) break loop37;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(37, input);
                                throw eee;
                        }
                        cnt37++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:458:9: ( 'END' ( label_name )? )
            // RPIExprWalker.g:458:11: 'END' ( label_name )?
            {
            _last = (CommonTree)input.LT(1);
            string_literal153=(CommonTree)match(input,113,FOLLOW_113_in_plsql_block2102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal153_tree = (CommonTree)adaptor.dupNode(string_literal153);

            adaptor.addChild(root_0, string_literal153_tree);
            }
            // RPIExprWalker.g:458:17: ( label_name )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==ID||LA39_0==DOUBLEQUOTED_STRING) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // RPIExprWalker.g:458:19: label_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_plsql_block2106);
                    label_name154=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name154.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, plsql_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_block"

    public static class declare_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "declare_spec"
    // RPIExprWalker.g:461:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );
    public final RPIExprWalker.declare_spec_return declare_spec() throws RecognitionException {
        RPIExprWalker.declare_spec_return retval = new RPIExprWalker.declare_spec_return();
        retval.start = input.LT(1);
        int declare_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.variable_declaration_return variable_declaration155 = null;

        RPIExprWalker.subtype_declaration_return subtype_declaration156 = null;

        RPIExprWalker.cursor_declaration_return cursor_declaration157 = null;

        RPIExprWalker.exception_declaration_return exception_declaration158 = null;

        RPIExprWalker.record_declaration_return record_declaration159 = null;

        RPIExprWalker.plsql_table_declaration_return plsql_table_declaration160 = null;

        RPIExprWalker.varray_declaration_return varray_declaration161 = null;

        RPIExprWalker.procedure_declaration_return procedure_declaration162 = null;

        RPIExprWalker.function_declaration_return function_declaration163 = null;

        RPIExprWalker.type_declaration_return type_declaration164 = null;

        RPIExprWalker.pragma_declaration_return pragma_declaration165 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // RPIExprWalker.g:462:5: ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration )
            int alt40=11;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // RPIExprWalker.g:462:9: variable_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_variable_declaration_in_declare_spec2130);
                    variable_declaration155=variable_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, variable_declaration155.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:463:9: subtype_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subtype_declaration_in_declare_spec2141);
                    subtype_declaration156=subtype_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subtype_declaration156.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:464:9: cursor_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cursor_declaration_in_declare_spec2152);
                    cursor_declaration157=cursor_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cursor_declaration157.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:465:9: exception_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exception_declaration_in_declare_spec2163);
                    exception_declaration158=exception_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exception_declaration158.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:466:9: record_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_record_declaration_in_declare_spec2174);
                    record_declaration159=record_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, record_declaration159.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:467:9: plsql_table_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_table_declaration_in_declare_spec2185);
                    plsql_table_declaration160=plsql_table_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_table_declaration160.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:468:9: varray_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_varray_declaration_in_declare_spec2196);
                    varray_declaration161=varray_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, varray_declaration161.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:469:9: procedure_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_procedure_declaration_in_declare_spec2206);
                    procedure_declaration162=procedure_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, procedure_declaration162.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:470:9: function_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_declaration_in_declare_spec2217);
                    function_declaration163=function_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_declaration163.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RPIExprWalker.g:471:9: type_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_declaration_in_declare_spec2227);
                    type_declaration164=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, type_declaration164.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RPIExprWalker.g:472:9: pragma_declaration
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_declaration_in_declare_spec2238);
                    pragma_declaration165=pragma_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_declaration165.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, declare_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declare_spec"

    public static class pragma_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_declaration"
    // RPIExprWalker.g:475:1: pragma_declaration : keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMICOLON ;
    public final RPIExprWalker.pragma_declaration_return pragma_declaration() throws RecognitionException {
        RPIExprWalker.pragma_declaration_return retval = new RPIExprWalker.pragma_declaration_return();
        retval.start = input.LT(1);
        int pragma_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN168=null;
        CommonTree string_literal169=null;
        CommonTree COMMA171=null;
        CommonTree RPAREN173=null;
        CommonTree LPAREN175=null;
        CommonTree COMMA177=null;
        CommonTree RPAREN179=null;
        CommonTree LPAREN183=null;
        CommonTree RPAREN185=null;
        CommonTree LPAREN187=null;
        CommonTree RPAREN189=null;
        CommonTree LPAREN191=null;
        CommonTree RPAREN193=null;
        CommonTree LPAREN195=null;
        CommonTree RPAREN197=null;
        CommonTree LPAREN199=null;
        CommonTree RPAREN201=null;
        CommonTree SEMICOLON202=null;
        RPIExprWalker.keyPRAGMA_return keyPRAGMA166 = null;

        RPIExprWalker.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES167 = null;

        RPIExprWalker.function_name_return function_name170 = null;

        RPIExprWalker.pragma_param_return pragma_param172 = null;

        RPIExprWalker.keyEXCEPTION_INIT_return keyEXCEPTION_INIT174 = null;

        RPIExprWalker.exception_name_return exception_name176 = null;

        RPIExprWalker.literal_return literal178 = null;

        RPIExprWalker.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION180 = null;

        RPIExprWalker.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE181 = null;

        RPIExprWalker.keyBUILTIN_return keyBUILTIN182 = null;

        RPIExprWalker.pragma_params_return pragma_params184 = null;

        RPIExprWalker.keyFIPSFLAG_return keyFIPSFLAG186 = null;

        RPIExprWalker.pragma_params_return pragma_params188 = null;

        RPIExprWalker.keyINTERFACE_return keyINTERFACE190 = null;

        RPIExprWalker.pragma_params_return pragma_params192 = null;

        RPIExprWalker.keyNEW_NAMES_return keyNEW_NAMES194 = null;

        RPIExprWalker.pragma_params_return pragma_params196 = null;

        RPIExprWalker.keyTIMESTAMP_return keyTIMESTAMP198 = null;

        RPIExprWalker.pragma_params_return pragma_params200 = null;


        CommonTree LPAREN168_tree=null;
        CommonTree string_literal169_tree=null;
        CommonTree COMMA171_tree=null;
        CommonTree RPAREN173_tree=null;
        CommonTree LPAREN175_tree=null;
        CommonTree COMMA177_tree=null;
        CommonTree RPAREN179_tree=null;
        CommonTree LPAREN183_tree=null;
        CommonTree RPAREN185_tree=null;
        CommonTree LPAREN187_tree=null;
        CommonTree RPAREN189_tree=null;
        CommonTree LPAREN191_tree=null;
        CommonTree RPAREN193_tree=null;
        CommonTree LPAREN195_tree=null;
        CommonTree RPAREN197_tree=null;
        CommonTree LPAREN199_tree=null;
        CommonTree RPAREN201_tree=null;
        CommonTree SEMICOLON202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // RPIExprWalker.g:476:5: ( keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMICOLON )
            // RPIExprWalker.g:476:9: keyPRAGMA ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN ) SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyPRAGMA_in_pragma_declaration2257);
            keyPRAGMA166=keyPRAGMA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyPRAGMA166.getTree());
            // RPIExprWalker.g:477:9: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )
            int alt43=9;
            alt43 = dfa43.predict(input);
            switch (alt43) {
                case 1 :
                    // RPIExprWalker.g:477:13: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration2272);
                    keyRESTRICT_REFERENCES167=keyRESTRICT_REFERENCES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyRESTRICT_REFERENCES167.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN168=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN168_tree = (CommonTree)adaptor.dupNode(LPAREN168);

                    adaptor.addChild(root_0, LPAREN168_tree);
                    }
                    // RPIExprWalker.g:477:43: ( 'DEFAULT' | function_name )
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==117) ) {
                        alt41=1;
                    }
                    else if ( (LA41_0==ID||LA41_0==QUOTED_STRING||LA41_0==DOUBLEQUOTED_STRING) ) {
                        alt41=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 41, 0, input);

                        throw nvae;
                    }
                    switch (alt41) {
                        case 1 :
                            // RPIExprWalker.g:477:45: 'DEFAULT'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal169=(CommonTree)match(input,117,FOLLOW_117_in_pragma_declaration2278); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal169_tree = (CommonTree)adaptor.dupNode(string_literal169);

                            adaptor.addChild(root_0, string_literal169_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:477:57: function_name
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_function_name_in_pragma_declaration2282);
                            function_name170=function_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, function_name170.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:477:73: ( COMMA pragma_param )+
                    int cnt42=0;
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);

                        if ( (LA42_0==COMMA) ) {
                            alt42=1;
                        }


                        switch (alt42) {
                    	case 1 :
                    	    // RPIExprWalker.g:477:75: COMMA pragma_param
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    COMMA171=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration2288); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA171_tree = (CommonTree)adaptor.dupNode(COMMA171);

                    	    adaptor.addChild(root_0, COMMA171_tree);
                    	    }
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_pragma_param_in_pragma_declaration2290);
                    	    pragma_param172=pragma_param();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, pragma_param172.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt42 >= 1 ) break loop42;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(42, input);
                                throw eee;
                        }
                        cnt42++;
                    } while (true);

                    _last = (CommonTree)input.LT(1);
                    RPAREN173=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN173_tree = (CommonTree)adaptor.dupNode(RPAREN173);

                    adaptor.addChild(root_0, RPAREN173_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:478:13: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration2310);
                    keyEXCEPTION_INIT174=keyEXCEPTION_INIT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyEXCEPTION_INIT174.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN175=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2312); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN175_tree = (CommonTree)adaptor.dupNode(LPAREN175);

                    adaptor.addChild(root_0, LPAREN175_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exception_name_in_pragma_declaration2314);
                    exception_name176=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exception_name176.getTree());
                    _last = (CommonTree)input.LT(1);
                    COMMA177=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_pragma_declaration2316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA177_tree = (CommonTree)adaptor.dupNode(COMMA177);

                    adaptor.addChild(root_0, COMMA177_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_pragma_declaration2318);
                    literal178=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, literal178.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN179=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN179_tree = (CommonTree)adaptor.dupNode(RPAREN179);

                    adaptor.addChild(root_0, RPAREN179_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:479:13: keyAUTONOMOUS_TRANSACTION
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration2334);
                    keyAUTONOMOUS_TRANSACTION180=keyAUTONOMOUS_TRANSACTION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyAUTONOMOUS_TRANSACTION180.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:480:13: keySERIALLY_REUSABLE
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration2348);
                    keySERIALLY_REUSABLE181=keySERIALLY_REUSABLE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keySERIALLY_REUSABLE181.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:481:13: keyBUILTIN LPAREN pragma_params RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyBUILTIN_in_pragma_declaration2362);
                    keyBUILTIN182=keyBUILTIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyBUILTIN182.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN183=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN183_tree = (CommonTree)adaptor.dupNode(LPAREN183);

                    adaptor.addChild(root_0, LPAREN183_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2366);
                    pragma_params184=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_params184.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN185=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN185_tree = (CommonTree)adaptor.dupNode(RPAREN185);

                    adaptor.addChild(root_0, RPAREN185_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:482:13: keyFIPSFLAG LPAREN pragma_params RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyFIPSFLAG_in_pragma_declaration2382);
                    keyFIPSFLAG186=keyFIPSFLAG();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyFIPSFLAG186.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN187=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN187_tree = (CommonTree)adaptor.dupNode(LPAREN187);

                    adaptor.addChild(root_0, LPAREN187_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2386);
                    pragma_params188=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_params188.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN189=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN189_tree = (CommonTree)adaptor.dupNode(RPAREN189);

                    adaptor.addChild(root_0, RPAREN189_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:484:13: keyINTERFACE LPAREN pragma_params RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyINTERFACE_in_pragma_declaration2403);
                    keyINTERFACE190=keyINTERFACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyINTERFACE190.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN191=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN191_tree = (CommonTree)adaptor.dupNode(LPAREN191);

                    adaptor.addChild(root_0, LPAREN191_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2407);
                    pragma_params192=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_params192.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN193=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2409); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN193_tree = (CommonTree)adaptor.dupNode(RPAREN193);

                    adaptor.addChild(root_0, RPAREN193_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:485:13: keyNEW_NAMES LPAREN pragma_params RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNEW_NAMES_in_pragma_declaration2423);
                    keyNEW_NAMES194=keyNEW_NAMES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNEW_NAMES194.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN195=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN195_tree = (CommonTree)adaptor.dupNode(LPAREN195);

                    adaptor.addChild(root_0, LPAREN195_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2427);
                    pragma_params196=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_params196.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN197=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2429); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN197_tree = (CommonTree)adaptor.dupNode(RPAREN197);

                    adaptor.addChild(root_0, RPAREN197_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:486:13: keyTIMESTAMP LPAREN pragma_params RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyTIMESTAMP_in_pragma_declaration2443);
                    keyTIMESTAMP198=keyTIMESTAMP();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyTIMESTAMP198.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN199=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_pragma_declaration2445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN199_tree = (CommonTree)adaptor.dupNode(LPAREN199);

                    adaptor.addChild(root_0, LPAREN199_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_pragma_params_in_pragma_declaration2447);
                    pragma_params200=pragma_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, pragma_params200.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN201=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_pragma_declaration2449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN201_tree = (CommonTree)adaptor.dupNode(RPAREN201);

                    adaptor.addChild(root_0, RPAREN201_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON202=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pragma_declaration2469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON202_tree = (CommonTree)adaptor.dupNode(SEMICOLON202);

            adaptor.addChild(root_0, SEMICOLON202_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, pragma_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_declaration"

    public static class pragma_params_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_params"
    // RPIExprWalker.g:491:1: pragma_params : pragma_param ( COMMA pragma_param )* ;
    public final RPIExprWalker.pragma_params_return pragma_params() throws RecognitionException {
        RPIExprWalker.pragma_params_return retval = new RPIExprWalker.pragma_params_return();
        retval.start = input.LT(1);
        int pragma_params_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA204=null;
        RPIExprWalker.pragma_param_return pragma_param203 = null;

        RPIExprWalker.pragma_param_return pragma_param205 = null;


        CommonTree COMMA204_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // RPIExprWalker.g:492:5: ( pragma_param ( COMMA pragma_param )* )
            // RPIExprWalker.g:492:9: pragma_param ( COMMA pragma_param )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_pragma_param_in_pragma_params2488);
            pragma_param203=pragma_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, pragma_param203.getTree());
            // RPIExprWalker.g:492:22: ( COMMA pragma_param )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==COMMA) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // RPIExprWalker.g:492:24: COMMA pragma_param
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA204=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_pragma_params2492); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA204_tree = (CommonTree)adaptor.dupNode(COMMA204);

            	    adaptor.addChild(root_0, COMMA204_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_pragma_param_in_pragma_params2494);
            	    pragma_param205=pragma_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, pragma_param205.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, pragma_params_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_params"

    public static class pragma_param_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pragma_param"
    // RPIExprWalker.g:495:1: pragma_param : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier );
    public final RPIExprWalker.pragma_param_return pragma_param() throws RecognitionException {
        RPIExprWalker.pragma_param_return retval = new RPIExprWalker.pragma_param_return();
        retval.start = input.LT(1);
        int pragma_param_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set206=null;
        CommonTree NUMBER207=null;
        CommonTree QUOTED_STRING208=null;
        RPIExprWalker.identifier_return identifier209 = null;


        CommonTree set206_tree=null;
        CommonTree NUMBER207_tree=null;
        CommonTree QUOTED_STRING208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // RPIExprWalker.g:496:5: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING | identifier )
            int alt46=3;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
            case NUMBER:
                {
                alt46=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt46=2;
                }
                break;
            case ID:
            case DOUBLEQUOTED_STRING:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // RPIExprWalker.g:496:9: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // RPIExprWalker.g:496:9: ( PLUS | MINUS )?
                    int alt45=2;
                    int LA45_0 = input.LA(1);

                    if ( ((LA45_0>=PLUS && LA45_0<=MINUS)) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            // RPIExprWalker.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set206=(CommonTree)input.LT(1);
                            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                                input.consume();

                                if ( state.backtracking==0 ) {
                                set206_tree = (CommonTree)adaptor.dupNode(set206);

                                adaptor.addChild(root_0, set206_tree);
                                }
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    NUMBER207=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_pragma_param2527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER207_tree = (CommonTree)adaptor.dupNode(NUMBER207);

                    adaptor.addChild(root_0, NUMBER207_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:497:9: QUOTED_STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    QUOTED_STRING208=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pragma_param2537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING208_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING208);

                    adaptor.addChild(root_0, QUOTED_STRING208_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:498:9: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_identifier_in_pragma_param2547);
                    identifier209=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, identifier209.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, pragma_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pragma_param"

    public static class assignment_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_statement"
    // RPIExprWalker.g:501:1: assignment_statement : ( lvalue SQL_ASSIGN plsql_expression ) ;
    public final RPIExprWalker.assignment_statement_return assignment_statement() throws RecognitionException {
        RPIExprWalker.assignment_statement_return retval = new RPIExprWalker.assignment_statement_return();
        retval.start = input.LT(1);
        int assignment_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SQL_ASSIGN211=null;
        RPIExprWalker.lvalue_return lvalue210 = null;

        RPIExprWalker.plsql_expression_return plsql_expression212 = null;


        CommonTree SQL_ASSIGN211_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // RPIExprWalker.g:502:5: ( ( lvalue SQL_ASSIGN plsql_expression ) )
            // RPIExprWalker.g:504:9: ( lvalue SQL_ASSIGN plsql_expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:504:9: ( lvalue SQL_ASSIGN plsql_expression )
            // RPIExprWalker.g:504:10: lvalue SQL_ASSIGN plsql_expression
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_lvalue_in_assignment_statement2577);
            lvalue210=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, lvalue210.getTree());
            _last = (CommonTree)input.LT(1);
            SQL_ASSIGN211=(CommonTree)match(input,SQL_ASSIGN,FOLLOW_SQL_ASSIGN_in_assignment_statement2579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL_ASSIGN211_tree = (CommonTree)adaptor.dupNode(SQL_ASSIGN211);

            adaptor.addChild(root_0, SQL_ASSIGN211_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_expression_in_assignment_statement2581);
            plsql_expression212=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_expression212.getTree());

            if ( state.backtracking==0 ) {
            }
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, assignment_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignment_statement"

    public static class lvalues_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lvalues"
    // RPIExprWalker.g:507:1: lvalues : lvalue ( COMMA lvalue )* ;
    public final RPIExprWalker.lvalues_return lvalues() throws RecognitionException {
        RPIExprWalker.lvalues_return retval = new RPIExprWalker.lvalues_return();
        retval.start = input.LT(1);
        int lvalues_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA214=null;
        RPIExprWalker.lvalue_return lvalue213 = null;

        RPIExprWalker.lvalue_return lvalue215 = null;


        CommonTree COMMA214_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // RPIExprWalker.g:508:5: ( lvalue ( COMMA lvalue )* )
            // RPIExprWalker.g:508:9: lvalue ( COMMA lvalue )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_lvalue_in_lvalues2601);
            lvalue213=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, lvalue213.getTree());
            // RPIExprWalker.g:508:16: ( COMMA lvalue )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==COMMA) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // RPIExprWalker.g:508:18: COMMA lvalue
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA214=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_lvalues2605); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA214_tree = (CommonTree)adaptor.dupNode(COMMA214);

            	    adaptor.addChild(root_0, COMMA214_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_lvalue_in_lvalues2607);
            	    lvalue215=lvalue();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, lvalue215.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, lvalues_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lvalues"

    public static class lvalue_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lvalue"
    // RPIExprWalker.g:510:1: lvalue : ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? );
    public final RPIExprWalker.lvalue_return lvalue() throws RecognitionException {
        RPIExprWalker.lvalue_return retval = new RPIExprWalker.lvalue_return();
        retval.start = input.LT(1);
        int lvalue_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT218=null;
        CommonTree LPAREN221=null;
        CommonTree RPAREN223=null;
        CommonTree DOT224=null;
        CommonTree COLON226=null;
        CommonTree COLON228=null;
        RPIExprWalker.variable_name_return variable_name216 = null;

        RPIExprWalker.record_name_return record_name217 = null;

        RPIExprWalker.field_name_return field_name219 = null;

        RPIExprWalker.plsql_table_name_return plsql_table_name220 = null;

        RPIExprWalker.subscript_return subscript222 = null;

        RPIExprWalker.field_name_return field_name225 = null;

        RPIExprWalker.host_variable_return host_variable227 = null;

        RPIExprWalker.host_variable_return host_variable229 = null;


        CommonTree DOT218_tree=null;
        CommonTree LPAREN221_tree=null;
        CommonTree RPAREN223_tree=null;
        CommonTree DOT224_tree=null;
        CommonTree COLON226_tree=null;
        CommonTree COLON228_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // RPIExprWalker.g:511:5: ( variable_name | record_name DOT field_name | plsql_table_name LPAREN subscript RPAREN ( DOT field_name )* | COLON host_variable ( COLON host_variable )? )
            int alt50=4;
            switch ( input.LA(1) ) {
            case ID:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case SEMICOLON:
                case COMMA:
                case SQL_ASSIGN:
                case 179:
                    {
                    alt50=1;
                    }
                    break;
                case DOT:
                    {
                    int LA50_5 = input.LA(3);

                    if ( (LA50_5==ID) ) {
                        int LA50_7 = input.LA(4);

                        if ( (LA50_7==EOF||(LA50_7>=SEMICOLON && LA50_7<=COMMA)||LA50_7==SQL_ASSIGN||LA50_7==179) ) {
                            alt50=2;
                        }
                        else if ( (LA50_7==LPAREN||LA50_7==DOT) ) {
                            alt50=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 7, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA50_5==DOUBLEQUOTED_STRING) ) {
                        int LA50_8 = input.LA(4);

                        if ( (LA50_8==LPAREN||LA50_8==DOT) ) {
                            alt50=3;
                        }
                        else if ( (LA50_8==EOF||(LA50_8>=SEMICOLON && LA50_8<=COMMA)||LA50_8==SQL_ASSIGN||LA50_8==179) ) {
                            alt50=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 8, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt50=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);

                    throw nvae;
                }

                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                switch ( input.LA(2) ) {
                case DOT:
                    {
                    int LA50_5 = input.LA(3);

                    if ( (LA50_5==ID) ) {
                        int LA50_7 = input.LA(4);

                        if ( (LA50_7==EOF||(LA50_7>=SEMICOLON && LA50_7<=COMMA)||LA50_7==SQL_ASSIGN||LA50_7==179) ) {
                            alt50=2;
                        }
                        else if ( (LA50_7==LPAREN||LA50_7==DOT) ) {
                            alt50=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 7, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA50_5==DOUBLEQUOTED_STRING) ) {
                        int LA50_8 = input.LA(4);

                        if ( (LA50_8==LPAREN||LA50_8==DOT) ) {
                            alt50=3;
                        }
                        else if ( (LA50_8==EOF||(LA50_8>=SEMICOLON && LA50_8<=COMMA)||LA50_8==SQL_ASSIGN||LA50_8==179) ) {
                            alt50=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 8, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    alt50=3;
                    }
                    break;
                case EOF:
                case SEMICOLON:
                case COMMA:
                case SQL_ASSIGN:
                case 179:
                    {
                    alt50=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 2, input);

                    throw nvae;
                }

                }
                break;
            case COLON:
                {
                alt50=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }

            switch (alt50) {
                case 1 :
                    // RPIExprWalker.g:511:9: variable_name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_variable_name_in_lvalue2628);
                    variable_name216=variable_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, variable_name216.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:512:9: record_name DOT field_name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_record_name_in_lvalue2638);
                    record_name217=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, record_name217.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT218=(CommonTree)match(input,DOT,FOLLOW_DOT_in_lvalue2640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT218_tree = (CommonTree)adaptor.dupNode(DOT218);

                    adaptor.addChild(root_0, DOT218_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_field_name_in_lvalue2642);
                    field_name219=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, field_name219.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:513:9: plsql_table_name LPAREN subscript RPAREN ( DOT field_name )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_table_name_in_lvalue2652);
                    plsql_table_name220=plsql_table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_table_name220.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN221=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_lvalue2654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN221_tree = (CommonTree)adaptor.dupNode(LPAREN221);

                    adaptor.addChild(root_0, LPAREN221_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subscript_in_lvalue2656);
                    subscript222=subscript();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subscript222.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN223=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_lvalue2658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN223_tree = (CommonTree)adaptor.dupNode(RPAREN223);

                    adaptor.addChild(root_0, RPAREN223_tree);
                    }
                    // RPIExprWalker.g:513:50: ( DOT field_name )*
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==DOT) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // RPIExprWalker.g:513:52: DOT field_name
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    DOT224=(CommonTree)match(input,DOT,FOLLOW_DOT_in_lvalue2662); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT224_tree = (CommonTree)adaptor.dupNode(DOT224);

                    	    adaptor.addChild(root_0, DOT224_tree);
                    	    }
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_field_name_in_lvalue2664);
                    	    field_name225=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, field_name225.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:514:9: COLON host_variable ( COLON host_variable )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    COLON226=(CommonTree)match(input,COLON,FOLLOW_COLON_in_lvalue2677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON226_tree = (CommonTree)adaptor.dupNode(COLON226);

                    adaptor.addChild(root_0, COLON226_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_host_variable_in_lvalue2679);
                    host_variable227=host_variable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, host_variable227.getTree());
                    // RPIExprWalker.g:514:29: ( COLON host_variable )?
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==COLON) ) {
                        alt49=1;
                    }
                    switch (alt49) {
                        case 1 :
                            // RPIExprWalker.g:514:31: COLON host_variable
                            {
                            _last = (CommonTree)input.LT(1);
                            COLON228=(CommonTree)match(input,COLON,FOLLOW_COLON_in_lvalue2683); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON228_tree = (CommonTree)adaptor.dupNode(COLON228);

                            adaptor.addChild(root_0, COLON228_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_host_variable_in_lvalue2685);
                            host_variable229=host_variable();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, host_variable229.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, lvalue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lvalue"

    public static class field_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_name"
    // RPIExprWalker.g:517:1: field_name : identifier ;
    public final RPIExprWalker.field_name_return field_name() throws RecognitionException {
        RPIExprWalker.field_name_return retval = new RPIExprWalker.field_name_return();
        retval.start = input.LT(1);
        int field_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier230 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // RPIExprWalker.g:518:5: ( identifier )
            // RPIExprWalker.g:518:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_field_name2707);
            identifier230=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier230.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, field_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_name"

    public static class subscript_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subscript"
    // RPIExprWalker.g:521:1: subscript : plsql_expression ;
    public final RPIExprWalker.subscript_return subscript() throws RecognitionException {
        RPIExprWalker.subscript_return retval = new RPIExprWalker.subscript_return();
        retval.start = input.LT(1);
        int subscript_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.plsql_expression_return plsql_expression231 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // RPIExprWalker.g:522:5: ( plsql_expression )
            // RPIExprWalker.g:522:9: plsql_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_expression_in_subscript2730);
            plsql_expression231=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_expression231.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, subscript_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subscript"

    public static class host_variable_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "host_variable"
    // RPIExprWalker.g:525:1: host_variable : identifier ;
    public final RPIExprWalker.host_variable_return host_variable() throws RecognitionException {
        RPIExprWalker.host_variable_return retval = new RPIExprWalker.host_variable_return();
        retval.start = input.LT(1);
        int host_variable_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier232 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // RPIExprWalker.g:526:5: ( identifier )
            // RPIExprWalker.g:526:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_host_variable2754);
            identifier232=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier232.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, host_variable_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "host_variable"

    public static class goto_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "goto_statement"
    // RPIExprWalker.g:529:1: goto_statement : 'GOTO' label_name ;
    public final RPIExprWalker.goto_statement_return goto_statement() throws RecognitionException {
        RPIExprWalker.goto_statement_return retval = new RPIExprWalker.goto_statement_return();
        retval.start = input.LT(1);
        int goto_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal233=null;
        RPIExprWalker.label_name_return label_name234 = null;


        CommonTree string_literal233_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // RPIExprWalker.g:530:5: ( 'GOTO' label_name )
            // RPIExprWalker.g:530:9: 'GOTO' label_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal233=(CommonTree)match(input,120,FOLLOW_120_in_goto_statement2777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal233_tree = (CommonTree)adaptor.dupNode(string_literal233);

            adaptor.addChild(root_0, string_literal233_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_label_name_in_goto_statement2779);
            label_name234=label_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, label_name234.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, goto_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "goto_statement"

    public static class label_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "label_name"
    // RPIExprWalker.g:533:1: label_name : identifier ;
    public final RPIExprWalker.label_name_return label_name() throws RecognitionException {
        RPIExprWalker.label_name_return retval = new RPIExprWalker.label_name_return();
        retval.start = input.LT(1);
        int label_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier235 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // RPIExprWalker.g:534:5: ( identifier )
            // RPIExprWalker.g:534:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_label_name2802);
            identifier235=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier235.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, label_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "label_name"

    public static class exit_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exit_statement"
    // RPIExprWalker.g:537:1: exit_statement : keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? ;
    public final RPIExprWalker.exit_statement_return exit_statement() throws RecognitionException {
        RPIExprWalker.exit_statement_return retval = new RPIExprWalker.exit_statement_return();
        retval.start = input.LT(1);
        int exit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal238=null;
        RPIExprWalker.keyEXIT_return keyEXIT236 = null;

        RPIExprWalker.label_name_return label_name237 = null;

        RPIExprWalker.plsql_condition_return plsql_condition239 = null;


        CommonTree string_literal238_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // RPIExprWalker.g:538:5: ( keyEXIT ( label_name )? ( 'WHEN' plsql_condition )? )
            // RPIExprWalker.g:538:9: keyEXIT ( label_name )? ( 'WHEN' plsql_condition )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyEXIT_in_exit_statement2824);
            keyEXIT236=keyEXIT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyEXIT236.getTree());
            // RPIExprWalker.g:538:17: ( label_name )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==ID||LA51_0==DOUBLEQUOTED_STRING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // RPIExprWalker.g:538:19: label_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_exit_statement2828);
                    label_name237=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name237.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:538:33: ( 'WHEN' plsql_condition )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==121) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // RPIExprWalker.g:538:35: 'WHEN' plsql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal238=(CommonTree)match(input,121,FOLLOW_121_in_exit_statement2835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal238_tree = (CommonTree)adaptor.dupNode(string_literal238);

                    adaptor.addChild(root_0, string_literal238_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_condition_in_exit_statement2837);
                    plsql_condition239=plsql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_condition239.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, exit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exit_statement"

    public static class datatype_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datatype"
    // RPIExprWalker.g:541:1: datatype : ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? );
    public final RPIExprWalker.datatype_return datatype() throws RecognitionException {
        RPIExprWalker.datatype_return retval = new RPIExprWalker.datatype_return();
        retval.start = input.LT(1);
        int datatype_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal240=null;
        CommonTree string_literal241=null;
        CommonTree string_literal242=null;
        CommonTree string_literal243=null;
        CommonTree string_literal244=null;
        CommonTree set245=null;
        CommonTree LPAREN246=null;
        CommonTree NUMBER247=null;
        CommonTree COMMA248=null;
        CommonTree NUMBER249=null;
        CommonTree RPAREN250=null;
        CommonTree string_literal251=null;
        CommonTree string_literal252=null;
        CommonTree LPAREN253=null;
        CommonTree NUMBER254=null;
        CommonTree RPAREN255=null;
        CommonTree string_literal256=null;
        CommonTree LPAREN257=null;
        CommonTree NUMBER258=null;
        CommonTree RPAREN259=null;
        CommonTree string_literal260=null;
        CommonTree string_literal261=null;
        CommonTree LPAREN264=null;
        CommonTree NUMBER265=null;
        CommonTree RPAREN266=null;
        CommonTree string_literal267=null;
        CommonTree LPAREN269=null;
        CommonTree NUMBER270=null;
        CommonTree RPAREN271=null;
        CommonTree LPAREN274=null;
        CommonTree NUMBER275=null;
        CommonTree RPAREN276=null;
        CommonTree string_literal277=null;
        CommonTree LPAREN281=null;
        CommonTree NUMBER282=null;
        CommonTree RPAREN283=null;
        CommonTree string_literal284=null;
        CommonTree string_literal288=null;
        CommonTree string_literal289=null;
        CommonTree string_literal290=null;
        CommonTree string_literal291=null;
        CommonTree LPAREN292=null;
        CommonTree NUMBER293=null;
        CommonTree RPAREN294=null;
        CommonTree string_literal295=null;
        CommonTree string_literal296=null;
        CommonTree string_literal298=null;
        CommonTree LPAREN300=null;
        CommonTree NUMBER301=null;
        CommonTree string_literal303=null;
        CommonTree RPAREN304=null;
        CommonTree string_literal305=null;
        CommonTree string_literal306=null;
        CommonTree CHARSET_ATTR309=null;
        CommonTree string_literal310=null;
        CommonTree LPAREN311=null;
        CommonTree NUMBER312=null;
        CommonTree string_literal314=null;
        CommonTree RPAREN315=null;
        CommonTree string_literal316=null;
        CommonTree string_literal317=null;
        CommonTree CHARSET_ATTR320=null;
        CommonTree string_literal321=null;
        CommonTree LPAREN322=null;
        CommonTree NUMBER323=null;
        CommonTree string_literal325=null;
        CommonTree RPAREN326=null;
        CommonTree string_literal327=null;
        CommonTree string_literal328=null;
        CommonTree CHARSET_ATTR331=null;
        CommonTree string_literal332=null;
        CommonTree LPAREN334=null;
        CommonTree NUMBER335=null;
        CommonTree RPAREN336=null;
        CommonTree string_literal337=null;
        CommonTree LPAREN339=null;
        CommonTree NUMBER340=null;
        CommonTree RPAREN341=null;
        CommonTree string_literal342=null;
        CommonTree LPAREN343=null;
        CommonTree NUMBER344=null;
        CommonTree RPAREN345=null;
        CommonTree string_literal346=null;
        CommonTree LPAREN347=null;
        CommonTree NUMBER348=null;
        CommonTree RPAREN349=null;
        CommonTree string_literal350=null;
        CommonTree set351=null;
        CommonTree LPAREN353=null;
        CommonTree NUMBER354=null;
        CommonTree RPAREN355=null;
        CommonTree string_literal356=null;
        CommonTree string_literal357=null;
        CommonTree string_literal358=null;
        CommonTree string_literal359=null;
        CommonTree string_literal360=null;
        CommonTree string_literal361=null;
        CommonTree CHARSET_ATTR364=null;
        CommonTree string_literal365=null;
        CommonTree string_literal366=null;
        CommonTree string_literal367=null;
        CommonTree string_literal368=null;
        CommonTree LPAREN369=null;
        CommonTree NUMBER370=null;
        CommonTree RPAREN371=null;
        RPIExprWalker.keyINTERVAL_return keyINTERVAL262 = null;

        RPIExprWalker.keyDAY_return keyDAY263 = null;

        RPIExprWalker.keySECOND_return keySECOND268 = null;

        RPIExprWalker.keyINTERVAL_return keyINTERVAL272 = null;

        RPIExprWalker.keyYEAR_return keyYEAR273 = null;

        RPIExprWalker.keyMONTH_return keyMONTH278 = null;

        RPIExprWalker.keyTIME_return keyTIME279 = null;

        RPIExprWalker.keyTIMESTAMP_return keyTIMESTAMP280 = null;

        RPIExprWalker.keyLOCAL_return keyLOCAL285 = null;

        RPIExprWalker.keyTIME_return keyTIME286 = null;

        RPIExprWalker.keyZONE_return keyZONE287 = null;

        RPIExprWalker.keyPRECISION_return keyPRECISION297 = null;

        RPIExprWalker.keyVARYING_return keyVARYING299 = null;

        RPIExprWalker.keyBYTE_return keyBYTE302 = null;

        RPIExprWalker.identifier_return identifier307 = null;

        RPIExprWalker.column_spec_return column_spec308 = null;

        RPIExprWalker.keyBYTE_return keyBYTE313 = null;

        RPIExprWalker.identifier_return identifier318 = null;

        RPIExprWalker.column_spec_return column_spec319 = null;

        RPIExprWalker.keyBYTE_return keyBYTE324 = null;

        RPIExprWalker.identifier_return identifier329 = null;

        RPIExprWalker.column_spec_return column_spec330 = null;

        RPIExprWalker.keyVARYING_return keyVARYING333 = null;

        RPIExprWalker.keyVARYING_return keyVARYING338 = null;

        RPIExprWalker.keyVARYING_return keyVARYING352 = null;

        RPIExprWalker.identifier_return identifier362 = null;

        RPIExprWalker.column_spec_return column_spec363 = null;


        CommonTree string_literal240_tree=null;
        CommonTree string_literal241_tree=null;
        CommonTree string_literal242_tree=null;
        CommonTree string_literal243_tree=null;
        CommonTree string_literal244_tree=null;
        CommonTree set245_tree=null;
        CommonTree LPAREN246_tree=null;
        CommonTree NUMBER247_tree=null;
        CommonTree COMMA248_tree=null;
        CommonTree NUMBER249_tree=null;
        CommonTree RPAREN250_tree=null;
        CommonTree string_literal251_tree=null;
        CommonTree string_literal252_tree=null;
        CommonTree LPAREN253_tree=null;
        CommonTree NUMBER254_tree=null;
        CommonTree RPAREN255_tree=null;
        CommonTree string_literal256_tree=null;
        CommonTree LPAREN257_tree=null;
        CommonTree NUMBER258_tree=null;
        CommonTree RPAREN259_tree=null;
        CommonTree string_literal260_tree=null;
        CommonTree string_literal261_tree=null;
        CommonTree LPAREN264_tree=null;
        CommonTree NUMBER265_tree=null;
        CommonTree RPAREN266_tree=null;
        CommonTree string_literal267_tree=null;
        CommonTree LPAREN269_tree=null;
        CommonTree NUMBER270_tree=null;
        CommonTree RPAREN271_tree=null;
        CommonTree LPAREN274_tree=null;
        CommonTree NUMBER275_tree=null;
        CommonTree RPAREN276_tree=null;
        CommonTree string_literal277_tree=null;
        CommonTree LPAREN281_tree=null;
        CommonTree NUMBER282_tree=null;
        CommonTree RPAREN283_tree=null;
        CommonTree string_literal284_tree=null;
        CommonTree string_literal288_tree=null;
        CommonTree string_literal289_tree=null;
        CommonTree string_literal290_tree=null;
        CommonTree string_literal291_tree=null;
        CommonTree LPAREN292_tree=null;
        CommonTree NUMBER293_tree=null;
        CommonTree RPAREN294_tree=null;
        CommonTree string_literal295_tree=null;
        CommonTree string_literal296_tree=null;
        CommonTree string_literal298_tree=null;
        CommonTree LPAREN300_tree=null;
        CommonTree NUMBER301_tree=null;
        CommonTree string_literal303_tree=null;
        CommonTree RPAREN304_tree=null;
        CommonTree string_literal305_tree=null;
        CommonTree string_literal306_tree=null;
        CommonTree CHARSET_ATTR309_tree=null;
        CommonTree string_literal310_tree=null;
        CommonTree LPAREN311_tree=null;
        CommonTree NUMBER312_tree=null;
        CommonTree string_literal314_tree=null;
        CommonTree RPAREN315_tree=null;
        CommonTree string_literal316_tree=null;
        CommonTree string_literal317_tree=null;
        CommonTree CHARSET_ATTR320_tree=null;
        CommonTree string_literal321_tree=null;
        CommonTree LPAREN322_tree=null;
        CommonTree NUMBER323_tree=null;
        CommonTree string_literal325_tree=null;
        CommonTree RPAREN326_tree=null;
        CommonTree string_literal327_tree=null;
        CommonTree string_literal328_tree=null;
        CommonTree CHARSET_ATTR331_tree=null;
        CommonTree string_literal332_tree=null;
        CommonTree LPAREN334_tree=null;
        CommonTree NUMBER335_tree=null;
        CommonTree RPAREN336_tree=null;
        CommonTree string_literal337_tree=null;
        CommonTree LPAREN339_tree=null;
        CommonTree NUMBER340_tree=null;
        CommonTree RPAREN341_tree=null;
        CommonTree string_literal342_tree=null;
        CommonTree LPAREN343_tree=null;
        CommonTree NUMBER344_tree=null;
        CommonTree RPAREN345_tree=null;
        CommonTree string_literal346_tree=null;
        CommonTree LPAREN347_tree=null;
        CommonTree NUMBER348_tree=null;
        CommonTree RPAREN349_tree=null;
        CommonTree string_literal350_tree=null;
        CommonTree set351_tree=null;
        CommonTree LPAREN353_tree=null;
        CommonTree NUMBER354_tree=null;
        CommonTree RPAREN355_tree=null;
        CommonTree string_literal356_tree=null;
        CommonTree string_literal357_tree=null;
        CommonTree string_literal358_tree=null;
        CommonTree string_literal359_tree=null;
        CommonTree string_literal360_tree=null;
        CommonTree string_literal361_tree=null;
        CommonTree CHARSET_ATTR364_tree=null;
        CommonTree string_literal365_tree=null;
        CommonTree string_literal366_tree=null;
        CommonTree string_literal367_tree=null;
        CommonTree string_literal368_tree=null;
        CommonTree LPAREN369_tree=null;
        CommonTree NUMBER370_tree=null;
        CommonTree RPAREN371_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // RPIExprWalker.g:542:5: ( 'BINARY_INTEGER' | 'BINARY_FLOAT' | 'BINARY_DOUBLE' | 'NATURAL' | 'POSITIVE' | ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )? | 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )? | 'RAW' ( LPAREN NUMBER RPAREN )? | 'BOOLEAN' | 'DATE' | keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? | keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH | ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )? | 'INTEGER' | 'INT' | 'SMALLINT' | 'FLOAT' ( LPAREN NUMBER RPAREN )? | 'REAL' | 'DOUBLE' keyPRECISION | 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'NVARCHAR' ( LPAREN NUMBER RPAREN )? | 'NVARCHAR2' ( LPAREN NUMBER RPAREN )? | 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )? | 'MLSLABEL' | 'PLS_INTEGER' | 'BLOB' | 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )? | 'NCLOB' | 'BFILE' | 'ROWID' | 'UROWID' ( LPAREN NUMBER RPAREN )? )
            int alt90=35;
            switch ( input.LA(1) ) {
            case 122:
                {
                alt90=1;
                }
                break;
            case 123:
                {
                alt90=2;
                }
                break;
            case 124:
                {
                alt90=3;
                }
                break;
            case 125:
                {
                alt90=4;
                }
                break;
            case 126:
                {
                alt90=5;
                }
                break;
            case 127:
            case 128:
            case 129:
            case 130:
                {
                alt90=6;
                }
                break;
            case 131:
                {
                alt90=7;
                }
                break;
            case 132:
                {
                alt90=8;
                }
                break;
            case 133:
                {
                alt90=9;
                }
                break;
            case 134:
                {
                alt90=10;
                }
                break;
            case ID:
                {
                int LA90_11 = input.LA(2);

                if ( (LA90_11==EOF||(LA90_11>=LPAREN && LA90_11<=RPAREN)||(LA90_11>=SEMICOLON && LA90_11<=COMMA)||LA90_11==NOT||LA90_11==SQL_ASSIGN||LA90_11==DOUBLEQUOTED_STRING||(LA90_11>=110 && LA90_11<=114)||LA90_11==117||LA90_11==136||(LA90_11>=161 && LA90_11<=162)||LA90_11==165||LA90_11==217) ) {
                    alt90=13;
                }
                else if ( (LA90_11==ID) ) {
                    switch ( input.LA(3) ) {
                    case ID:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case DOT:
                    case QUOTED_STRING:
                    case DOUBLEQUOTED_STRING:
                    case 115:
                    case 119:
                    case 122:
                    case 123:
                    case 124:
                    case 125:
                    case 126:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 131:
                    case 132:
                    case 133:
                    case 134:
                    case 137:
                    case 138:
                    case 139:
                    case 140:
                    case 141:
                    case 142:
                    case 143:
                    case 144:
                    case 146:
                    case 147:
                    case 148:
                    case 149:
                    case 150:
                    case 151:
                    case 152:
                    case 153:
                    case 154:
                    case 155:
                    case 156:
                    case 157:
                    case 158:
                    case 159:
                        {
                        alt90=13;
                        }
                        break;
                    case LPAREN:
                        {
                        int LA90_36 = input.LA(4);

                        if ( (LA90_36==NUMBER) ) {
                            int LA90_38 = input.LA(5);

                            if ( (LA90_38==RPAREN) ) {
                                int LA90_40 = input.LA(6);

                                if ( (LA90_40==135) ) {
                                    int LA90_37 = input.LA(7);

                                    if ( (LA90_37==ID) ) {
                                        int LA90_39 = input.LA(8);

                                        if ( ((synpred141_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                            alt90=11;
                                        }
                                        else if ( ((synpred143_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                            alt90=12;
                                        }
                                        else {
                                            if (state.backtracking>0) {state.failed=true; return retval;}
                                            NoViableAltException nvae =
                                                new NoViableAltException("", 90, 39, input);

                                            throw nvae;
                                        }
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 90, 37, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 90, 40, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 90, 38, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 90, 36, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 135:
                        {
                        int LA90_37 = input.LA(4);

                        if ( (LA90_37==ID) ) {
                            int LA90_39 = input.LA(5);

                            if ( ((synpred141_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                alt90=11;
                            }
                            else if ( ((synpred143_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))) ) {
                                alt90=12;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 90, 39, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 90, 37, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 35, input);

                        throw nvae;
                    }

                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 11, input);

                    throw nvae;
                }
                }
                break;
            case 137:
                {
                alt90=14;
                }
                break;
            case 138:
                {
                alt90=15;
                }
                break;
            case 139:
                {
                alt90=16;
                }
                break;
            case 140:
                {
                alt90=17;
                }
                break;
            case 141:
                {
                alt90=18;
                }
                break;
            case 142:
                {
                alt90=19;
                }
                break;
            case 143:
                {
                alt90=20;
                }
                break;
            case 146:
                {
                alt90=21;
                }
                break;
            case 147:
                {
                alt90=22;
                }
                break;
            case 144:
                {
                alt90=23;
                }
                break;
            case 148:
                {
                alt90=24;
                }
                break;
            case 149:
                {
                alt90=25;
                }
                break;
            case 150:
                {
                alt90=26;
                }
                break;
            case 151:
                {
                alt90=27;
                }
                break;
            case 152:
                {
                alt90=28;
                }
                break;
            case 153:
                {
                alt90=29;
                }
                break;
            case 154:
                {
                alt90=30;
                }
                break;
            case 155:
                {
                alt90=31;
                }
                break;
            case 156:
                {
                alt90=32;
                }
                break;
            case 157:
                {
                alt90=33;
                }
                break;
            case 158:
                {
                alt90=34;
                }
                break;
            case 159:
                {
                alt90=35;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;
            }

            switch (alt90) {
                case 1 :
                    // RPIExprWalker.g:542:9: 'BINARY_INTEGER'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal240=(CommonTree)match(input,122,FOLLOW_122_in_datatype2863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal240_tree = (CommonTree)adaptor.dupNode(string_literal240);

                    adaptor.addChild(root_0, string_literal240_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:543:9: 'BINARY_FLOAT'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal241=(CommonTree)match(input,123,FOLLOW_123_in_datatype2874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal241_tree = (CommonTree)adaptor.dupNode(string_literal241);

                    adaptor.addChild(root_0, string_literal241_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:544:9: 'BINARY_DOUBLE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal242=(CommonTree)match(input,124,FOLLOW_124_in_datatype2884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal242_tree = (CommonTree)adaptor.dupNode(string_literal242);

                    adaptor.addChild(root_0, string_literal242_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:545:9: 'NATURAL'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal243=(CommonTree)match(input,125,FOLLOW_125_in_datatype2894); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal243_tree = (CommonTree)adaptor.dupNode(string_literal243);

                    adaptor.addChild(root_0, string_literal243_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:546:9: 'POSITIVE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal244=(CommonTree)match(input,126,FOLLOW_126_in_datatype2905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal244_tree = (CommonTree)adaptor.dupNode(string_literal244);

                    adaptor.addChild(root_0, string_literal244_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:547:9: ( 'NUMBER' | 'NUMERIC' | 'DECIMAL' | 'DEC' ) ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    set245=(CommonTree)input.LT(1);
                    if ( (input.LA(1)>=127 && input.LA(1)<=130) ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set245_tree = (CommonTree)adaptor.dupNode(set245);

                        adaptor.addChild(root_0, set245_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprWalker.g:547:54: ( LPAREN NUMBER ( COMMA NUMBER )? RPAREN )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==LPAREN) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // RPIExprWalker.g:547:56: LPAREN NUMBER ( COMMA NUMBER )? RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN246=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype2936); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN246_tree = (CommonTree)adaptor.dupNode(LPAREN246);

                            adaptor.addChild(root_0, LPAREN246_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER247=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype2938); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER247_tree = (CommonTree)adaptor.dupNode(NUMBER247);

                            adaptor.addChild(root_0, NUMBER247_tree);
                            }
                            // RPIExprWalker.g:547:70: ( COMMA NUMBER )?
                            int alt53=2;
                            int LA53_0 = input.LA(1);

                            if ( (LA53_0==COMMA) ) {
                                alt53=1;
                            }
                            switch (alt53) {
                                case 1 :
                                    // RPIExprWalker.g:547:72: COMMA NUMBER
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    COMMA248=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_datatype2942); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COMMA248_tree = (CommonTree)adaptor.dupNode(COMMA248);

                                    adaptor.addChild(root_0, COMMA248_tree);
                                    }
                                    _last = (CommonTree)input.LT(1);
                                    NUMBER249=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype2944); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    NUMBER249_tree = (CommonTree)adaptor.dupNode(NUMBER249);

                                    adaptor.addChild(root_0, NUMBER249_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (CommonTree)input.LT(1);
                            RPAREN250=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype2949); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN250_tree = (CommonTree)adaptor.dupNode(RPAREN250);

                            adaptor.addChild(root_0, RPAREN250_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:548:9: 'LONG' ( 'RAW' )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal251=(CommonTree)match(input,131,FOLLOW_131_in_datatype2962); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal251_tree = (CommonTree)adaptor.dupNode(string_literal251);

                    adaptor.addChild(root_0, string_literal251_tree);
                    }
                    // RPIExprWalker.g:548:16: ( 'RAW' )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==132) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // RPIExprWalker.g:548:18: 'RAW'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal252=(CommonTree)match(input,132,FOLLOW_132_in_datatype2966); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal252_tree = (CommonTree)adaptor.dupNode(string_literal252);

                            adaptor.addChild(root_0, string_literal252_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:548:26: ( LPAREN NUMBER RPAREN )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==LPAREN) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // RPIExprWalker.g:548:28: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN253=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype2972); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN253_tree = (CommonTree)adaptor.dupNode(LPAREN253);

                            adaptor.addChild(root_0, LPAREN253_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER254=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype2974); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER254_tree = (CommonTree)adaptor.dupNode(NUMBER254);

                            adaptor.addChild(root_0, NUMBER254_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN255=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype2976); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN255_tree = (CommonTree)adaptor.dupNode(RPAREN255);

                            adaptor.addChild(root_0, RPAREN255_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:549:9: 'RAW' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal256=(CommonTree)match(input,132,FOLLOW_132_in_datatype2989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal256_tree = (CommonTree)adaptor.dupNode(string_literal256);

                    adaptor.addChild(root_0, string_literal256_tree);
                    }
                    // RPIExprWalker.g:549:15: ( LPAREN NUMBER RPAREN )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==LPAREN) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // RPIExprWalker.g:549:17: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN257=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype2993); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN257_tree = (CommonTree)adaptor.dupNode(LPAREN257);

                            adaptor.addChild(root_0, LPAREN257_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER258=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype2995); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER258_tree = (CommonTree)adaptor.dupNode(NUMBER258);

                            adaptor.addChild(root_0, NUMBER258_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN259=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype2997); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN259_tree = (CommonTree)adaptor.dupNode(RPAREN259);

                            adaptor.addChild(root_0, RPAREN259_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:550:9: 'BOOLEAN'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal260=(CommonTree)match(input,133,FOLLOW_133_in_datatype3010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal260_tree = (CommonTree)adaptor.dupNode(string_literal260);

                    adaptor.addChild(root_0, string_literal260_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RPIExprWalker.g:551:9: 'DATE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal261=(CommonTree)match(input,134,FOLLOW_134_in_datatype3020); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal261_tree = (CommonTree)adaptor.dupNode(string_literal261);

                    adaptor.addChild(root_0, string_literal261_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RPIExprWalker.g:552:9: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyINTERVAL_in_datatype3030);
                    keyINTERVAL262=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyINTERVAL262.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyDAY_in_datatype3032);
                    keyDAY263=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyDAY263.getTree());
                    // RPIExprWalker.g:552:28: ( LPAREN NUMBER RPAREN )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==LPAREN) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // RPIExprWalker.g:552:30: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN264=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3036); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN264_tree = (CommonTree)adaptor.dupNode(LPAREN264);

                            adaptor.addChild(root_0, LPAREN264_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER265=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3038); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER265_tree = (CommonTree)adaptor.dupNode(NUMBER265);

                            adaptor.addChild(root_0, NUMBER265_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN266=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3040); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN266_tree = (CommonTree)adaptor.dupNode(RPAREN266);

                            adaptor.addChild(root_0, RPAREN266_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal267=(CommonTree)match(input,135,FOLLOW_135_in_datatype3045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal267_tree = (CommonTree)adaptor.dupNode(string_literal267);

                    adaptor.addChild(root_0, string_literal267_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keySECOND_in_datatype3047);
                    keySECOND268=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keySECOND268.getTree());
                    // RPIExprWalker.g:552:69: ( LPAREN NUMBER RPAREN )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==LPAREN) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // RPIExprWalker.g:552:71: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN269=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3051); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN269_tree = (CommonTree)adaptor.dupNode(LPAREN269);

                            adaptor.addChild(root_0, LPAREN269_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER270=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3053); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER270_tree = (CommonTree)adaptor.dupNode(NUMBER270);

                            adaptor.addChild(root_0, NUMBER270_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN271=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3055); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN271_tree = (CommonTree)adaptor.dupNode(RPAREN271);

                            adaptor.addChild(root_0, RPAREN271_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // RPIExprWalker.g:553:9: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyINTERVAL_in_datatype3068);
                    keyINTERVAL272=keyINTERVAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyINTERVAL272.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyYEAR_in_datatype3070);
                    keyYEAR273=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyYEAR273.getTree());
                    // RPIExprWalker.g:553:29: ( LPAREN NUMBER RPAREN )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==LPAREN) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // RPIExprWalker.g:553:31: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN274=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3074); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN274_tree = (CommonTree)adaptor.dupNode(LPAREN274);

                            adaptor.addChild(root_0, LPAREN274_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER275=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3076); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER275_tree = (CommonTree)adaptor.dupNode(NUMBER275);

                            adaptor.addChild(root_0, NUMBER275_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN276=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3078); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN276_tree = (CommonTree)adaptor.dupNode(RPAREN276);

                            adaptor.addChild(root_0, RPAREN276_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal277=(CommonTree)match(input,135,FOLLOW_135_in_datatype3083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal277_tree = (CommonTree)adaptor.dupNode(string_literal277);

                    adaptor.addChild(root_0, string_literal277_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyMONTH_in_datatype3085);
                    keyMONTH278=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyMONTH278.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // RPIExprWalker.g:554:9: ( keyTIME | keyTIMESTAMP ) ( LPAREN NUMBER RPAREN )? ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // RPIExprWalker.g:554:9: ( keyTIME | keyTIMESTAMP )
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==ID) ) {
                        int LA61_1 = input.LA(2);

                        if ( ((synpred144_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIME")))) ) {
                            alt61=1;
                        }
                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {
                            alt61=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 0, input);

                        throw nvae;
                    }
                    switch (alt61) {
                        case 1 :
                            // RPIExprWalker.g:554:11: keyTIME
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyTIME_in_datatype3097);
                            keyTIME279=keyTIME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyTIME279.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:554:21: keyTIMESTAMP
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyTIMESTAMP_in_datatype3101);
                            keyTIMESTAMP280=keyTIMESTAMP();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyTIMESTAMP280.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:554:36: ( LPAREN NUMBER RPAREN )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==LPAREN) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // RPIExprWalker.g:554:38: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN281=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3107); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN281_tree = (CommonTree)adaptor.dupNode(LPAREN281);

                            adaptor.addChild(root_0, LPAREN281_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER282=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3109); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER282_tree = (CommonTree)adaptor.dupNode(NUMBER282);

                            adaptor.addChild(root_0, NUMBER282_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN283=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3111); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN283_tree = (CommonTree)adaptor.dupNode(RPAREN283);

                            adaptor.addChild(root_0, RPAREN283_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:554:62: ( 'WITH' ( keyLOCAL )? keyTIME keyZONE )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==136) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // RPIExprWalker.g:554:64: 'WITH' ( keyLOCAL )? keyTIME keyZONE
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal284=(CommonTree)match(input,136,FOLLOW_136_in_datatype3118); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal284_tree = (CommonTree)adaptor.dupNode(string_literal284);

                            adaptor.addChild(root_0, string_literal284_tree);
                            }
                            // RPIExprWalker.g:554:71: ( keyLOCAL )?
                            int alt63=2;
                            int LA63_0 = input.LA(1);

                            if ( (LA63_0==ID) ) {
                                int LA63_1 = input.LA(2);

                                if ( (LA63_1==ID) ) {
                                    int LA63_2 = input.LA(3);

                                    if ( (LA63_2==ID) ) {
                                        switch ( input.LA(4) ) {
                                            case ID:
                                                {
                                                switch ( input.LA(5) ) {
                                                    case ID:
                                                        {
                                                        int LA63_8 = input.LA(6);

                                                        if ( (LA63_8==ID||LA63_8==SEMICOLON||LA63_8==NOT||(LA63_8>=DOT && LA63_8<=SQL_ASSIGN)||(LA63_8>=TYPE_ATTR && LA63_8<=ROWTYPE_ATTR)||LA63_8==AT_SIGN||LA63_8==111||LA63_8==117||LA63_8==136||LA63_8==220) ) {
                                                            alt63=1;
                                                        }
                                                        else if ( (LA63_8==LPAREN) ) {
                                                            int LA63_10 = input.LA(7);

                                                            if ( (LA63_10==NUMBER) ) {
                                                                int LA63_13 = input.LA(8);

                                                                if ( (LA63_13==RPAREN) ) {
                                                                    int LA63_14 = input.LA(9);

                                                                    if ( (LA63_14==SEMICOLON||LA63_14==NOT||LA63_14==SQL_ASSIGN||LA63_14==111||LA63_14==117||LA63_14==136) ) {
                                                                        alt63=1;
                                                                    }
                                                                }
                                                            }
                                                            else if ( (LA63_10==ID||LA63_10==DOUBLEQUOTED_STRING) ) {
                                                                alt63=1;
                                                            }
                                                        }
                                                        }
                                                        break;
                                                    case PLUS:
                                                    case MINUS:
                                                    case NUMBER:
                                                    case QUOTED_STRING:
                                                    case DOUBLEQUOTED_STRING:
                                                    case 115:
                                                    case 119:
                                                    case 122:
                                                    case 123:
                                                    case 124:
                                                    case 125:
                                                    case 126:
                                                    case 127:
                                                    case 128:
                                                    case 129:
                                                    case 130:
                                                    case 131:
                                                    case 132:
                                                    case 133:
                                                    case 134:
                                                    case 137:
                                                    case 138:
                                                    case 139:
                                                    case 140:
                                                    case 141:
                                                    case 142:
                                                    case 143:
                                                    case 144:
                                                    case 146:
                                                    case 147:
                                                    case 148:
                                                    case 149:
                                                    case 150:
                                                    case 151:
                                                    case 152:
                                                    case 153:
                                                    case 154:
                                                    case 155:
                                                    case 156:
                                                    case 157:
                                                    case 158:
                                                    case 159:
                                                        {
                                                        alt63=1;
                                                        }
                                                        break;
                                                    case DOT:
                                                        {
                                                        int LA63_9 = input.LA(6);

                                                        if ( (LA63_9==ID) ) {
                                                            int LA63_11 = input.LA(7);

                                                            if ( (LA63_11==119) ) {
                                                                alt63=1;
                                                            }
                                                        }
                                                        else if ( (LA63_9==DOUBLEQUOTED_STRING) ) {
                                                            int LA63_12 = input.LA(7);

                                                            if ( (LA63_12==119) ) {
                                                                alt63=1;
                                                            }
                                                        }
                                                        }
                                                        break;
                                                }

                                                }
                                                break;
                                            case DOUBLEQUOTED_STRING:
                                                {
                                                int LA63_6 = input.LA(5);

                                                if ( (LA63_6==DOT) ) {
                                                    int LA63_9 = input.LA(6);

                                                    if ( (LA63_9==ID) ) {
                                                        int LA63_11 = input.LA(7);

                                                        if ( (LA63_11==119) ) {
                                                            alt63=1;
                                                        }
                                                    }
                                                    else if ( (LA63_9==DOUBLEQUOTED_STRING) ) {
                                                        int LA63_12 = input.LA(7);

                                                        if ( (LA63_12==119) ) {
                                                            alt63=1;
                                                        }
                                                    }
                                                }
                                                else if ( (LA63_6==ID||LA63_6==DOUBLEQUOTED_STRING||LA63_6==115||LA63_6==119||(LA63_6>=122 && LA63_6<=134)||(LA63_6>=137 && LA63_6<=144)||(LA63_6>=146 && LA63_6<=159)) ) {
                                                    alt63=1;
                                                }
                                                }
                                                break;
                                            case EOF:
                                            case RPAREN:
                                            case SEMICOLON:
                                            case COMMA:
                                            case NOT:
                                            case SQL_ASSIGN:
                                            case 110:
                                            case 111:
                                            case 112:
                                            case 113:
                                            case 114:
                                            case 117:
                                            case 161:
                                            case 162:
                                            case 165:
                                            case 217:
                                                {
                                                alt63=1;
                                                }
                                                break;
                                        }

                                    }
                                }
                            }
                            switch (alt63) {
                                case 1 :
                                    // RPIExprWalker.g:554:73: keyLOCAL
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_keyLOCAL_in_datatype3122);
                                    keyLOCAL285=keyLOCAL();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, keyLOCAL285.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyTIME_in_datatype3127);
                            keyTIME286=keyTIME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyTIME286.getTree());
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyZONE_in_datatype3129);
                            keyZONE287=keyZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyZONE287.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // RPIExprWalker.g:555:9: 'INTEGER'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal288=(CommonTree)match(input,137,FOLLOW_137_in_datatype3141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal288_tree = (CommonTree)adaptor.dupNode(string_literal288);

                    adaptor.addChild(root_0, string_literal288_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // RPIExprWalker.g:556:9: 'INT'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal289=(CommonTree)match(input,138,FOLLOW_138_in_datatype3151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal289_tree = (CommonTree)adaptor.dupNode(string_literal289);

                    adaptor.addChild(root_0, string_literal289_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // RPIExprWalker.g:557:9: 'SMALLINT'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal290=(CommonTree)match(input,139,FOLLOW_139_in_datatype3161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal290_tree = (CommonTree)adaptor.dupNode(string_literal290);

                    adaptor.addChild(root_0, string_literal290_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // RPIExprWalker.g:558:9: 'FLOAT' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal291=(CommonTree)match(input,140,FOLLOW_140_in_datatype3171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal291_tree = (CommonTree)adaptor.dupNode(string_literal291);

                    adaptor.addChild(root_0, string_literal291_tree);
                    }
                    // RPIExprWalker.g:558:17: ( LPAREN NUMBER RPAREN )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==LPAREN) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // RPIExprWalker.g:558:19: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN292=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3175); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN292_tree = (CommonTree)adaptor.dupNode(LPAREN292);

                            adaptor.addChild(root_0, LPAREN292_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER293=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3177); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER293_tree = (CommonTree)adaptor.dupNode(NUMBER293);

                            adaptor.addChild(root_0, NUMBER293_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN294=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3179); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN294_tree = (CommonTree)adaptor.dupNode(RPAREN294);

                            adaptor.addChild(root_0, RPAREN294_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // RPIExprWalker.g:559:9: 'REAL'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal295=(CommonTree)match(input,141,FOLLOW_141_in_datatype3192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal295_tree = (CommonTree)adaptor.dupNode(string_literal295);

                    adaptor.addChild(root_0, string_literal295_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 19 :
                    // RPIExprWalker.g:560:9: 'DOUBLE' keyPRECISION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal296=(CommonTree)match(input,142,FOLLOW_142_in_datatype3202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal296_tree = (CommonTree)adaptor.dupNode(string_literal296);

                    adaptor.addChild(root_0, string_literal296_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyPRECISION_in_datatype3204);
                    keyPRECISION297=keyPRECISION();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyPRECISION297.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 20 :
                    // RPIExprWalker.g:561:9: 'CHAR' ( keyVARYING )? ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal298=(CommonTree)match(input,143,FOLLOW_143_in_datatype3214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal298_tree = (CommonTree)adaptor.dupNode(string_literal298);

                    adaptor.addChild(root_0, string_literal298_tree);
                    }
                    // RPIExprWalker.g:561:21: ( keyVARYING )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case ID:
                                        {
                                        int LA66_7 = input.LA(4);

                                        if ( (LA66_7==ID||LA66_7==SEMICOLON||LA66_7==NOT||(LA66_7>=DOT && LA66_7<=SQL_ASSIGN)||(LA66_7>=TYPE_ATTR && LA66_7<=ROWTYPE_ATTR)||LA66_7==AT_SIGN||LA66_7==111||LA66_7==117||LA66_7==136||LA66_7==220) ) {
                                            alt66=1;
                                        }
                                        else if ( (LA66_7==LPAREN) ) {
                                            int LA66_9 = input.LA(5);

                                            if ( (LA66_9==NUMBER) ) {
                                                int LA66_12 = input.LA(6);

                                                if ( (LA66_12==RPAREN) ) {
                                                    int LA66_13 = input.LA(7);

                                                    if ( (LA66_13==SEMICOLON||LA66_13==NOT||LA66_13==SQL_ASSIGN||LA66_13==111||LA66_13==117||LA66_13==136) ) {
                                                        alt66=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA66_9==ID||LA66_9==DOUBLEQUOTED_STRING) ) {
                                                alt66=1;
                                            }
                                        }
                                        }
                                        break;
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt66=1;
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA66_8 = input.LA(4);

                                        if ( (LA66_8==ID) ) {
                                            int LA66_10 = input.LA(5);

                                            if ( (LA66_10==119) ) {
                                                alt66=1;
                                            }
                                        }
                                        else if ( (LA66_8==DOUBLEQUOTED_STRING) ) {
                                            int LA66_11 = input.LA(5);

                                            if ( (LA66_11==119) ) {
                                                alt66=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case 144:
                                {
                                int LA66_4 = input.LA(3);

                                if ( (LA66_4==145) ) {
                                    alt66=1;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA66_5 = input.LA(3);

                                if ( (LA66_5==DOT) ) {
                                    int LA66_8 = input.LA(4);

                                    if ( (LA66_8==ID) ) {
                                        int LA66_10 = input.LA(5);

                                        if ( (LA66_10==119) ) {
                                            alt66=1;
                                        }
                                    }
                                    else if ( (LA66_8==DOUBLEQUOTED_STRING) ) {
                                        int LA66_11 = input.LA(5);

                                        if ( (LA66_11==119) ) {
                                            alt66=1;
                                        }
                                    }
                                }
                                else if ( (LA66_5==ID||LA66_5==DOUBLEQUOTED_STRING||LA66_5==115||LA66_5==119||(LA66_5>=122 && LA66_5<=134)||(LA66_5>=137 && LA66_5<=144)||(LA66_5>=146 && LA66_5<=159)) ) {
                                    alt66=1;
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt66=1;
                                }
                                break;
                        }

                    }
                    switch (alt66) {
                        case 1 :
                            // RPIExprWalker.g:561:23: keyVARYING
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyVARYING_in_datatype3223);
                            keyVARYING299=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyVARYING299.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:561:37: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==LPAREN) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // RPIExprWalker.g:561:39: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN300=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3230); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN300_tree = (CommonTree)adaptor.dupNode(LPAREN300);

                            adaptor.addChild(root_0, LPAREN300_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER301=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3232); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER301_tree = (CommonTree)adaptor.dupNode(NUMBER301);

                            adaptor.addChild(root_0, NUMBER301_tree);
                            }
                            // RPIExprWalker.g:561:53: ( keyBYTE | 'CHAR' )?
                            int alt67=3;
                            int LA67_0 = input.LA(1);

                            if ( (LA67_0==ID) ) {
                                alt67=1;
                            }
                            else if ( (LA67_0==143) ) {
                                alt67=2;
                            }
                            switch (alt67) {
                                case 1 :
                                    // RPIExprWalker.g:561:55: keyBYTE
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3236);
                                    keyBYTE302=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, keyBYTE302.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:561:65: 'CHAR'
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    string_literal303=(CommonTree)match(input,143,FOLLOW_143_in_datatype3240); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal303_tree = (CommonTree)adaptor.dupNode(string_literal303);

                                    adaptor.addChild(root_0, string_literal303_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (CommonTree)input.LT(1);
                            RPAREN304=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3245); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN304_tree = (CommonTree)adaptor.dupNode(RPAREN304);

                            adaptor.addChild(root_0, RPAREN304_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:561:85: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==144) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // RPIExprWalker.g:561:87: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal305=(CommonTree)match(input,144,FOLLOW_144_in_datatype3252); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal305_tree = (CommonTree)adaptor.dupNode(string_literal305);

                            adaptor.addChild(root_0, string_literal305_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            string_literal306=(CommonTree)match(input,145,FOLLOW_145_in_datatype3254); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal306_tree = (CommonTree)adaptor.dupNode(string_literal306);

                            adaptor.addChild(root_0, string_literal306_tree);
                            }
                            // RPIExprWalker.g:561:105: ( identifier | column_spec CHARSET_ATTR )
                            int alt69=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA69_1 = input.LA(2);

                                if ( (LA69_1==DOT||LA69_1==CHARSET_ATTR) ) {
                                    alt69=2;
                                }
                                else if ( (LA69_1==EOF||LA69_1==ID||LA69_1==RPAREN||(LA69_1>=SEMICOLON && LA69_1<=COMMA)||LA69_1==NOT||LA69_1==SQL_ASSIGN||LA69_1==DOUBLEQUOTED_STRING||(LA69_1>=110 && LA69_1<=114)||LA69_1==117||(LA69_1>=161 && LA69_1<=162)||LA69_1==165||LA69_1==217) ) {
                                    alt69=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 69, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA69_2 = input.LA(2);

                                if ( (LA69_2==EOF||LA69_2==ID||LA69_2==RPAREN||(LA69_2>=SEMICOLON && LA69_2<=COMMA)||LA69_2==NOT||LA69_2==SQL_ASSIGN||LA69_2==DOUBLEQUOTED_STRING||(LA69_2>=110 && LA69_2<=114)||LA69_2==117||(LA69_2>=161 && LA69_2<=162)||LA69_2==165||LA69_2==217) ) {
                                    alt69=1;
                                }
                                else if ( (LA69_2==DOT||LA69_2==CHARSET_ATTR) ) {
                                    alt69=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 69, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                alt69=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 69, 0, input);

                                throw nvae;
                            }

                            switch (alt69) {
                                case 1 :
                                    // RPIExprWalker.g:561:107: identifier
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_identifier_in_datatype3258);
                                    identifier307=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, identifier307.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:561:120: column_spec CHARSET_ATTR
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_column_spec_in_datatype3262);
                                    column_spec308=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, column_spec308.getTree());
                                    _last = (CommonTree)input.LT(1);
                                    CHARSET_ATTR309=(CommonTree)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3264); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR309_tree = (CommonTree)adaptor.dupNode(CHARSET_ATTR309);

                                    adaptor.addChild(root_0, CHARSET_ATTR309_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 21 :
                    // RPIExprWalker.g:562:9: 'VARCHAR' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal310=(CommonTree)match(input,146,FOLLOW_146_in_datatype3279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal310_tree = (CommonTree)adaptor.dupNode(string_literal310);

                    adaptor.addChild(root_0, string_literal310_tree);
                    }
                    // RPIExprWalker.g:562:37: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==LPAREN) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // RPIExprWalker.g:562:39: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN311=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3301); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN311_tree = (CommonTree)adaptor.dupNode(LPAREN311);

                            adaptor.addChild(root_0, LPAREN311_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER312=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3303); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER312_tree = (CommonTree)adaptor.dupNode(NUMBER312);

                            adaptor.addChild(root_0, NUMBER312_tree);
                            }
                            // RPIExprWalker.g:562:53: ( keyBYTE | 'CHAR' )?
                            int alt71=3;
                            int LA71_0 = input.LA(1);

                            if ( (LA71_0==ID) ) {
                                alt71=1;
                            }
                            else if ( (LA71_0==143) ) {
                                alt71=2;
                            }
                            switch (alt71) {
                                case 1 :
                                    // RPIExprWalker.g:562:55: keyBYTE
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3307);
                                    keyBYTE313=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, keyBYTE313.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:562:65: 'CHAR'
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    string_literal314=(CommonTree)match(input,143,FOLLOW_143_in_datatype3311); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal314_tree = (CommonTree)adaptor.dupNode(string_literal314);

                                    adaptor.addChild(root_0, string_literal314_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (CommonTree)input.LT(1);
                            RPAREN315=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3316); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN315_tree = (CommonTree)adaptor.dupNode(RPAREN315);

                            adaptor.addChild(root_0, RPAREN315_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:562:85: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==144) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // RPIExprWalker.g:562:87: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal316=(CommonTree)match(input,144,FOLLOW_144_in_datatype3323); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal316_tree = (CommonTree)adaptor.dupNode(string_literal316);

                            adaptor.addChild(root_0, string_literal316_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            string_literal317=(CommonTree)match(input,145,FOLLOW_145_in_datatype3325); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal317_tree = (CommonTree)adaptor.dupNode(string_literal317);

                            adaptor.addChild(root_0, string_literal317_tree);
                            }
                            // RPIExprWalker.g:562:105: ( identifier | column_spec CHARSET_ATTR )
                            int alt73=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA73_1 = input.LA(2);

                                if ( (LA73_1==EOF||LA73_1==ID||LA73_1==RPAREN||(LA73_1>=SEMICOLON && LA73_1<=COMMA)||LA73_1==NOT||LA73_1==SQL_ASSIGN||LA73_1==DOUBLEQUOTED_STRING||(LA73_1>=110 && LA73_1<=114)||LA73_1==117||(LA73_1>=161 && LA73_1<=162)||LA73_1==165||LA73_1==217) ) {
                                    alt73=1;
                                }
                                else if ( (LA73_1==DOT||LA73_1==CHARSET_ATTR) ) {
                                    alt73=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 73, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA73_2 = input.LA(2);

                                if ( (LA73_2==EOF||LA73_2==ID||LA73_2==RPAREN||(LA73_2>=SEMICOLON && LA73_2<=COMMA)||LA73_2==NOT||LA73_2==SQL_ASSIGN||LA73_2==DOUBLEQUOTED_STRING||(LA73_2>=110 && LA73_2<=114)||LA73_2==117||(LA73_2>=161 && LA73_2<=162)||LA73_2==165||LA73_2==217) ) {
                                    alt73=1;
                                }
                                else if ( (LA73_2==DOT||LA73_2==CHARSET_ATTR) ) {
                                    alt73=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 73, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                alt73=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 73, 0, input);

                                throw nvae;
                            }

                            switch (alt73) {
                                case 1 :
                                    // RPIExprWalker.g:562:107: identifier
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_identifier_in_datatype3329);
                                    identifier318=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, identifier318.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:562:120: column_spec CHARSET_ATTR
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_column_spec_in_datatype3333);
                                    column_spec319=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, column_spec319.getTree());
                                    _last = (CommonTree)input.LT(1);
                                    CHARSET_ATTR320=(CommonTree)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3335); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR320_tree = (CommonTree)adaptor.dupNode(CHARSET_ATTR320);

                                    adaptor.addChild(root_0, CHARSET_ATTR320_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 22 :
                    // RPIExprWalker.g:563:9: 'VARCHAR2' ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )? ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal321=(CommonTree)match(input,147,FOLLOW_147_in_datatype3350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal321_tree = (CommonTree)adaptor.dupNode(string_literal321);

                    adaptor.addChild(root_0, string_literal321_tree);
                    }
                    // RPIExprWalker.g:563:37: ( LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==LPAREN) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // RPIExprWalker.g:563:39: LPAREN NUMBER ( keyBYTE | 'CHAR' )? RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN322=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3371); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN322_tree = (CommonTree)adaptor.dupNode(LPAREN322);

                            adaptor.addChild(root_0, LPAREN322_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER323=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3373); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER323_tree = (CommonTree)adaptor.dupNode(NUMBER323);

                            adaptor.addChild(root_0, NUMBER323_tree);
                            }
                            // RPIExprWalker.g:563:53: ( keyBYTE | 'CHAR' )?
                            int alt75=3;
                            int LA75_0 = input.LA(1);

                            if ( (LA75_0==ID) ) {
                                alt75=1;
                            }
                            else if ( (LA75_0==143) ) {
                                alt75=2;
                            }
                            switch (alt75) {
                                case 1 :
                                    // RPIExprWalker.g:563:55: keyBYTE
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_keyBYTE_in_datatype3377);
                                    keyBYTE324=keyBYTE();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, keyBYTE324.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:563:65: 'CHAR'
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    string_literal325=(CommonTree)match(input,143,FOLLOW_143_in_datatype3381); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal325_tree = (CommonTree)adaptor.dupNode(string_literal325);

                                    adaptor.addChild(root_0, string_literal325_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (CommonTree)input.LT(1);
                            RPAREN326=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3386); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN326_tree = (CommonTree)adaptor.dupNode(RPAREN326);

                            adaptor.addChild(root_0, RPAREN326_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:563:85: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==144) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // RPIExprWalker.g:563:87: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal327=(CommonTree)match(input,144,FOLLOW_144_in_datatype3393); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal327_tree = (CommonTree)adaptor.dupNode(string_literal327);

                            adaptor.addChild(root_0, string_literal327_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            string_literal328=(CommonTree)match(input,145,FOLLOW_145_in_datatype3395); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal328_tree = (CommonTree)adaptor.dupNode(string_literal328);

                            adaptor.addChild(root_0, string_literal328_tree);
                            }
                            // RPIExprWalker.g:563:105: ( identifier | column_spec CHARSET_ATTR )
                            int alt77=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA77_1 = input.LA(2);

                                if ( (LA77_1==DOT||LA77_1==CHARSET_ATTR) ) {
                                    alt77=2;
                                }
                                else if ( (LA77_1==EOF||LA77_1==ID||LA77_1==RPAREN||(LA77_1>=SEMICOLON && LA77_1<=COMMA)||LA77_1==NOT||LA77_1==SQL_ASSIGN||LA77_1==DOUBLEQUOTED_STRING||(LA77_1>=110 && LA77_1<=114)||LA77_1==117||(LA77_1>=161 && LA77_1<=162)||LA77_1==165||LA77_1==217) ) {
                                    alt77=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 77, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA77_2 = input.LA(2);

                                if ( (LA77_2==DOT||LA77_2==CHARSET_ATTR) ) {
                                    alt77=2;
                                }
                                else if ( (LA77_2==EOF||LA77_2==ID||LA77_2==RPAREN||(LA77_2>=SEMICOLON && LA77_2<=COMMA)||LA77_2==NOT||LA77_2==SQL_ASSIGN||LA77_2==DOUBLEQUOTED_STRING||(LA77_2>=110 && LA77_2<=114)||LA77_2==117||(LA77_2>=161 && LA77_2<=162)||LA77_2==165||LA77_2==217) ) {
                                    alt77=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 77, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                alt77=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 77, 0, input);

                                throw nvae;
                            }

                            switch (alt77) {
                                case 1 :
                                    // RPIExprWalker.g:563:107: identifier
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_identifier_in_datatype3399);
                                    identifier329=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, identifier329.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:563:120: column_spec CHARSET_ATTR
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_column_spec_in_datatype3403);
                                    column_spec330=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, column_spec330.getTree());
                                    _last = (CommonTree)input.LT(1);
                                    CHARSET_ATTR331=(CommonTree)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3405); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR331_tree = (CommonTree)adaptor.dupNode(CHARSET_ATTR331);

                                    adaptor.addChild(root_0, CHARSET_ATTR331_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 23 :
                    // RPIExprWalker.g:564:9: 'CHARACTER' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal332=(CommonTree)match(input,144,FOLLOW_144_in_datatype3420); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal332_tree = (CommonTree)adaptor.dupNode(string_literal332);

                    adaptor.addChild(root_0, string_literal332_tree);
                    }
                    // RPIExprWalker.g:564:21: ( keyVARYING )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt79=1;
                                }
                                break;
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case ID:
                                        {
                                        int LA79_6 = input.LA(4);

                                        if ( (LA79_6==ID||LA79_6==SEMICOLON||LA79_6==NOT||(LA79_6>=DOT && LA79_6<=SQL_ASSIGN)||(LA79_6>=TYPE_ATTR && LA79_6<=ROWTYPE_ATTR)||LA79_6==AT_SIGN||LA79_6==111||LA79_6==117||LA79_6==136||LA79_6==220) ) {
                                            alt79=1;
                                        }
                                        else if ( (LA79_6==LPAREN) ) {
                                            int LA79_8 = input.LA(5);

                                            if ( (LA79_8==NUMBER) ) {
                                                int LA79_11 = input.LA(6);

                                                if ( (LA79_11==RPAREN) ) {
                                                    int LA79_12 = input.LA(7);

                                                    if ( (LA79_12==SEMICOLON||LA79_12==NOT||LA79_12==SQL_ASSIGN||LA79_12==111||LA79_12==117||LA79_12==136) ) {
                                                        alt79=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA79_8==ID||LA79_8==DOUBLEQUOTED_STRING) ) {
                                                alt79=1;
                                            }
                                        }
                                        }
                                        break;
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt79=1;
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA79_7 = input.LA(4);

                                        if ( (LA79_7==ID) ) {
                                            int LA79_9 = input.LA(5);

                                            if ( (LA79_9==119) ) {
                                                alt79=1;
                                            }
                                        }
                                        else if ( (LA79_7==DOUBLEQUOTED_STRING) ) {
                                            int LA79_10 = input.LA(5);

                                            if ( (LA79_10==119) ) {
                                                alt79=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA79_5 = input.LA(3);

                                if ( (LA79_5==DOT) ) {
                                    int LA79_7 = input.LA(4);

                                    if ( (LA79_7==ID) ) {
                                        int LA79_9 = input.LA(5);

                                        if ( (LA79_9==119) ) {
                                            alt79=1;
                                        }
                                    }
                                    else if ( (LA79_7==DOUBLEQUOTED_STRING) ) {
                                        int LA79_10 = input.LA(5);

                                        if ( (LA79_10==119) ) {
                                            alt79=1;
                                        }
                                    }
                                }
                                else if ( (LA79_5==ID||LA79_5==DOUBLEQUOTED_STRING||LA79_5==115||LA79_5==119||(LA79_5>=122 && LA79_5<=134)||(LA79_5>=137 && LA79_5<=144)||(LA79_5>=146 && LA79_5<=159)) ) {
                                    alt79=1;
                                }
                                }
                                break;
                        }

                    }
                    switch (alt79) {
                        case 1 :
                            // RPIExprWalker.g:564:23: keyVARYING
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyVARYING_in_datatype3424);
                            keyVARYING333=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyVARYING333.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:564:37: ( LPAREN NUMBER RPAREN )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( (LA80_0==LPAREN) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // RPIExprWalker.g:564:39: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN334=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3431); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN334_tree = (CommonTree)adaptor.dupNode(LPAREN334);

                            adaptor.addChild(root_0, LPAREN334_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER335=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3433); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER335_tree = (CommonTree)adaptor.dupNode(NUMBER335);

                            adaptor.addChild(root_0, NUMBER335_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN336=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3435); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN336_tree = (CommonTree)adaptor.dupNode(RPAREN336);

                            adaptor.addChild(root_0, RPAREN336_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 24 :
                    // RPIExprWalker.g:565:9: 'NCHAR' ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal337=(CommonTree)match(input,148,FOLLOW_148_in_datatype3448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal337_tree = (CommonTree)adaptor.dupNode(string_literal337);

                    adaptor.addChild(root_0, string_literal337_tree);
                    }
                    // RPIExprWalker.g:565:21: ( keyVARYING )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case ID:
                                        {
                                        int LA81_6 = input.LA(4);

                                        if ( (LA81_6==ID||LA81_6==SEMICOLON||LA81_6==NOT||(LA81_6>=DOT && LA81_6<=SQL_ASSIGN)||(LA81_6>=TYPE_ATTR && LA81_6<=ROWTYPE_ATTR)||LA81_6==AT_SIGN||LA81_6==111||LA81_6==117||LA81_6==136||LA81_6==220) ) {
                                            alt81=1;
                                        }
                                        else if ( (LA81_6==LPAREN) ) {
                                            int LA81_8 = input.LA(5);

                                            if ( (LA81_8==NUMBER) ) {
                                                int LA81_11 = input.LA(6);

                                                if ( (LA81_11==RPAREN) ) {
                                                    int LA81_12 = input.LA(7);

                                                    if ( (LA81_12==SEMICOLON||LA81_12==NOT||LA81_12==SQL_ASSIGN||LA81_12==111||LA81_12==117||LA81_12==136) ) {
                                                        alt81=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA81_8==ID||LA81_8==DOUBLEQUOTED_STRING) ) {
                                                alt81=1;
                                            }
                                        }
                                        }
                                        break;
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt81=1;
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA81_7 = input.LA(4);

                                        if ( (LA81_7==ID) ) {
                                            int LA81_9 = input.LA(5);

                                            if ( (LA81_9==119) ) {
                                                alt81=1;
                                            }
                                        }
                                        else if ( (LA81_7==DOUBLEQUOTED_STRING) ) {
                                            int LA81_10 = input.LA(5);

                                            if ( (LA81_10==119) ) {
                                                alt81=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA81_4 = input.LA(3);

                                if ( (LA81_4==DOT) ) {
                                    int LA81_7 = input.LA(4);

                                    if ( (LA81_7==ID) ) {
                                        int LA81_9 = input.LA(5);

                                        if ( (LA81_9==119) ) {
                                            alt81=1;
                                        }
                                    }
                                    else if ( (LA81_7==DOUBLEQUOTED_STRING) ) {
                                        int LA81_10 = input.LA(5);

                                        if ( (LA81_10==119) ) {
                                            alt81=1;
                                        }
                                    }
                                }
                                else if ( (LA81_4==ID||LA81_4==DOUBLEQUOTED_STRING||LA81_4==115||LA81_4==119||(LA81_4>=122 && LA81_4<=134)||(LA81_4>=137 && LA81_4<=144)||(LA81_4>=146 && LA81_4<=159)) ) {
                                    alt81=1;
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt81=1;
                                }
                                break;
                        }

                    }
                    switch (alt81) {
                        case 1 :
                            // RPIExprWalker.g:565:23: keyVARYING
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyVARYING_in_datatype3456);
                            keyVARYING338=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyVARYING338.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:565:37: ( LPAREN NUMBER RPAREN )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==LPAREN) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // RPIExprWalker.g:565:39: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN339=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3463); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN339_tree = (CommonTree)adaptor.dupNode(LPAREN339);

                            adaptor.addChild(root_0, LPAREN339_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER340=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3465); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER340_tree = (CommonTree)adaptor.dupNode(NUMBER340);

                            adaptor.addChild(root_0, NUMBER340_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN341=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3467); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN341_tree = (CommonTree)adaptor.dupNode(RPAREN341);

                            adaptor.addChild(root_0, RPAREN341_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 25 :
                    // RPIExprWalker.g:566:9: 'NVARCHAR' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal342=(CommonTree)match(input,149,FOLLOW_149_in_datatype3480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal342_tree = (CommonTree)adaptor.dupNode(string_literal342);

                    adaptor.addChild(root_0, string_literal342_tree);
                    }
                    // RPIExprWalker.g:566:21: ( LPAREN NUMBER RPAREN )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==LPAREN) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // RPIExprWalker.g:566:23: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN343=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3485); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN343_tree = (CommonTree)adaptor.dupNode(LPAREN343);

                            adaptor.addChild(root_0, LPAREN343_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER344=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3487); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER344_tree = (CommonTree)adaptor.dupNode(NUMBER344);

                            adaptor.addChild(root_0, NUMBER344_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN345=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3489); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN345_tree = (CommonTree)adaptor.dupNode(RPAREN345);

                            adaptor.addChild(root_0, RPAREN345_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 26 :
                    // RPIExprWalker.g:567:9: 'NVARCHAR2' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal346=(CommonTree)match(input,150,FOLLOW_150_in_datatype3502); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal346_tree = (CommonTree)adaptor.dupNode(string_literal346);

                    adaptor.addChild(root_0, string_literal346_tree);
                    }
                    // RPIExprWalker.g:567:21: ( LPAREN NUMBER RPAREN )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==LPAREN) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // RPIExprWalker.g:567:23: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN347=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3506); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN347_tree = (CommonTree)adaptor.dupNode(LPAREN347);

                            adaptor.addChild(root_0, LPAREN347_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER348=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3508); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER348_tree = (CommonTree)adaptor.dupNode(NUMBER348);

                            adaptor.addChild(root_0, NUMBER348_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN349=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3510); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN349_tree = (CommonTree)adaptor.dupNode(RPAREN349);

                            adaptor.addChild(root_0, RPAREN349_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 27 :
                    // RPIExprWalker.g:568:9: 'NATIONAL' ( 'CHARACTER' | 'CHAR' ) ( keyVARYING )? ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal350=(CommonTree)match(input,151,FOLLOW_151_in_datatype3523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal350_tree = (CommonTree)adaptor.dupNode(string_literal350);

                    adaptor.addChild(root_0, string_literal350_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    set351=(CommonTree)input.LT(1);
                    if ( (input.LA(1)>=143 && input.LA(1)<=144) ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set351_tree = (CommonTree)adaptor.dupNode(set351);

                        adaptor.addChild(root_0, set351_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprWalker.g:568:46: ( keyVARYING )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==ID) ) {
                        switch ( input.LA(2) ) {
                            case ID:
                                {
                                switch ( input.LA(3) ) {
                                    case ID:
                                        {
                                        int LA85_6 = input.LA(4);

                                        if ( (LA85_6==ID||LA85_6==SEMICOLON||LA85_6==NOT||(LA85_6>=DOT && LA85_6<=SQL_ASSIGN)||(LA85_6>=TYPE_ATTR && LA85_6<=ROWTYPE_ATTR)||LA85_6==AT_SIGN||LA85_6==111||LA85_6==117||LA85_6==136||LA85_6==220) ) {
                                            alt85=1;
                                        }
                                        else if ( (LA85_6==LPAREN) ) {
                                            int LA85_8 = input.LA(5);

                                            if ( (LA85_8==NUMBER) ) {
                                                int LA85_11 = input.LA(6);

                                                if ( (LA85_11==RPAREN) ) {
                                                    int LA85_12 = input.LA(7);

                                                    if ( (LA85_12==SEMICOLON||LA85_12==NOT||LA85_12==SQL_ASSIGN||LA85_12==111||LA85_12==117||LA85_12==136) ) {
                                                        alt85=1;
                                                    }
                                                }
                                            }
                                            else if ( (LA85_8==ID||LA85_8==DOUBLEQUOTED_STRING) ) {
                                                alt85=1;
                                            }
                                        }
                                        }
                                        break;
                                    case PLUS:
                                    case MINUS:
                                    case NUMBER:
                                    case QUOTED_STRING:
                                    case DOUBLEQUOTED_STRING:
                                    case 115:
                                    case 119:
                                    case 122:
                                    case 123:
                                    case 124:
                                    case 125:
                                    case 126:
                                    case 127:
                                    case 128:
                                    case 129:
                                    case 130:
                                    case 131:
                                    case 132:
                                    case 133:
                                    case 134:
                                    case 137:
                                    case 138:
                                    case 139:
                                    case 140:
                                    case 141:
                                    case 142:
                                    case 143:
                                    case 144:
                                    case 146:
                                    case 147:
                                    case 148:
                                    case 149:
                                    case 150:
                                    case 151:
                                    case 152:
                                    case 153:
                                    case 154:
                                    case 155:
                                    case 156:
                                    case 157:
                                    case 158:
                                    case 159:
                                        {
                                        alt85=1;
                                        }
                                        break;
                                    case DOT:
                                        {
                                        int LA85_7 = input.LA(4);

                                        if ( (LA85_7==ID) ) {
                                            int LA85_9 = input.LA(5);

                                            if ( (LA85_9==119) ) {
                                                alt85=1;
                                            }
                                        }
                                        else if ( (LA85_7==DOUBLEQUOTED_STRING) ) {
                                            int LA85_10 = input.LA(5);

                                            if ( (LA85_10==119) ) {
                                                alt85=1;
                                            }
                                        }
                                        }
                                        break;
                                }

                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA85_4 = input.LA(3);

                                if ( (LA85_4==DOT) ) {
                                    int LA85_7 = input.LA(4);

                                    if ( (LA85_7==ID) ) {
                                        int LA85_9 = input.LA(5);

                                        if ( (LA85_9==119) ) {
                                            alt85=1;
                                        }
                                    }
                                    else if ( (LA85_7==DOUBLEQUOTED_STRING) ) {
                                        int LA85_10 = input.LA(5);

                                        if ( (LA85_10==119) ) {
                                            alt85=1;
                                        }
                                    }
                                }
                                else if ( (LA85_4==ID||LA85_4==DOUBLEQUOTED_STRING||LA85_4==115||LA85_4==119||(LA85_4>=122 && LA85_4<=134)||(LA85_4>=137 && LA85_4<=144)||(LA85_4>=146 && LA85_4<=159)) ) {
                                    alt85=1;
                                }
                                }
                                break;
                            case EOF:
                            case LPAREN:
                            case RPAREN:
                            case SEMICOLON:
                            case COMMA:
                            case NOT:
                            case SQL_ASSIGN:
                            case 110:
                            case 111:
                            case 112:
                            case 113:
                            case 114:
                            case 117:
                            case 161:
                            case 162:
                            case 165:
                            case 217:
                                {
                                alt85=1;
                                }
                                break;
                        }

                    }
                    switch (alt85) {
                        case 1 :
                            // RPIExprWalker.g:568:48: keyVARYING
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyVARYING_in_datatype3538);
                            keyVARYING352=keyVARYING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyVARYING352.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:568:62: ( LPAREN NUMBER RPAREN )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==LPAREN) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // RPIExprWalker.g:568:64: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN353=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3545); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN353_tree = (CommonTree)adaptor.dupNode(LPAREN353);

                            adaptor.addChild(root_0, LPAREN353_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER354=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3547); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER354_tree = (CommonTree)adaptor.dupNode(NUMBER354);

                            adaptor.addChild(root_0, NUMBER354_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN355=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3549); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN355_tree = (CommonTree)adaptor.dupNode(RPAREN355);

                            adaptor.addChild(root_0, RPAREN355_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 28 :
                    // RPIExprWalker.g:569:9: 'MLSLABEL'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal356=(CommonTree)match(input,152,FOLLOW_152_in_datatype3562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal356_tree = (CommonTree)adaptor.dupNode(string_literal356);

                    adaptor.addChild(root_0, string_literal356_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 29 :
                    // RPIExprWalker.g:570:9: 'PLS_INTEGER'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal357=(CommonTree)match(input,153,FOLLOW_153_in_datatype3572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal357_tree = (CommonTree)adaptor.dupNode(string_literal357);

                    adaptor.addChild(root_0, string_literal357_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 30 :
                    // RPIExprWalker.g:571:9: 'BLOB'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal358=(CommonTree)match(input,154,FOLLOW_154_in_datatype3582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal358_tree = (CommonTree)adaptor.dupNode(string_literal358);

                    adaptor.addChild(root_0, string_literal358_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 31 :
                    // RPIExprWalker.g:572:9: 'CLOB' ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal359=(CommonTree)match(input,155,FOLLOW_155_in_datatype3592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal359_tree = (CommonTree)adaptor.dupNode(string_literal359);

                    adaptor.addChild(root_0, string_literal359_tree);
                    }
                    // RPIExprWalker.g:572:16: ( 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR ) )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==144) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // RPIExprWalker.g:572:18: 'CHARACTER' 'SET' ( identifier | column_spec CHARSET_ATTR )
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal360=(CommonTree)match(input,144,FOLLOW_144_in_datatype3596); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal360_tree = (CommonTree)adaptor.dupNode(string_literal360);

                            adaptor.addChild(root_0, string_literal360_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            string_literal361=(CommonTree)match(input,145,FOLLOW_145_in_datatype3598); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal361_tree = (CommonTree)adaptor.dupNode(string_literal361);

                            adaptor.addChild(root_0, string_literal361_tree);
                            }
                            // RPIExprWalker.g:572:36: ( identifier | column_spec CHARSET_ATTR )
                            int alt87=2;
                            switch ( input.LA(1) ) {
                            case ID:
                                {
                                int LA87_1 = input.LA(2);

                                if ( (LA87_1==DOT||LA87_1==CHARSET_ATTR) ) {
                                    alt87=2;
                                }
                                else if ( (LA87_1==EOF||LA87_1==ID||LA87_1==RPAREN||(LA87_1>=SEMICOLON && LA87_1<=COMMA)||LA87_1==NOT||LA87_1==SQL_ASSIGN||LA87_1==DOUBLEQUOTED_STRING||(LA87_1>=110 && LA87_1<=114)||LA87_1==117||(LA87_1>=161 && LA87_1<=162)||LA87_1==165||LA87_1==217) ) {
                                    alt87=1;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 87, 1, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA87_2 = input.LA(2);

                                if ( (LA87_2==EOF||LA87_2==ID||LA87_2==RPAREN||(LA87_2>=SEMICOLON && LA87_2<=COMMA)||LA87_2==NOT||LA87_2==SQL_ASSIGN||LA87_2==DOUBLEQUOTED_STRING||(LA87_2>=110 && LA87_2<=114)||LA87_2==117||(LA87_2>=161 && LA87_2<=162)||LA87_2==165||LA87_2==217) ) {
                                    alt87=1;
                                }
                                else if ( (LA87_2==DOT||LA87_2==CHARSET_ATTR) ) {
                                    alt87=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 87, 2, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                alt87=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 87, 0, input);

                                throw nvae;
                            }

                            switch (alt87) {
                                case 1 :
                                    // RPIExprWalker.g:572:38: identifier
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_identifier_in_datatype3602);
                                    identifier362=identifier();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, identifier362.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:572:51: column_spec CHARSET_ATTR
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_column_spec_in_datatype3606);
                                    column_spec363=column_spec();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, column_spec363.getTree());
                                    _last = (CommonTree)input.LT(1);
                                    CHARSET_ATTR364=(CommonTree)match(input,CHARSET_ATTR,FOLLOW_CHARSET_ATTR_in_datatype3608); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CHARSET_ATTR364_tree = (CommonTree)adaptor.dupNode(CHARSET_ATTR364);

                                    adaptor.addChild(root_0, CHARSET_ATTR364_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 32 :
                    // RPIExprWalker.g:573:9: 'NCLOB'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal365=(CommonTree)match(input,156,FOLLOW_156_in_datatype3623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal365_tree = (CommonTree)adaptor.dupNode(string_literal365);

                    adaptor.addChild(root_0, string_literal365_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 33 :
                    // RPIExprWalker.g:574:9: 'BFILE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal366=(CommonTree)match(input,157,FOLLOW_157_in_datatype3633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal366_tree = (CommonTree)adaptor.dupNode(string_literal366);

                    adaptor.addChild(root_0, string_literal366_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 34 :
                    // RPIExprWalker.g:575:9: 'ROWID'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal367=(CommonTree)match(input,158,FOLLOW_158_in_datatype3643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal367_tree = (CommonTree)adaptor.dupNode(string_literal367);

                    adaptor.addChild(root_0, string_literal367_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 35 :
                    // RPIExprWalker.g:576:9: 'UROWID' ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal368=(CommonTree)match(input,159,FOLLOW_159_in_datatype3654); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal368_tree = (CommonTree)adaptor.dupNode(string_literal368);

                    adaptor.addChild(root_0, string_literal368_tree);
                    }
                    // RPIExprWalker.g:576:18: ( LPAREN NUMBER RPAREN )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==LPAREN) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // RPIExprWalker.g:576:20: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN369=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_datatype3658); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN369_tree = (CommonTree)adaptor.dupNode(LPAREN369);

                            adaptor.addChild(root_0, LPAREN369_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER370=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_datatype3660); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER370_tree = (CommonTree)adaptor.dupNode(NUMBER370);

                            adaptor.addChild(root_0, NUMBER370_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN371=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_datatype3662); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN371_tree = (CommonTree)adaptor.dupNode(RPAREN371);

                            adaptor.addChild(root_0, RPAREN371_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, datatype_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "datatype"

    public static class type_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_spec"
    // RPIExprWalker.g:579:1: type_spec : ( datatype | column_spec TYPE_ATTR | table_spec ROWTYPE_ATTR | type_name ( LPAREN NUMBER RPAREN )? );
    public final RPIExprWalker.type_spec_return type_spec() throws RecognitionException {
        RPIExprWalker.type_spec_return retval = new RPIExprWalker.type_spec_return();
        retval.start = input.LT(1);
        int type_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree TYPE_ATTR374=null;
        CommonTree ROWTYPE_ATTR376=null;
        CommonTree LPAREN378=null;
        CommonTree NUMBER379=null;
        CommonTree RPAREN380=null;
        RPIExprWalker.datatype_return datatype372 = null;

        RPIExprWalker.column_spec_return column_spec373 = null;

        RPIExprWalker.table_spec_return table_spec375 = null;

        RPIExprWalker.type_name_return type_name377 = null;


        CommonTree TYPE_ATTR374_tree=null;
        CommonTree ROWTYPE_ATTR376_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree NUMBER379_tree=null;
        CommonTree RPAREN380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // RPIExprWalker.g:580:5: ( datatype | column_spec TYPE_ATTR | table_spec ROWTYPE_ATTR | type_name ( LPAREN NUMBER RPAREN )? )
            int alt92=4;
            switch ( input.LA(1) ) {
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 159:
                {
                alt92=1;
                }
                break;
            case ID:
                {
                int LA92_2 = input.LA(2);

                if ( (LA92_2==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ID:
                        {
                        int LA92_10 = input.LA(4);

                        if ( (LA92_10==DOT||LA92_10==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_10==ROWTYPE_ATTR||LA92_10==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 10, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA92_11 = input.LA(4);

                        if ( (LA92_11==DOT||LA92_11==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_11==ROWTYPE_ATTR||LA92_11==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 11, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA92_12 = input.LA(4);

                        if ( (LA92_12==DOT||LA92_12==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_12==ROWTYPE_ATTR||LA92_12==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 12, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA92_2==TYPE_ATTR) ) {
                    alt92=2;
                }
                else if ( (LA92_2==ROWTYPE_ATTR||LA92_2==AT_SIGN) ) {
                    alt92=3;
                }
                else if ( (((synpred199_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))||(synpred199_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIME")))||(synpred199_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL")))||(synpred199_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))))) ) {
                    alt92=1;
                }
                else if ( (true) ) {
                    alt92=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 2, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                switch ( input.LA(2) ) {
                case EOF:
                case ID:
                case RPAREN:
                case SEMICOLON:
                case COMMA:
                case NOT:
                case SQL_ASSIGN:
                case DOUBLEQUOTED_STRING:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 117:
                case 161:
                case 162:
                case 165:
                case 217:
                    {
                    alt92=1;
                    }
                    break;
                case ROWTYPE_ATTR:
                case AT_SIGN:
                    {
                    alt92=3;
                    }
                    break;
                case DOT:
                    {
                    switch ( input.LA(3) ) {
                    case ID:
                        {
                        int LA92_10 = input.LA(4);

                        if ( (LA92_10==DOT||LA92_10==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_10==ROWTYPE_ATTR||LA92_10==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 10, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA92_11 = input.LA(4);

                        if ( (LA92_11==DOT||LA92_11==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_11==ROWTYPE_ATTR||LA92_11==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 11, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA92_12 = input.LA(4);

                        if ( (LA92_12==DOT||LA92_12==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_12==ROWTYPE_ATTR||LA92_12==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 12, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 5, input);

                        throw nvae;
                    }

                    }
                    break;
                case TYPE_ATTR:
                    {
                    alt92=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 3, input);

                    throw nvae;
                }

                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                switch ( input.LA(2) ) {
                case DOT:
                    {
                    switch ( input.LA(3) ) {
                    case ID:
                        {
                        switch ( input.LA(4) ) {
                        case EOF:
                        case ID:
                        case LPAREN:
                        case RPAREN:
                        case SEMICOLON:
                        case COMMA:
                        case NOT:
                        case SQL_ASSIGN:
                        case DOUBLEQUOTED_STRING:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 117:
                        case 161:
                        case 162:
                        case 165:
                        case 217:
                            {
                            alt92=4;
                            }
                            break;
                        case DOT:
                            {
                            switch ( input.LA(5) ) {
                            case ID:
                                {
                                int LA92_16 = input.LA(6);

                                if ( (LA92_16==EOF||(LA92_16>=ID && LA92_16<=RPAREN)||(LA92_16>=SEMICOLON && LA92_16<=COMMA)||LA92_16==NOT||(LA92_16>=DOT && LA92_16<=SQL_ASSIGN)||LA92_16==DOUBLEQUOTED_STRING||(LA92_16>=110 && LA92_16<=114)||LA92_16==117||(LA92_16>=161 && LA92_16<=162)||LA92_16==165||LA92_16==217) ) {
                                    alt92=4;
                                }
                                else if ( (LA92_16==TYPE_ATTR) ) {
                                    alt92=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 92, 16, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA92_17 = input.LA(6);

                                if ( (LA92_17==TYPE_ATTR) ) {
                                    alt92=2;
                                }
                                else if ( (LA92_17==EOF||(LA92_17>=ID && LA92_17<=RPAREN)||(LA92_17>=SEMICOLON && LA92_17<=COMMA)||LA92_17==NOT||(LA92_17>=DOT && LA92_17<=SQL_ASSIGN)||LA92_17==DOUBLEQUOTED_STRING||(LA92_17>=110 && LA92_17<=114)||LA92_17==117||(LA92_17>=161 && LA92_17<=162)||LA92_17==165||LA92_17==217) ) {
                                    alt92=4;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 92, 17, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                alt92=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 92, 15, input);

                                throw nvae;
                            }

                            }
                            break;
                        case TYPE_ATTR:
                            {
                            alt92=2;
                            }
                            break;
                        case ROWTYPE_ATTR:
                        case AT_SIGN:
                            {
                            alt92=3;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 13, input);

                            throw nvae;
                        }

                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        switch ( input.LA(4) ) {
                        case DOT:
                            {
                            switch ( input.LA(5) ) {
                            case ID:
                                {
                                int LA92_16 = input.LA(6);

                                if ( (LA92_16==EOF||(LA92_16>=ID && LA92_16<=RPAREN)||(LA92_16>=SEMICOLON && LA92_16<=COMMA)||LA92_16==NOT||(LA92_16>=DOT && LA92_16<=SQL_ASSIGN)||LA92_16==DOUBLEQUOTED_STRING||(LA92_16>=110 && LA92_16<=114)||LA92_16==117||(LA92_16>=161 && LA92_16<=162)||LA92_16==165||LA92_16==217) ) {
                                    alt92=4;
                                }
                                else if ( (LA92_16==TYPE_ATTR) ) {
                                    alt92=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 92, 16, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA92_17 = input.LA(6);

                                if ( (LA92_17==TYPE_ATTR) ) {
                                    alt92=2;
                                }
                                else if ( (LA92_17==EOF||(LA92_17>=ID && LA92_17<=RPAREN)||(LA92_17>=SEMICOLON && LA92_17<=COMMA)||LA92_17==NOT||(LA92_17>=DOT && LA92_17<=SQL_ASSIGN)||LA92_17==DOUBLEQUOTED_STRING||(LA92_17>=110 && LA92_17<=114)||LA92_17==117||(LA92_17>=161 && LA92_17<=162)||LA92_17==165||LA92_17==217) ) {
                                    alt92=4;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 92, 17, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                alt92=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 92, 15, input);

                                throw nvae;
                            }

                            }
                            break;
                        case TYPE_ATTR:
                            {
                            alt92=2;
                            }
                            break;
                        case ROWTYPE_ATTR:
                        case AT_SIGN:
                            {
                            alt92=3;
                            }
                            break;
                        case EOF:
                        case ID:
                        case LPAREN:
                        case RPAREN:
                        case SEMICOLON:
                        case COMMA:
                        case NOT:
                        case SQL_ASSIGN:
                        case DOUBLEQUOTED_STRING:
                        case 110:
                        case 111:
                        case 112:
                        case 113:
                        case 114:
                        case 117:
                        case 161:
                        case 162:
                        case 165:
                        case 217:
                            {
                            alt92=4;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 14, input);

                            throw nvae;
                        }

                        }
                        break;
                    case 158:
                        {
                        int LA92_12 = input.LA(4);

                        if ( (LA92_12==DOT||LA92_12==TYPE_ATTR) ) {
                            alt92=2;
                        }
                        else if ( (LA92_12==ROWTYPE_ATTR||LA92_12==AT_SIGN) ) {
                            alt92=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 92, 12, input);

                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 92, 9, input);

                        throw nvae;
                    }

                    }
                    break;
                case EOF:
                case ID:
                case LPAREN:
                case RPAREN:
                case SEMICOLON:
                case COMMA:
                case NOT:
                case SQL_ASSIGN:
                case DOUBLEQUOTED_STRING:
                case 110:
                case 111:
                case 112:
                case 113:
                case 114:
                case 117:
                case 161:
                case 162:
                case 165:
                case 217:
                    {
                    alt92=4;
                    }
                    break;
                case ROWTYPE_ATTR:
                case AT_SIGN:
                    {
                    alt92=3;
                    }
                    break;
                case TYPE_ATTR:
                    {
                    alt92=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 92, 4, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // RPIExprWalker.g:580:9: datatype
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_datatype_in_type_spec3684);
                    datatype372=datatype();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, datatype372.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:582:9: column_spec TYPE_ATTR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_spec_in_type_spec3696);
                    column_spec373=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_spec373.getTree());
                    _last = (CommonTree)input.LT(1);
                    TYPE_ATTR374=(CommonTree)match(input,TYPE_ATTR,FOLLOW_TYPE_ATTR_in_type_spec3698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE_ATTR374_tree = (CommonTree)adaptor.dupNode(TYPE_ATTR374);

                    adaptor.addChild(root_0, TYPE_ATTR374_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:584:9: table_spec ROWTYPE_ATTR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_table_spec_in_type_spec3709);
                    table_spec375=table_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, table_spec375.getTree());
                    _last = (CommonTree)input.LT(1);
                    ROWTYPE_ATTR376=(CommonTree)match(input,ROWTYPE_ATTR,FOLLOW_ROWTYPE_ATTR_in_type_spec3711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ROWTYPE_ATTR376_tree = (CommonTree)adaptor.dupNode(ROWTYPE_ATTR376);

                    adaptor.addChild(root_0, ROWTYPE_ATTR376_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:586:9: type_name ( LPAREN NUMBER RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_name_in_type_spec3722);
                    type_name377=type_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, type_name377.getTree());
                    // RPIExprWalker.g:586:19: ( LPAREN NUMBER RPAREN )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==LPAREN) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // RPIExprWalker.g:586:21: LPAREN NUMBER RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN378=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_type_spec3726); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN378_tree = (CommonTree)adaptor.dupNode(LPAREN378);

                            adaptor.addChild(root_0, LPAREN378_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            NUMBER379=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_type_spec3728); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NUMBER379_tree = (CommonTree)adaptor.dupNode(NUMBER379);

                            adaptor.addChild(root_0, NUMBER379_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            RPAREN380=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_type_spec3730); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN380_tree = (CommonTree)adaptor.dupNode(RPAREN380);

                            adaptor.addChild(root_0, RPAREN380_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, type_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_spec"

    public static class type_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_name"
    // RPIExprWalker.g:589:1: type_name : identifier ( DOT identifier )* ;
    public final RPIExprWalker.type_name_return type_name() throws RecognitionException {
        RPIExprWalker.type_name_return retval = new RPIExprWalker.type_name_return();
        retval.start = input.LT(1);
        int type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT382=null;
        RPIExprWalker.identifier_return identifier381 = null;

        RPIExprWalker.identifier_return identifier383 = null;


        CommonTree DOT382_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // RPIExprWalker.g:590:5: ( identifier ( DOT identifier )* )
            // RPIExprWalker.g:590:9: identifier ( DOT identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_type_name3752);
            identifier381=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier381.getTree());
            // RPIExprWalker.g:590:20: ( DOT identifier )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==DOT) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // RPIExprWalker.g:590:22: DOT identifier
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    DOT382=(CommonTree)match(input,DOT,FOLLOW_DOT_in_type_name3756); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT382_tree = (CommonTree)adaptor.dupNode(DOT382);

            	    adaptor.addChild(root_0, DOT382_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_identifier_in_type_name3758);
            	    identifier383=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, identifier383.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_name"

    public static class parameter_specs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_specs"
    // RPIExprWalker.g:593:1: parameter_specs : parameter_spec ( COMMA parameter_spec )* ;
    public final RPIExprWalker.parameter_specs_return parameter_specs() throws RecognitionException {
        RPIExprWalker.parameter_specs_return retval = new RPIExprWalker.parameter_specs_return();
        retval.start = input.LT(1);
        int parameter_specs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA385=null;
        RPIExprWalker.parameter_spec_return parameter_spec384 = null;

        RPIExprWalker.parameter_spec_return parameter_spec386 = null;


        CommonTree COMMA385_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // RPIExprWalker.g:594:5: ( parameter_spec ( COMMA parameter_spec )* )
            // RPIExprWalker.g:594:9: parameter_spec ( COMMA parameter_spec )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_parameter_spec_in_parameter_specs3780);
            parameter_spec384=parameter_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, parameter_spec384.getTree());
            // RPIExprWalker.g:594:24: ( COMMA parameter_spec )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==COMMA) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // RPIExprWalker.g:594:26: COMMA parameter_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA385=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_parameter_specs3784); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA385_tree = (CommonTree)adaptor.dupNode(COMMA385);

            	    adaptor.addChild(root_0, COMMA385_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_parameter_spec_in_parameter_specs3786);
            	    parameter_spec386=parameter_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, parameter_spec386.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, parameter_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_specs"

    public static class parameter_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_spec"
    // RPIExprWalker.g:597:1: parameter_spec : parameter_name ( 'IN' )? ( type_spec )? ;
    public final RPIExprWalker.parameter_spec_return parameter_spec() throws RecognitionException {
        RPIExprWalker.parameter_spec_return retval = new RPIExprWalker.parameter_spec_return();
        retval.start = input.LT(1);
        int parameter_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal388=null;
        RPIExprWalker.parameter_name_return parameter_name387 = null;

        RPIExprWalker.type_spec_return type_spec389 = null;


        CommonTree string_literal388_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // RPIExprWalker.g:598:5: ( parameter_name ( 'IN' )? ( type_spec )? )
            // RPIExprWalker.g:598:9: parameter_name ( 'IN' )? ( type_spec )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_parameter_name_in_parameter_spec3808);
            parameter_name387=parameter_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, parameter_name387.getTree());
            // RPIExprWalker.g:598:24: ( 'IN' )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==160) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // RPIExprWalker.g:598:26: 'IN'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal388=(CommonTree)match(input,160,FOLLOW_160_in_parameter_spec3812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal388_tree = (CommonTree)adaptor.dupNode(string_literal388);

                    adaptor.addChild(root_0, string_literal388_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:598:34: ( type_spec )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==ID||LA96_0==DOUBLEQUOTED_STRING||(LA96_0>=122 && LA96_0<=134)||(LA96_0>=137 && LA96_0<=144)||(LA96_0>=146 && LA96_0<=159)) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // RPIExprWalker.g:598:36: type_spec
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_type_spec_in_parameter_spec3819);
                    type_spec389=type_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, type_spec389.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, parameter_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_spec"

    public static class parameter_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameter_name"
    // RPIExprWalker.g:601:1: parameter_name : identifier ;
    public final RPIExprWalker.parameter_name_return parameter_name() throws RecognitionException {
        RPIExprWalker.parameter_name_return retval = new RPIExprWalker.parameter_name_return();
        retval.start = input.LT(1);
        int parameter_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier390 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // RPIExprWalker.g:602:5: ( identifier )
            // RPIExprWalker.g:602:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_parameter_name3844);
            identifier390=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier390.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, parameter_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter_name"

    public static class cursor_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_spec"
    // RPIExprWalker.g:605:1: cursor_spec : keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMICOLON ;
    public final RPIExprWalker.cursor_spec_return cursor_spec() throws RecognitionException {
        RPIExprWalker.cursor_spec_return retval = new RPIExprWalker.cursor_spec_return();
        retval.start = input.LT(1);
        int cursor_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN393=null;
        CommonTree RPAREN395=null;
        CommonTree SEMICOLON398=null;
        RPIExprWalker.keyCURSOR_return keyCURSOR391 = null;

        RPIExprWalker.cursor_name_return cursor_name392 = null;

        RPIExprWalker.parameter_specs_return parameter_specs394 = null;

        RPIExprWalker.keyRETURN_return keyRETURN396 = null;

        RPIExprWalker.return_type_return return_type397 = null;


        CommonTree LPAREN393_tree=null;
        CommonTree RPAREN395_tree=null;
        CommonTree SEMICOLON398_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // RPIExprWalker.g:606:5: ( keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMICOLON )
            // RPIExprWalker.g:606:9: keyCURSOR cursor_name ( LPAREN parameter_specs RPAREN )? keyRETURN return_type SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyCURSOR_in_cursor_spec3863);
            keyCURSOR391=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyCURSOR391.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cursor_name_in_cursor_spec3865);
            cursor_name392=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cursor_name392.getTree());
            // RPIExprWalker.g:607:9: ( LPAREN parameter_specs RPAREN )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==LPAREN) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // RPIExprWalker.g:607:11: LPAREN parameter_specs RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN393=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_spec3878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN393_tree = (CommonTree)adaptor.dupNode(LPAREN393);

                    adaptor.addChild(root_0, LPAREN393_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parameter_specs_in_cursor_spec3880);
                    parameter_specs394=parameter_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, parameter_specs394.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN395=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_spec3882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN395_tree = (CommonTree)adaptor.dupNode(RPAREN395);

                    adaptor.addChild(root_0, RPAREN395_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRETURN_in_cursor_spec3895);
            keyRETURN396=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRETURN396.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_return_type_in_cursor_spec3897);
            return_type397=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, return_type397.getTree());
            _last = (CommonTree)input.LT(1);
            SEMICOLON398=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_cursor_spec3899); if (state.failed) return retval;

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, cursor_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_spec"

    public static class procedure_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_spec"
    // RPIExprWalker.g:611:1: procedure_spec : 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMICOLON ;
    public final RPIExprWalker.procedure_spec_return procedure_spec() throws RecognitionException {
        RPIExprWalker.procedure_spec_return retval = new RPIExprWalker.procedure_spec_return();
        retval.start = input.LT(1);
        int procedure_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal399=null;
        CommonTree LPAREN401=null;
        CommonTree RPAREN403=null;
        CommonTree SEMICOLON404=null;
        RPIExprWalker.procedure_name_return procedure_name400 = null;

        RPIExprWalker.arguments_return arguments402 = null;


        CommonTree string_literal399_tree=null;
        CommonTree LPAREN401_tree=null;
        CommonTree RPAREN403_tree=null;
        CommonTree SEMICOLON404_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // RPIExprWalker.g:611:15: ( 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMICOLON )
            // RPIExprWalker.g:612:5: 'PROCEDURE' procedure_name ( LPAREN arguments RPAREN )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal399=(CommonTree)match(input,161,FOLLOW_161_in_procedure_spec3918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal399_tree = (CommonTree)adaptor.dupNode(string_literal399);

            adaptor.addChild(root_0, string_literal399_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_procedure_name_in_procedure_spec3920);
            procedure_name400=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, procedure_name400.getTree());
            // RPIExprWalker.g:613:5: ( LPAREN arguments RPAREN )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==LPAREN) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // RPIExprWalker.g:613:7: LPAREN arguments RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN401=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_spec3929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN401_tree = (CommonTree)adaptor.dupNode(LPAREN401);

                    adaptor.addChild(root_0, LPAREN401_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_arguments_in_procedure_spec3931);
                    arguments402=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, arguments402.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN403=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_spec3933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN403_tree = (CommonTree)adaptor.dupNode(RPAREN403);

                    adaptor.addChild(root_0, RPAREN403_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON404=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_spec3938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON404_tree = (CommonTree)adaptor.dupNode(SEMICOLON404);

            adaptor.addChild(root_0, SEMICOLON404_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, procedure_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_spec"

    public static class function_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_spec"
    // RPIExprWalker.g:616:1: function_spec : 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMICOLON ;
    public final RPIExprWalker.function_spec_return function_spec() throws RecognitionException {
        RPIExprWalker.function_spec_return retval = new RPIExprWalker.function_spec_return();
        retval.start = input.LT(1);
        int function_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal405=null;
        CommonTree LPAREN407=null;
        CommonTree RPAREN409=null;
        CommonTree SEMICOLON412=null;
        RPIExprWalker.function_name_return function_name406 = null;

        RPIExprWalker.arguments_return arguments408 = null;

        RPIExprWalker.keyRETURN_return keyRETURN410 = null;

        RPIExprWalker.return_type_return return_type411 = null;


        CommonTree string_literal405_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree RPAREN409_tree=null;
        CommonTree SEMICOLON412_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // RPIExprWalker.g:617:5: ( 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMICOLON )
            // RPIExprWalker.g:617:9: 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal405=(CommonTree)match(input,162,FOLLOW_162_in_function_spec3957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal405_tree = (CommonTree)adaptor.dupNode(string_literal405);

            adaptor.addChild(root_0, string_literal405_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_function_name_in_function_spec3959);
            function_name406=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, function_name406.getTree());
            // RPIExprWalker.g:618:9: ( LPAREN arguments RPAREN )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==LPAREN) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // RPIExprWalker.g:618:11: LPAREN arguments RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN407=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_function_spec3972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN407_tree = (CommonTree)adaptor.dupNode(LPAREN407);

                    adaptor.addChild(root_0, LPAREN407_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_arguments_in_function_spec3974);
                    arguments408=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, arguments408.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN409=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_function_spec3976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN409_tree = (CommonTree)adaptor.dupNode(RPAREN409);

                    adaptor.addChild(root_0, RPAREN409_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRETURN_in_function_spec3989);
            keyRETURN410=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRETURN410.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_return_type_in_function_spec3991);
            return_type411=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, return_type411.getTree());
            _last = (CommonTree)input.LT(1);
            SEMICOLON412=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_spec3993); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON412_tree = (CommonTree)adaptor.dupNode(SEMICOLON412);

            adaptor.addChild(root_0, SEMICOLON412_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, function_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_spec"

    public static class exception_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_declaration"
    // RPIExprWalker.g:622:1: exception_declaration : exception_name 'EXCEPTION' SEMICOLON ;
    public final RPIExprWalker.exception_declaration_return exception_declaration() throws RecognitionException {
        RPIExprWalker.exception_declaration_return retval = new RPIExprWalker.exception_declaration_return();
        retval.start = input.LT(1);
        int exception_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal414=null;
        CommonTree SEMICOLON415=null;
        RPIExprWalker.exception_name_return exception_name413 = null;


        CommonTree string_literal414_tree=null;
        CommonTree SEMICOLON415_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // RPIExprWalker.g:623:5: ( exception_name 'EXCEPTION' SEMICOLON )
            // RPIExprWalker.g:623:9: exception_name 'EXCEPTION' SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_exception_name_in_exception_declaration4012);
            exception_name413=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exception_name413.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal414=(CommonTree)match(input,119,FOLLOW_119_in_exception_declaration4014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal414_tree = (CommonTree)adaptor.dupNode(string_literal414);

            adaptor.addChild(root_0, string_literal414_tree);
            }
            _last = (CommonTree)input.LT(1);
            SEMICOLON415=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_exception_declaration4016); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON415_tree = (CommonTree)adaptor.dupNode(SEMICOLON415);

            adaptor.addChild(root_0, SEMICOLON415_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, exception_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_declaration"

    public static class exception_names_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_names"
    // RPIExprWalker.g:626:1: exception_names : exception_name ( 'OR' exception_name )* ;
    public final RPIExprWalker.exception_names_return exception_names() throws RecognitionException {
        RPIExprWalker.exception_names_return retval = new RPIExprWalker.exception_names_return();
        retval.start = input.LT(1);
        int exception_names_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal417=null;
        RPIExprWalker.exception_name_return exception_name416 = null;

        RPIExprWalker.exception_name_return exception_name418 = null;


        CommonTree string_literal417_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // RPIExprWalker.g:627:5: ( exception_name ( 'OR' exception_name )* )
            // RPIExprWalker.g:627:9: exception_name ( 'OR' exception_name )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_exception_name_in_exception_names4035);
            exception_name416=exception_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exception_name416.getTree());
            // RPIExprWalker.g:627:24: ( 'OR' exception_name )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==OR) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // RPIExprWalker.g:627:26: 'OR' exception_name
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal417=(CommonTree)match(input,OR,FOLLOW_OR_in_exception_names4039); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal417_tree = (CommonTree)adaptor.dupNode(string_literal417);

            	    adaptor.addChild(root_0, string_literal417_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_exception_name_in_exception_names4041);
            	    exception_name418=exception_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, exception_name418.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, exception_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_names"

    public static class exception_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_name"
    // RPIExprWalker.g:630:1: exception_name : ( exception_package_name DOT )? identifier ;
    public final RPIExprWalker.exception_name_return exception_name() throws RecognitionException {
        RPIExprWalker.exception_name_return retval = new RPIExprWalker.exception_name_return();
        retval.start = input.LT(1);
        int exception_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT420=null;
        RPIExprWalker.exception_package_name_return exception_package_name419 = null;

        RPIExprWalker.identifier_return identifier421 = null;


        CommonTree DOT420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // RPIExprWalker.g:631:5: ( ( exception_package_name DOT )? identifier )
            // RPIExprWalker.g:631:9: ( exception_package_name DOT )? identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:631:9: ( exception_package_name DOT )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==ID) ) {
                int LA101_1 = input.LA(2);

                if ( (LA101_1==DOT) ) {
                    alt101=1;
                }
            }
            else if ( (LA101_0==DOUBLEQUOTED_STRING) ) {
                int LA101_2 = input.LA(2);

                if ( (LA101_2==DOT) ) {
                    alt101=1;
                }
            }
            switch (alt101) {
                case 1 :
                    // RPIExprWalker.g:631:11: exception_package_name DOT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exception_package_name_in_exception_name4065);
                    exception_package_name419=exception_package_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exception_package_name419.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT420=(CommonTree)match(input,DOT,FOLLOW_DOT_in_exception_name4067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT420_tree = (CommonTree)adaptor.dupNode(DOT420);

                    adaptor.addChild(root_0, DOT420_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_exception_name4072);
            identifier421=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier421.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, exception_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_name"

    public static class exception_package_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_package_name"
    // RPIExprWalker.g:634:1: exception_package_name : identifier ;
    public final RPIExprWalker.exception_package_name_return exception_package_name() throws RecognitionException {
        RPIExprWalker.exception_package_name_return retval = new RPIExprWalker.exception_package_name_return();
        retval.start = input.LT(1);
        int exception_package_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier422 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // RPIExprWalker.g:635:5: ( identifier )
            // RPIExprWalker.g:635:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_exception_package_name4091);
            identifier422=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier422.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, exception_package_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_package_name"

    public static class record_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_declaration"
    // RPIExprWalker.g:644:1: record_declaration : record_type_dec ;
    public final RPIExprWalker.record_declaration_return record_declaration() throws RecognitionException {
        RPIExprWalker.record_declaration_return retval = new RPIExprWalker.record_declaration_return();
        retval.start = input.LT(1);
        int record_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.record_type_dec_return record_type_dec423 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // RPIExprWalker.g:645:5: ( record_type_dec )
            // RPIExprWalker.g:645:9: record_type_dec
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_record_type_dec_in_record_declaration4124);
            record_type_dec423=record_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, record_type_dec423.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, record_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_declaration"

    public static class record_type_dec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_type_dec"
    // RPIExprWalker.g:649:1: record_type_dec : keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMICOLON ;
    public final RPIExprWalker.record_type_dec_return record_type_dec() throws RecognitionException {
        RPIExprWalker.record_type_dec_return retval = new RPIExprWalker.record_type_dec_return();
        retval.start = input.LT(1);
        int record_type_dec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal426=null;
        CommonTree LPAREN428=null;
        CommonTree RPAREN430=null;
        CommonTree SEMICOLON431=null;
        RPIExprWalker.keyTYPE_return keyTYPE424 = null;

        RPIExprWalker.type_name_return type_name425 = null;

        RPIExprWalker.keyRECORD_return keyRECORD427 = null;

        RPIExprWalker.field_specs_return field_specs429 = null;


        CommonTree string_literal426_tree=null;
        CommonTree LPAREN428_tree=null;
        CommonTree RPAREN430_tree=null;
        CommonTree SEMICOLON431_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // RPIExprWalker.g:650:5: ( keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMICOLON )
            // RPIExprWalker.g:650:9: keyTYPE type_name 'IS' keyRECORD LPAREN field_specs RPAREN SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyTYPE_in_record_type_dec4145);
            keyTYPE424=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyTYPE424.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_name_in_record_type_dec4147);
            type_name425=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_name425.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal426=(CommonTree)match(input,111,FOLLOW_111_in_record_type_dec4149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal426_tree = (CommonTree)adaptor.dupNode(string_literal426);

            adaptor.addChild(root_0, string_literal426_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRECORD_in_record_type_dec4151);
            keyRECORD427=keyRECORD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRECORD427.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN428=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_record_type_dec4162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN428_tree = (CommonTree)adaptor.dupNode(LPAREN428);

            adaptor.addChild(root_0, LPAREN428_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_field_specs_in_record_type_dec4164);
            field_specs429=field_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, field_specs429.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN430=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_record_type_dec4166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN430_tree = (CommonTree)adaptor.dupNode(RPAREN430);

            adaptor.addChild(root_0, RPAREN430_tree);
            }
            _last = (CommonTree)input.LT(1);
            SEMICOLON431=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_record_type_dec4168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON431_tree = (CommonTree)adaptor.dupNode(SEMICOLON431);

            adaptor.addChild(root_0, SEMICOLON431_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, record_type_dec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_type_dec"

    public static class field_specs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_specs"
    // RPIExprWalker.g:658:1: field_specs : field_spec ( COMMA field_spec )* ;
    public final RPIExprWalker.field_specs_return field_specs() throws RecognitionException {
        RPIExprWalker.field_specs_return retval = new RPIExprWalker.field_specs_return();
        retval.start = input.LT(1);
        int field_specs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA433=null;
        RPIExprWalker.field_spec_return field_spec432 = null;

        RPIExprWalker.field_spec_return field_spec434 = null;


        CommonTree COMMA433_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // RPIExprWalker.g:659:5: ( field_spec ( COMMA field_spec )* )
            // RPIExprWalker.g:659:9: field_spec ( COMMA field_spec )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_field_spec_in_field_specs4191);
            field_spec432=field_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, field_spec432.getTree());
            // RPIExprWalker.g:659:20: ( COMMA field_spec )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // RPIExprWalker.g:659:22: COMMA field_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA433=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_field_specs4195); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA433_tree = (CommonTree)adaptor.dupNode(COMMA433);

            	    adaptor.addChild(root_0, COMMA433_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_field_spec_in_field_specs4197);
            	    field_spec434=field_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, field_spec434.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, field_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_specs"

    public static class field_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "field_spec"
    // RPIExprWalker.g:661:1: field_spec : column_name type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final RPIExprWalker.field_spec_return field_spec() throws RecognitionException {
        RPIExprWalker.field_spec_return retval = new RPIExprWalker.field_spec_return();
        retval.start = input.LT(1);
        int field_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal437=null;
        CommonTree string_literal438=null;
        CommonTree set439=null;
        RPIExprWalker.column_name_return column_name435 = null;

        RPIExprWalker.type_spec_return type_spec436 = null;

        RPIExprWalker.plsql_expression_return plsql_expression440 = null;


        CommonTree string_literal437_tree=null;
        CommonTree string_literal438_tree=null;
        CommonTree set439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // RPIExprWalker.g:662:5: ( column_name type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // RPIExprWalker.g:662:9: column_name type_spec ( 'NOT' 'NULL' )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_name_in_field_spec4218);
            column_name435=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_name435.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_field_spec4220);
            type_spec436=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec436.getTree());
            // RPIExprWalker.g:663:9: ( 'NOT' 'NULL' )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==NOT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // RPIExprWalker.g:663:10: 'NOT' 'NULL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal437=(CommonTree)match(input,NOT,FOLLOW_NOT_in_field_spec4231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal437_tree = (CommonTree)adaptor.dupNode(string_literal437);

                    adaptor.addChild(root_0, string_literal437_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal438=(CommonTree)match(input,116,FOLLOW_116_in_field_spec4233); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal438_tree = (CommonTree)adaptor.dupNode(string_literal438);

                    adaptor.addChild(root_0, string_literal438_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:664:9: ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==SQL_ASSIGN||LA104_0==117) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // RPIExprWalker.g:664:11: ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    set439=(CommonTree)input.LT(1);
                    if ( input.LA(1)==SQL_ASSIGN||input.LA(1)==117 ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set439_tree = (CommonTree)adaptor.dupNode(set439);

                        adaptor.addChild(root_0, set439_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expression_in_field_spec4258);
                    plsql_expression440=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expression440.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, field_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "field_spec"

    public static class plsql_table_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_table_declaration"
    // RPIExprWalker.g:667:1: plsql_table_declaration : table_type_dec ;
    public final RPIExprWalker.plsql_table_declaration_return plsql_table_declaration() throws RecognitionException {
        RPIExprWalker.plsql_table_declaration_return retval = new RPIExprWalker.plsql_table_declaration_return();
        retval.start = input.LT(1);
        int plsql_table_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.table_type_dec_return table_type_dec441 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // RPIExprWalker.g:668:5: ( table_type_dec )
            // RPIExprWalker.g:668:9: table_type_dec
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_type_dec_in_plsql_table_declaration4279);
            table_type_dec441=table_type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_type_dec441.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, plsql_table_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_table_declaration"

    public static class table_type_dec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_type_dec"
    // RPIExprWalker.g:672:1: table_type_dec : keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMICOLON ;
    public final RPIExprWalker.table_type_dec_return table_type_dec() throws RecognitionException {
        RPIExprWalker.table_type_dec_return retval = new RPIExprWalker.table_type_dec_return();
        retval.start = input.LT(1);
        int table_type_dec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal444=null;
        CommonTree string_literal445=null;
        CommonTree string_literal446=null;
        CommonTree string_literal448=null;
        CommonTree string_literal449=null;
        CommonTree string_literal450=null;
        CommonTree string_literal451=null;
        CommonTree string_literal452=null;
        CommonTree string_literal453=null;
        CommonTree string_literal454=null;
        CommonTree LPAREN455=null;
        CommonTree RPAREN457=null;
        CommonTree SEMICOLON458=null;
        RPIExprWalker.keyTYPE_return keyTYPE442 = null;

        RPIExprWalker.type_name_return type_name443 = null;

        RPIExprWalker.type_spec_return type_spec447 = null;

        RPIExprWalker.integer_return integer456 = null;


        CommonTree string_literal444_tree=null;
        CommonTree string_literal445_tree=null;
        CommonTree string_literal446_tree=null;
        CommonTree string_literal448_tree=null;
        CommonTree string_literal449_tree=null;
        CommonTree string_literal450_tree=null;
        CommonTree string_literal451_tree=null;
        CommonTree string_literal452_tree=null;
        CommonTree string_literal453_tree=null;
        CommonTree string_literal454_tree=null;
        CommonTree LPAREN455_tree=null;
        CommonTree RPAREN457_tree=null;
        CommonTree SEMICOLON458_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // RPIExprWalker.g:673:5: ( keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMICOLON )
            // RPIExprWalker.g:673:9: keyTYPE type_name 'IS' 'TABLE' 'OF' type_spec ( 'NOT' 'NULL' )? ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyTYPE_in_table_type_dec4299);
            keyTYPE442=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyTYPE442.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_name_in_table_type_dec4301);
            type_name443=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_name443.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal444=(CommonTree)match(input,111,FOLLOW_111_in_table_type_dec4303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal444_tree = (CommonTree)adaptor.dupNode(string_literal444);

            adaptor.addChild(root_0, string_literal444_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal445=(CommonTree)match(input,163,FOLLOW_163_in_table_type_dec4305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal445_tree = (CommonTree)adaptor.dupNode(string_literal445);

            adaptor.addChild(root_0, string_literal445_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal446=(CommonTree)match(input,164,FOLLOW_164_in_table_type_dec4316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal446_tree = (CommonTree)adaptor.dupNode(string_literal446);

            adaptor.addChild(root_0, string_literal446_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_table_type_dec4318);
            type_spec447=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec447.getTree());
            // RPIExprWalker.g:674:24: ( 'NOT' 'NULL' )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==NOT) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // RPIExprWalker.g:674:26: 'NOT' 'NULL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal448=(CommonTree)match(input,NOT,FOLLOW_NOT_in_table_type_dec4322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal448_tree = (CommonTree)adaptor.dupNode(string_literal448);

                    adaptor.addChild(root_0, string_literal448_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal449=(CommonTree)match(input,116,FOLLOW_116_in_table_type_dec4324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal449_tree = (CommonTree)adaptor.dupNode(string_literal449);

                    adaptor.addChild(root_0, string_literal449_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:675:9: ( 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN ) )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==165) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // RPIExprWalker.g:675:13: 'INDEX' 'BY' ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal450=(CommonTree)match(input,165,FOLLOW_165_in_table_type_dec4341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal450_tree = (CommonTree)adaptor.dupNode(string_literal450);

                    adaptor.addChild(root_0, string_literal450_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal451=(CommonTree)match(input,166,FOLLOW_166_in_table_type_dec4343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal451_tree = (CommonTree)adaptor.dupNode(string_literal451);

                    adaptor.addChild(root_0, string_literal451_tree);
                    }
                    // RPIExprWalker.g:676:13: ( 'BINARY_INTEGER' | 'PLS_INTEGER' | 'VARCHAR2' LPAREN integer RPAREN )
                    int alt106=3;
                    switch ( input.LA(1) ) {
                    case 122:
                        {
                        alt106=1;
                        }
                        break;
                    case 153:
                        {
                        alt106=2;
                        }
                        break;
                    case 147:
                        {
                        alt106=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }

                    switch (alt106) {
                        case 1 :
                            // RPIExprWalker.g:676:17: 'BINARY_INTEGER'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal452=(CommonTree)match(input,122,FOLLOW_122_in_table_type_dec4362); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal452_tree = (CommonTree)adaptor.dupNode(string_literal452);

                            adaptor.addChild(root_0, string_literal452_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:677:17: 'PLS_INTEGER'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal453=(CommonTree)match(input,153,FOLLOW_153_in_table_type_dec4380); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal453_tree = (CommonTree)adaptor.dupNode(string_literal453);

                            adaptor.addChild(root_0, string_literal453_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:678:17: 'VARCHAR2' LPAREN integer RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal454=(CommonTree)match(input,147,FOLLOW_147_in_table_type_dec4398); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal454_tree = (CommonTree)adaptor.dupNode(string_literal454);

                            adaptor.addChild(root_0, string_literal454_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            LPAREN455=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_table_type_dec4400); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN455_tree = (CommonTree)adaptor.dupNode(LPAREN455);

                            adaptor.addChild(root_0, LPAREN455_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_integer_in_table_type_dec4402);
                            integer456=integer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, integer456.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN457=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_table_type_dec4404); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN457_tree = (CommonTree)adaptor.dupNode(RPAREN457);

                            adaptor.addChild(root_0, RPAREN457_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON458=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_table_type_dec4439); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON458_tree = (CommonTree)adaptor.dupNode(SEMICOLON458);

            adaptor.addChild(root_0, SEMICOLON458_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, table_type_dec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_type_dec"

    public static class table_var_dec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_var_dec"
    // RPIExprWalker.g:684:1: table_var_dec : plsql_table_name type_name SEMICOLON ;
    public final RPIExprWalker.table_var_dec_return table_var_dec() throws RecognitionException {
        RPIExprWalker.table_var_dec_return retval = new RPIExprWalker.table_var_dec_return();
        retval.start = input.LT(1);
        int table_var_dec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree SEMICOLON461=null;
        RPIExprWalker.plsql_table_name_return plsql_table_name459 = null;

        RPIExprWalker.type_name_return type_name460 = null;


        CommonTree SEMICOLON461_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // RPIExprWalker.g:685:5: ( plsql_table_name type_name SEMICOLON )
            // RPIExprWalker.g:685:9: plsql_table_name type_name SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_table_name_in_table_var_dec4458);
            plsql_table_name459=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_table_name459.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_name_in_table_var_dec4460);
            type_name460=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_name460.getTree());
            _last = (CommonTree)input.LT(1);
            SEMICOLON461=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_table_var_dec4462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON461_tree = (CommonTree)adaptor.dupNode(SEMICOLON461);

            adaptor.addChild(root_0, SEMICOLON461_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, table_var_dec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_var_dec"

    public static class plsql_table_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_table_name"
    // RPIExprWalker.g:688:1: plsql_table_name : identifier ( DOT identifier )* ;
    public final RPIExprWalker.plsql_table_name_return plsql_table_name() throws RecognitionException {
        RPIExprWalker.plsql_table_name_return retval = new RPIExprWalker.plsql_table_name_return();
        retval.start = input.LT(1);
        int plsql_table_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT463=null;
        RPIExprWalker.identifier_return identifier462 = null;

        RPIExprWalker.identifier_return identifier464 = null;


        CommonTree DOT463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // RPIExprWalker.g:689:5: ( identifier ( DOT identifier )* )
            // RPIExprWalker.g:689:9: identifier ( DOT identifier )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_plsql_table_name4481);
            identifier462=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier462.getTree());
            // RPIExprWalker.g:689:20: ( DOT identifier )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==DOT) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // RPIExprWalker.g:689:22: DOT identifier
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    DOT463=(CommonTree)match(input,DOT,FOLLOW_DOT_in_plsql_table_name4485); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT463_tree = (CommonTree)adaptor.dupNode(DOT463);

            	    adaptor.addChild(root_0, DOT463_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_identifier_in_plsql_table_name4487);
            	    identifier464=identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, identifier464.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, plsql_table_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_table_name"

    public static class varray_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varray_declaration"
    // RPIExprWalker.g:692:1: varray_declaration : keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? ;
    public final RPIExprWalker.varray_declaration_return varray_declaration() throws RecognitionException {
        RPIExprWalker.varray_declaration_return retval = new RPIExprWalker.varray_declaration_return();
        retval.start = input.LT(1);
        int varray_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal467=null;
        CommonTree LPAREN471=null;
        CommonTree RPAREN473=null;
        CommonTree string_literal474=null;
        CommonTree string_literal476=null;
        CommonTree string_literal477=null;
        RPIExprWalker.keyTYPE_return keyTYPE465 = null;

        RPIExprWalker.type_name_return type_name466 = null;

        RPIExprWalker.keyVARRAY_return keyVARRAY468 = null;

        RPIExprWalker.keyVARYING_return keyVARYING469 = null;

        RPIExprWalker.keyARRAY_return keyARRAY470 = null;

        RPIExprWalker.integer_return integer472 = null;

        RPIExprWalker.type_spec_return type_spec475 = null;


        CommonTree string_literal467_tree=null;
        CommonTree LPAREN471_tree=null;
        CommonTree RPAREN473_tree=null;
        CommonTree string_literal474_tree=null;
        CommonTree string_literal476_tree=null;
        CommonTree string_literal477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // RPIExprWalker.g:693:5: ( keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )? )
            // RPIExprWalker.g:693:9: keyTYPE type_name 'IS' ( keyVARRAY | keyVARYING keyARRAY ) LPAREN integer RPAREN 'OF' type_spec ( 'NOT' 'NULL' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyTYPE_in_varray_declaration4509);
            keyTYPE465=keyTYPE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyTYPE465.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_name_in_varray_declaration4511);
            type_name466=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_name466.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal467=(CommonTree)match(input,111,FOLLOW_111_in_varray_declaration4513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = (CommonTree)adaptor.dupNode(string_literal467);

            adaptor.addChild(root_0, string_literal467_tree);
            }
            // RPIExprWalker.g:694:9: ( keyVARRAY | keyVARYING keyARRAY )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ID) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==LPAREN) ) {
                    alt109=1;
                }
                else if ( (LA109_1==ID) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // RPIExprWalker.g:694:11: keyVARRAY
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyVARRAY_in_varray_declaration4526);
                    keyVARRAY468=keyVARRAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyVARRAY468.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:694:23: keyVARYING keyARRAY
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyVARYING_in_varray_declaration4530);
                    keyVARYING469=keyVARYING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyVARYING469.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyARRAY_in_varray_declaration4532);
                    keyARRAY470=keyARRAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyARRAY470.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            LPAREN471=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_varray_declaration4536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN471_tree = (CommonTree)adaptor.dupNode(LPAREN471);

            adaptor.addChild(root_0, LPAREN471_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_in_varray_declaration4538);
            integer472=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer472.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN473=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_varray_declaration4540); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN473_tree = (CommonTree)adaptor.dupNode(RPAREN473);

            adaptor.addChild(root_0, RPAREN473_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal474=(CommonTree)match(input,164,FOLLOW_164_in_varray_declaration4550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = (CommonTree)adaptor.dupNode(string_literal474);

            adaptor.addChild(root_0, string_literal474_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_varray_declaration4552);
            type_spec475=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec475.getTree());
            // RPIExprWalker.g:695:24: ( 'NOT' 'NULL' )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==NOT) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // RPIExprWalker.g:695:26: 'NOT' 'NULL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal476=(CommonTree)match(input,NOT,FOLLOW_NOT_in_varray_declaration4556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal476_tree = (CommonTree)adaptor.dupNode(string_literal476);

                    adaptor.addChild(root_0, string_literal476_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal477=(CommonTree)match(input,116,FOLLOW_116_in_varray_declaration4558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal477_tree = (CommonTree)adaptor.dupNode(string_literal477);

                    adaptor.addChild(root_0, string_literal477_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, varray_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varray_declaration"

    public static class procedure_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_declaration"
    // RPIExprWalker.g:698:1: procedure_declaration : procedure_body ;
    public final RPIExprWalker.procedure_declaration_return procedure_declaration() throws RecognitionException {
        RPIExprWalker.procedure_declaration_return retval = new RPIExprWalker.procedure_declaration_return();
        retval.start = input.LT(1);
        int procedure_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.procedure_body_return procedure_body478 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // RPIExprWalker.g:699:5: ( procedure_body )
            // RPIExprWalker.g:699:9: procedure_body
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_procedure_body_in_procedure_declaration4580);
            procedure_body478=procedure_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, procedure_body478.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, procedure_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_declaration"

    public static class procedure_body_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_body"
    // RPIExprWalker.g:702:1: procedure_body : ( proc_fun_start )? 'PROCEDURE' procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMICOLON ;
    public final RPIExprWalker.procedure_body_return procedure_body() throws RecognitionException {
        RPIExprWalker.procedure_body_return retval = new RPIExprWalker.procedure_body_return();
        retval.start = input.LT(1);
        int procedure_body_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal480=null;
        CommonTree LPAREN482=null;
        CommonTree COMMA484=null;
        CommonTree RPAREN486=null;
        CommonTree set487=null;
        CommonTree string_literal489=null;
        CommonTree string_literal491=null;
        CommonTree string_literal493=null;
        CommonTree SEMICOLON495=null;
        RPIExprWalker.proc_fun_start_return proc_fun_start479 = null;

        RPIExprWalker.procedure_name_return procedure_name481 = null;

        RPIExprWalker.argument_return argument483 = null;

        RPIExprWalker.argument_return argument485 = null;

        RPIExprWalker.declare_spec_return declare_spec488 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements490 = null;

        RPIExprWalker.exception_handler_return exception_handler492 = null;

        RPIExprWalker.procedure_name_return procedure_name494 = null;


        CommonTree string_literal480_tree=null;
        CommonTree LPAREN482_tree=null;
        CommonTree COMMA484_tree=null;
        CommonTree RPAREN486_tree=null;
        CommonTree set487_tree=null;
        CommonTree string_literal489_tree=null;
        CommonTree string_literal491_tree=null;
        CommonTree string_literal493_tree=null;
        CommonTree SEMICOLON495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // RPIExprWalker.g:703:5: ( ( proc_fun_start )? 'PROCEDURE' procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMICOLON )
            // RPIExprWalker.g:703:9: ( proc_fun_start )? 'PROCEDURE' procedure_name ( LPAREN argument ( COMMA argument )* RPAREN )? ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )* )? 'END' ( procedure_name )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:703:9: ( proc_fun_start )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==110) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // RPIExprWalker.g:703:11: proc_fun_start
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_proc_fun_start_in_procedure_body4601);
                    proc_fun_start479=proc_fun_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, proc_fun_start479.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal480=(CommonTree)match(input,161,FOLLOW_161_in_procedure_body4606); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal480_tree = (CommonTree)adaptor.dupNode(string_literal480);

            root_0 = (CommonTree)adaptor.becomeRoot(string_literal480_tree, root_0);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_procedure_name_in_procedure_body4609);
            procedure_name481=procedure_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, procedure_name481.getTree());
            // RPIExprWalker.g:704:9: ( LPAREN argument ( COMMA argument )* RPAREN )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==LPAREN) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // RPIExprWalker.g:704:11: LPAREN argument ( COMMA argument )* RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN482=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_procedure_body4622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN482_tree = (CommonTree)adaptor.dupNode(LPAREN482);

                    adaptor.addChild(root_0, LPAREN482_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_argument_in_procedure_body4624);
                    argument483=argument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, argument483.getTree());
                    // RPIExprWalker.g:704:27: ( COMMA argument )*
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==COMMA) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    // RPIExprWalker.g:704:29: COMMA argument
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    COMMA484=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_procedure_body4628); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA484_tree = (CommonTree)adaptor.dupNode(COMMA484);

                    	    adaptor.addChild(root_0, COMMA484_tree);
                    	    }
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_argument_in_procedure_body4630);
                    	    argument485=argument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, argument485.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);

                    _last = (CommonTree)input.LT(1);
                    RPAREN486=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_procedure_body4635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN486_tree = (CommonTree)adaptor.dupNode(RPAREN486);

                    adaptor.addChild(root_0, RPAREN486_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            set487=(CommonTree)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();

                if ( state.backtracking==0 ) {
                set487_tree = (CommonTree)adaptor.dupNode(set487);

                adaptor.addChild(root_0, set487_tree);
                }
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprWalker.g:707:9: ( ( declare_spec )=> ( declare_spec )* )
            // RPIExprWalker.g:707:11: ( declare_spec )=> ( declare_spec )*
            {
            // RPIExprWalker.g:707:31: ( declare_spec )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==ID||LA114_0==DOUBLEQUOTED_STRING||LA114_0==110||(LA114_0>=161 && LA114_0<=162)||LA114_0==217) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // RPIExprWalker.g:707:33: declare_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_declare_spec_in_procedure_body4688);
            	    declare_spec488=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, declare_spec488.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:708:9: ( 'BEGIN' )
            // RPIExprWalker.g:708:11: 'BEGIN'
            {
            _last = (CommonTree)input.LT(1);
            string_literal489=(CommonTree)match(input,114,FOLLOW_114_in_procedure_body4705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal489_tree = (CommonTree)adaptor.dupNode(string_literal489);

            adaptor.addChild(root_0, string_literal489_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:709:9: ( seq_of_statements )
            // RPIExprWalker.g:709:11: seq_of_statements
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_procedure_body4719);
            seq_of_statements490=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements490.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:710:9: ( 'EXCEPTION' ( exception_handler )* )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==119) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // RPIExprWalker.g:710:11: 'EXCEPTION' ( exception_handler )*
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal491=(CommonTree)match(input,119,FOLLOW_119_in_procedure_body4733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal491_tree = (CommonTree)adaptor.dupNode(string_literal491);

                    adaptor.addChild(root_0, string_literal491_tree);
                    }
                    // RPIExprWalker.g:710:23: ( exception_handler )*
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( (LA115_0==121) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // RPIExprWalker.g:710:25: exception_handler
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_exception_handler_in_procedure_body4737);
                    	    exception_handler492=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, exception_handler492.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop115;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal493=(CommonTree)match(input,113,FOLLOW_113_in_procedure_body4753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal493_tree = (CommonTree)adaptor.dupNode(string_literal493);

            adaptor.addChild(root_0, string_literal493_tree);
            }
            // RPIExprWalker.g:711:15: ( procedure_name )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==ID||LA117_0==QUOTED_STRING||LA117_0==DOUBLEQUOTED_STRING) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // RPIExprWalker.g:711:17: procedure_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_procedure_name_in_procedure_body4757);
                    procedure_name494=procedure_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, procedure_name494.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON495=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_procedure_body4762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON495_tree = (CommonTree)adaptor.dupNode(SEMICOLON495);

            adaptor.addChild(root_0, SEMICOLON495_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, procedure_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_body"

    public static class begin_block_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "begin_block"
    // RPIExprWalker.g:714:1: begin_block : 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ;
    public final RPIExprWalker.begin_block_return begin_block() throws RecognitionException {
        RPIExprWalker.begin_block_return retval = new RPIExprWalker.begin_block_return();
        retval.start = input.LT(1);
        int begin_block_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal496=null;
        CommonTree string_literal498=null;
        CommonTree string_literal500=null;
        RPIExprWalker.seq_of_statements_return seq_of_statements497 = null;

        RPIExprWalker.exception_handler_return exception_handler499 = null;


        CommonTree string_literal496_tree=null;
        CommonTree string_literal498_tree=null;
        CommonTree string_literal500_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // RPIExprWalker.g:715:5: ( 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' )
            // RPIExprWalker.g:715:9: 'BEGIN' ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal496=(CommonTree)match(input,114,FOLLOW_114_in_begin_block4781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal496_tree = (CommonTree)adaptor.dupNode(string_literal496);

            adaptor.addChild(root_0, string_literal496_tree);
            }
            // RPIExprWalker.g:716:9: ( seq_of_statements )
            // RPIExprWalker.g:716:11: seq_of_statements
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_begin_block4793);
            seq_of_statements497=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements497.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:717:9: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==119) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // RPIExprWalker.g:717:11: 'EXCEPTION' ( exception_handler )+
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal498=(CommonTree)match(input,119,FOLLOW_119_in_begin_block4807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal498_tree = (CommonTree)adaptor.dupNode(string_literal498);

                    adaptor.addChild(root_0, string_literal498_tree);
                    }
                    // RPIExprWalker.g:717:23: ( exception_handler )+
                    int cnt118=0;
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==121) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // RPIExprWalker.g:717:25: exception_handler
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_exception_handler_in_begin_block4811);
                    	    exception_handler499=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, exception_handler499.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt118 >= 1 ) break loop118;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(118, input);
                                throw eee;
                        }
                        cnt118++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal500=(CommonTree)match(input,113,FOLLOW_113_in_begin_block4827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal500_tree = (CommonTree)adaptor.dupNode(string_literal500);

            adaptor.addChild(root_0, string_literal500_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, begin_block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "begin_block"

    public static class exception_handler_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exception_handler"
    // RPIExprWalker.g:722:1: exception_handler : 'WHEN' exception_names 'THEN' seq_of_statements ;
    public final RPIExprWalker.exception_handler_return exception_handler() throws RecognitionException {
        RPIExprWalker.exception_handler_return retval = new RPIExprWalker.exception_handler_return();
        retval.start = input.LT(1);
        int exception_handler_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal501=null;
        CommonTree string_literal503=null;
        RPIExprWalker.exception_names_return exception_names502 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements504 = null;


        CommonTree string_literal501_tree=null;
        CommonTree string_literal503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // RPIExprWalker.g:723:5: ( 'WHEN' exception_names 'THEN' seq_of_statements )
            // RPIExprWalker.g:723:9: 'WHEN' exception_names 'THEN' seq_of_statements
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal501=(CommonTree)match(input,121,FOLLOW_121_in_exception_handler4847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal501_tree = (CommonTree)adaptor.dupNode(string_literal501);

            adaptor.addChild(root_0, string_literal501_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_exception_names_in_exception_handler4849);
            exception_names502=exception_names();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, exception_names502.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal503=(CommonTree)match(input,167,FOLLOW_167_in_exception_handler4851); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal503_tree = (CommonTree)adaptor.dupNode(string_literal503);

            adaptor.addChild(root_0, string_literal503_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_exception_handler4861);
            seq_of_statements504=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements504.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, exception_handler_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exception_handler"

    public static class proc_fun_start_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "proc_fun_start"
    // RPIExprWalker.g:727:1: proc_fun_start : 'CREATE' ( 'OR' keyREPLACE )? ;
    public final RPIExprWalker.proc_fun_start_return proc_fun_start() throws RecognitionException {
        RPIExprWalker.proc_fun_start_return retval = new RPIExprWalker.proc_fun_start_return();
        retval.start = input.LT(1);
        int proc_fun_start_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal505=null;
        CommonTree string_literal506=null;
        RPIExprWalker.keyREPLACE_return keyREPLACE507 = null;


        CommonTree string_literal505_tree=null;
        CommonTree string_literal506_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // RPIExprWalker.g:728:5: ( 'CREATE' ( 'OR' keyREPLACE )? )
            // RPIExprWalker.g:728:9: 'CREATE' ( 'OR' keyREPLACE )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal505=(CommonTree)match(input,110,FOLLOW_110_in_proc_fun_start4880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal505_tree = (CommonTree)adaptor.dupNode(string_literal505);

            adaptor.addChild(root_0, string_literal505_tree);
            }
            // RPIExprWalker.g:728:18: ( 'OR' keyREPLACE )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==OR) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // RPIExprWalker.g:728:20: 'OR' keyREPLACE
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal506=(CommonTree)match(input,OR,FOLLOW_OR_in_proc_fun_start4884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal506_tree = (CommonTree)adaptor.dupNode(string_literal506);

                    adaptor.addChild(root_0, string_literal506_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyREPLACE_in_proc_fun_start4886);
                    keyREPLACE507=keyREPLACE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyREPLACE507.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, proc_fun_start_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "proc_fun_start"

    public static class function_body_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_body"
    // RPIExprWalker.g:731:1: function_body : ( proc_fun_start )? 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMICOLON ;
    public final RPIExprWalker.function_body_return function_body() throws RecognitionException {
        RPIExprWalker.function_body_return retval = new RPIExprWalker.function_body_return();
        retval.start = input.LT(1);
        int function_body_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal509=null;
        CommonTree LPAREN511=null;
        CommonTree RPAREN513=null;
        CommonTree set516=null;
        CommonTree string_literal518=null;
        CommonTree string_literal520=null;
        CommonTree string_literal522=null;
        CommonTree SEMICOLON524=null;
        RPIExprWalker.proc_fun_start_return proc_fun_start508 = null;

        RPIExprWalker.function_name_return function_name510 = null;

        RPIExprWalker.arguments_return arguments512 = null;

        RPIExprWalker.keyRETURN_return keyRETURN514 = null;

        RPIExprWalker.return_type_return return_type515 = null;

        RPIExprWalker.declare_spec_return declare_spec517 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements519 = null;

        RPIExprWalker.exception_handler_return exception_handler521 = null;

        RPIExprWalker.function_name_return function_name523 = null;


        CommonTree string_literal509_tree=null;
        CommonTree LPAREN511_tree=null;
        CommonTree RPAREN513_tree=null;
        CommonTree set516_tree=null;
        CommonTree string_literal518_tree=null;
        CommonTree string_literal520_tree=null;
        CommonTree string_literal522_tree=null;
        CommonTree SEMICOLON524_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // RPIExprWalker.g:732:5: ( ( proc_fun_start )? 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMICOLON )
            // RPIExprWalker.g:732:9: ( proc_fun_start )? 'FUNCTION' function_name ( LPAREN arguments RPAREN )? keyRETURN return_type ( 'IS' | 'AS' ) ( ( declare_spec )=> ( declare_spec )* ) ( 'BEGIN' ) ( seq_of_statements ) ( 'EXCEPTION' ( exception_handler )+ )? 'END' ( function_name )? SEMICOLON
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:732:9: ( proc_fun_start )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==110) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // RPIExprWalker.g:732:11: proc_fun_start
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_proc_fun_start_in_function_body4910);
                    proc_fun_start508=proc_fun_start();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, proc_fun_start508.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal509=(CommonTree)match(input,162,FOLLOW_162_in_function_body4915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal509_tree = (CommonTree)adaptor.dupNode(string_literal509);

            root_0 = (CommonTree)adaptor.becomeRoot(string_literal509_tree, root_0);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_function_name_in_function_body4918);
            function_name510=function_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, function_name510.getTree());
            // RPIExprWalker.g:733:9: ( LPAREN arguments RPAREN )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==LPAREN) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // RPIExprWalker.g:733:11: LPAREN arguments RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN511=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_function_body4931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN511_tree = (CommonTree)adaptor.dupNode(LPAREN511);

                    adaptor.addChild(root_0, LPAREN511_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_arguments_in_function_body4933);
                    arguments512=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, arguments512.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN513=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_function_body4935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN513_tree = (CommonTree)adaptor.dupNode(RPAREN513);

                    adaptor.addChild(root_0, RPAREN513_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRETURN_in_function_body4949);
            keyRETURN514=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRETURN514.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_return_type_in_function_body4951);
            return_type515=return_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, return_type515.getTree());
            _last = (CommonTree)input.LT(1);
            set516=(CommonTree)input.LT(1);
            if ( (input.LA(1)>=111 && input.LA(1)<=112) ) {
                input.consume();

                if ( state.backtracking==0 ) {
                set516_tree = (CommonTree)adaptor.dupNode(set516);

                adaptor.addChild(root_0, set516_tree);
                }
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // RPIExprWalker.g:736:9: ( ( declare_spec )=> ( declare_spec )* )
            // RPIExprWalker.g:736:11: ( declare_spec )=> ( declare_spec )*
            {
            // RPIExprWalker.g:736:31: ( declare_spec )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==ID||LA123_0==DOUBLEQUOTED_STRING||LA123_0==110||(LA123_0>=161 && LA123_0<=162)||LA123_0==217) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // RPIExprWalker.g:736:33: declare_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_declare_spec_in_function_body4992);
            	    declare_spec517=declare_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, declare_spec517.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:737:9: ( 'BEGIN' )
            // RPIExprWalker.g:737:11: 'BEGIN'
            {
            _last = (CommonTree)input.LT(1);
            string_literal518=(CommonTree)match(input,114,FOLLOW_114_in_function_body5009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal518_tree = (CommonTree)adaptor.dupNode(string_literal518);

            adaptor.addChild(root_0, string_literal518_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:738:9: ( seq_of_statements )
            // RPIExprWalker.g:738:11: seq_of_statements
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_function_body5023);
            seq_of_statements519=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements519.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:739:9: ( 'EXCEPTION' ( exception_handler )+ )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==119) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // RPIExprWalker.g:739:11: 'EXCEPTION' ( exception_handler )+
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal520=(CommonTree)match(input,119,FOLLOW_119_in_function_body5037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal520_tree = (CommonTree)adaptor.dupNode(string_literal520);

                    adaptor.addChild(root_0, string_literal520_tree);
                    }
                    // RPIExprWalker.g:739:23: ( exception_handler )+
                    int cnt124=0;
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==121) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // RPIExprWalker.g:739:25: exception_handler
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_exception_handler_in_function_body5041);
                    	    exception_handler521=exception_handler();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, exception_handler521.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt124 >= 1 ) break loop124;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(124, input);
                                throw eee;
                        }
                        cnt124++;
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal522=(CommonTree)match(input,113,FOLLOW_113_in_function_body5057); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal522_tree = (CommonTree)adaptor.dupNode(string_literal522);

            adaptor.addChild(root_0, string_literal522_tree);
            }
            // RPIExprWalker.g:740:15: ( function_name )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ID||LA126_0==QUOTED_STRING||LA126_0==DOUBLEQUOTED_STRING) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // RPIExprWalker.g:740:17: function_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_name_in_function_body5061);
                    function_name523=function_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_name523.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            SEMICOLON524=(CommonTree)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_function_body5066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON524_tree = (CommonTree)adaptor.dupNode(SEMICOLON524);

            adaptor.addChild(root_0, SEMICOLON524_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, function_body_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_body"

    public static class function_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_name"
    // RPIExprWalker.g:743:1: function_name : ( identifier | QUOTED_STRING );
    public final RPIExprWalker.function_name_return function_name() throws RecognitionException {
        RPIExprWalker.function_name_return retval = new RPIExprWalker.function_name_return();
        retval.start = input.LT(1);
        int function_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTED_STRING526=null;
        RPIExprWalker.identifier_return identifier525 = null;


        CommonTree QUOTED_STRING526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // RPIExprWalker.g:744:5: ( identifier | QUOTED_STRING )
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==ID||LA127_0==DOUBLEQUOTED_STRING) ) {
                alt127=1;
            }
            else if ( (LA127_0==QUOTED_STRING) ) {
                alt127=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    // RPIExprWalker.g:744:9: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_identifier_in_function_name5085);
                    identifier525=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, identifier525.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:744:22: QUOTED_STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    QUOTED_STRING526=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_function_name5089); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING526_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING526);

                    adaptor.addChild(root_0, QUOTED_STRING526_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, function_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_name"

    public static class procedure_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "procedure_name"
    // RPIExprWalker.g:747:1: procedure_name : ( identifier | QUOTED_STRING );
    public final RPIExprWalker.procedure_name_return procedure_name() throws RecognitionException {
        RPIExprWalker.procedure_name_return retval = new RPIExprWalker.procedure_name_return();
        retval.start = input.LT(1);
        int procedure_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTED_STRING528=null;
        RPIExprWalker.identifier_return identifier527 = null;


        CommonTree QUOTED_STRING528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // RPIExprWalker.g:748:5: ( identifier | QUOTED_STRING )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ID||LA128_0==DOUBLEQUOTED_STRING) ) {
                alt128=1;
            }
            else if ( (LA128_0==QUOTED_STRING) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // RPIExprWalker.g:748:9: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_identifier_in_procedure_name5109);
                    identifier527=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, identifier527.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:748:22: QUOTED_STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    QUOTED_STRING528=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_procedure_name5113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING528_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING528);

                    adaptor.addChild(root_0, QUOTED_STRING528_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, procedure_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedure_name"

    public static class arguments_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // RPIExprWalker.g:751:1: arguments : argument ( COMMA argument )* ;
    public final RPIExprWalker.arguments_return arguments() throws RecognitionException {
        RPIExprWalker.arguments_return retval = new RPIExprWalker.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA530=null;
        RPIExprWalker.argument_return argument529 = null;

        RPIExprWalker.argument_return argument531 = null;


        CommonTree COMMA530_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // RPIExprWalker.g:752:5: ( argument ( COMMA argument )* )
            // RPIExprWalker.g:752:9: argument ( COMMA argument )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_argument_in_arguments5133);
            argument529=argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, argument529.getTree());
            // RPIExprWalker.g:752:18: ( COMMA argument )*
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==COMMA) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // RPIExprWalker.g:752:20: COMMA argument
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA530=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_arguments5137); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA530_tree = (CommonTree)adaptor.dupNode(COMMA530);

            	    adaptor.addChild(root_0, COMMA530_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_argument_in_arguments5139);
            	    argument531=argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, argument531.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop129;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    public static class argument_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // RPIExprWalker.g:755:1: argument : argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? ;
    public final RPIExprWalker.argument_return argument() throws RecognitionException {
        RPIExprWalker.argument_return retval = new RPIExprWalker.argument_return();
        retval.start = input.LT(1);
        int argument_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal534=null;
        CommonTree string_literal536=null;
        CommonTree set538=null;
        RPIExprWalker.argument_name_return argument_name532 = null;

        RPIExprWalker.keyOUT_return keyOUT533 = null;

        RPIExprWalker.keyOUT_return keyOUT535 = null;

        RPIExprWalker.argument_type_return argument_type537 = null;

        RPIExprWalker.plsql_expression_return plsql_expression539 = null;


        CommonTree string_literal534_tree=null;
        CommonTree string_literal536_tree=null;
        CommonTree set538_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // RPIExprWalker.g:756:5: ( argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )? )
            // RPIExprWalker.g:756:9: argument_name ( keyOUT | 'IN' keyOUT | 'IN' )? ( argument_type )? ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_argument_name_in_argument5161);
            argument_name532=argument_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, argument_name532.getTree());
            // RPIExprWalker.g:756:23: ( keyOUT | 'IN' keyOUT | 'IN' )?
            int alt130=4;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==215) ) {
                alt130=1;
            }
            else if ( (LA130_0==160) ) {
                int LA130_2 = input.LA(2);

                if ( (LA130_2==215) ) {
                    alt130=2;
                }
                else if ( (LA130_2==EOF||LA130_2==ID||LA130_2==RPAREN||LA130_2==COMMA||LA130_2==SQL_ASSIGN||LA130_2==DOUBLEQUOTED_STRING||LA130_2==117||(LA130_2>=122 && LA130_2<=134)||(LA130_2>=137 && LA130_2<=144)||(LA130_2>=146 && LA130_2<=159)) ) {
                    alt130=3;
                }
            }
            switch (alt130) {
                case 1 :
                    // RPIExprWalker.g:756:25: keyOUT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyOUT_in_argument5165);
                    keyOUT533=keyOUT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyOUT533.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:756:34: 'IN' keyOUT
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal534=(CommonTree)match(input,160,FOLLOW_160_in_argument5169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal534_tree = (CommonTree)adaptor.dupNode(string_literal534);

                    adaptor.addChild(root_0, string_literal534_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyOUT_in_argument5171);
                    keyOUT535=keyOUT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyOUT535.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:756:48: 'IN'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal536=(CommonTree)match(input,160,FOLLOW_160_in_argument5175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal536_tree = (CommonTree)adaptor.dupNode(string_literal536);

                    adaptor.addChild(root_0, string_literal536_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:756:56: ( argument_type )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==ID||LA131_0==DOUBLEQUOTED_STRING||(LA131_0>=122 && LA131_0<=134)||(LA131_0>=137 && LA131_0<=144)||(LA131_0>=146 && LA131_0<=159)) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // RPIExprWalker.g:756:57: argument_type
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_argument_type_in_argument5181);
                    argument_type537=argument_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, argument_type537.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:757:9: ( ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==SQL_ASSIGN||LA132_0==117) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // RPIExprWalker.g:757:11: ( SQL_ASSIGN | 'DEFAULT' ) plsql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    set538=(CommonTree)input.LT(1);
                    if ( input.LA(1)==SQL_ASSIGN||input.LA(1)==117 ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set538_tree = (CommonTree)adaptor.dupNode(set538);

                        adaptor.addChild(root_0, set538_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expression_in_argument5206);
                    plsql_expression539=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expression539.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, argument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class argument_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_name"
    // RPIExprWalker.g:760:1: argument_name : identifier ;
    public final RPIExprWalker.argument_name_return argument_name() throws RecognitionException {
        RPIExprWalker.argument_name_return retval = new RPIExprWalker.argument_name_return();
        retval.start = input.LT(1);
        int argument_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier540 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // RPIExprWalker.g:761:5: ( identifier )
            // RPIExprWalker.g:761:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_argument_name5228);
            identifier540=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier540.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, argument_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_name"

    public static class argument_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument_type"
    // RPIExprWalker.g:764:1: argument_type : type_spec ;
    public final RPIExprWalker.argument_type_return argument_type() throws RecognitionException {
        RPIExprWalker.argument_type_return retval = new RPIExprWalker.argument_type_return();
        retval.start = input.LT(1);
        int argument_type_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.type_spec_return type_spec541 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // RPIExprWalker.g:765:5: ( type_spec )
            // RPIExprWalker.g:765:9: type_spec
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_argument_type5247);
            type_spec541=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec541.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, argument_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argument_type"

    public static class value_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "value"
    // RPIExprWalker.g:768:1: value : ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' );
    public final RPIExprWalker.value_return value() throws RecognitionException {
        RPIExprWalker.value_return retval = new RPIExprWalker.value_return();
        retval.start = input.LT(1);
        int value_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set542=null;
        CommonTree NUMBER543=null;
        CommonTree string_literal545=null;
        CommonTree string_literal546=null;
        CommonTree string_literal547=null;
        RPIExprWalker.quoted_string_return quoted_string544 = null;


        CommonTree set542_tree=null;
        CommonTree NUMBER543_tree=null;
        CommonTree string_literal545_tree=null;
        CommonTree string_literal546_tree=null;
        CommonTree string_literal547_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // RPIExprWalker.g:769:5: ( ( PLUS | MINUS )? NUMBER | quoted_string | 'TRUE' | 'FALSE' | 'NULL' )
            int alt134=5;
            switch ( input.LA(1) ) {
            case PLUS:
            case MINUS:
            case NUMBER:
                {
                alt134=1;
                }
                break;
            case QUOTED_STRING:
                {
                alt134=2;
                }
                break;
            case 168:
                {
                alt134=3;
                }
                break;
            case 169:
                {
                alt134=4;
                }
                break;
            case 116:
                {
                alt134=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }

            switch (alt134) {
                case 1 :
                    // RPIExprWalker.g:769:9: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // RPIExprWalker.g:769:9: ( PLUS | MINUS )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( ((LA133_0>=PLUS && LA133_0<=MINUS)) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // RPIExprWalker.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set542=(CommonTree)input.LT(1);
                            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                                input.consume();

                                if ( state.backtracking==0 ) {
                                set542_tree = (CommonTree)adaptor.dupNode(set542);

                                adaptor.addChild(root_0, set542_tree);
                                }
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    NUMBER543=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_value5277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER543_tree = (CommonTree)adaptor.dupNode(NUMBER543);

                    adaptor.addChild(root_0, NUMBER543_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:770:9: quoted_string
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_value5287);
                    quoted_string544=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, quoted_string544.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:771:9: 'TRUE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal545=(CommonTree)match(input,168,FOLLOW_168_in_value5297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal545_tree = (CommonTree)adaptor.dupNode(string_literal545);

                    adaptor.addChild(root_0, string_literal545_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:771:18: 'FALSE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal546=(CommonTree)match(input,169,FOLLOW_169_in_value5301); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal546_tree = (CommonTree)adaptor.dupNode(string_literal546);

                    adaptor.addChild(root_0, string_literal546_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:772:9: 'NULL'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal547=(CommonTree)match(input,116,FOLLOW_116_in_value5311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal547_tree = (CommonTree)adaptor.dupNode(string_literal547);

                    adaptor.addChild(root_0, string_literal547_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, value_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "value"

    public static class return_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_type"
    // RPIExprWalker.g:775:1: return_type : type_spec ;
    public final RPIExprWalker.return_type_return return_type() throws RecognitionException {
        RPIExprWalker.return_type_return retval = new RPIExprWalker.return_type_return();
        retval.start = input.LT(1);
        int return_type_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.type_spec_return type_spec548 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // RPIExprWalker.g:776:5: ( type_spec )
            // RPIExprWalker.g:776:9: type_spec
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_spec_in_return_type5330);
            type_spec548=type_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_spec548.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, return_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_type"

    public static class function_declaration_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_declaration"
    // RPIExprWalker.g:779:1: function_declaration : function_body ;
    public final RPIExprWalker.function_declaration_return function_declaration() throws RecognitionException {
        RPIExprWalker.function_declaration_return retval = new RPIExprWalker.function_declaration_return();
        retval.start = input.LT(1);
        int function_declaration_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.function_body_return function_body549 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // RPIExprWalker.g:780:5: ( function_body )
            // RPIExprWalker.g:780:9: function_body
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_function_body_in_function_declaration5349);
            function_body549=function_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, function_body549.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, function_declaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_declaration"

    public static class function_call_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_call"
    // RPIExprWalker.g:783:1: function_call returns [StringBuffer value] : user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? ;
    public final RPIExprWalker.function_call_return function_call() throws RecognitionException {
        RPIExprWalker.function_call_return retval = new RPIExprWalker.function_call_return();
        retval.start = input.LT(1);
        int function_call_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN551=null;
        CommonTree RPAREN553=null;
        RPIExprWalker.user_defined_function_return user_defined_function550 = null;

        RPIExprWalker.call_parameters_return call_parameters552 = null;


        CommonTree LPAREN551_tree=null;
        CommonTree RPAREN553_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // RPIExprWalker.g:784:5: ( user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )? )
            // RPIExprWalker.g:784:9: user_defined_function ({...}? LPAREN ( call_parameters )? RPAREN )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_user_defined_function_in_function_call5372);
            user_defined_function550=user_defined_function();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, user_defined_function550.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (user_defined_function550!=null?user_defined_function550.value:null).toString().trim());
            }
            // RPIExprWalker.g:785:9: ({...}? LPAREN ( call_parameters )? RPAREN )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==LPAREN) ) {
                int LA136_1 = input.LA(2);

                if ( ((synpred259_RPIExprWalker()&&( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ))) ) {
                    alt136=1;
                }
            }
            switch (alt136) {
                case 1 :
                    // RPIExprWalker.g:785:11: {...}? LPAREN ( call_parameters )? RPAREN
                    {
                    if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "function_call", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
                    }
                    _last = (CommonTree)input.LT(1);
                    LPAREN551=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_function_call5398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN551_tree = (CommonTree)adaptor.dupNode(LPAREN551);

                    adaptor.addChild(root_0, LPAREN551_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" (");
                    }
                    // RPIExprWalker.g:786:39: ( call_parameters )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( ((LA135_0>=SUBSTR && LA135_0<=TO_CHAR)||LA135_0==TRIM||(LA135_0>=ID && LA135_0<=LPAREN)||(LA135_0>=SQL && LA135_0<=MINUS)||LA135_0==NUMBER||LA135_0==NOT||LA135_0==QUOTED_STRING||LA135_0==DOUBLEQUOTED_STRING||LA135_0==116||LA135_0==158||(LA135_0>=168 && LA135_0<=169)||(LA135_0>=174 && LA135_0<=175)||LA135_0==198) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // RPIExprWalker.g:786:41: call_parameters
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_call_parameters_in_function_call5404);
                            call_parameters552=call_parameters();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, call_parameters552.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (call_parameters552!=null?(input.getTokenStream().toString(
                                input.getTreeAdaptor().getTokenStartIndex(call_parameters552.start),
                                input.getTreeAdaptor().getTokenStopIndex(call_parameters552.start))):null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN553=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_function_call5419); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN553_tree = (CommonTree)adaptor.dupNode(RPAREN553);

                    adaptor.addChild(root_0, RPAREN553_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, function_call_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_call"

    public static class collection_function_call_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "collection_function_call"
    // RPIExprWalker.g:795:1: collection_function_call : plsql_table_name ;
    public final RPIExprWalker.collection_function_call_return collection_function_call() throws RecognitionException {
        RPIExprWalker.collection_function_call_return retval = new RPIExprWalker.collection_function_call_return();
        retval.start = input.LT(1);
        int collection_function_call_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.plsql_table_name_return plsql_table_name554 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // RPIExprWalker.g:796:5: ( plsql_table_name )
            // RPIExprWalker.g:796:9: plsql_table_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_table_name_in_collection_function_call5447);
            plsql_table_name554=plsql_table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_table_name554.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, collection_function_call_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "collection_function_call"

    public static class variable_names_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_names"
    // RPIExprWalker.g:799:1: variable_names : variable_name ( COMMA variable_name )* ;
    public final RPIExprWalker.variable_names_return variable_names() throws RecognitionException {
        RPIExprWalker.variable_names_return retval = new RPIExprWalker.variable_names_return();
        retval.start = input.LT(1);
        int variable_names_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA556=null;
        RPIExprWalker.variable_name_return variable_name555 = null;

        RPIExprWalker.variable_name_return variable_name557 = null;


        CommonTree COMMA556_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // RPIExprWalker.g:800:5: ( variable_name ( COMMA variable_name )* )
            // RPIExprWalker.g:800:9: variable_name ( COMMA variable_name )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_variable_name_in_variable_names5466);
            variable_name555=variable_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, variable_name555.getTree());
            // RPIExprWalker.g:800:23: ( COMMA variable_name )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==COMMA) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // RPIExprWalker.g:800:25: COMMA variable_name
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA556=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_variable_names5470); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA556_tree = (CommonTree)adaptor.dupNode(COMMA556);

            	    adaptor.addChild(root_0, COMMA556_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_variable_name_in_variable_names5472);
            	    variable_name557=variable_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, variable_name557.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, variable_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_names"

    public static class variable_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_name"
    // RPIExprWalker.g:802:1: variable_name : identifier ;
    public final RPIExprWalker.variable_name_return variable_name() throws RecognitionException {
        RPIExprWalker.variable_name_return retval = new RPIExprWalker.variable_name_return();
        retval.start = input.LT(1);
        int variable_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier558 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // RPIExprWalker.g:803:5: ( identifier )
            // RPIExprWalker.g:803:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_variable_name5493);
            identifier558=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier558.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, variable_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_name"

    public static class null_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "null_statement"
    // RPIExprWalker.g:806:1: null_statement : 'NULL' ;
    public final RPIExprWalker.null_statement_return null_statement() throws RecognitionException {
        RPIExprWalker.null_statement_return retval = new RPIExprWalker.null_statement_return();
        retval.start = input.LT(1);
        int null_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal559=null;

        CommonTree string_literal559_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // RPIExprWalker.g:807:5: ( 'NULL' )
            // RPIExprWalker.g:807:9: 'NULL'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal559=(CommonTree)match(input,116,FOLLOW_116_in_null_statement5512); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal559_tree = (CommonTree)adaptor.dupNode(string_literal559);

            adaptor.addChild(root_0, string_literal559_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, null_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "null_statement"

    public static class raise_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_statement"
    // RPIExprWalker.g:810:1: raise_statement : keyRAISE ( exception_name )? ;
    public final RPIExprWalker.raise_statement_return raise_statement() throws RecognitionException {
        RPIExprWalker.raise_statement_return retval = new RPIExprWalker.raise_statement_return();
        retval.start = input.LT(1);
        int raise_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyRAISE_return keyRAISE560 = null;

        RPIExprWalker.exception_name_return exception_name561 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // RPIExprWalker.g:811:5: ( keyRAISE ( exception_name )? )
            // RPIExprWalker.g:811:9: keyRAISE ( exception_name )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRAISE_in_raise_statement5532);
            keyRAISE560=keyRAISE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRAISE560.getTree());
            // RPIExprWalker.g:811:18: ( exception_name )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ID||LA138_0==DOUBLEQUOTED_STRING) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // RPIExprWalker.g:811:20: exception_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_exception_name_in_raise_statement5536);
                    exception_name561=exception_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, exception_name561.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, raise_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raise_statement"

    public static class return_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_statement"
    // RPIExprWalker.g:814:1: return_statement : keyRETURN ( plsql_expression )? ;
    public final RPIExprWalker.return_statement_return return_statement() throws RecognitionException {
        RPIExprWalker.return_statement_return retval = new RPIExprWalker.return_statement_return();
        retval.start = input.LT(1);
        int return_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyRETURN_return keyRETURN562 = null;

        RPIExprWalker.plsql_expression_return plsql_expression563 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // RPIExprWalker.g:815:5: ( keyRETURN ( plsql_expression )? )
            // RPIExprWalker.g:815:9: keyRETURN ( plsql_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRETURN_in_return_statement5562);
            keyRETURN562=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRETURN562.getTree());
            // RPIExprWalker.g:815:19: ( plsql_expression )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( ((LA139_0>=SUBSTR && LA139_0<=TO_CHAR)||LA139_0==TRIM||(LA139_0>=ID && LA139_0<=LPAREN)||(LA139_0>=SQL && LA139_0<=MINUS)||LA139_0==NUMBER||LA139_0==NOT||LA139_0==QUOTED_STRING||LA139_0==DOUBLEQUOTED_STRING||LA139_0==116||LA139_0==158||(LA139_0>=168 && LA139_0<=169)||(LA139_0>=174 && LA139_0<=175)||LA139_0==198) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // RPIExprWalker.g:815:21: plsql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expression_in_return_statement5566);
                    plsql_expression563=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expression563.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, return_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_statement"

    public static class loop_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "loop_statement"
    // RPIExprWalker.g:818:1: loop_statement : ( LLABEL label_name RLABEL )? ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? ;
    public final RPIExprWalker.loop_statement_return loop_statement() throws RecognitionException {
        RPIExprWalker.loop_statement_return retval = new RPIExprWalker.loop_statement_return();
        retval.start = input.LT(1);
        int loop_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LLABEL564=null;
        CommonTree RLABEL566=null;
        CommonTree string_literal569=null;
        CommonTree string_literal574=null;
        RPIExprWalker.label_name_return label_name565 = null;

        RPIExprWalker.keyWHILE_return keyWHILE567 = null;

        RPIExprWalker.plsql_condition_return plsql_condition568 = null;

        RPIExprWalker.numeric_loop_param_return numeric_loop_param570 = null;

        RPIExprWalker.cursor_loop_param_return cursor_loop_param571 = null;

        RPIExprWalker.keyLOOP_return keyLOOP572 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements573 = null;

        RPIExprWalker.keyLOOP_return keyLOOP575 = null;

        RPIExprWalker.label_name_return label_name576 = null;


        CommonTree LLABEL564_tree=null;
        CommonTree RLABEL566_tree=null;
        CommonTree string_literal569_tree=null;
        CommonTree string_literal574_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // RPIExprWalker.g:819:5: ( ( LLABEL label_name RLABEL )? ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )? )
            // RPIExprWalker.g:819:9: ( LLABEL label_name RLABEL )? ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )? keyLOOP seq_of_statements 'END' keyLOOP ( label_name )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:819:9: ( LLABEL label_name RLABEL )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==LLABEL) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // RPIExprWalker.g:819:11: LLABEL label_name RLABEL
                    {
                    _last = (CommonTree)input.LT(1);
                    LLABEL564=(CommonTree)match(input,LLABEL,FOLLOW_LLABEL_in_loop_statement5590); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LLABEL564_tree = (CommonTree)adaptor.dupNode(LLABEL564);

                    adaptor.addChild(root_0, LLABEL564_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_loop_statement5592);
                    label_name565=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name565.getTree());
                    _last = (CommonTree)input.LT(1);
                    RLABEL566=(CommonTree)match(input,RLABEL,FOLLOW_RLABEL_in_loop_statement5594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RLABEL566_tree = (CommonTree)adaptor.dupNode(RLABEL566);

                    adaptor.addChild(root_0, RLABEL566_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:820:9: ( keyWHILE plsql_condition | ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) ) )?
            int alt142=3;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==223) ) {
                alt142=1;
            }
            else if ( (LA142_0==170) ) {
                alt142=2;
            }
            switch (alt142) {
                case 1 :
                    // RPIExprWalker.g:820:13: keyWHILE plsql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyWHILE_in_loop_statement5611);
                    keyWHILE567=keyWHILE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) root_0 = (CommonTree)adaptor.becomeRoot(keyWHILE567.getTree(), root_0);
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_condition_in_loop_statement5614);
                    plsql_condition568=plsql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_condition568.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:821:13: ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                    {
                    // RPIExprWalker.g:821:13: ( 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param ) )
                    // RPIExprWalker.g:821:17: 'FOR' ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal569=(CommonTree)match(input,170,FOLLOW_170_in_loop_statement5632); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal569_tree = (CommonTree)adaptor.dupNode(string_literal569);

                    root_0 = (CommonTree)adaptor.becomeRoot(string_literal569_tree, root_0);
                    }
                    // RPIExprWalker.g:822:17: ( ( numeric_loop_param )=> numeric_loop_param | ( cursor_loop_param )=> cursor_loop_param )
                    int alt141=2;
                    int LA141_0 = input.LA(1);

                    if ( (LA141_0==ID) ) {
                        int LA141_1 = input.LA(2);

                        if ( (synpred265_RPIExprWalker()) ) {
                            alt141=1;
                        }
                        else if ( (synpred266_RPIExprWalker()) ) {
                            alt141=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 141, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA141_0==DOUBLEQUOTED_STRING) ) {
                        int LA141_2 = input.LA(2);

                        if ( (synpred265_RPIExprWalker()) ) {
                            alt141=1;
                        }
                        else if ( (synpred266_RPIExprWalker()) ) {
                            alt141=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 141, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 0, input);

                        throw nvae;
                    }
                    switch (alt141) {
                        case 1 :
                            // RPIExprWalker.g:822:21: ( numeric_loop_param )=> numeric_loop_param
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_numeric_loop_param_in_loop_statement5663);
                            numeric_loop_param570=numeric_loop_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, numeric_loop_param570.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:823:21: ( cursor_loop_param )=> cursor_loop_param
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_cursor_loop_param_in_loop_statement5693);
                            cursor_loop_param571=cursor_loop_param();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, cursor_loop_param571.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyLOOP_in_loop_statement5747);
            keyLOOP572=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyLOOP572.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_loop_statement5757);
            seq_of_statements573=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements573.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal574=(CommonTree)match(input,113,FOLLOW_113_in_loop_statement5767); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal574_tree = (CommonTree)adaptor.dupNode(string_literal574);

            adaptor.addChild(root_0, string_literal574_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyLOOP_in_loop_statement5769);
            keyLOOP575=keyLOOP();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyLOOP575.getTree());
            // RPIExprWalker.g:830:9: ( label_name )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==ID||LA143_0==DOUBLEQUOTED_STRING) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // RPIExprWalker.g:830:11: label_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_loop_statement5782);
                    label_name576=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name576.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, loop_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loop_statement"

    public static class numeric_loop_param_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numeric_loop_param"
    // RPIExprWalker.g:833:1: numeric_loop_param : index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr ;
    public final RPIExprWalker.numeric_loop_param_return numeric_loop_param() throws RecognitionException {
        RPIExprWalker.numeric_loop_param_return retval = new RPIExprWalker.numeric_loop_param_return();
        retval.start = input.LT(1);
        int numeric_loop_param_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal578=null;
        CommonTree DOUBLEDOT581=null;
        RPIExprWalker.index_name_return index_name577 = null;

        RPIExprWalker.keyREVERSE_return keyREVERSE579 = null;

        RPIExprWalker.integer_expr_return integer_expr580 = null;

        RPIExprWalker.integer_expr_return integer_expr582 = null;


        CommonTree string_literal578_tree=null;
        CommonTree DOUBLEDOT581_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // RPIExprWalker.g:834:5: ( index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr )
            // RPIExprWalker.g:834:9: index_name 'IN' ( keyREVERSE )? integer_expr DOUBLEDOT integer_expr
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_index_name_in_numeric_loop_param5804);
            index_name577=index_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, index_name577.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal578=(CommonTree)match(input,160,FOLLOW_160_in_numeric_loop_param5806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal578_tree = (CommonTree)adaptor.dupNode(string_literal578);

            adaptor.addChild(root_0, string_literal578_tree);
            }
            // RPIExprWalker.g:834:25: ( keyREVERSE )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==ID) ) {
                int LA144_1 = input.LA(2);

                if ( ((synpred269_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REVERSE")))) ) {
                    alt144=1;
                }
            }
            switch (alt144) {
                case 1 :
                    // RPIExprWalker.g:834:27: keyREVERSE
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyREVERSE_in_numeric_loop_param5810);
                    keyREVERSE579=keyREVERSE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyREVERSE579.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param5815);
            integer_expr580=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer_expr580.getTree());
            _last = (CommonTree)input.LT(1);
            DOUBLEDOT581=(CommonTree)match(input,DOUBLEDOT,FOLLOW_DOUBLEDOT_in_numeric_loop_param5817); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOUBLEDOT581_tree = (CommonTree)adaptor.dupNode(DOUBLEDOT581);

            adaptor.addChild(root_0, DOUBLEDOT581_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_expr_in_numeric_loop_param5819);
            integer_expr582=integer_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer_expr582.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, numeric_loop_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "numeric_loop_param"

    public static class index_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "index_name"
    // RPIExprWalker.g:837:1: index_name : identifier ;
    public final RPIExprWalker.index_name_return index_name() throws RecognitionException {
        RPIExprWalker.index_name_return retval = new RPIExprWalker.index_name_return();
        retval.start = input.LT(1);
        int index_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier583 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // RPIExprWalker.g:838:5: ( identifier )
            // RPIExprWalker.g:838:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_index_name5838);
            identifier583=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier583.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, index_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "index_name"

    public static class integer_expr_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer_expr"
    // RPIExprWalker.g:842:1: integer_expr returns [StringBuffer value] : sql_expression ;
    public final RPIExprWalker.integer_expr_return integer_expr() throws RecognitionException {
        RPIExprWalker.integer_expr_return retval = new RPIExprWalker.integer_expr_return();
        retval.start = input.LT(1);
        int integer_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_expression_return sql_expression584 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // RPIExprWalker.g:843:5: ( sql_expression )
            // RPIExprWalker.g:843:9: sql_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_integer_expr5862);
            sql_expression584=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression584.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer((sql_expression584!=null?sql_expression584.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, integer_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integer_expr"

    public static class cursor_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_name"
    // RPIExprWalker.g:846:1: cursor_name : identifier ;
    public final RPIExprWalker.cursor_name_return cursor_name() throws RecognitionException {
        RPIExprWalker.cursor_name_return retval = new RPIExprWalker.cursor_name_return();
        retval.start = input.LT(1);
        int cursor_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier585 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // RPIExprWalker.g:847:5: ( identifier )
            // RPIExprWalker.g:847:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_cursor_name5883);
            identifier585=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier585.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, cursor_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_name"

    public static class cursor_loop_param_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_loop_param"
    // RPIExprWalker.g:850:1: cursor_loop_param : record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) ;
    public final RPIExprWalker.cursor_loop_param_return cursor_loop_param() throws RecognitionException {
        RPIExprWalker.cursor_loop_param_return retval = new RPIExprWalker.cursor_loop_param_return();
        retval.start = input.LT(1);
        int cursor_loop_param_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal587=null;
        CommonTree LPAREN589=null;
        CommonTree RPAREN591=null;
        CommonTree LPAREN592=null;
        CommonTree RPAREN594=null;
        RPIExprWalker.record_name_return record_name586 = null;

        RPIExprWalker.cursor_name_return cursor_name588 = null;

        RPIExprWalker.plsql_expressions_return plsql_expressions590 = null;

        RPIExprWalker.select_statement_return select_statement593 = null;


        CommonTree string_literal587_tree=null;
        CommonTree LPAREN589_tree=null;
        CommonTree RPAREN591_tree=null;
        CommonTree LPAREN592_tree=null;
        CommonTree RPAREN594_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // RPIExprWalker.g:851:5: ( record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN ) )
            // RPIExprWalker.g:851:9: record_name 'IN' ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_record_name_in_cursor_loop_param5902);
            record_name586=record_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, record_name586.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal587=(CommonTree)match(input,160,FOLLOW_160_in_cursor_loop_param5904); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal587_tree = (CommonTree)adaptor.dupNode(string_literal587);

            adaptor.addChild(root_0, string_literal587_tree);
            }
            // RPIExprWalker.g:852:9: ( cursor_name ( LPAREN plsql_expressions RPAREN )? | LPAREN select_statement RPAREN )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==ID||LA146_0==DOUBLEQUOTED_STRING) ) {
                alt146=1;
            }
            else if ( (LA146_0==LPAREN) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // RPIExprWalker.g:852:13: cursor_name ( LPAREN plsql_expressions RPAREN )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cursor_name_in_cursor_loop_param5918);
                    cursor_name588=cursor_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cursor_name588.getTree());
                    // RPIExprWalker.g:852:25: ( LPAREN plsql_expressions RPAREN )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==LPAREN) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // RPIExprWalker.g:852:27: LPAREN plsql_expressions RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN589=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param5922); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN589_tree = (CommonTree)adaptor.dupNode(LPAREN589);

                            adaptor.addChild(root_0, LPAREN589_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_plsql_expressions_in_cursor_loop_param5924);
                            plsql_expressions590=plsql_expressions();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, plsql_expressions590.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN591=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param5926); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN591_tree = (CommonTree)adaptor.dupNode(RPAREN591);

                            adaptor.addChild(root_0, RPAREN591_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:853:13: LPAREN select_statement RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN592=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_loop_param5943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN592_tree = (CommonTree)adaptor.dupNode(LPAREN592);

                    adaptor.addChild(root_0, LPAREN592_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_select_statement_in_cursor_loop_param5945);
                    select_statement593=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, select_statement593.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN594=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_loop_param5947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN594_tree = (CommonTree)adaptor.dupNode(RPAREN594);

                    adaptor.addChild(root_0, RPAREN594_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, cursor_loop_param_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_loop_param"

    public static class record_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "record_name"
    // RPIExprWalker.g:857:1: record_name : identifier ;
    public final RPIExprWalker.record_name_return record_name() throws RecognitionException {
        RPIExprWalker.record_name_return retval = new RPIExprWalker.record_name_return();
        retval.start = input.LT(1);
        int record_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier595 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // RPIExprWalker.g:858:5: ( identifier )
            // RPIExprWalker.g:858:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_record_name5976);
            identifier595=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier595.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, record_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "record_name"

    public static class commit_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "commit_statement"
    // RPIExprWalker.g:861:1: commit_statement : 'COMMIT' ;
    public final RPIExprWalker.commit_statement_return commit_statement() throws RecognitionException {
        RPIExprWalker.commit_statement_return retval = new RPIExprWalker.commit_statement_return();
        retval.start = input.LT(1);
        int commit_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal596=null;

        CommonTree string_literal596_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // RPIExprWalker.g:862:5: ( 'COMMIT' )
            // RPIExprWalker.g:862:9: 'COMMIT'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal596=(CommonTree)match(input,171,FOLLOW_171_in_commit_statement5995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal596_tree = (CommonTree)adaptor.dupNode(string_literal596);

            adaptor.addChild(root_0, string_literal596_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, commit_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "commit_statement"

    public static class if_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_statement"
    // RPIExprWalker.g:865:1: if_statement : 'IF' plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' ;
    public final RPIExprWalker.if_statement_return if_statement() throws RecognitionException {
        RPIExprWalker.if_statement_return retval = new RPIExprWalker.if_statement_return();
        retval.start = input.LT(1);
        int if_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal597=null;
        CommonTree string_literal599=null;
        CommonTree string_literal603=null;
        CommonTree string_literal605=null;
        CommonTree string_literal607=null;
        CommonTree string_literal608=null;
        RPIExprWalker.plsql_condition_return plsql_condition598 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements600 = null;

        RPIExprWalker.keyELSIF_return keyELSIF601 = null;

        RPIExprWalker.plsql_condition_return plsql_condition602 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements604 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements606 = null;


        CommonTree string_literal597_tree=null;
        CommonTree string_literal599_tree=null;
        CommonTree string_literal603_tree=null;
        CommonTree string_literal605_tree=null;
        CommonTree string_literal607_tree=null;
        CommonTree string_literal608_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // RPIExprWalker.g:866:5: ( 'IF' plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF' )
            // RPIExprWalker.g:866:9: 'IF' plsql_condition 'THEN' seq_of_statements ( keyELSIF plsql_condition 'THEN' seq_of_statements )* ( 'ELSE' seq_of_statements )? 'END' 'IF'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal597=(CommonTree)match(input,172,FOLLOW_172_in_if_statement6014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal597_tree = (CommonTree)adaptor.dupNode(string_literal597);

            root_0 = (CommonTree)adaptor.becomeRoot(string_literal597_tree, root_0);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_condition_in_if_statement6017);
            plsql_condition598=plsql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_condition598.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal599=(CommonTree)match(input,167,FOLLOW_167_in_if_statement6019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal599_tree = (CommonTree)adaptor.dupNode(string_literal599);

            adaptor.addChild(root_0, string_literal599_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_if_statement6021);
            seq_of_statements600=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements600.getTree());
            // RPIExprWalker.g:867:9: ( keyELSIF plsql_condition 'THEN' seq_of_statements )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==213) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // RPIExprWalker.g:868:13: keyELSIF plsql_condition 'THEN' seq_of_statements
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_keyELSIF_in_if_statement6048);
            	    keyELSIF601=keyELSIF();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, keyELSIF601.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_plsql_condition_in_if_statement6050);
            	    plsql_condition602=plsql_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, plsql_condition602.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    string_literal603=(CommonTree)match(input,167,FOLLOW_167_in_if_statement6052); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal603_tree = (CommonTree)adaptor.dupNode(string_literal603);

            	    adaptor.addChild(root_0, string_literal603_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_seq_of_statements_in_if_statement6054);
            	    seq_of_statements604=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, seq_of_statements604.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);

            // RPIExprWalker.g:870:9: ( 'ELSE' seq_of_statements )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==173) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // RPIExprWalker.g:870:11: 'ELSE' seq_of_statements
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal605=(CommonTree)match(input,173,FOLLOW_173_in_if_statement6077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal605_tree = (CommonTree)adaptor.dupNode(string_literal605);

                    adaptor.addChild(root_0, string_literal605_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_seq_of_statements_in_if_statement6079);
                    seq_of_statements606=seq_of_statements();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, seq_of_statements606.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal607=(CommonTree)match(input,113,FOLLOW_113_in_if_statement6092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal607_tree = (CommonTree)adaptor.dupNode(string_literal607);

            adaptor.addChild(root_0, string_literal607_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal608=(CommonTree)match(input,172,FOLLOW_172_in_if_statement6094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal608_tree = (CommonTree)adaptor.dupNode(string_literal608);

            adaptor.addChild(root_0, string_literal608_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, if_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "if_statement"

    public static class sql_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_statement"
    // RPIExprWalker.g:874:1: sql_statement : sql_command ;
    public final RPIExprWalker.sql_statement_return sql_statement() throws RecognitionException {
        RPIExprWalker.sql_statement_return retval = new RPIExprWalker.sql_statement_return();
        retval.start = input.LT(1);
        int sql_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_command_return sql_command609 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // RPIExprWalker.g:875:5: ( sql_command )
            // RPIExprWalker.g:875:9: sql_command
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_command_in_sql_statement6113);
            sql_command609=sql_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_command609.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, sql_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_statement"

    public static class sql_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_command"
    // RPIExprWalker.g:878:1: sql_command : ( to_modify_data | to_control_data );
    public final RPIExprWalker.sql_command_return sql_command() throws RecognitionException {
        RPIExprWalker.sql_command_return retval = new RPIExprWalker.sql_command_return();
        retval.start = input.LT(1);
        int sql_command_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.to_modify_data_return to_modify_data610 = null;

        RPIExprWalker.to_control_data_return to_control_data611 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // RPIExprWalker.g:879:5: ( to_modify_data | to_control_data )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==145||LA149_0==174||LA149_0==190||LA149_0==201||LA149_0==203) ) {
                alt149=1;
            }
            else if ( (LA149_0==ID||LA149_0==171||(LA149_0>=205 && LA149_0<=206)||LA149_0==211||LA149_0==222) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // RPIExprWalker.g:879:9: to_modify_data
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_to_modify_data_in_sql_command6132);
                    to_modify_data610=to_modify_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, to_modify_data610.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:880:9: to_control_data
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_to_control_data_in_sql_command6142);
                    to_control_data611=to_control_data();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, to_control_data611.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, sql_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_command"

    public static class to_modify_data_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_modify_data"
    // RPIExprWalker.g:883:1: to_modify_data : ( select_command | insert_command | update_command | delete_command | set_transaction_command );
    public final RPIExprWalker.to_modify_data_return to_modify_data() throws RecognitionException {
        RPIExprWalker.to_modify_data_return retval = new RPIExprWalker.to_modify_data_return();
        retval.start = input.LT(1);
        int to_modify_data_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.select_command_return select_command612 = null;

        RPIExprWalker.insert_command_return insert_command613 = null;

        RPIExprWalker.update_command_return update_command614 = null;

        RPIExprWalker.delete_command_return delete_command615 = null;

        RPIExprWalker.set_transaction_command_return set_transaction_command616 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // RPIExprWalker.g:884:5: ( select_command | insert_command | update_command | delete_command | set_transaction_command )
            int alt150=5;
            switch ( input.LA(1) ) {
            case 174:
                {
                alt150=1;
                }
                break;
            case 203:
                {
                alt150=2;
                }
                break;
            case 190:
                {
                alt150=3;
                }
                break;
            case 201:
                {
                alt150=4;
                }
                break;
            case 145:
                {
                alt150=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }

            switch (alt150) {
                case 1 :
                    // RPIExprWalker.g:884:9: select_command
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_select_command_in_to_modify_data6161);
                    select_command612=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, select_command612.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:885:9: insert_command
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_insert_command_in_to_modify_data6171);
                    insert_command613=insert_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, insert_command613.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:886:9: update_command
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_update_command_in_to_modify_data6181);
                    update_command614=update_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, update_command614.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:887:9: delete_command
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_delete_command_in_to_modify_data6191);
                    delete_command615=delete_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, delete_command615.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:888:9: set_transaction_command
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_set_transaction_command_in_to_modify_data6201);
                    set_transaction_command616=set_transaction_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, set_transaction_command616.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, to_modify_data_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_modify_data"

    public static class to_control_data_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "to_control_data"
    // RPIExprWalker.g:891:1: to_control_data : ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement );
    public final RPIExprWalker.to_control_data_return to_control_data() throws RecognitionException {
        RPIExprWalker.to_control_data_return retval = new RPIExprWalker.to_control_data_return();
        retval.start = input.LT(1);
        int to_control_data_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.close_statement_return close_statement617 = null;

        RPIExprWalker.commit_statement_return commit_statement618 = null;

        RPIExprWalker.fetch_statement_return fetch_statement619 = null;

        RPIExprWalker.lock_table_statement_return lock_table_statement620 = null;

        RPIExprWalker.open_statement_return open_statement621 = null;

        RPIExprWalker.rollback_statement_return rollback_statement622 = null;

        RPIExprWalker.savepoint_statement_return savepoint_statement623 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // RPIExprWalker.g:892:5: ( close_statement | commit_statement | fetch_statement | lock_table_statement | open_statement | rollback_statement | savepoint_statement )
            int alt151=7;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA151_1 = input.LA(2);

                if ( (LA151_1==ID) ) {
                    int LA151_7 = input.LA(3);

                    if ( ((synpred279_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE")))) ) {
                        alt151=1;
                    }
                    else if ( ((synpred283_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OPEN")))) ) {
                        alt151=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 7, input);

                        throw nvae;
                    }
                }
                else if ( (LA151_1==DOUBLEQUOTED_STRING) ) {
                    int LA151_8 = input.LA(3);

                    if ( ((synpred279_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE")))) ) {
                        alt151=1;
                    }
                    else if ( ((synpred283_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OPEN")))) ) {
                        alt151=5;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 151, 8, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 1, input);

                    throw nvae;
                }
                }
                break;
            case 171:
                {
                alt151=2;
                }
                break;
            case 205:
                {
                alt151=3;
                }
                break;
            case 206:
                {
                alt151=4;
                }
                break;
            case 222:
                {
                alt151=6;
                }
                break;
            case 211:
                {
                alt151=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }

            switch (alt151) {
                case 1 :
                    // RPIExprWalker.g:892:9: close_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_close_statement_in_to_control_data6220);
                    close_statement617=close_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, close_statement617.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:893:9: commit_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_commit_statement_in_to_control_data6230);
                    commit_statement618=commit_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, commit_statement618.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:894:9: fetch_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_fetch_statement_in_to_control_data6240);
                    fetch_statement619=fetch_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, fetch_statement619.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:895:9: lock_table_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_lock_table_statement_in_to_control_data6250);
                    lock_table_statement620=lock_table_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, lock_table_statement620.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:896:9: open_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_open_statement_in_to_control_data6260);
                    open_statement621=open_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, open_statement621.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:897:9: rollback_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rollback_statement_in_to_control_data6270);
                    rollback_statement622=rollback_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rollback_statement622.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:898:9: savepoint_statement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_savepoint_statement_in_to_control_data6280);
                    savepoint_statement623=savepoint_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, savepoint_statement623.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, to_control_data_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "to_control_data"

    public static class select_command_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_command"
    // RPIExprWalker.g:901:1: select_command returns [StringBuffer value] : select_statement ;
    public final RPIExprWalker.select_command_return select_command() throws RecognitionException {
        RPIExprWalker.select_command_return retval = new RPIExprWalker.select_command_return();
        retval.start = input.LT(1);
        int select_command_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.select_statement_return select_statement624 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // RPIExprWalker.g:902:5: ( select_statement )
            // RPIExprWalker.g:902:9: select_statement
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_statement_in_select_command6303);
            select_statement624=select_statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_statement624.getTree());
            if ( state.backtracking==0 ) {
              retval.value = (select_statement624!=null?select_statement624.value:null);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, select_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_command"

    public static class select_statement_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_statement"
    // RPIExprWalker.g:905:1: select_statement returns [StringBuffer value] : select_expression ;
    public final RPIExprWalker.select_statement_return select_statement() throws RecognitionException {
        RPIExprWalker.select_statement_return retval = new RPIExprWalker.select_statement_return();
        retval.start = input.LT(1);
        int select_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.select_expression_return select_expression625 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // RPIExprWalker.g:906:5: ( select_expression )
            // RPIExprWalker.g:907:9: select_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_expression_in_select_statement6337);
            select_expression625=select_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_expression625.getTree());
            if ( state.backtracking==0 ) {
              retval.value = (select_expression625!=null?select_expression625.value:null);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, select_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_statement"

    public static class select_expression_return extends TreeRuleReturnScope {
        public StringBuffer value;
        public List<String> dimensions;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_expression"
    // RPIExprWalker.g:910:1: select_expression returns [StringBuffer value, List<String> dimensions] : 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( table_reference_list | j1= join_clause | LPAREN j2= join_clause RPAREN ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery ) )? ( order_by_clause )? ;
    public final RPIExprWalker.select_expression_return select_expression() throws RecognitionException {
        RPIExprWalker.select_expression_return retval = new RPIExprWalker.select_expression_return();
        retval.start = input.LT(1);
        int select_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal626=null;
        CommonTree string_literal627=null;
        CommonTree string_literal628=null;
        CommonTree string_literal629=null;
        CommonTree string_literal633=null;
        CommonTree string_literal635=null;
        CommonTree LPAREN637=null;
        CommonTree RPAREN638=null;
        CommonTree string_literal642=null;
        CommonTree string_literal645=null;
        CommonTree string_literal646=null;
        CommonTree string_literal647=null;
        CommonTree string_literal648=null;
        RPIExprWalker.join_clause_return j1 = null;

        RPIExprWalker.join_clause_return j2 = null;

        RPIExprWalker.select_expression_return s1 = null;

        RPIExprWalker.select_list_return select_list630 = null;

        RPIExprWalker.keyBULK_return keyBULK631 = null;

        RPIExprWalker.keyCOLLECT_return keyCOLLECT632 = null;

        RPIExprWalker.lvalues_return lvalues634 = null;

        RPIExprWalker.table_reference_list_return table_reference_list636 = null;

        RPIExprWalker.where_clause_return where_clause639 = null;

        RPIExprWalker.hierarchical_query_clause_return hierarchical_query_clause640 = null;

        RPIExprWalker.group_by_clause_return group_by_clause641 = null;

        RPIExprWalker.sql_condition_return sql_condition643 = null;

        RPIExprWalker.model_clause_return model_clause644 = null;

        RPIExprWalker.subquery_return subquery649 = null;

        RPIExprWalker.order_by_clause_return order_by_clause650 = null;


        CommonTree string_literal626_tree=null;
        CommonTree string_literal627_tree=null;
        CommonTree string_literal628_tree=null;
        CommonTree string_literal629_tree=null;
        CommonTree string_literal633_tree=null;
        CommonTree string_literal635_tree=null;
        CommonTree LPAREN637_tree=null;
        CommonTree RPAREN638_tree=null;
        CommonTree string_literal642_tree=null;
        CommonTree string_literal645_tree=null;
        CommonTree string_literal646_tree=null;
        CommonTree string_literal647_tree=null;
        CommonTree string_literal648_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // RPIExprWalker.g:911:5: ( 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( table_reference_list | j1= join_clause | LPAREN j2= join_clause RPAREN ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery ) )? ( order_by_clause )? )
            // RPIExprWalker.g:912:9: 'SELECT' ( 'DISTINCT' | 'UNIQUE' | 'ALL' )? select_list ( keyBULK keyCOLLECT )? ( 'INTO' lvalues )? 'FROM' ( table_reference_list | j1= join_clause | LPAREN j2= join_clause RPAREN ) ( where_clause )? ( hierarchical_query_clause )? ( group_by_clause )? ( 'HAVING' sql_condition )? ( model_clause )? ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery ) )? ( order_by_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal626=(CommonTree)match(input,174,FOLLOW_174_in_select_expression6371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal626_tree = (CommonTree)adaptor.dupNode(string_literal626);

            adaptor.addChild(root_0, string_literal626_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" SELECT");
            }
            // RPIExprWalker.g:913:9: ( 'DISTINCT' | 'UNIQUE' | 'ALL' )?
            int alt152=4;
            switch ( input.LA(1) ) {
                case 175:
                    {
                    int LA152_1 = input.LA(2);

                    if ( (synpred285_RPIExprWalker()) ) {
                        alt152=1;
                    }
                    }
                    break;
                case 176:
                    {
                    alt152=2;
                    }
                    break;
                case 177:
                    {
                    alt152=3;
                    }
                    break;
            }

            switch (alt152) {
                case 1 :
                    // RPIExprWalker.g:913:11: 'DISTINCT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal627=(CommonTree)match(input,175,FOLLOW_175_in_select_expression6388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal627_tree = (CommonTree)adaptor.dupNode(string_literal627);

                    adaptor.addChild(root_0, string_literal627_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" DISTINCT");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:913:54: 'UNIQUE'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal628=(CommonTree)match(input,176,FOLLOW_176_in_select_expression6394); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal628_tree = (CommonTree)adaptor.dupNode(string_literal628);

                    adaptor.addChild(root_0, string_literal628_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" UNIQUE");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:913:92: 'ALL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal629=(CommonTree)match(input,177,FOLLOW_177_in_select_expression6399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal629_tree = (CommonTree)adaptor.dupNode(string_literal629);

                    adaptor.addChild(root_0, string_literal629_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" ALL");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_list_in_select_expression6415);
            select_list630=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_list630.getTree());
            if ( state.backtracking==0 ) {

                         retval.value.append(" " + (select_list630!=null?select_list630.value:null).toString().trim());
                         retval.dimensions = (select_list630!=null?select_list630.dimensions:null);
                      
            }
            // RPIExprWalker.g:919:9: ( keyBULK keyCOLLECT )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==ID) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // RPIExprWalker.g:919:11: keyBULK keyCOLLECT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyBULK_in_select_expression6438);
                    keyBULK631=keyBULK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyBULK631.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyCOLLECT_in_select_expression6440);
                    keyCOLLECT632=keyCOLLECT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyCOLLECT632.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (keyBULK631!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(keyBULK631.start),
                        input.getTreeAdaptor().getTokenStopIndex(keyBULK631.start))):null) + " " + (keyCOLLECT632!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(keyCOLLECT632.start),
                        input.getTreeAdaptor().getTokenStopIndex(keyCOLLECT632.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:920:9: ( 'INTO' lvalues )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==178) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // RPIExprWalker.g:920:11: 'INTO' lvalues
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal633=(CommonTree)match(input,178,FOLLOW_178_in_select_expression6456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal633_tree = (CommonTree)adaptor.dupNode(string_literal633);

                    adaptor.addChild(root_0, string_literal633_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_lvalues_in_select_expression6458);
                    lvalues634=lvalues();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, lvalues634.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + "INTO " + (lvalues634!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(lvalues634.start),
                        input.getTreeAdaptor().getTokenStopIndex(lvalues634.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal635=(CommonTree)match(input,179,FOLLOW_179_in_select_expression6472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal635_tree = (CommonTree)adaptor.dupNode(string_literal635);

            adaptor.addChild(root_0, string_literal635_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value.append(" FROM");
            }
            // RPIExprWalker.g:921:42: ( table_reference_list | j1= join_clause | LPAREN j2= join_clause RPAREN )
            int alt155=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA155_1 = input.LA(2);

                if ( (synpred290_RPIExprWalker()) ) {
                    alt155=1;
                }
                else if ( (synpred291_RPIExprWalker()) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA155_2 = input.LA(2);

                if ( (synpred290_RPIExprWalker()) ) {
                    alt155=1;
                }
                else if ( (synpred291_RPIExprWalker()) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 2, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA155_3 = input.LA(2);

                if ( (synpred290_RPIExprWalker()) ) {
                    alt155=1;
                }
                else if ( (synpred291_RPIExprWalker()) ) {
                    alt155=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 3, input);

                    throw nvae;
                }
                }
                break;
            case 163:
                {
                alt155=1;
                }
                break;
            case LPAREN:
                {
                int LA155_5 = input.LA(2);

                if ( (LA155_5==174) ) {
                    alt155=1;
                }
                else if ( (LA155_5==ID||LA155_5==DOUBLEQUOTED_STRING||LA155_5==158) ) {
                    alt155=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 155, 5, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 155, 0, input);

                throw nvae;
            }

            switch (alt155) {
                case 1 :
                    // RPIExprWalker.g:921:44: table_reference_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_table_reference_list_in_select_expression6478);
                    table_reference_list636=table_reference_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, table_reference_list636.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (table_reference_list636!=null?table_reference_list636.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:921:136: j1= join_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_clause_in_select_expression6487);
                    j1=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, j1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (j1!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(j1.start),
                        input.getTreeAdaptor().getTokenStopIndex(j1.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:921:187: LPAREN j2= join_clause RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN637=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_select_expression6492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN637_tree = (CommonTree)adaptor.dupNode(LPAREN637);

                    adaptor.addChild(root_0, LPAREN637_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_join_clause_in_select_expression6498);
                    j2=join_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, j2.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN638=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_select_expression6500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN638_tree = (CommonTree)adaptor.dupNode(RPAREN638);

                    adaptor.addChild(root_0, RPAREN638_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" (" + (j2!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(j2.start),
                        input.getTreeAdaptor().getTokenStopIndex(j2.start))):null) + ")");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:922:9: ( where_clause )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==185) ) {
                int LA156_1 = input.LA(2);

                if ( (synpred292_RPIExprWalker()) ) {
                    alt156=1;
                }
            }
            switch (alt156) {
                case 1 :
                    // RPIExprWalker.g:922:11: where_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_where_clause_in_select_expression6515);
                    where_clause639=where_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, where_clause639.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (where_clause639!=null?where_clause639.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:922:88: ( hierarchical_query_clause )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==186) ) {
                int LA157_1 = input.LA(2);

                if ( (synpred293_RPIExprWalker()) ) {
                    alt157=1;
                }
            }
            else if ( (LA157_0==187) ) {
                int LA157_2 = input.LA(2);

                if ( (synpred293_RPIExprWalker()) ) {
                    alt157=1;
                }
            }
            switch (alt157) {
                case 1 :
                    // RPIExprWalker.g:922:90: hierarchical_query_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_hierarchical_query_clause_in_select_expression6523);
                    hierarchical_query_clause640=hierarchical_query_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, hierarchical_query_clause640.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (hierarchical_query_clause640!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(hierarchical_query_clause640.start),
                        input.getTreeAdaptor().getTokenStopIndex(hierarchical_query_clause640.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:922:174: ( group_by_clause )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==188) ) {
                int LA158_1 = input.LA(2);

                if ( (synpred294_RPIExprWalker()) ) {
                    alt158=1;
                }
            }
            switch (alt158) {
                case 1 :
                    // RPIExprWalker.g:922:176: group_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_group_by_clause_in_select_expression6531);
                    group_by_clause641=group_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, group_by_clause641.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (group_by_clause641!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(group_by_clause641.start),
                        input.getTreeAdaptor().getTokenStopIndex(group_by_clause641.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:923:9: ( 'HAVING' sql_condition )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==180) ) {
                int LA159_1 = input.LA(2);

                if ( (synpred295_RPIExprWalker()) ) {
                    alt159=1;
                }
            }
            switch (alt159) {
                case 1 :
                    // RPIExprWalker.g:923:11: 'HAVING' sql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal642=(CommonTree)match(input,180,FOLLOW_180_in_select_expression6547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal642_tree = (CommonTree)adaptor.dupNode(string_literal642);

                    adaptor.addChild(root_0, string_literal642_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_select_expression6549);
                    sql_condition643=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition643.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" HAVING" + (sql_condition643!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(sql_condition643.start),
                        input.getTreeAdaptor().getTokenStopIndex(sql_condition643.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:923:86: ( model_clause )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==ID) ) {
                int LA160_1 = input.LA(2);

                if ( ((synpred296_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "MODEL")))) ) {
                    alt160=1;
                }
            }
            switch (alt160) {
                case 1 :
                    // RPIExprWalker.g:923:88: model_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_model_clause_in_select_expression6557);
                    model_clause644=model_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, model_clause644.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (model_clause644!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(model_clause644.start),
                        input.getTreeAdaptor().getTokenStopIndex(model_clause644.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:924:9: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery ) )?
            int alt164=2;
            switch ( input.LA(1) ) {
                case 181:
                    {
                    int LA164_1 = input.LA(2);

                    if ( (synpred301_RPIExprWalker()) ) {
                        alt164=1;
                    }
                    }
                    break;
                case 182:
                    {
                    int LA164_2 = input.LA(2);

                    if ( (synpred301_RPIExprWalker()) ) {
                        alt164=1;
                    }
                    }
                    break;
                case 183:
                    {
                    int LA164_3 = input.LA(2);

                    if ( (synpred301_RPIExprWalker()) ) {
                        alt164=1;
                    }
                    }
                    break;
            }

            switch (alt164) {
                case 1 :
                    // RPIExprWalker.g:924:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery )
                    {
                    // RPIExprWalker.g:924:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
                    int alt162=3;
                    switch ( input.LA(1) ) {
                    case 181:
                        {
                        alt162=1;
                        }
                        break;
                    case 182:
                        {
                        alt162=2;
                        }
                        break;
                    case 183:
                        {
                        alt162=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);

                        throw nvae;
                    }

                    switch (alt162) {
                        case 1 :
                            // RPIExprWalker.g:924:17: 'UNION' ( 'ALL' )?
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal645=(CommonTree)match(input,181,FOLLOW_181_in_select_expression6579); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal645_tree = (CommonTree)adaptor.dupNode(string_literal645);

                            adaptor.addChild(root_0, string_literal645_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" UNION");
                            }
                            // RPIExprWalker.g:924:52: ( 'ALL' )?
                            int alt161=2;
                            int LA161_0 = input.LA(1);

                            if ( (LA161_0==177) ) {
                                alt161=1;
                            }
                            switch (alt161) {
                                case 1 :
                                    // RPIExprWalker.g:924:54: 'ALL'
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    string_literal646=(CommonTree)match(input,177,FOLLOW_177_in_select_expression6585); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal646_tree = (CommonTree)adaptor.dupNode(string_literal646);

                                    adaptor.addChild(root_0, string_literal646_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                      retval.value.append(" ALL");
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:925:17: 'INTERSECT'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal647=(CommonTree)match(input,182,FOLLOW_182_in_select_expression6607); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal647_tree = (CommonTree)adaptor.dupNode(string_literal647);

                            adaptor.addChild(root_0, string_literal647_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" INTERSECT");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:926:17: 'MINUS'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal648=(CommonTree)match(input,183,FOLLOW_183_in_select_expression6627); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal648_tree = (CommonTree)adaptor.dupNode(string_literal648);

                            adaptor.addChild(root_0, string_literal648_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" MINUS");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:928:13: (s1= select_expression | subquery )
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==174) ) {
                        alt163=1;
                    }
                    else if ( (LA163_0==LPAREN) ) {
                        alt163=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);

                        throw nvae;
                    }
                    switch (alt163) {
                        case 1 :
                            // RPIExprWalker.g:928:17: s1= select_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_select_expression_in_select_expression6665);
                            s1=select_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, s1.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (s1!=null?s1.value:null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:929:17: subquery
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_subquery_in_select_expression6686);
                            subquery649=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, subquery649.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (subquery649!=null?subquery649.value:null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:932:9: ( order_by_clause )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==191) ) {
                int LA165_1 = input.LA(2);

                if ( (synpred302_RPIExprWalker()) ) {
                    alt165=1;
                }
            }
            switch (alt165) {
                case 1 :
                    // RPIExprWalker.g:932:11: order_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_by_clause_in_select_expression6725);
                    order_by_clause650=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_by_clause650.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (order_by_clause650!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(order_by_clause650.start),
                        input.getTreeAdaptor().getTokenStopIndex(order_by_clause650.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, select_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_expression"

    public static class select_list_return extends TreeRuleReturnScope {
        public StringBuffer value;
        public List<String> dimensions;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "select_list"
    // RPIExprWalker.g:935:1: select_list returns [StringBuffer value, List<String> dimensions] : ( ASTERISK | d1= displayed_column ( COMMA d2= displayed_column )* );
    public final RPIExprWalker.select_list_return select_list() throws RecognitionException {
        RPIExprWalker.select_list_return retval = new RPIExprWalker.select_list_return();
        retval.start = input.LT(1);
        int select_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ASTERISK651=null;
        CommonTree COMMA652=null;
        RPIExprWalker.displayed_column_return d1 = null;

        RPIExprWalker.displayed_column_return d2 = null;


        CommonTree ASTERISK651_tree=null;
        CommonTree COMMA652_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // RPIExprWalker.g:936:5: ( ASTERISK | d1= displayed_column ( COMMA d2= displayed_column )* )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==ASTERISK) ) {
                alt167=1;
            }
            else if ( ((LA167_0>=SUBSTR && LA167_0<=TO_CHAR)||LA167_0==TRIM||(LA167_0>=ID && LA167_0<=LPAREN)||(LA167_0>=SQL && LA167_0<=MINUS)||LA167_0==NUMBER||LA167_0==QUOTED_STRING||LA167_0==DOUBLEQUOTED_STRING||LA167_0==116||LA167_0==158||(LA167_0>=168 && LA167_0<=169)||(LA167_0>=174 && LA167_0<=175)||LA167_0==198) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // RPIExprWalker.g:936:9: ASTERISK
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    ASTERISK651=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_select_list6752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK651_tree = (CommonTree)adaptor.dupNode(ASTERISK651);

                    adaptor.addChild(root_0, ASTERISK651_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" *");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:937:9: d1= displayed_column ( COMMA d2= displayed_column )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_displayed_column_in_select_list6766);
                    d1=displayed_column();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, d1.getTree());
                    if ( state.backtracking==0 ) {

                                 String dim = (d1!=null?d1.value:null).toString().trim();
                                 retval.value = new StringBuffer(" " + (d1!=null?d1.value:null).toString().trim());
                                 retval.dimensions = new ArrayList<String>();
                                 if (!(d1!=null?d1.dimension:null).equals("VALUE")) {
                                    retval.dimensions.add((d1!=null?d1.dimension:null));
                                 }   
                              
                    }
                    // RPIExprWalker.g:946:9: ( COMMA d2= displayed_column )*
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==COMMA) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // RPIExprWalker.g:946:11: COMMA d2= displayed_column
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    COMMA652=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_select_list6789); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA652_tree = (CommonTree)adaptor.dupNode(COMMA652);

                    	    adaptor.addChild(root_0, COMMA652_tree);
                    	    }
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_displayed_column_in_select_list6793);
                    	    d2=displayed_column();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, d2.getTree());
                    	    if ( state.backtracking==0 ) {

                    	                 retval.value.append(" , " + (d2!=null?d2.value:null).toString().trim());
                    	                 if (!(d2!=null?d2.dimension:null).equals("VALUE")) {
                    	                    retval.dimensions.add((d2!=null?d2.dimension:null));
                    	                 }
                    	              
                    	    }

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop166;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, select_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "select_list"

    public static class table_reference_list_from_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_reference_list_from"
    // RPIExprWalker.g:955:1: table_reference_list_from : 'FROM' table_reference_list ;
    public final RPIExprWalker.table_reference_list_from_return table_reference_list_from() throws RecognitionException {
        RPIExprWalker.table_reference_list_from_return retval = new RPIExprWalker.table_reference_list_from_return();
        retval.start = input.LT(1);
        int table_reference_list_from_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal653=null;
        RPIExprWalker.table_reference_list_return table_reference_list654 = null;


        CommonTree string_literal653_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // RPIExprWalker.g:956:5: ( 'FROM' table_reference_list )
            // RPIExprWalker.g:956:9: 'FROM' table_reference_list
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal653=(CommonTree)match(input,179,FOLLOW_179_in_table_reference_list_from6825); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal653_tree = (CommonTree)adaptor.dupNode(string_literal653);

            adaptor.addChild(root_0, string_literal653_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_reference_list_in_table_reference_list_from6827);
            table_reference_list654=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_reference_list654.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, table_reference_list_from_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_reference_list_from"

    public static class table_reference_list_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_reference_list"
    // RPIExprWalker.g:959:1: table_reference_list returns [StringBuffer value] : s1= selected_table ( COMMA s2= selected_table )* ;
    public final RPIExprWalker.table_reference_list_return table_reference_list() throws RecognitionException {
        RPIExprWalker.table_reference_list_return retval = new RPIExprWalker.table_reference_list_return();
        retval.start = input.LT(1);
        int table_reference_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA655=null;
        RPIExprWalker.selected_table_return s1 = null;

        RPIExprWalker.selected_table_return s2 = null;


        CommonTree COMMA655_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // RPIExprWalker.g:960:5: (s1= selected_table ( COMMA s2= selected_table )* )
            // RPIExprWalker.g:960:9: s1= selected_table ( COMMA s2= selected_table )*
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer();
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_selected_table_in_table_reference_list6854);
            s1=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.append(" " + (s1!=null?s1.value:null).toString().trim());
            }
            // RPIExprWalker.g:962:9: ( COMMA s2= selected_table )*
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==COMMA) ) {
                    int LA168_38 = input.LA(2);

                    if ( (synpred305_RPIExprWalker()) ) {
                        alt168=1;
                    }


                }


                switch (alt168) {
            	case 1 :
            	    // RPIExprWalker.g:962:11: COMMA s2= selected_table
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA655=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_table_reference_list6878); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA655_tree = (CommonTree)adaptor.dupNode(COMMA655);

            	    adaptor.addChild(root_0, COMMA655_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_selected_table_in_table_reference_list6882);
            	    s2=selected_table();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, s2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" " + (s2!=null?s2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, table_reference_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_reference_list"

    public static class join_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "join_clause"
    // RPIExprWalker.g:965:1: join_clause : table_name ( inner_cross_join_clause | outer_join_clause )+ ;
    public final RPIExprWalker.join_clause_return join_clause() throws RecognitionException {
        RPIExprWalker.join_clause_return retval = new RPIExprWalker.join_clause_return();
        retval.start = input.LT(1);
        int join_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.table_name_return table_name656 = null;

        RPIExprWalker.inner_cross_join_clause_return inner_cross_join_clause657 = null;

        RPIExprWalker.outer_join_clause_return outer_join_clause658 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // RPIExprWalker.g:966:5: ( table_name ( inner_cross_join_clause | outer_join_clause )+ )
            // RPIExprWalker.g:966:9: table_name ( inner_cross_join_clause | outer_join_clause )+
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_name_in_join_clause6905);
            table_name656=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_name656.getTree());
            // RPIExprWalker.g:966:20: ( inner_cross_join_clause | outer_join_clause )+
            int cnt169=0;
            loop169:
            do {
                int alt169=3;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==ID) ) {
                    int LA169_2 = input.LA(2);

                    if ( (((synpred306_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INNER")))||(synpred306_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))||(synpred306_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "JOIN")))||(synpred306_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))))) ) {
                        alt169=1;
                    }
                    else if ( (((synpred307_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION")))||(synpred307_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL")))||(synpred307_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred307_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred307_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL"))))) ) {
                        alt169=2;
                    }


                }


                switch (alt169) {
            	case 1 :
            	    // RPIExprWalker.g:966:22: inner_cross_join_clause
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_inner_cross_join_clause_in_join_clause6909);
            	    inner_cross_join_clause657=inner_cross_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, inner_cross_join_clause657.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RPIExprWalker.g:966:48: outer_join_clause
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_outer_join_clause_in_join_clause6913);
            	    outer_join_clause658=outer_join_clause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, outer_join_clause658.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt169 >= 1 ) break loop169;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(169, input);
                        throw eee;
                }
                cnt169++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "join_clause"

    public static class inner_cross_join_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inner_cross_join_clause"
    // RPIExprWalker.g:968:1: inner_cross_join_clause : ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name );
    public final RPIExprWalker.inner_cross_join_clause_return inner_cross_join_clause() throws RecognitionException {
        RPIExprWalker.inner_cross_join_clause_return retval = new RPIExprWalker.inner_cross_join_clause_return();
        retval.start = input.LT(1);
        int inner_cross_join_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal662=null;
        CommonTree LPAREN665=null;
        CommonTree RPAREN667=null;
        RPIExprWalker.keyINNER_return keyINNER659 = null;

        RPIExprWalker.keyJOIN_return keyJOIN660 = null;

        RPIExprWalker.table_name_return table_name661 = null;

        RPIExprWalker.sql_condition_return sql_condition663 = null;

        RPIExprWalker.keyUSING_return keyUSING664 = null;

        RPIExprWalker.column_specs_return column_specs666 = null;

        RPIExprWalker.keyCROSS_return keyCROSS668 = null;

        RPIExprWalker.keyNATURAL_return keyNATURAL669 = null;

        RPIExprWalker.keyINNER_return keyINNER670 = null;

        RPIExprWalker.keyJOIN_return keyJOIN671 = null;

        RPIExprWalker.table_name_return table_name672 = null;


        CommonTree string_literal662_tree=null;
        CommonTree LPAREN665_tree=null;
        CommonTree RPAREN667_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // RPIExprWalker.g:969:5: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) | ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==ID) ) {
                int LA173_1 = input.LA(2);

                if ( (((synpred310_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "JOIN")))||(synpred310_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INNER"))))) ) {
                    alt173=1;
                }
                else if ( (((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CROSS"))||(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL")))) ) {
                    alt173=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 173, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // RPIExprWalker.g:969:9: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // RPIExprWalker.g:969:9: ( keyINNER )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==ID) ) {
                        int LA170_1 = input.LA(2);

                        if ( (LA170_1==ID) ) {
                            int LA170_2 = input.LA(3);

                            if ( (LA170_2==ID) ) {
                                int LA170_4 = input.LA(4);

                                if ( (LA170_4==ID||LA170_4==184) ) {
                                    alt170=1;
                                }
                            }
                            else if ( (LA170_2==DOUBLEQUOTED_STRING||LA170_2==158) ) {
                                alt170=1;
                            }
                        }
                    }
                    switch (alt170) {
                        case 1 :
                            // RPIExprWalker.g:969:11: keyINNER
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause6936);
                            keyINNER659=keyINNER();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyINNER659.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause6941);
                    keyJOIN660=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyJOIN660.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause6943);
                    table_name661=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, table_name661.getTree());
                    // RPIExprWalker.g:969:42: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==184) ) {
                        alt171=1;
                    }
                    else if ( (LA171_0==ID) ) {
                        alt171=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 171, 0, input);

                        throw nvae;
                    }
                    switch (alt171) {
                        case 1 :
                            // RPIExprWalker.g:969:44: 'ON' sql_condition
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal662=(CommonTree)match(input,184,FOLLOW_184_in_inner_cross_join_clause6947); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal662_tree = (CommonTree)adaptor.dupNode(string_literal662);

                            adaptor.addChild(root_0, string_literal662_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_condition_in_inner_cross_join_clause6949);
                            sql_condition663=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_condition663.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:969:65: keyUSING LPAREN column_specs RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyUSING_in_inner_cross_join_clause6953);
                            keyUSING664=keyUSING();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyUSING664.getTree());
                            _last = (CommonTree)input.LT(1);
                            LPAREN665=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_inner_cross_join_clause6955); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN665_tree = (CommonTree)adaptor.dupNode(LPAREN665);

                            adaptor.addChild(root_0, LPAREN665_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_column_specs_in_inner_cross_join_clause6957);
                            column_specs666=column_specs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, column_specs666.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN667=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_inner_cross_join_clause6959); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN667_tree = (CommonTree)adaptor.dupNode(RPAREN667);

                            adaptor.addChild(root_0, RPAREN667_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:970:9: ( keyCROSS | keyNATURAL ( keyINNER ) ) keyJOIN table_name
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // RPIExprWalker.g:970:9: ( keyCROSS | keyNATURAL ( keyINNER ) )
                    int alt172=2;
                    int LA172_0 = input.LA(1);

                    if ( (LA172_0==ID) ) {
                        int LA172_1 = input.LA(2);

                        if ( (LA172_1==ID) ) {
                            int LA172_2 = input.LA(3);

                            if ( (LA172_2==ID) ) {
                                switch ( input.LA(4) ) {
                                case EOF:
                                case UP:
                                case SUBSTR:
                                case TO_CHAR:
                                case TRIM:
                                case LPAREN:
                                case RPAREN:
                                case EQ:
                                case SEMICOLON:
                                case COMMA:
                                case SQL:
                                case PLUS:
                                case MINUS:
                                case ASTERISK:
                                case DIV:
                                case NUMBER:
                                case RBRACK:
                                case AND:
                                case OR:
                                case NOT:
                                case BOOLOP_LT:
                                case BOOLOP_GT:
                                case BOOLOP_GE:
                                case BOOLOP_LE:
                                case DOUBLEDOT:
                                case QUOTED_STRING:
                                case FOUND_ATTR:
                                case NOTFOUND_ATTR:
                                case ISOPEN_ATTR:
                                case ROWCOUNT_ATTR:
                                case BULK_ROWCOUNT_ATTR:
                                case DOUBLEVERTBAR:
                                case EXPONENT:
                                case NOT_EQ:
                                case 111:
                                case 112:
                                case 113:
                                case 116:
                                case 121:
                                case 160:
                                case 167:
                                case 168:
                                case 169:
                                case 173:
                                case 174:
                                case 175:
                                case 178:
                                case 179:
                                case 180:
                                case 181:
                                case 182:
                                case 183:
                                case 184:
                                case 185:
                                case 186:
                                case 187:
                                case 188:
                                case 191:
                                case 192:
                                case 193:
                                case 194:
                                case 196:
                                case 197:
                                case 198:
                                case 199:
                                case 200:
                                case 202:
                                case 214:
                                case 220:
                                case 221:
                                    {
                                    alt172=1;
                                    }
                                    break;
                                case ID:
                                    {
                                    int LA172_5 = input.LA(5);

                                    if ( ((synpred311_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                                        alt172=1;
                                    }
                                    else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                                        alt172=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 172, 5, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case DOUBLEQUOTED_STRING:
                                    {
                                    int LA172_6 = input.LA(5);

                                    if ( ((synpred311_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                                        alt172=1;
                                    }
                                    else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                                        alt172=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 172, 6, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case 158:
                                    {
                                    int LA172_7 = input.LA(5);

                                    if ( ((synpred311_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CROSS")))) ) {
                                        alt172=1;
                                    }
                                    else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                                        alt172=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 172, 7, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                default:
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 172, 3, input);

                                    throw nvae;
                                }

                            }
                            else if ( (LA172_2==DOUBLEQUOTED_STRING||LA172_2==158) ) {
                                alt172=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 172, 2, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 172, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 172, 0, input);

                        throw nvae;
                    }
                    switch (alt172) {
                        case 1 :
                            // RPIExprWalker.g:970:11: keyCROSS
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyCROSS_in_inner_cross_join_clause6973);
                            keyCROSS668=keyCROSS();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyCROSS668.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:970:22: keyNATURAL ( keyINNER )
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyNATURAL_in_inner_cross_join_clause6977);
                            keyNATURAL669=keyNATURAL();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyNATURAL669.getTree());
                            // RPIExprWalker.g:970:33: ( keyINNER )
                            // RPIExprWalker.g:970:35: keyINNER
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyINNER_in_inner_cross_join_clause6981);
                            keyINNER670=keyINNER();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyINNER670.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyJOIN_in_inner_cross_join_clause6987);
                    keyJOIN671=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyJOIN671.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_table_name_in_inner_cross_join_clause6989);
                    table_name672=table_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, table_name672.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, inner_cross_join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inner_cross_join_clause"

    public static class outer_join_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_clause"
    // RPIExprWalker.g:972:1: outer_join_clause : ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) table_name ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? ;
    public final RPIExprWalker.outer_join_clause_return outer_join_clause() throws RecognitionException {
        RPIExprWalker.outer_join_clause_return retval = new RPIExprWalker.outer_join_clause_return();
        retval.start = input.LT(1);
        int outer_join_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal681=null;
        CommonTree LPAREN684=null;
        CommonTree RPAREN686=null;
        RPIExprWalker.query_partition_clause_return query_partition_clause673 = null;

        RPIExprWalker.outer_join_type_return outer_join_type674 = null;

        RPIExprWalker.keyJOIN_return keyJOIN675 = null;

        RPIExprWalker.keyNATURAL_return keyNATURAL676 = null;

        RPIExprWalker.outer_join_type_return outer_join_type677 = null;

        RPIExprWalker.keyJOIN_return keyJOIN678 = null;

        RPIExprWalker.table_name_return table_name679 = null;

        RPIExprWalker.query_partition_clause_return query_partition_clause680 = null;

        RPIExprWalker.sql_condition_return sql_condition682 = null;

        RPIExprWalker.keyUSING_return keyUSING683 = null;

        RPIExprWalker.column_specs_return column_specs685 = null;


        CommonTree string_literal681_tree=null;
        CommonTree LPAREN684_tree=null;
        CommonTree RPAREN686_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // RPIExprWalker.g:973:5: ( ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) table_name ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )? )
            // RPIExprWalker.g:973:9: ( query_partition_clause )? ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN ) table_name ( query_partition_clause )? ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:973:9: ( query_partition_clause )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==ID) ) {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==166) ) {
                    alt174=1;
                }
            }
            switch (alt174) {
                case 1 :
                    // RPIExprWalker.g:973:11: query_partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause7009);
                    query_partition_clause673=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, query_partition_clause673.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:974:9: ( outer_join_type keyJOIN | keyNATURAL ( outer_join_type )? keyJOIN )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==ID) ) {
                int LA176_1 = input.LA(2);

                if ( (LA176_1==ID) ) {
                    int LA176_2 = input.LA(3);

                    if ( (((synpred313_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT")))||(synpred313_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred313_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL"))))) ) {
                        alt176=1;
                    }
                    else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                        alt176=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 176, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 176, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    // RPIExprWalker.g:974:13: outer_join_type keyJOIN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_outer_join_type_in_outer_join_clause7026);
                    outer_join_type674=outer_join_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, outer_join_type674.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause7028);
                    keyJOIN675=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyJOIN675.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:975:13: keyNATURAL ( outer_join_type )? keyJOIN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNATURAL_in_outer_join_clause7042);
                    keyNATURAL676=keyNATURAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNATURAL676.getTree());
                    // RPIExprWalker.g:975:24: ( outer_join_type )?
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==ID) ) {
                        int LA175_1 = input.LA(2);

                        if ( (LA175_1==ID) ) {
                            switch ( input.LA(3) ) {
                                case ID:
                                    {
                                    int LA175_4 = input.LA(4);

                                    if ( (((synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))))) ) {
                                        alt175=1;
                                    }
                                    }
                                    break;
                                case DOUBLEQUOTED_STRING:
                                    {
                                    int LA175_5 = input.LA(4);

                                    if ( (((synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))))) ) {
                                        alt175=1;
                                    }
                                    }
                                    break;
                                case 158:
                                    {
                                    int LA175_6 = input.LA(4);

                                    if ( (((synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))||(synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))||(synpred314_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))))) ) {
                                        alt175=1;
                                    }
                                    }
                                    break;
                            }

                        }
                    }
                    switch (alt175) {
                        case 1 :
                            // RPIExprWalker.g:975:26: outer_join_type
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_outer_join_type_in_outer_join_clause7046);
                            outer_join_type677=outer_join_type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, outer_join_type677.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyJOIN_in_outer_join_clause7051);
                    keyJOIN678=keyJOIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyJOIN678.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_name_in_outer_join_clause7071);
            table_name679=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_name679.getTree());
            // RPIExprWalker.g:977:20: ( query_partition_clause )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==ID) ) {
                int LA177_1 = input.LA(2);

                if ( ((synpred315_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION")))) ) {
                    alt177=1;
                }
            }
            switch (alt177) {
                case 1 :
                    // RPIExprWalker.g:977:22: query_partition_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_query_partition_clause_in_outer_join_clause7075);
                    query_partition_clause680=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, query_partition_clause680.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:978:9: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )?
            int alt178=3;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==184) ) {
                int LA178_1 = input.LA(2);

                if ( (synpred316_RPIExprWalker()) ) {
                    alt178=1;
                }
            }
            else if ( (LA178_0==ID) ) {
                int LA178_2 = input.LA(2);

                if ( ((synpred317_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "USING")))) ) {
                    alt178=2;
                }
            }
            switch (alt178) {
                case 1 :
                    // RPIExprWalker.g:978:11: 'ON' sql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal681=(CommonTree)match(input,184,FOLLOW_184_in_outer_join_clause7090); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal681_tree = (CommonTree)adaptor.dupNode(string_literal681);

                    adaptor.addChild(root_0, string_literal681_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_outer_join_clause7092);
                    sql_condition682=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition682.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:978:32: keyUSING LPAREN column_specs RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyUSING_in_outer_join_clause7096);
                    keyUSING683=keyUSING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyUSING683.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN684=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_clause7098); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN684_tree = (CommonTree)adaptor.dupNode(LPAREN684);

                    adaptor.addChild(root_0, LPAREN684_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_specs_in_outer_join_clause7100);
                    column_specs685=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_specs685.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN686=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_clause7102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN686_tree = (CommonTree)adaptor.dupNode(RPAREN686);

                    adaptor.addChild(root_0, RPAREN686_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, outer_join_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_clause"

    public static class query_partition_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "query_partition_clause"
    // RPIExprWalker.g:980:1: query_partition_clause : keyPARTITION 'BY' expression_list ;
    public final RPIExprWalker.query_partition_clause_return query_partition_clause() throws RecognitionException {
        RPIExprWalker.query_partition_clause_return retval = new RPIExprWalker.query_partition_clause_return();
        retval.start = input.LT(1);
        int query_partition_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal688=null;
        RPIExprWalker.keyPARTITION_return keyPARTITION687 = null;

        RPIExprWalker.expression_list_return expression_list689 = null;


        CommonTree string_literal688_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // RPIExprWalker.g:981:5: ( keyPARTITION 'BY' expression_list )
            // RPIExprWalker.g:981:9: keyPARTITION 'BY' expression_list
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyPARTITION_in_query_partition_clause7123);
            keyPARTITION687=keyPARTITION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyPARTITION687.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal688=(CommonTree)match(input,166,FOLLOW_166_in_query_partition_clause7125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal688_tree = (CommonTree)adaptor.dupNode(string_literal688);

            adaptor.addChild(root_0, string_literal688_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expression_list_in_query_partition_clause7127);
            expression_list689=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expression_list689.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, query_partition_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "query_partition_clause"

    public static class outer_join_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_type"
    // RPIExprWalker.g:983:1: outer_join_type : ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? ;
    public final RPIExprWalker.outer_join_type_return outer_join_type() throws RecognitionException {
        RPIExprWalker.outer_join_type_return retval = new RPIExprWalker.outer_join_type_return();
        retval.start = input.LT(1);
        int outer_join_type_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyFULL_return keyFULL690 = null;

        RPIExprWalker.keyLEFT_return keyLEFT691 = null;

        RPIExprWalker.keyRIGHT_return keyRIGHT692 = null;

        RPIExprWalker.keyOUTER_return keyOUTER693 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // RPIExprWalker.g:984:5: ( ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )? )
            // RPIExprWalker.g:984:9: ( keyFULL | keyLEFT | keyRIGHT ) ( keyOUTER )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:984:9: ( keyFULL | keyLEFT | keyRIGHT )
            int alt179=3;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==ID) ) {
                int LA179_1 = input.LA(2);

                if ( ((synpred318_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL")))) ) {
                    alt179=1;
                }
                else if ( ((synpred319_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT")))) ) {
                    alt179=2;
                }
                else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))) ) {
                    alt179=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 179, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // RPIExprWalker.g:984:11: keyFULL
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyFULL_in_outer_join_type7147);
                    keyFULL690=keyFULL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyFULL690.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:984:21: keyLEFT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyLEFT_in_outer_join_type7151);
                    keyLEFT691=keyLEFT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyLEFT691.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:984:31: keyRIGHT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyRIGHT_in_outer_join_type7155);
                    keyRIGHT692=keyRIGHT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyRIGHT692.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:984:42: ( keyOUTER )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==ID) ) {
                int LA180_1 = input.LA(2);

                if ( (LA180_1==ID) ) {
                    switch ( input.LA(3) ) {
                        case ID:
                            {
                            int LA180_5 = input.LA(4);

                            if ( ((synpred320_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OUTER")))) ) {
                                alt180=1;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            int LA180_6 = input.LA(4);

                            if ( ((synpred320_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OUTER")))) ) {
                                alt180=1;
                            }
                            }
                            break;
                        case 158:
                            {
                            int LA180_7 = input.LA(4);

                            if ( ((synpred320_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OUTER")))) ) {
                                alt180=1;
                            }
                            }
                            break;
                        case EOF:
                            {
                            alt180=1;
                            }
                            break;
                    }

                }
                else if ( (LA180_1==EOF) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
                case 1 :
                    // RPIExprWalker.g:984:44: keyOUTER
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyOUTER_in_outer_join_type7161);
                    keyOUTER693=keyOUTER();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyOUTER693.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, outer_join_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_type"

    public static class outer_join_sign_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outer_join_sign"
    // RPIExprWalker.g:986:1: outer_join_sign returns [StringBuffer value] : LPAREN PLUS RPAREN ;
    public final RPIExprWalker.outer_join_sign_return outer_join_sign() throws RecognitionException {
        RPIExprWalker.outer_join_sign_return retval = new RPIExprWalker.outer_join_sign_return();
        retval.start = input.LT(1);
        int outer_join_sign_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN694=null;
        CommonTree PLUS695=null;
        CommonTree RPAREN696=null;

        CommonTree LPAREN694_tree=null;
        CommonTree PLUS695_tree=null;
        CommonTree RPAREN696_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // RPIExprWalker.g:987:5: ( LPAREN PLUS RPAREN )
            // RPIExprWalker.g:987:9: LPAREN PLUS RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            LPAREN694=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_outer_join_sign7186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN694_tree = (CommonTree)adaptor.dupNode(LPAREN694);

            adaptor.addChild(root_0, LPAREN694_tree);
            }
            _last = (CommonTree)input.LT(1);
            PLUS695=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_outer_join_sign7188); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PLUS695_tree = (CommonTree)adaptor.dupNode(PLUS695);

            adaptor.addChild(root_0, PLUS695_tree);
            }
            _last = (CommonTree)input.LT(1);
            RPAREN696=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_outer_join_sign7190); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN696_tree = (CommonTree)adaptor.dupNode(RPAREN696);

            adaptor.addChild(root_0, RPAREN696_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" (+)");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, outer_join_sign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "outer_join_sign"

    public static class where_clause_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_clause"
    // RPIExprWalker.g:989:1: where_clause returns [StringBuffer value] : 'WHERE' sql_condition ;
    public final RPIExprWalker.where_clause_return where_clause() throws RecognitionException {
        RPIExprWalker.where_clause_return retval = new RPIExprWalker.where_clause_return();
        retval.start = input.LT(1);
        int where_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal697=null;
        RPIExprWalker.sql_condition_return sql_condition698 = null;


        CommonTree string_literal697_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // RPIExprWalker.g:990:5: ( 'WHERE' sql_condition )
            // RPIExprWalker.g:990:9: 'WHERE' sql_condition
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal697=(CommonTree)match(input,185,FOLLOW_185_in_where_clause7214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal697_tree = (CommonTree)adaptor.dupNode(string_literal697);

            adaptor.addChild(root_0, string_literal697_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_condition_in_where_clause7216);
            sql_condition698=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_condition698.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" WHERE " + (sql_condition698!=null?sql_condition698.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, where_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_clause"

    public static class hierarchical_query_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hierarchical_query_clause"
    // RPIExprWalker.g:992:1: hierarchical_query_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition ;
    public final RPIExprWalker.hierarchical_query_clause_return hierarchical_query_clause() throws RecognitionException {
        RPIExprWalker.hierarchical_query_clause_return retval = new RPIExprWalker.hierarchical_query_clause_return();
        retval.start = input.LT(1);
        int hierarchical_query_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal699=null;
        CommonTree string_literal700=null;
        CommonTree string_literal702=null;
        CommonTree string_literal703=null;
        RPIExprWalker.sql_condition_return sql_condition701 = null;

        RPIExprWalker.keyNOCYCLE_return keyNOCYCLE704 = null;

        RPIExprWalker.sql_condition_return sql_condition705 = null;


        CommonTree string_literal699_tree=null;
        CommonTree string_literal700_tree=null;
        CommonTree string_literal702_tree=null;
        CommonTree string_literal703_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // RPIExprWalker.g:993:5: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition )
            // RPIExprWalker.g:993:9: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( keyNOCYCLE )? sql_condition
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:993:9: ( 'START' 'WITH' sql_condition )?
            int alt181=2;
            int LA181_0 = input.LA(1);

            if ( (LA181_0==186) ) {
                alt181=1;
            }
            switch (alt181) {
                case 1 :
                    // RPIExprWalker.g:993:11: 'START' 'WITH' sql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal699=(CommonTree)match(input,186,FOLLOW_186_in_hierarchical_query_clause7238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal699_tree = (CommonTree)adaptor.dupNode(string_literal699);

                    adaptor.addChild(root_0, string_literal699_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal700=(CommonTree)match(input,136,FOLLOW_136_in_hierarchical_query_clause7240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal700_tree = (CommonTree)adaptor.dupNode(string_literal700);

                    adaptor.addChild(root_0, string_literal700_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause7242);
                    sql_condition701=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition701.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal702=(CommonTree)match(input,187,FOLLOW_187_in_hierarchical_query_clause7247); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal702_tree = (CommonTree)adaptor.dupNode(string_literal702);

            adaptor.addChild(root_0, string_literal702_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal703=(CommonTree)match(input,166,FOLLOW_166_in_hierarchical_query_clause7249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal703_tree = (CommonTree)adaptor.dupNode(string_literal703);

            adaptor.addChild(root_0, string_literal703_tree);
            }
            // RPIExprWalker.g:993:58: ( keyNOCYCLE )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==ID) ) {
                int LA182_1 = input.LA(2);

                if ( ((synpred322_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NOCYCLE")))) ) {
                    alt182=1;
                }
            }
            switch (alt182) {
                case 1 :
                    // RPIExprWalker.g:993:60: keyNOCYCLE
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNOCYCLE_in_hierarchical_query_clause7253);
                    keyNOCYCLE704=keyNOCYCLE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNOCYCLE704.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_condition_in_hierarchical_query_clause7258);
            sql_condition705=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_condition705.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, hierarchical_query_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "hierarchical_query_clause"

    public static class group_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_clause"
    // RPIExprWalker.g:995:1: group_by_clause : 'GROUP' 'BY' group_by_exprs ;
    public final RPIExprWalker.group_by_clause_return group_by_clause() throws RecognitionException {
        RPIExprWalker.group_by_clause_return retval = new RPIExprWalker.group_by_clause_return();
        retval.start = input.LT(1);
        int group_by_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal706=null;
        CommonTree string_literal707=null;
        RPIExprWalker.group_by_exprs_return group_by_exprs708 = null;


        CommonTree string_literal706_tree=null;
        CommonTree string_literal707_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // RPIExprWalker.g:996:5: ( 'GROUP' 'BY' group_by_exprs )
            // RPIExprWalker.g:996:9: 'GROUP' 'BY' group_by_exprs
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal706=(CommonTree)match(input,188,FOLLOW_188_in_group_by_clause7276); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal706_tree = (CommonTree)adaptor.dupNode(string_literal706);

            adaptor.addChild(root_0, string_literal706_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal707=(CommonTree)match(input,166,FOLLOW_166_in_group_by_clause7278); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal707_tree = (CommonTree)adaptor.dupNode(string_literal707);

            adaptor.addChild(root_0, string_literal707_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_group_by_exprs_in_group_by_clause7280);
            group_by_exprs708=group_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, group_by_exprs708.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, group_by_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_clause"

    public static class group_by_exprs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_exprs"
    // RPIExprWalker.g:998:1: group_by_exprs : group_by_expr ( COMMA group_by_expr )* ;
    public final RPIExprWalker.group_by_exprs_return group_by_exprs() throws RecognitionException {
        RPIExprWalker.group_by_exprs_return retval = new RPIExprWalker.group_by_exprs_return();
        retval.start = input.LT(1);
        int group_by_exprs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA710=null;
        RPIExprWalker.group_by_expr_return group_by_expr709 = null;

        RPIExprWalker.group_by_expr_return group_by_expr711 = null;


        CommonTree COMMA710_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // RPIExprWalker.g:999:5: ( group_by_expr ( COMMA group_by_expr )* )
            // RPIExprWalker.g:999:9: group_by_expr ( COMMA group_by_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_group_by_expr_in_group_by_exprs7298);
            group_by_expr709=group_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, group_by_expr709.getTree());
            // RPIExprWalker.g:999:23: ( COMMA group_by_expr )*
            loop183:
            do {
                int alt183=2;
                int LA183_0 = input.LA(1);

                if ( (LA183_0==COMMA) ) {
                    int LA183_2 = input.LA(2);

                    if ( (synpred323_RPIExprWalker()) ) {
                        alt183=1;
                    }


                }


                switch (alt183) {
            	case 1 :
            	    // RPIExprWalker.g:999:25: COMMA group_by_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA710=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_group_by_exprs7302); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA710_tree = (CommonTree)adaptor.dupNode(COMMA710);

            	    adaptor.addChild(root_0, COMMA710_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_group_by_expr_in_group_by_exprs7304);
            	    group_by_expr711=group_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, group_by_expr711.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop183;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, group_by_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_exprs"

    public static class group_by_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_by_expr"
    // RPIExprWalker.g:1001:1: group_by_expr : ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list );
    public final RPIExprWalker.group_by_expr_return group_by_expr() throws RecognitionException {
        RPIExprWalker.group_by_expr_return retval = new RPIExprWalker.group_by_expr_return();
        retval.start = input.LT(1);
        int group_by_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.rollup_cube_clause_return rollup_cube_clause712 = null;

        RPIExprWalker.grouping_sets_clause_return grouping_sets_clause713 = null;

        RPIExprWalker.grouping_expression_list_return grouping_expression_list714 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // RPIExprWalker.g:1002:5: ( rollup_cube_clause | grouping_sets_clause | grouping_expression_list )
            int alt184=3;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID) ) {
                int LA184_1 = input.LA(2);

                if ( (((synpred324_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CUBE")))||(synpred324_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP"))))) ) {
                    alt184=1;
                }
                else if ( ((synpred325_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "GROUPING")))) ) {
                    alt184=2;
                }
                else if ( (true) ) {
                    alt184=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 184, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA184_0>=SUBSTR && LA184_0<=TO_CHAR)||LA184_0==TRIM||LA184_0==LPAREN||(LA184_0>=SQL && LA184_0<=MINUS)||LA184_0==NUMBER||LA184_0==QUOTED_STRING||LA184_0==DOUBLEQUOTED_STRING||LA184_0==116||LA184_0==158||(LA184_0>=168 && LA184_0<=169)||(LA184_0>=174 && LA184_0<=175)||LA184_0==198) ) {
                alt184=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // RPIExprWalker.g:1002:9: rollup_cube_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rollup_cube_clause_in_group_by_expr7325);
                    rollup_cube_clause712=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rollup_cube_clause712.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1003:9: grouping_sets_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_grouping_sets_clause_in_group_by_expr7335);
                    grouping_sets_clause713=grouping_sets_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, grouping_sets_clause713.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1004:9: grouping_expression_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_grouping_expression_list_in_group_by_expr7345);
                    grouping_expression_list714=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, grouping_expression_list714.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, group_by_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_by_expr"

    public static class rollup_cube_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollup_cube_clause"
    // RPIExprWalker.g:1006:1: rollup_cube_clause : ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN ;
    public final RPIExprWalker.rollup_cube_clause_return rollup_cube_clause() throws RecognitionException {
        RPIExprWalker.rollup_cube_clause_return retval = new RPIExprWalker.rollup_cube_clause_return();
        retval.start = input.LT(1);
        int rollup_cube_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN717=null;
        CommonTree RPAREN719=null;
        RPIExprWalker.keyROLLUP_return keyROLLUP715 = null;

        RPIExprWalker.keyCUBE_return keyCUBE716 = null;

        RPIExprWalker.grouping_expression_list_return grouping_expression_list718 = null;


        CommonTree LPAREN717_tree=null;
        CommonTree RPAREN719_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // RPIExprWalker.g:1007:5: ( ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN )
            // RPIExprWalker.g:1007:9: ( keyROLLUP | keyCUBE ) LPAREN grouping_expression_list RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1007:9: ( keyROLLUP | keyCUBE )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==ID) ) {
                int LA185_1 = input.LA(2);

                if ( ((synpred326_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP")))) ) {
                    alt185=1;
                }
                else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CUBE"))) ) {
                    alt185=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 185, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // RPIExprWalker.g:1007:11: keyROLLUP
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyROLLUP_in_rollup_cube_clause7365);
                    keyROLLUP715=keyROLLUP();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyROLLUP715.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1007:23: keyCUBE
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyCUBE_in_rollup_cube_clause7369);
                    keyCUBE716=keyCUBE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyCUBE716.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            LPAREN717=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_rollup_cube_clause7373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN717_tree = (CommonTree)adaptor.dupNode(LPAREN717);

            adaptor.addChild(root_0, LPAREN717_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_grouping_expression_list_in_rollup_cube_clause7375);
            grouping_expression_list718=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, grouping_expression_list718.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN719=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_rollup_cube_clause7377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN719_tree = (CommonTree)adaptor.dupNode(RPAREN719);

            adaptor.addChild(root_0, RPAREN719_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, rollup_cube_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollup_cube_clause"

    public static class grouping_sets_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_clause"
    // RPIExprWalker.g:1009:1: grouping_sets_clause : keyGROUPING keySETS LPAREN grouping_expression_list RPAREN ;
    public final RPIExprWalker.grouping_sets_clause_return grouping_sets_clause() throws RecognitionException {
        RPIExprWalker.grouping_sets_clause_return retval = new RPIExprWalker.grouping_sets_clause_return();
        retval.start = input.LT(1);
        int grouping_sets_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN722=null;
        CommonTree RPAREN724=null;
        RPIExprWalker.keyGROUPING_return keyGROUPING720 = null;

        RPIExprWalker.keySETS_return keySETS721 = null;

        RPIExprWalker.grouping_expression_list_return grouping_expression_list723 = null;


        CommonTree LPAREN722_tree=null;
        CommonTree RPAREN724_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // RPIExprWalker.g:1010:5: ( keyGROUPING keySETS LPAREN grouping_expression_list RPAREN )
            // RPIExprWalker.g:1010:9: keyGROUPING keySETS LPAREN grouping_expression_list RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyGROUPING_in_grouping_sets_clause7395);
            keyGROUPING720=keyGROUPING();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyGROUPING720.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keySETS_in_grouping_sets_clause7397);
            keySETS721=keySETS();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keySETS721.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN722=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_grouping_sets_clause7399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN722_tree = (CommonTree)adaptor.dupNode(LPAREN722);

            adaptor.addChild(root_0, LPAREN722_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_clause7401);
            grouping_expression_list723=grouping_expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, grouping_expression_list723.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN724=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_grouping_sets_clause7403); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN724_tree = (CommonTree)adaptor.dupNode(RPAREN724);

            adaptor.addChild(root_0, RPAREN724_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, grouping_sets_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_clause"

    public static class grouping_sets_exprs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_exprs"
    // RPIExprWalker.g:1012:1: grouping_sets_exprs : grouping_sets_expr ( COMMA grouping_sets_expr )* ;
    public final RPIExprWalker.grouping_sets_exprs_return grouping_sets_exprs() throws RecognitionException {
        RPIExprWalker.grouping_sets_exprs_return retval = new RPIExprWalker.grouping_sets_exprs_return();
        retval.start = input.LT(1);
        int grouping_sets_exprs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA726=null;
        RPIExprWalker.grouping_sets_expr_return grouping_sets_expr725 = null;

        RPIExprWalker.grouping_sets_expr_return grouping_sets_expr727 = null;


        CommonTree COMMA726_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // RPIExprWalker.g:1013:5: ( grouping_sets_expr ( COMMA grouping_sets_expr )* )
            // RPIExprWalker.g:1013:9: grouping_sets_expr ( COMMA grouping_sets_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7421);
            grouping_sets_expr725=grouping_sets_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, grouping_sets_expr725.getTree());
            // RPIExprWalker.g:1013:28: ( COMMA grouping_sets_expr )*
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==COMMA) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // RPIExprWalker.g:1013:30: COMMA grouping_sets_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA726=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_grouping_sets_exprs7425); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA726_tree = (CommonTree)adaptor.dupNode(COMMA726);

            	    adaptor.addChild(root_0, COMMA726_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7427);
            	    grouping_sets_expr727=grouping_sets_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, grouping_sets_expr727.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop186;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, grouping_sets_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_exprs"

    public static class grouping_sets_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_sets_expr"
    // RPIExprWalker.g:1015:1: grouping_sets_expr : ( rollup_cube_clause | grouping_expression_list );
    public final RPIExprWalker.grouping_sets_expr_return grouping_sets_expr() throws RecognitionException {
        RPIExprWalker.grouping_sets_expr_return retval = new RPIExprWalker.grouping_sets_expr_return();
        retval.start = input.LT(1);
        int grouping_sets_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.rollup_cube_clause_return rollup_cube_clause728 = null;

        RPIExprWalker.grouping_expression_list_return grouping_expression_list729 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // RPIExprWalker.g:1016:5: ( rollup_cube_clause | grouping_expression_list )
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ID) ) {
                int LA187_1 = input.LA(2);

                if ( (((synpred328_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CUBE")))||(synpred328_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP"))))) ) {
                    alt187=1;
                }
                else if ( (true) ) {
                    alt187=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 187, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA187_0>=SUBSTR && LA187_0<=TO_CHAR)||LA187_0==TRIM||LA187_0==LPAREN||(LA187_0>=SQL && LA187_0<=MINUS)||LA187_0==NUMBER||LA187_0==QUOTED_STRING||LA187_0==DOUBLEQUOTED_STRING||LA187_0==116||LA187_0==158||(LA187_0>=168 && LA187_0<=169)||(LA187_0>=174 && LA187_0<=175)||LA187_0==198) ) {
                alt187=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 187, 0, input);

                throw nvae;
            }
            switch (alt187) {
                case 1 :
                    // RPIExprWalker.g:1016:9: rollup_cube_clause
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_rollup_cube_clause_in_grouping_sets_expr7448);
                    rollup_cube_clause728=rollup_cube_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, rollup_cube_clause728.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1016:30: grouping_expression_list
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_grouping_expression_list_in_grouping_sets_expr7452);
                    grouping_expression_list729=grouping_expression_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, grouping_expression_list729.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, grouping_sets_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_sets_expr"

    public static class model_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_clause"
    // RPIExprWalker.g:1018:1: model_clause : keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model ;
    public final RPIExprWalker.model_clause_return model_clause() throws RecognitionException {
        RPIExprWalker.model_clause_return retval = new RPIExprWalker.model_clause_return();
        retval.start = input.LT(1);
        int model_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyMODEL_return keyMODEL730 = null;

        RPIExprWalker.cell_reference_options_return cell_reference_options731 = null;

        RPIExprWalker.return_rows_clause_return return_rows_clause732 = null;

        RPIExprWalker.reference_model_return reference_model733 = null;

        RPIExprWalker.main_model_return main_model734 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // RPIExprWalker.g:1019:5: ( keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model )
            // RPIExprWalker.g:1019:9: keyMODEL ( cell_reference_options ) ( return_rows_clause )? ( reference_model )+ main_model
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyMODEL_in_model_clause7470);
            keyMODEL730=keyMODEL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyMODEL730.getTree());
            // RPIExprWalker.g:1019:18: ( cell_reference_options )
            // RPIExprWalker.g:1019:20: cell_reference_options
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cell_reference_options_in_model_clause7474);
            cell_reference_options731=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cell_reference_options731.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:1020:9: ( return_rows_clause )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==220) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // RPIExprWalker.g:1020:11: return_rows_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_return_rows_clause_in_model_clause7488);
                    return_rows_clause732=return_rows_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, return_rows_clause732.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1021:9: ( reference_model )+
            int cnt189=0;
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==ID) ) {
                    int LA189_1 = input.LA(2);

                    if ( (LA189_1==ID) ) {
                        int LA189_3 = input.LA(3);

                        if ( (LA189_3==184) ) {
                            alt189=1;
                        }


                    }
                    else if ( (LA189_1==DOUBLEQUOTED_STRING) ) {
                        int LA189_4 = input.LA(3);

                        if ( (LA189_4==184) ) {
                            alt189=1;
                        }


                    }


                }


                switch (alt189) {
            	case 1 :
            	    // RPIExprWalker.g:1021:11: reference_model
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_reference_model_in_model_clause7503);
            	    reference_model733=reference_model();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, reference_model733.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_main_model_in_model_clause7508);
            main_model734=main_model();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, main_model734.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, model_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_clause"

    public static class cell_reference_options_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_reference_options"
    // RPIExprWalker.g:1023:1: cell_reference_options : ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? ;
    public final RPIExprWalker.cell_reference_options_return cell_reference_options() throws RecognitionException {
        RPIExprWalker.cell_reference_options_return retval = new RPIExprWalker.cell_reference_options_return();
        retval.start = input.LT(1);
        int cell_reference_options_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal738=null;
        RPIExprWalker.keyIGNORE_return keyIGNORE735 = null;

        RPIExprWalker.keyKEEP_return keyKEEP736 = null;

        RPIExprWalker.keyNAV_return keyNAV737 = null;

        RPIExprWalker.keyDIMENSION_return keyDIMENSION739 = null;

        RPIExprWalker.keySINGLE_return keySINGLE740 = null;

        RPIExprWalker.keyREFERENCE_return keyREFERENCE741 = null;


        CommonTree string_literal738_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // RPIExprWalker.g:1024:5: ( ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )? )
            // RPIExprWalker.g:1024:9: ( ( keyIGNORE | keyKEEP ) keyNAV )? ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1024:9: ( ( keyIGNORE | keyKEEP ) keyNAV )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==ID) ) {
                int LA191_1 = input.LA(2);

                if ( (LA191_1==ID) ) {
                    int LA191_3 = input.LA(3);

                    if ( (((synpred332_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "KEEP")))||(synpred332_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE"))))) ) {
                        alt191=1;
                    }
                }
            }
            switch (alt191) {
                case 1 :
                    // RPIExprWalker.g:1024:11: ( keyIGNORE | keyKEEP ) keyNAV
                    {
                    // RPIExprWalker.g:1024:11: ( keyIGNORE | keyKEEP )
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==ID) ) {
                        int LA190_1 = input.LA(2);

                        if ( ((synpred331_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE")))) ) {
                            alt190=1;
                        }
                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))) ) {
                            alt190=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 190, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);

                        throw nvae;
                    }
                    switch (alt190) {
                        case 1 :
                            // RPIExprWalker.g:1024:13: keyIGNORE
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyIGNORE_in_cell_reference_options7530);
                            keyIGNORE735=keyIGNORE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyIGNORE735.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1024:25: keyKEEP
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyKEEP_in_cell_reference_options7534);
                            keyKEEP736=keyKEEP();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyKEEP736.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNAV_in_cell_reference_options7538);
                    keyNAV737=keyNAV();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNAV737.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1025:9: ( 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE ) )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==176) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // RPIExprWalker.g:1025:11: 'UNIQUE' ( keyDIMENSION | keySINGLE keyREFERENCE )
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal738=(CommonTree)match(input,176,FOLLOW_176_in_cell_reference_options7553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal738_tree = (CommonTree)adaptor.dupNode(string_literal738);

                    adaptor.addChild(root_0, string_literal738_tree);
                    }
                    // RPIExprWalker.g:1025:20: ( keyDIMENSION | keySINGLE keyREFERENCE )
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==ID) ) {
                        int LA192_1 = input.LA(2);

                        if ( (LA192_1==ID) ) {
                            int LA192_2 = input.LA(3);

                            if ( ((synpred333_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DIMENSION")))) ) {
                                alt192=1;
                            }
                            else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SINGLE"))) ) {
                                alt192=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 192, 2, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA192_1==EOF||LA192_1==LPAREN||LA192_1==220) ) {
                            alt192=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 192, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 192, 0, input);

                        throw nvae;
                    }
                    switch (alt192) {
                        case 1 :
                            // RPIExprWalker.g:1025:22: keyDIMENSION
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyDIMENSION_in_cell_reference_options7557);
                            keyDIMENSION739=keyDIMENSION();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyDIMENSION739.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1025:37: keySINGLE keyREFERENCE
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keySINGLE_in_cell_reference_options7561);
                            keySINGLE740=keySINGLE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keySINGLE740.getTree());
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyREFERENCE_in_cell_reference_options7563);
                            keyREFERENCE741=keyREFERENCE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyREFERENCE741.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, cell_reference_options_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_reference_options"

    public static class return_rows_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_rows_clause"
    // RPIExprWalker.g:1027:1: return_rows_clause : keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' ;
    public final RPIExprWalker.return_rows_clause_return return_rows_clause() throws RecognitionException {
        RPIExprWalker.return_rows_clause_return retval = new RPIExprWalker.return_rows_clause_return();
        retval.start = input.LT(1);
        int return_rows_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal744=null;
        CommonTree string_literal745=null;
        RPIExprWalker.keyRETURN_return keyRETURN742 = null;

        RPIExprWalker.keyUPDATED_return keyUPDATED743 = null;


        CommonTree string_literal744_tree=null;
        CommonTree string_literal745_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // RPIExprWalker.g:1028:5: ( keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS' )
            // RPIExprWalker.g:1028:9: keyRETURN ( keyUPDATED | 'ALL' ) 'ROWS'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyRETURN_in_return_rows_clause7586);
            keyRETURN742=keyRETURN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyRETURN742.getTree());
            // RPIExprWalker.g:1028:19: ( keyUPDATED | 'ALL' )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==ID) ) {
                alt194=1;
            }
            else if ( (LA194_0==177) ) {
                alt194=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // RPIExprWalker.g:1028:21: keyUPDATED
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyUPDATED_in_return_rows_clause7590);
                    keyUPDATED743=keyUPDATED();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyUPDATED743.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1028:34: 'ALL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal744=(CommonTree)match(input,177,FOLLOW_177_in_return_rows_clause7594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal744_tree = (CommonTree)adaptor.dupNode(string_literal744);

                    adaptor.addChild(root_0, string_literal744_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal745=(CommonTree)match(input,189,FOLLOW_189_in_return_rows_clause7598); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal745_tree = (CommonTree)adaptor.dupNode(string_literal745);

            adaptor.addChild(root_0, string_literal745_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, return_rows_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "return_rows_clause"

    public static class reference_model_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_model"
    // RPIExprWalker.g:1030:1: reference_model : keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) ;
    public final RPIExprWalker.reference_model_return reference_model() throws RecognitionException {
        RPIExprWalker.reference_model_return retval = new RPIExprWalker.reference_model_return();
        retval.start = input.LT(1);
        int reference_model_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal748=null;
        CommonTree LPAREN749=null;
        CommonTree RPAREN751=null;
        RPIExprWalker.keyREFERENCE_return keyREFERENCE746 = null;

        RPIExprWalker.reference_model_name_return reference_model_name747 = null;

        RPIExprWalker.subquery_return subquery750 = null;

        RPIExprWalker.model_column_clauses_return model_column_clauses752 = null;

        RPIExprWalker.cell_reference_options_return cell_reference_options753 = null;


        CommonTree string_literal748_tree=null;
        CommonTree LPAREN749_tree=null;
        CommonTree RPAREN751_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // RPIExprWalker.g:1031:5: ( keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options ) )
            // RPIExprWalker.g:1031:9: keyREFERENCE reference_model_name 'ON' LPAREN subquery RPAREN model_column_clauses ( cell_reference_options )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyREFERENCE_in_reference_model7616);
            keyREFERENCE746=keyREFERENCE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyREFERENCE746.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_reference_model_name_in_reference_model7618);
            reference_model_name747=reference_model_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, reference_model_name747.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal748=(CommonTree)match(input,184,FOLLOW_184_in_reference_model7620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal748_tree = (CommonTree)adaptor.dupNode(string_literal748);

            adaptor.addChild(root_0, string_literal748_tree);
            }
            _last = (CommonTree)input.LT(1);
            LPAREN749=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_reference_model7622); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN749_tree = (CommonTree)adaptor.dupNode(LPAREN749);

            adaptor.addChild(root_0, LPAREN749_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_subquery_in_reference_model7624);
            subquery750=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, subquery750.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN751=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_reference_model7626); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN751_tree = (CommonTree)adaptor.dupNode(RPAREN751);

            adaptor.addChild(root_0, RPAREN751_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_column_clauses_in_reference_model7636);
            model_column_clauses752=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_column_clauses752.getTree());
            // RPIExprWalker.g:1032:30: ( cell_reference_options )
            // RPIExprWalker.g:1032:32: cell_reference_options
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cell_reference_options_in_reference_model7640);
            cell_reference_options753=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cell_reference_options753.getTree());

            if ( state.backtracking==0 ) {
            }
            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, reference_model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_model"

    public static class reference_model_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "reference_model_name"
    // RPIExprWalker.g:1034:1: reference_model_name : identifier ;
    public final RPIExprWalker.reference_model_name_return reference_model_name() throws RecognitionException {
        RPIExprWalker.reference_model_name_return retval = new RPIExprWalker.reference_model_name_return();
        retval.start = input.LT(1);
        int reference_model_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier754 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // RPIExprWalker.g:1035:5: ( identifier )
            // RPIExprWalker.g:1035:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_reference_model_name7660);
            identifier754=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier754.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, reference_model_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reference_model_name"

    public static class main_model_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "main_model"
    // RPIExprWalker.g:1037:1: main_model : ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause ;
    public final RPIExprWalker.main_model_return main_model() throws RecognitionException {
        RPIExprWalker.main_model_return retval = new RPIExprWalker.main_model_return();
        retval.start = input.LT(1);
        int main_model_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyMAIN_return keyMAIN755 = null;

        RPIExprWalker.main_model_name_return main_model_name756 = null;

        RPIExprWalker.model_column_clauses_return model_column_clauses757 = null;

        RPIExprWalker.cell_reference_options_return cell_reference_options758 = null;

        RPIExprWalker.model_rules_clause_return model_rules_clause759 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // RPIExprWalker.g:1038:5: ( ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause )
            // RPIExprWalker.g:1038:9: ( keyMAIN main_model_name )? model_column_clauses ( cell_reference_options ) model_rules_clause
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1038:9: ( keyMAIN main_model_name )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==ID) ) {
                int LA195_1 = input.LA(2);

                if ( (LA195_1==ID||LA195_1==DOUBLEQUOTED_STRING) ) {
                    alt195=1;
                }
            }
            switch (alt195) {
                case 1 :
                    // RPIExprWalker.g:1038:11: keyMAIN main_model_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyMAIN_in_main_model7680);
                    keyMAIN755=keyMAIN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyMAIN755.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_main_model_name_in_main_model7682);
                    main_model_name756=main_model_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, main_model_name756.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_column_clauses_in_main_model7687);
            model_column_clauses757=model_column_clauses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_column_clauses757.getTree());
            // RPIExprWalker.g:1039:9: ( cell_reference_options )
            // RPIExprWalker.g:1039:11: cell_reference_options
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cell_reference_options_in_main_model7699);
            cell_reference_options758=cell_reference_options();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cell_reference_options758.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_rules_clause_in_main_model7703);
            model_rules_clause759=model_rules_clause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_rules_clause759.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, main_model_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "main_model"

    public static class main_model_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "main_model_name"
    // RPIExprWalker.g:1041:1: main_model_name : identifier ;
    public final RPIExprWalker.main_model_name_return main_model_name() throws RecognitionException {
        RPIExprWalker.main_model_name_return retval = new RPIExprWalker.main_model_name_return();
        retval.start = input.LT(1);
        int main_model_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier760 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // RPIExprWalker.g:1042:5: ( identifier )
            // RPIExprWalker.g:1042:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_main_model_name7721);
            identifier760=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier760.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, main_model_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "main_model_name"

    public static class model_column_clauses_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column_clauses"
    // RPIExprWalker.g:1044:1: model_column_clauses : ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN ;
    public final RPIExprWalker.model_column_clauses_return model_column_clauses() throws RecognitionException {
        RPIExprWalker.model_column_clauses_return retval = new RPIExprWalker.model_column_clauses_return();
        retval.start = input.LT(1);
        int model_column_clauses_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal764=null;
        CommonTree LPAREN765=null;
        CommonTree RPAREN767=null;
        CommonTree LPAREN769=null;
        CommonTree RPAREN771=null;
        RPIExprWalker.query_partition_clause_return query_partition_clause761 = null;

        RPIExprWalker.column_spec_return column_spec762 = null;

        RPIExprWalker.keyDIMENSION_return keyDIMENSION763 = null;

        RPIExprWalker.model_columns_return model_columns766 = null;

        RPIExprWalker.keyMEASURES_return keyMEASURES768 = null;

        RPIExprWalker.model_columns_return model_columns770 = null;


        CommonTree string_literal764_tree=null;
        CommonTree LPAREN765_tree=null;
        CommonTree RPAREN767_tree=null;
        CommonTree LPAREN769_tree=null;
        CommonTree RPAREN771_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // RPIExprWalker.g:1045:5: ( ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN )
            // RPIExprWalker.g:1045:9: ( query_partition_clause ( column_spec )? )? keyDIMENSION 'BY' LPAREN model_columns RPAREN keyMEASURES LPAREN model_columns RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1045:9: ( query_partition_clause ( column_spec )? )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==ID) ) {
                int LA197_1 = input.LA(2);

                if ( ((synpred338_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION")))) ) {
                    alt197=1;
                }
            }
            switch (alt197) {
                case 1 :
                    // RPIExprWalker.g:1045:11: query_partition_clause ( column_spec )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_query_partition_clause_in_model_column_clauses7741);
                    query_partition_clause761=query_partition_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, query_partition_clause761.getTree());
                    // RPIExprWalker.g:1045:34: ( column_spec )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==ID) ) {
                        int LA196_1 = input.LA(2);

                        if ( (LA196_1==ID||LA196_1==DOT) ) {
                            alt196=1;
                        }
                    }
                    else if ( (LA196_0==DOUBLEQUOTED_STRING||LA196_0==158) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // RPIExprWalker.g:1045:36: column_spec
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_column_spec_in_model_column_clauses7745);
                            column_spec762=column_spec();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, column_spec762.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyDIMENSION_in_model_column_clauses7761);
            keyDIMENSION763=keyDIMENSION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyDIMENSION763.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal764=(CommonTree)match(input,166,FOLLOW_166_in_model_column_clauses7763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal764_tree = (CommonTree)adaptor.dupNode(string_literal764);

            adaptor.addChild(root_0, string_literal764_tree);
            }
            _last = (CommonTree)input.LT(1);
            LPAREN765=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses7765); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN765_tree = (CommonTree)adaptor.dupNode(LPAREN765);

            adaptor.addChild(root_0, LPAREN765_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_columns_in_model_column_clauses7767);
            model_columns766=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_columns766.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN767=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses7769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN767_tree = (CommonTree)adaptor.dupNode(RPAREN767);

            adaptor.addChild(root_0, RPAREN767_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyMEASURES_in_model_column_clauses7779);
            keyMEASURES768=keyMEASURES();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyMEASURES768.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN769=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_model_column_clauses7781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN769_tree = (CommonTree)adaptor.dupNode(LPAREN769);

            adaptor.addChild(root_0, LPAREN769_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_columns_in_model_column_clauses7783);
            model_columns770=model_columns();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_columns770.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN771=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_model_column_clauses7785); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN771_tree = (CommonTree)adaptor.dupNode(RPAREN771);

            adaptor.addChild(root_0, RPAREN771_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, model_column_clauses_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column_clauses"

    public static class model_columns_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_columns"
    // RPIExprWalker.g:1049:1: model_columns : model_column ( COMMA model_column )* ;
    public final RPIExprWalker.model_columns_return model_columns() throws RecognitionException {
        RPIExprWalker.model_columns_return retval = new RPIExprWalker.model_columns_return();
        retval.start = input.LT(1);
        int model_columns_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA773=null;
        RPIExprWalker.model_column_return model_column772 = null;

        RPIExprWalker.model_column_return model_column774 = null;


        CommonTree COMMA773_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // RPIExprWalker.g:1050:5: ( model_column ( COMMA model_column )* )
            // RPIExprWalker.g:1050:9: model_column ( COMMA model_column )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_column_in_model_columns7803);
            model_column772=model_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_column772.getTree());
            // RPIExprWalker.g:1050:22: ( COMMA model_column )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( (LA198_0==COMMA) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // RPIExprWalker.g:1050:24: COMMA model_column
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA773=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_model_columns7807); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA773_tree = (CommonTree)adaptor.dupNode(COMMA773);

            	    adaptor.addChild(root_0, COMMA773_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_model_column_in_model_columns7809);
            	    model_column774=model_column();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, model_column774.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, model_columns_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_columns"

    public static class model_column_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_column"
    // RPIExprWalker.g:1052:1: model_column : sql_expression ( ( 'AS' )? column_spec )? ;
    public final RPIExprWalker.model_column_return model_column() throws RecognitionException {
        RPIExprWalker.model_column_return retval = new RPIExprWalker.model_column_return();
        retval.start = input.LT(1);
        int model_column_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal776=null;
        RPIExprWalker.sql_expression_return sql_expression775 = null;

        RPIExprWalker.column_spec_return column_spec777 = null;


        CommonTree string_literal776_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // RPIExprWalker.g:1053:5: ( sql_expression ( ( 'AS' )? column_spec )? )
            // RPIExprWalker.g:1053:9: sql_expression ( ( 'AS' )? column_spec )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_model_column7830);
            sql_expression775=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression775.getTree());
            // RPIExprWalker.g:1053:24: ( ( 'AS' )? column_spec )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==ID||LA200_0==DOUBLEQUOTED_STRING||LA200_0==112||LA200_0==158) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // RPIExprWalker.g:1053:26: ( 'AS' )? column_spec
                    {
                    // RPIExprWalker.g:1053:26: ( 'AS' )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==112) ) {
                        alt199=1;
                    }
                    switch (alt199) {
                        case 1 :
                            // RPIExprWalker.g:1053:28: 'AS'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal776=(CommonTree)match(input,112,FOLLOW_112_in_model_column7836); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal776_tree = (CommonTree)adaptor.dupNode(string_literal776);

                            adaptor.addChild(root_0, string_literal776_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_spec_in_model_column7841);
                    column_spec777=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_spec777.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, model_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_column"

    public static class model_rules_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_clause"
    // RPIExprWalker.g:1055:1: model_rules_clause : ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN ;
    public final RPIExprWalker.model_rules_clause_return model_rules_clause() throws RecognitionException {
        RPIExprWalker.model_rules_clause_return retval = new RPIExprWalker.model_rules_clause_return();
        retval.start = input.LT(1);
        int model_rules_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal779=null;
        CommonTree string_literal781=null;
        CommonTree string_literal784=null;
        CommonTree LPAREN786=null;
        CommonTree NUMBER787=null;
        CommonTree RPAREN788=null;
        CommonTree LPAREN790=null;
        CommonTree RPAREN792=null;
        CommonTree LPAREN793=null;
        CommonTree RPAREN795=null;
        RPIExprWalker.keyRULES_return keyRULES778 = null;

        RPIExprWalker.keyUPSERT_return keyUPSERT780 = null;

        RPIExprWalker.keyAUTOMATIC_return keyAUTOMATIC782 = null;

        RPIExprWalker.keySEQUENTIAL_return keySEQUENTIAL783 = null;

        RPIExprWalker.keyITERATE_return keyITERATE785 = null;

        RPIExprWalker.keyUNTIL_return keyUNTIL789 = null;

        RPIExprWalker.sql_condition_return sql_condition791 = null;

        RPIExprWalker.model_rules_exprs_return model_rules_exprs794 = null;


        CommonTree string_literal779_tree=null;
        CommonTree string_literal781_tree=null;
        CommonTree string_literal784_tree=null;
        CommonTree LPAREN786_tree=null;
        CommonTree NUMBER787_tree=null;
        CommonTree RPAREN788_tree=null;
        CommonTree LPAREN790_tree=null;
        CommonTree RPAREN792_tree=null;
        CommonTree LPAREN793_tree=null;
        CommonTree RPAREN795_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // RPIExprWalker.g:1056:5: ( ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN )
            // RPIExprWalker.g:1056:9: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )? ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )? LPAREN model_rules_exprs RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1056:9: ( keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )? )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==ID) ) {
                int LA205_1 = input.LA(2);

                if ( (LA205_1==LPAREN) ) {
                    int LA205_3 = input.LA(3);

                    if ( (LA205_3==ID||LA205_3==DOUBLEQUOTED_STRING||LA205_3==158||LA205_3==190) ) {
                        alt205=1;
                    }
                }
                else if ( (LA205_1==ID||LA205_1==190) ) {
                    alt205=1;
                }
            }
            switch (alt205) {
                case 1 :
                    // RPIExprWalker.g:1056:11: keyRULES ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyRULES_in_model_rules_clause7864);
                    keyRULES778=keyRULES();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyRULES778.getTree());
                    // RPIExprWalker.g:1056:20: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
                    int alt202=3;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==190) ) {
                        alt202=1;
                    }
                    else if ( (LA202_0==ID) ) {
                        int LA202_2 = input.LA(2);

                        if ( (LA202_2==LPAREN) ) {
                            int LA202_4 = input.LA(3);

                            if ( (LA202_4==ID||LA202_4==DOUBLEQUOTED_STRING||LA202_4==158||LA202_4==190) ) {
                                alt202=2;
                            }
                        }
                        else if ( (LA202_2==ID||LA202_2==177) ) {
                            alt202=2;
                        }
                    }
                    switch (alt202) {
                        case 1 :
                            // RPIExprWalker.g:1056:22: 'UPDATE'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal779=(CommonTree)match(input,190,FOLLOW_190_in_model_rules_clause7868); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal779_tree = (CommonTree)adaptor.dupNode(string_literal779);

                            adaptor.addChild(root_0, string_literal779_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1056:33: keyUPSERT ( 'ALL' )?
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyUPSERT_in_model_rules_clause7872);
                            keyUPSERT780=keyUPSERT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyUPSERT780.getTree());
                            // RPIExprWalker.g:1056:43: ( 'ALL' )?
                            int alt201=2;
                            int LA201_0 = input.LA(1);

                            if ( (LA201_0==177) ) {
                                alt201=1;
                            }
                            switch (alt201) {
                                case 1 :
                                    // RPIExprWalker.g:1056:45: 'ALL'
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    string_literal781=(CommonTree)match(input,177,FOLLOW_177_in_model_rules_clause7876); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal781_tree = (CommonTree)adaptor.dupNode(string_literal781);

                                    adaptor.addChild(root_0, string_literal781_tree);
                                    }

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }


                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:1056:57: ( ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER' )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==ID) ) {
                        int LA204_1 = input.LA(2);

                        if ( (LA204_1==191) ) {
                            alt204=1;
                        }
                    }
                    switch (alt204) {
                        case 1 :
                            // RPIExprWalker.g:1056:59: ( keyAUTOMATIC | keySEQUENTIAL ) 'ORDER'
                            {
                            // RPIExprWalker.g:1056:59: ( keyAUTOMATIC | keySEQUENTIAL )
                            int alt203=2;
                            int LA203_0 = input.LA(1);

                            if ( (LA203_0==ID) ) {
                                int LA203_1 = input.LA(2);

                                if ( ((synpred345_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "AUTOMATIC")))) ) {
                                    alt203=1;
                                }
                                else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SEQUENTIAL"))) ) {
                                    alt203=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 203, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 203, 0, input);

                                throw nvae;
                            }
                            switch (alt203) {
                                case 1 :
                                    // RPIExprWalker.g:1056:61: keyAUTOMATIC
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_keyAUTOMATIC_in_model_rules_clause7888);
                                    keyAUTOMATIC782=keyAUTOMATIC();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, keyAUTOMATIC782.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;
                                case 2 :
                                    // RPIExprWalker.g:1056:76: keySEQUENTIAL
                                    {
                                    _last = (CommonTree)input.LT(1);
                                    pushFollow(FOLLOW_keySEQUENTIAL_in_model_rules_clause7892);
                                    keySEQUENTIAL783=keySEQUENTIAL();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) 
                                    adaptor.addChild(root_0, keySEQUENTIAL783.getTree());

                                    if ( state.backtracking==0 ) {
                                    }
                                    }
                                    break;

                            }

                            _last = (CommonTree)input.LT(1);
                            string_literal784=(CommonTree)match(input,191,FOLLOW_191_in_model_rules_clause7896); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal784_tree = (CommonTree)adaptor.dupNode(string_literal784);

                            adaptor.addChild(root_0, string_literal784_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1057:9: ( keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )? )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==ID) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // RPIExprWalker.g:1057:11: keyITERATE LPAREN NUMBER RPAREN ( keyUNTIL LPAREN sql_condition RPAREN )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyITERATE_in_model_rules_clause7914);
                    keyITERATE785=keyITERATE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyITERATE785.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN786=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause7916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN786_tree = (CommonTree)adaptor.dupNode(LPAREN786);

                    adaptor.addChild(root_0, LPAREN786_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    NUMBER787=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_model_rules_clause7918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER787_tree = (CommonTree)adaptor.dupNode(NUMBER787);

                    adaptor.addChild(root_0, NUMBER787_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    RPAREN788=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause7920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN788_tree = (CommonTree)adaptor.dupNode(RPAREN788);

                    adaptor.addChild(root_0, RPAREN788_tree);
                    }
                    // RPIExprWalker.g:1057:43: ( keyUNTIL LPAREN sql_condition RPAREN )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==ID) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // RPIExprWalker.g:1057:45: keyUNTIL LPAREN sql_condition RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyUNTIL_in_model_rules_clause7924);
                            keyUNTIL789=keyUNTIL();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyUNTIL789.getTree());
                            _last = (CommonTree)input.LT(1);
                            LPAREN790=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause7926); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN790_tree = (CommonTree)adaptor.dupNode(LPAREN790);

                            adaptor.addChild(root_0, LPAREN790_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_condition_in_model_rules_clause7928);
                            sql_condition791=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_condition791.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN792=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause7930); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN792_tree = (CommonTree)adaptor.dupNode(RPAREN792);

                            adaptor.addChild(root_0, RPAREN792_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            LPAREN793=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_model_rules_clause7946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN793_tree = (CommonTree)adaptor.dupNode(LPAREN793);

            adaptor.addChild(root_0, LPAREN793_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_rules_exprs_in_model_rules_clause7948);
            model_rules_exprs794=model_rules_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_rules_exprs794.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN795=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_model_rules_clause7950); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN795_tree = (CommonTree)adaptor.dupNode(RPAREN795);

            adaptor.addChild(root_0, RPAREN795_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, model_rules_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_clause"

    public static class model_rules_exprs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_exprs"
    // RPIExprWalker.g:1060:1: model_rules_exprs : model_rules_expr ( COMMA model_rules_expr )* ;
    public final RPIExprWalker.model_rules_exprs_return model_rules_exprs() throws RecognitionException {
        RPIExprWalker.model_rules_exprs_return retval = new RPIExprWalker.model_rules_exprs_return();
        retval.start = input.LT(1);
        int model_rules_exprs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA797=null;
        RPIExprWalker.model_rules_expr_return model_rules_expr796 = null;

        RPIExprWalker.model_rules_expr_return model_rules_expr798 = null;


        CommonTree COMMA797_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // RPIExprWalker.g:1061:5: ( model_rules_expr ( COMMA model_rules_expr )* )
            // RPIExprWalker.g:1061:9: model_rules_expr ( COMMA model_rules_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs7968);
            model_rules_expr796=model_rules_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, model_rules_expr796.getTree());
            // RPIExprWalker.g:1061:26: ( COMMA model_rules_expr )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // RPIExprWalker.g:1061:28: COMMA model_rules_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA797=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_model_rules_exprs7972); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA797_tree = (CommonTree)adaptor.dupNode(COMMA797);

            	    adaptor.addChild(root_0, COMMA797_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_model_rules_expr_in_model_rules_exprs7974);
            	    model_rules_expr798=model_rules_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, model_rules_expr798.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, model_rules_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_exprs"

    public static class model_rules_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_rules_expr"
    // RPIExprWalker.g:1063:1: model_rules_expr : ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression ;
    public final RPIExprWalker.model_rules_expr_return model_rules_expr() throws RecognitionException {
        RPIExprWalker.model_rules_expr_return retval = new RPIExprWalker.model_rules_expr_return();
        retval.start = input.LT(1);
        int model_rules_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal799=null;
        CommonTree string_literal801=null;
        CommonTree EQ804=null;
        RPIExprWalker.keyUPSERT_return keyUPSERT800 = null;

        RPIExprWalker.cell_assignment_return cell_assignment802 = null;

        RPIExprWalker.order_by_clause_return order_by_clause803 = null;

        RPIExprWalker.sql_expression_return sql_expression805 = null;


        CommonTree string_literal799_tree=null;
        CommonTree string_literal801_tree=null;
        CommonTree EQ804_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // RPIExprWalker.g:1064:5: ( ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression )
            // RPIExprWalker.g:1064:9: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )? cell_assignment ( order_by_clause )? EQ sql_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1064:9: ( 'UPDATE' | keyUPSERT ( 'ALL' )? )?
            int alt210=3;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==190) ) {
                alt210=1;
            }
            else if ( (LA210_0==ID) ) {
                int LA210_2 = input.LA(2);

                if ( (LA210_2==ID||LA210_2==DOUBLEQUOTED_STRING||LA210_2==158||LA210_2==177) ) {
                    alt210=2;
                }
            }
            switch (alt210) {
                case 1 :
                    // RPIExprWalker.g:1064:11: 'UPDATE'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal799=(CommonTree)match(input,190,FOLLOW_190_in_model_rules_expr7997); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal799_tree = (CommonTree)adaptor.dupNode(string_literal799);

                    adaptor.addChild(root_0, string_literal799_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1064:22: keyUPSERT ( 'ALL' )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyUPSERT_in_model_rules_expr8001);
                    keyUPSERT800=keyUPSERT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyUPSERT800.getTree());
                    // RPIExprWalker.g:1064:32: ( 'ALL' )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==177) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // RPIExprWalker.g:1064:34: 'ALL'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal801=(CommonTree)match(input,177,FOLLOW_177_in_model_rules_expr8005); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal801_tree = (CommonTree)adaptor.dupNode(string_literal801);

                            adaptor.addChild(root_0, string_literal801_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cell_assignment_in_model_rules_expr8013);
            cell_assignment802=cell_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cell_assignment802.getTree());
            // RPIExprWalker.g:1064:62: ( order_by_clause )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==191) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // RPIExprWalker.g:1064:64: order_by_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_order_by_clause_in_model_rules_expr8017);
                    order_by_clause803=order_by_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, order_by_clause803.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            EQ804=(CommonTree)match(input,EQ,FOLLOW_EQ_in_model_rules_expr8022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ804_tree = (CommonTree)adaptor.dupNode(EQ804);

            adaptor.addChild(root_0, EQ804_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_model_rules_expr8024);
            sql_expression805=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression805.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, model_rules_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_rules_expr"

    public static class cell_assignment_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment"
    // RPIExprWalker.g:1066:1: cell_assignment : measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK ;
    public final RPIExprWalker.cell_assignment_return cell_assignment() throws RecognitionException {
        RPIExprWalker.cell_assignment_return retval = new RPIExprWalker.cell_assignment_return();
        retval.start = input.LT(1);
        int cell_assignment_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LBRACK807=null;
        CommonTree RBRACK810=null;
        RPIExprWalker.measure_column_return measure_column806 = null;

        RPIExprWalker.multi_column_for_loop_return multi_column_for_loop808 = null;

        RPIExprWalker.cell_assignment_exprs_return cell_assignment_exprs809 = null;


        CommonTree LBRACK807_tree=null;
        CommonTree RBRACK810_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // RPIExprWalker.g:1067:5: ( measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK )
            // RPIExprWalker.g:1067:9: measure_column LBRACK ( multi_column_for_loop | cell_assignment_exprs ) RBRACK
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_measure_column_in_cell_assignment8042);
            measure_column806=measure_column();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, measure_column806.getTree());
            _last = (CommonTree)input.LT(1);
            LBRACK807=(CommonTree)match(input,LBRACK,FOLLOW_LBRACK_in_cell_assignment8044); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACK807_tree = (CommonTree)adaptor.dupNode(LBRACK807);

            adaptor.addChild(root_0, LBRACK807_tree);
            }
            // RPIExprWalker.g:1067:31: ( multi_column_for_loop | cell_assignment_exprs )
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==170) ) {
                int LA212_1 = input.LA(2);

                if ( (LA212_1==LPAREN) ) {
                    alt212=1;
                }
                else if ( (LA212_1==ID||LA212_1==DOUBLEQUOTED_STRING||LA212_1==158) ) {
                    alt212=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 212, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA212_0>=SUBSTR && LA212_0<=TO_CHAR)||LA212_0==TRIM||(LA212_0>=ID && LA212_0<=LPAREN)||(LA212_0>=SQL && LA212_0<=MINUS)||LA212_0==NUMBER||LA212_0==NOT||LA212_0==QUOTED_STRING||LA212_0==DOUBLEQUOTED_STRING||LA212_0==116||LA212_0==158||(LA212_0>=168 && LA212_0<=169)||(LA212_0>=174 && LA212_0<=175)||(LA212_0>=197 && LA212_0<=198)||LA212_0==200||LA212_0==202) ) {
                alt212=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 212, 0, input);

                throw nvae;
            }
            switch (alt212) {
                case 1 :
                    // RPIExprWalker.g:1067:33: multi_column_for_loop
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_multi_column_for_loop_in_cell_assignment8048);
                    multi_column_for_loop808=multi_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, multi_column_for_loop808.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1067:57: cell_assignment_exprs
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cell_assignment_exprs_in_cell_assignment8052);
                    cell_assignment_exprs809=cell_assignment_exprs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cell_assignment_exprs809.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            RBRACK810=(CommonTree)match(input,RBRACK,FOLLOW_RBRACK_in_cell_assignment8056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACK810_tree = (CommonTree)adaptor.dupNode(RBRACK810);

            adaptor.addChild(root_0, RBRACK810_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, cell_assignment_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment"

    public static class cell_assignment_exprs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment_exprs"
    // RPIExprWalker.g:1069:1: cell_assignment_exprs : cell_assignment_expr ( COMMA cell_assignment_expr )* ;
    public final RPIExprWalker.cell_assignment_exprs_return cell_assignment_exprs() throws RecognitionException {
        RPIExprWalker.cell_assignment_exprs_return retval = new RPIExprWalker.cell_assignment_exprs_return();
        retval.start = input.LT(1);
        int cell_assignment_exprs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA812=null;
        RPIExprWalker.cell_assignment_expr_return cell_assignment_expr811 = null;

        RPIExprWalker.cell_assignment_expr_return cell_assignment_expr813 = null;


        CommonTree COMMA812_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // RPIExprWalker.g:1070:5: ( cell_assignment_expr ( COMMA cell_assignment_expr )* )
            // RPIExprWalker.g:1070:9: cell_assignment_expr ( COMMA cell_assignment_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8074);
            cell_assignment_expr811=cell_assignment_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cell_assignment_expr811.getTree());
            // RPIExprWalker.g:1070:30: ( COMMA cell_assignment_expr )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==COMMA) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // RPIExprWalker.g:1070:32: COMMA cell_assignment_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA812=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_cell_assignment_exprs8078); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA812_tree = (CommonTree)adaptor.dupNode(COMMA812);

            	    adaptor.addChild(root_0, COMMA812_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8080);
            	    cell_assignment_expr813=cell_assignment_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, cell_assignment_expr813.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, cell_assignment_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment_exprs"

    public static class cell_assignment_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_assignment_expr"
    // RPIExprWalker.g:1072:1: cell_assignment_expr : ( sql_condition | sql_expression | single_column_for_loop );
    public final RPIExprWalker.cell_assignment_expr_return cell_assignment_expr() throws RecognitionException {
        RPIExprWalker.cell_assignment_expr_return retval = new RPIExprWalker.cell_assignment_expr_return();
        retval.start = input.LT(1);
        int cell_assignment_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_condition_return sql_condition814 = null;

        RPIExprWalker.sql_expression_return sql_expression815 = null;

        RPIExprWalker.single_column_for_loop_return single_column_for_loop816 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // RPIExprWalker.g:1073:5: ( sql_condition | sql_expression | single_column_for_loop )
            int alt214=3;
            switch ( input.LA(1) ) {
            case NOT:
            case 197:
            case 200:
            case 202:
                {
                alt214=1;
                }
                break;
            case PLUS:
                {
                int LA214_3 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 3, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA214_4 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 4, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA214_5 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 5, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA214_6 = input.LA(2);

                if ( (((synpred357_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH")))||(synpred357_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))||(synpred357_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))||synpred357_RPIExprWalker())) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 6, input);

                    throw nvae;
                }
                }
                break;
            case TO_CHAR:
                {
                int LA214_7 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 7, input);

                    throw nvae;
                }
                }
                break;
            case SUBSTR:
                {
                int LA214_8 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 8, input);

                    throw nvae;
                }
                }
                break;
            case TRIM:
                {
                int LA214_9 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 9, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA214_10 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 10, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA214_11 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 11, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA214_12 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 12, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA214_13 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 13, input);

                    throw nvae;
                }
                }
                break;
            case 168:
                {
                int LA214_14 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 14, input);

                    throw nvae;
                }
                }
                break;
            case 169:
                {
                int LA214_15 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 15, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA214_16 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 16, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA214_17 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 17, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA214_18 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 18, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA214_19 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 19, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA214_20 = input.LA(2);

                if ( (synpred357_RPIExprWalker()) ) {
                    alt214=1;
                }
                else if ( (synpred358_RPIExprWalker()) ) {
                    alt214=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 20, input);

                    throw nvae;
                }
                }
                break;
            case 170:
                {
                alt214=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }

            switch (alt214) {
                case 1 :
                    // RPIExprWalker.g:1073:9: sql_condition
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_cell_assignment_expr8101);
                    sql_condition814=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition814.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1073:25: sql_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_cell_assignment_expr8105);
                    sql_expression815=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression815.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1073:42: single_column_for_loop
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_single_column_for_loop_in_cell_assignment_expr8109);
                    single_column_for_loop816=single_column_for_loop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, single_column_for_loop816.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, cell_assignment_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_assignment_expr"

    public static class measure_column_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "measure_column"
    // RPIExprWalker.g:1075:1: measure_column : column_name ;
    public final RPIExprWalker.measure_column_return measure_column() throws RecognitionException {
        RPIExprWalker.measure_column_return retval = new RPIExprWalker.measure_column_return();
        retval.start = input.LT(1);
        int measure_column_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.column_name_return column_name817 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // RPIExprWalker.g:1076:5: ( column_name )
            // RPIExprWalker.g:1076:9: column_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_name_in_measure_column8127);
            column_name817=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_name817.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, measure_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "measure_column"

    public static class single_column_for_loop_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_column_for_loop"
    // RPIExprWalker.g:1078:1: single_column_for_loop : 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) ;
    public final RPIExprWalker.single_column_for_loop_return single_column_for_loop() throws RecognitionException {
        RPIExprWalker.single_column_for_loop_return retval = new RPIExprWalker.single_column_for_loop_return();
        retval.start = input.LT(1);
        int single_column_for_loop_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal818=null;
        CommonTree string_literal820=null;
        CommonTree LPAREN821=null;
        CommonTree RPAREN824=null;
        CommonTree string_literal825=null;
        CommonTree string_literal827=null;
        CommonTree string_literal829=null;
        RPIExprWalker.column_name_return column_name819 = null;

        RPIExprWalker.literals_return literals822 = null;

        RPIExprWalker.subquery_return subquery823 = null;

        RPIExprWalker.pattern_return pattern826 = null;

        RPIExprWalker.literal_return literal828 = null;

        RPIExprWalker.literal_return literal830 = null;

        RPIExprWalker.keyINCREMENT_return keyINCREMENT831 = null;

        RPIExprWalker.keyDECREMENT_return keyDECREMENT832 = null;

        RPIExprWalker.literal_return literal833 = null;


        CommonTree string_literal818_tree=null;
        CommonTree string_literal820_tree=null;
        CommonTree LPAREN821_tree=null;
        CommonTree RPAREN824_tree=null;
        CommonTree string_literal825_tree=null;
        CommonTree string_literal827_tree=null;
        CommonTree string_literal829_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // RPIExprWalker.g:1079:5: ( 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal ) )
            // RPIExprWalker.g:1079:9: 'FOR' column_name ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal818=(CommonTree)match(input,170,FOLLOW_170_in_single_column_for_loop8145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal818_tree = (CommonTree)adaptor.dupNode(string_literal818);

            adaptor.addChild(root_0, string_literal818_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_name_in_single_column_for_loop8147);
            column_name819=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_name819.getTree());
            // RPIExprWalker.g:1080:9: ( 'IN' LPAREN ( literals | subquery ) RPAREN | ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==160) ) {
                alt218=1;
            }
            else if ( (LA218_0==179||LA218_0==192) ) {
                alt218=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // RPIExprWalker.g:1080:13: 'IN' LPAREN ( literals | subquery ) RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal820=(CommonTree)match(input,160,FOLLOW_160_in_single_column_for_loop8161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal820_tree = (CommonTree)adaptor.dupNode(string_literal820);

                    adaptor.addChild(root_0, string_literal820_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    LPAREN821=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_single_column_for_loop8163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN821_tree = (CommonTree)adaptor.dupNode(LPAREN821);

                    adaptor.addChild(root_0, LPAREN821_tree);
                    }
                    // RPIExprWalker.g:1080:25: ( literals | subquery )
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( ((LA215_0>=PLUS && LA215_0<=MINUS)||LA215_0==NUMBER||LA215_0==QUOTED_STRING) ) {
                        alt215=1;
                    }
                    else if ( (LA215_0==LPAREN) ) {
                        alt215=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 215, 0, input);

                        throw nvae;
                    }
                    switch (alt215) {
                        case 1 :
                            // RPIExprWalker.g:1080:27: literals
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_literals_in_single_column_for_loop8167);
                            literals822=literals();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, literals822.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1080:38: subquery
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_subquery_in_single_column_for_loop8171);
                            subquery823=subquery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, subquery823.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN824=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_single_column_for_loop8175); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN824_tree = (CommonTree)adaptor.dupNode(RPAREN824);

                    adaptor.addChild(root_0, RPAREN824_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1081:13: ( 'LIKE' pattern )? 'FROM' literal 'TO' literal ( keyINCREMENT | keyDECREMENT ) literal
                    {
                    // RPIExprWalker.g:1081:13: ( 'LIKE' pattern )?
                    int alt216=2;
                    int LA216_0 = input.LA(1);

                    if ( (LA216_0==192) ) {
                        alt216=1;
                    }
                    switch (alt216) {
                        case 1 :
                            // RPIExprWalker.g:1081:15: 'LIKE' pattern
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal825=(CommonTree)match(input,192,FOLLOW_192_in_single_column_for_loop8191); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal825_tree = (CommonTree)adaptor.dupNode(string_literal825);

                            adaptor.addChild(root_0, string_literal825_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_pattern_in_single_column_for_loop8193);
                            pattern826=pattern();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, pattern826.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal827=(CommonTree)match(input,179,FOLLOW_179_in_single_column_for_loop8198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal827_tree = (CommonTree)adaptor.dupNode(string_literal827);

                    adaptor.addChild(root_0, string_literal827_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_single_column_for_loop8200);
                    literal828=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, literal828.getTree());
                    _last = (CommonTree)input.LT(1);
                    string_literal829=(CommonTree)match(input,135,FOLLOW_135_in_single_column_for_loop8202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal829_tree = (CommonTree)adaptor.dupNode(string_literal829);

                    adaptor.addChild(root_0, string_literal829_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_single_column_for_loop8204);
                    literal830=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, literal830.getTree());
                    // RPIExprWalker.g:1081:61: ( keyINCREMENT | keyDECREMENT )
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==ID) ) {
                        int LA217_1 = input.LA(2);

                        if ( ((synpred362_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INCREMENT")))) ) {
                            alt217=1;
                        }
                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DECREMENT"))) ) {
                            alt217=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 217, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 217, 0, input);

                        throw nvae;
                    }
                    switch (alt217) {
                        case 1 :
                            // RPIExprWalker.g:1081:63: keyINCREMENT
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyINCREMENT_in_single_column_for_loop8208);
                            keyINCREMENT831=keyINCREMENT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyINCREMENT831.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1081:78: keyDECREMENT
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyDECREMENT_in_single_column_for_loop8212);
                            keyDECREMENT832=keyDECREMENT();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyDECREMENT832.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_literal_in_single_column_for_loop8216);
                    literal833=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, literal833.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, single_column_for_loop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "single_column_for_loop"

    public static class literal_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // RPIExprWalker.g:1084:1: literal : ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING );
    public final RPIExprWalker.literal_return literal() throws RecognitionException {
        RPIExprWalker.literal_return retval = new RPIExprWalker.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set834=null;
        CommonTree NUMBER835=null;
        CommonTree QUOTED_STRING836=null;

        CommonTree set834_tree=null;
        CommonTree NUMBER835_tree=null;
        CommonTree QUOTED_STRING836_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // RPIExprWalker.g:1085:5: ( ( PLUS | MINUS )? NUMBER | QUOTED_STRING )
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( ((LA220_0>=PLUS && LA220_0<=MINUS)||LA220_0==NUMBER) ) {
                alt220=1;
            }
            else if ( (LA220_0==QUOTED_STRING) ) {
                alt220=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);

                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    // RPIExprWalker.g:1085:9: ( PLUS | MINUS )? NUMBER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // RPIExprWalker.g:1085:9: ( PLUS | MINUS )?
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( ((LA219_0>=PLUS && LA219_0<=MINUS)) ) {
                        alt219=1;
                    }
                    switch (alt219) {
                        case 1 :
                            // RPIExprWalker.g:
                            {
                            _last = (CommonTree)input.LT(1);
                            set834=(CommonTree)input.LT(1);
                            if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
                                input.consume();

                                if ( state.backtracking==0 ) {
                                set834_tree = (CommonTree)adaptor.dupNode(set834);

                                adaptor.addChild(root_0, set834_tree);
                                }
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    NUMBER835=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_literal8255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER835_tree = (CommonTree)adaptor.dupNode(NUMBER835);

                    adaptor.addChild(root_0, NUMBER835_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1086:9: QUOTED_STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    QUOTED_STRING836=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_literal8265); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING836_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING836);

                    adaptor.addChild(root_0, QUOTED_STRING836_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class literals_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literals"
    // RPIExprWalker.g:1088:1: literals : literal ( COMMA literal )* ;
    public final RPIExprWalker.literals_return literals() throws RecognitionException {
        RPIExprWalker.literals_return retval = new RPIExprWalker.literals_return();
        retval.start = input.LT(1);
        int literals_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA838=null;
        RPIExprWalker.literal_return literal837 = null;

        RPIExprWalker.literal_return literal839 = null;


        CommonTree COMMA838_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // RPIExprWalker.g:1089:5: ( literal ( COMMA literal )* )
            // RPIExprWalker.g:1089:9: literal ( COMMA literal )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literal_in_literals8283);
            literal837=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, literal837.getTree());
            // RPIExprWalker.g:1089:17: ( COMMA literal )*
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // RPIExprWalker.g:1089:19: COMMA literal
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA838=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_literals8287); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA838_tree = (CommonTree)adaptor.dupNode(COMMA838);

            	    adaptor.addChild(root_0, COMMA838_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_literal_in_literals8289);
            	    literal839=literal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, literal839.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, literals_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literals"

    public static class bracket_literals_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_literals"
    // RPIExprWalker.g:1091:1: bracket_literals : LPAREN literals RPAREN ;
    public final RPIExprWalker.bracket_literals_return bracket_literals() throws RecognitionException {
        RPIExprWalker.bracket_literals_return retval = new RPIExprWalker.bracket_literals_return();
        retval.start = input.LT(1);
        int bracket_literals_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN840=null;
        CommonTree RPAREN842=null;
        RPIExprWalker.literals_return literals841 = null;


        CommonTree LPAREN840_tree=null;
        CommonTree RPAREN842_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // RPIExprWalker.g:1092:5: ( LPAREN literals RPAREN )
            // RPIExprWalker.g:1092:9: LPAREN literals RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            LPAREN840=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_bracket_literals8310); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN840_tree = (CommonTree)adaptor.dupNode(LPAREN840);

            adaptor.addChild(root_0, LPAREN840_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_literals_in_bracket_literals8312);
            literals841=literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, literals841.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN842=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_bracket_literals8314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN842_tree = (CommonTree)adaptor.dupNode(RPAREN842);

            adaptor.addChild(root_0, RPAREN842_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, bracket_literals_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracket_literals"

    public static class bracket_literals_list_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bracket_literals_list"
    // RPIExprWalker.g:1094:1: bracket_literals_list : bracket_literals ( COMMA bracket_literals )* ;
    public final RPIExprWalker.bracket_literals_list_return bracket_literals_list() throws RecognitionException {
        RPIExprWalker.bracket_literals_list_return retval = new RPIExprWalker.bracket_literals_list_return();
        retval.start = input.LT(1);
        int bracket_literals_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA844=null;
        RPIExprWalker.bracket_literals_return bracket_literals843 = null;

        RPIExprWalker.bracket_literals_return bracket_literals845 = null;


        CommonTree COMMA844_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // RPIExprWalker.g:1095:5: ( bracket_literals ( COMMA bracket_literals )* )
            // RPIExprWalker.g:1095:9: bracket_literals ( COMMA bracket_literals )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list8332);
            bracket_literals843=bracket_literals();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, bracket_literals843.getTree());
            // RPIExprWalker.g:1095:26: ( COMMA bracket_literals )*
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);

                if ( (LA222_0==COMMA) ) {
                    alt222=1;
                }


                switch (alt222) {
            	case 1 :
            	    // RPIExprWalker.g:1095:28: COMMA bracket_literals
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA844=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_bracket_literals_list8336); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA844_tree = (CommonTree)adaptor.dupNode(COMMA844);

            	    adaptor.addChild(root_0, COMMA844_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_bracket_literals_in_bracket_literals_list8338);
            	    bracket_literals845=bracket_literals();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, bracket_literals845.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop222;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, bracket_literals_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bracket_literals_list"

    public static class pattern_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pattern"
    // RPIExprWalker.g:1097:1: pattern : QUOTED_STRING ;
    public final RPIExprWalker.pattern_return pattern() throws RecognitionException {
        RPIExprWalker.pattern_return retval = new RPIExprWalker.pattern_return();
        retval.start = input.LT(1);
        int pattern_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTED_STRING846=null;

        CommonTree QUOTED_STRING846_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // RPIExprWalker.g:1098:5: ( QUOTED_STRING )
            // RPIExprWalker.g:1098:9: QUOTED_STRING
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            QUOTED_STRING846=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_pattern8359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING846_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING846);

            adaptor.addChild(root_0, QUOTED_STRING846_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, pattern_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pattern"

    public static class multi_column_for_loop_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multi_column_for_loop"
    // RPIExprWalker.g:1100:1: multi_column_for_loop : 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN ;
    public final RPIExprWalker.multi_column_for_loop_return multi_column_for_loop() throws RecognitionException {
        RPIExprWalker.multi_column_for_loop_return retval = new RPIExprWalker.multi_column_for_loop_return();
        retval.start = input.LT(1);
        int multi_column_for_loop_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal847=null;
        CommonTree LPAREN848=null;
        CommonTree RPAREN850=null;
        CommonTree string_literal851=null;
        CommonTree LPAREN852=null;
        CommonTree RPAREN855=null;
        RPIExprWalker.column_specs_return column_specs849 = null;

        RPIExprWalker.bracket_literals_list_return bracket_literals_list853 = null;

        RPIExprWalker.subquery_return subquery854 = null;


        CommonTree string_literal847_tree=null;
        CommonTree LPAREN848_tree=null;
        CommonTree RPAREN850_tree=null;
        CommonTree string_literal851_tree=null;
        CommonTree LPAREN852_tree=null;
        CommonTree RPAREN855_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // RPIExprWalker.g:1101:5: ( 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN )
            // RPIExprWalker.g:1101:9: 'FOR' LPAREN column_specs RPAREN 'IN' LPAREN ( bracket_literals_list | subquery ) RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal847=(CommonTree)match(input,170,FOLLOW_170_in_multi_column_for_loop8377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal847_tree = (CommonTree)adaptor.dupNode(string_literal847);

            adaptor.addChild(root_0, string_literal847_tree);
            }
            _last = (CommonTree)input.LT(1);
            LPAREN848=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop8379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN848_tree = (CommonTree)adaptor.dupNode(LPAREN848);

            adaptor.addChild(root_0, LPAREN848_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_specs_in_multi_column_for_loop8381);
            column_specs849=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_specs849.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN850=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop8383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN850_tree = (CommonTree)adaptor.dupNode(RPAREN850);

            adaptor.addChild(root_0, RPAREN850_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal851=(CommonTree)match(input,160,FOLLOW_160_in_multi_column_for_loop8385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal851_tree = (CommonTree)adaptor.dupNode(string_literal851);

            adaptor.addChild(root_0, string_literal851_tree);
            }
            _last = (CommonTree)input.LT(1);
            LPAREN852=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_multi_column_for_loop8387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN852_tree = (CommonTree)adaptor.dupNode(LPAREN852);

            adaptor.addChild(root_0, LPAREN852_tree);
            }
            // RPIExprWalker.g:1101:54: ( bracket_literals_list | subquery )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==LPAREN) ) {
                int LA223_1 = input.LA(2);

                if ( ((LA223_1>=PLUS && LA223_1<=MINUS)||LA223_1==NUMBER||LA223_1==QUOTED_STRING) ) {
                    alt223=1;
                }
                else if ( (LA223_1==174) ) {
                    alt223=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 223, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // RPIExprWalker.g:1101:56: bracket_literals_list
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_bracket_literals_list_in_multi_column_for_loop8391);
                    bracket_literals_list853=bracket_literals_list();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, bracket_literals_list853.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1101:80: subquery
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subquery_in_multi_column_for_loop8395);
                    subquery854=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subquery854.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            RPAREN855=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_multi_column_for_loop8399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN855_tree = (CommonTree)adaptor.dupNode(RPAREN855);

            adaptor.addChild(root_0, RPAREN855_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, multi_column_for_loop_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multi_column_for_loop"

    public static class order_by_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_clause"
    // RPIExprWalker.g:1103:1: order_by_clause : 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs ;
    public final RPIExprWalker.order_by_clause_return order_by_clause() throws RecognitionException {
        RPIExprWalker.order_by_clause_return retval = new RPIExprWalker.order_by_clause_return();
        retval.start = input.LT(1);
        int order_by_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal856=null;
        CommonTree string_literal858=null;
        RPIExprWalker.keySIBLINGS_return keySIBLINGS857 = null;

        RPIExprWalker.order_by_exprs_return order_by_exprs859 = null;


        CommonTree string_literal856_tree=null;
        CommonTree string_literal858_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // RPIExprWalker.g:1104:5: ( 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs )
            // RPIExprWalker.g:1104:9: 'ORDER' ( keySIBLINGS )? 'BY' order_by_exprs
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal856=(CommonTree)match(input,191,FOLLOW_191_in_order_by_clause8417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal856_tree = (CommonTree)adaptor.dupNode(string_literal856);

            adaptor.addChild(root_0, string_literal856_tree);
            }
            // RPIExprWalker.g:1104:17: ( keySIBLINGS )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==ID) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // RPIExprWalker.g:1104:19: keySIBLINGS
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keySIBLINGS_in_order_by_clause8421);
                    keySIBLINGS857=keySIBLINGS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keySIBLINGS857.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal858=(CommonTree)match(input,166,FOLLOW_166_in_order_by_clause8426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal858_tree = (CommonTree)adaptor.dupNode(string_literal858);

            adaptor.addChild(root_0, string_literal858_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_exprs_in_order_by_clause8428);
            order_by_exprs859=order_by_exprs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, order_by_exprs859.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, order_by_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_clause"

    public static class order_by_exprs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_exprs"
    // RPIExprWalker.g:1106:1: order_by_exprs : order_by_expr ( COMMA order_by_expr )* ;
    public final RPIExprWalker.order_by_exprs_return order_by_exprs() throws RecognitionException {
        RPIExprWalker.order_by_exprs_return retval = new RPIExprWalker.order_by_exprs_return();
        retval.start = input.LT(1);
        int order_by_exprs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA861=null;
        RPIExprWalker.order_by_expr_return order_by_expr860 = null;

        RPIExprWalker.order_by_expr_return order_by_expr862 = null;


        CommonTree COMMA861_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // RPIExprWalker.g:1107:5: ( order_by_expr ( COMMA order_by_expr )* )
            // RPIExprWalker.g:1107:9: order_by_expr ( COMMA order_by_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_order_by_expr_in_order_by_exprs8446);
            order_by_expr860=order_by_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, order_by_expr860.getTree());
            // RPIExprWalker.g:1107:23: ( COMMA order_by_expr )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==COMMA) ) {
                    int LA225_2 = input.LA(2);

                    if ( (synpred370_RPIExprWalker()) ) {
                        alt225=1;
                    }


                }


                switch (alt225) {
            	case 1 :
            	    // RPIExprWalker.g:1107:25: COMMA order_by_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA861=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_order_by_exprs8450); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA861_tree = (CommonTree)adaptor.dupNode(COMMA861);

            	    adaptor.addChild(root_0, COMMA861_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_order_by_expr_in_order_by_exprs8452);
            	    order_by_expr862=order_by_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, order_by_expr862.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, order_by_exprs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_exprs"

    public static class order_by_expr_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_by_expr"
    // RPIExprWalker.g:1109:1: order_by_expr : ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? ;
    public final RPIExprWalker.order_by_expr_return order_by_expr() throws RecognitionException {
        RPIExprWalker.order_by_expr_return retval = new RPIExprWalker.order_by_expr_return();
        retval.start = input.LT(1);
        int order_by_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set864=null;
        RPIExprWalker.sql_expression_return sql_expression863 = null;

        RPIExprWalker.keyNULLS_return keyNULLS865 = null;

        RPIExprWalker.keyFIRST_return keyFIRST866 = null;

        RPIExprWalker.keyNULLS_return keyNULLS867 = null;

        RPIExprWalker.keyLAST_return keyLAST868 = null;


        CommonTree set864_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // RPIExprWalker.g:1110:5: ( ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )? )
            // RPIExprWalker.g:1110:9: ( sql_expression ) ( 'ASC' | 'DESC' )? ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1110:9: ( sql_expression )
            // RPIExprWalker.g:1110:13: sql_expression
            {
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_order_by_expr8477);
            sql_expression863=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression863.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            // RPIExprWalker.g:1114:9: ( 'ASC' | 'DESC' )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( ((LA226_0>=193 && LA226_0<=194)) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // RPIExprWalker.g:
                    {
                    _last = (CommonTree)input.LT(1);
                    set864=(CommonTree)input.LT(1);
                    if ( (input.LA(1)>=193 && input.LA(1)<=194) ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set864_tree = (CommonTree)adaptor.dupNode(set864);

                        adaptor.addChild(root_0, set864_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }

            // RPIExprWalker.g:1114:29: ( keyNULLS keyFIRST | keyNULLS keyLAST )?
            int alt227=3;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==ID) ) {
                int LA227_1 = input.LA(2);

                if ( ((synpred373_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NULLS")))) ) {
                    alt227=1;
                }
                else if ( ((synpred374_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NULLS")))) ) {
                    alt227=2;
                }
            }
            switch (alt227) {
                case 1 :
                    // RPIExprWalker.g:1114:31: keyNULLS keyFIRST
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr8512);
                    keyNULLS865=keyNULLS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNULLS865.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyFIRST_in_order_by_expr8514);
                    keyFIRST866=keyFIRST();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyFIRST866.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1114:51: keyNULLS keyLAST
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNULLS_in_order_by_expr8518);
                    keyNULLS867=keyNULLS();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNULLS867.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyLAST_in_order_by_expr8520);
                    keyLAST868=keyLAST();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyLAST868.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, order_by_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_by_expr"

    public static class for_update_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_update_clause"
    // RPIExprWalker.g:1116:1: for_update_clause : 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? ;
    public final RPIExprWalker.for_update_clause_return for_update_clause() throws RecognitionException {
        RPIExprWalker.for_update_clause_return retval = new RPIExprWalker.for_update_clause_return();
        retval.start = input.LT(1);
        int for_update_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal869=null;
        CommonTree string_literal870=null;
        CommonTree string_literal871=null;
        CommonTree string_literal875=null;
        RPIExprWalker.column_specs_return column_specs872 = null;

        RPIExprWalker.keyWAIT_return keyWAIT873 = null;

        RPIExprWalker.integer_return integer874 = null;


        CommonTree string_literal869_tree=null;
        CommonTree string_literal870_tree=null;
        CommonTree string_literal871_tree=null;
        CommonTree string_literal875_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // RPIExprWalker.g:1117:5: ( 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )? )
            // RPIExprWalker.g:1117:9: 'FOR' 'UPDATE' ( 'OF' column_specs )? ( keyWAIT integer | 'NOWAIT' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal869=(CommonTree)match(input,170,FOLLOW_170_in_for_update_clause8541); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal869_tree = (CommonTree)adaptor.dupNode(string_literal869);

            adaptor.addChild(root_0, string_literal869_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal870=(CommonTree)match(input,190,FOLLOW_190_in_for_update_clause8543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal870_tree = (CommonTree)adaptor.dupNode(string_literal870);

            adaptor.addChild(root_0, string_literal870_tree);
            }
            // RPIExprWalker.g:1117:24: ( 'OF' column_specs )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==164) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // RPIExprWalker.g:1117:26: 'OF' column_specs
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal871=(CommonTree)match(input,164,FOLLOW_164_in_for_update_clause8547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal871_tree = (CommonTree)adaptor.dupNode(string_literal871);

                    adaptor.addChild(root_0, string_literal871_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_specs_in_for_update_clause8549);
                    column_specs872=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_specs872.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1117:47: ( keyWAIT integer | 'NOWAIT' )?
            int alt229=3;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==ID) ) {
                alt229=1;
            }
            else if ( (LA229_0==195) ) {
                alt229=2;
            }
            switch (alt229) {
                case 1 :
                    // RPIExprWalker.g:1117:49: keyWAIT integer
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyWAIT_in_for_update_clause8556);
                    keyWAIT873=keyWAIT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyWAIT873.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_integer_in_for_update_clause8558);
                    integer874=integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, integer874.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1117:67: 'NOWAIT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal875=(CommonTree)match(input,195,FOLLOW_195_in_for_update_clause8562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal875_tree = (CommonTree)adaptor.dupNode(string_literal875);

                    adaptor.addChild(root_0, string_literal875_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, for_update_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "for_update_clause"

    public static class where_condition_whole_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_condition_whole"
    // RPIExprWalker.g:1120:1: where_condition_whole : 'WHERE' sql_condition ;
    public final RPIExprWalker.where_condition_whole_return where_condition_whole() throws RecognitionException {
        RPIExprWalker.where_condition_whole_return retval = new RPIExprWalker.where_condition_whole_return();
        retval.start = input.LT(1);
        int where_condition_whole_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal876=null;
        RPIExprWalker.sql_condition_return sql_condition877 = null;


        CommonTree string_literal876_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // RPIExprWalker.g:1121:5: ( 'WHERE' sql_condition )
            // RPIExprWalker.g:1121:9: 'WHERE' sql_condition
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal876=(CommonTree)match(input,185,FOLLOW_185_in_where_condition_whole8584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal876_tree = (CommonTree)adaptor.dupNode(string_literal876);

            adaptor.addChild(root_0, string_literal876_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_condition_in_where_condition_whole8586);
            sql_condition877=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_condition877.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, where_condition_whole_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_condition_whole"

    public static class where_condition_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "where_condition"
    // RPIExprWalker.g:1124:1: where_condition : sql_condition ;
    public final RPIExprWalker.where_condition_return where_condition() throws RecognitionException {
        RPIExprWalker.where_condition_return retval = new RPIExprWalker.where_condition_return();
        retval.start = input.LT(1);
        int where_condition_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_condition_return sql_condition878 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 146) ) { return retval; }
            // RPIExprWalker.g:1125:5: ( sql_condition )
            // RPIExprWalker.g:1125:9: sql_condition
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_condition_in_where_condition8605);
            sql_condition878=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_condition878.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 146, where_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "where_condition"

    public static class displayed_column_return extends TreeRuleReturnScope {
        public StringBuffer value;
        public String dimension;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "displayed_column"
    // RPIExprWalker.g:1128:1: displayed_column returns [StringBuffer value, String dimension] : ( column_spec DOT ASTERISK | sql_expression ) ( alias )? ;
    public final RPIExprWalker.displayed_column_return displayed_column() throws RecognitionException {
        RPIExprWalker.displayed_column_return retval = new RPIExprWalker.displayed_column_return();
        retval.start = input.LT(1);
        int displayed_column_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT880=null;
        CommonTree ASTERISK881=null;
        RPIExprWalker.column_spec_return column_spec879 = null;

        RPIExprWalker.sql_expression_return sql_expression882 = null;

        RPIExprWalker.alias_return alias883 = null;


        CommonTree DOT880_tree=null;
        CommonTree ASTERISK881_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 147) ) { return retval; }
            // RPIExprWalker.g:1129:5: ( ( column_spec DOT ASTERISK | sql_expression ) ( alias )? )
            // RPIExprWalker.g:1129:9: ( column_spec DOT ASTERISK | sql_expression ) ( alias )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1129:9: ( column_spec DOT ASTERISK | sql_expression )
            int alt230=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA230_1 = input.LA(2);

                if ( (LA230_1==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt230=1;
                        }
                        break;
                    case ID:
                        {
                        int LA230_7 = input.LA(4);

                        if ( (LA230_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_7==EOF||(LA230_7>=ID && LA230_7<=LPAREN)||LA230_7==EQ||LA230_7==COMMA||(LA230_7>=PLUS && LA230_7<=DIV)||(LA230_7>=AND && LA230_7<=NOT)||(LA230_7>=BOOLOP_LT && LA230_7<=BOOLOP_LE)||(LA230_7>=FOUND_ATTR && LA230_7<=EXPONENT)||LA230_7==NOT_EQ||LA230_7==DOUBLEQUOTED_STRING||(LA230_7>=111 && LA230_7<=112)||LA230_7==158||LA230_7==160||(LA230_7>=178 && LA230_7<=179)||LA230_7==192||LA230_7==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA230_8 = input.LA(4);

                        if ( (LA230_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_8==EOF||(LA230_8>=ID && LA230_8<=LPAREN)||LA230_8==EQ||LA230_8==COMMA||(LA230_8>=PLUS && LA230_8<=DIV)||(LA230_8>=AND && LA230_8<=NOT)||(LA230_8>=BOOLOP_LT && LA230_8<=BOOLOP_LE)||(LA230_8>=FOUND_ATTR && LA230_8<=EXPONENT)||LA230_8==NOT_EQ||LA230_8==DOUBLEQUOTED_STRING||(LA230_8>=111 && LA230_8<=112)||LA230_8==158||LA230_8==160||(LA230_8>=178 && LA230_8<=179)||LA230_8==192||LA230_8==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA230_9 = input.LA(4);

                        if ( (LA230_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_9==EOF||(LA230_9>=ID && LA230_9<=LPAREN)||LA230_9==EQ||LA230_9==COMMA||(LA230_9>=PLUS && LA230_9<=DIV)||(LA230_9>=AND && LA230_9<=NOT)||(LA230_9>=BOOLOP_LT && LA230_9<=BOOLOP_LE)||(LA230_9>=FOUND_ATTR && LA230_9<=EXPONENT)||LA230_9==NOT_EQ||LA230_9==DOUBLEQUOTED_STRING||(LA230_9>=111 && LA230_9<=112)||LA230_9==158||LA230_9==160||(LA230_9>=178 && LA230_9<=179)||LA230_9==192||LA230_9==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    case SUBSTR:
                    case TO_CHAR:
                    case TRIM:
                    case LPAREN:
                    case SQL:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case NOT:
                    case QUOTED_STRING:
                    case 116:
                    case 168:
                    case 169:
                    case 174:
                    case 175:
                    case 197:
                    case 198:
                    case 200:
                    case 201:
                        {
                        alt230=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA230_1==EOF||(LA230_1>=ID && LA230_1<=LPAREN)||LA230_1==COMMA||(LA230_1>=PLUS && LA230_1<=DIV)||(LA230_1>=DOUBLEVERTBAR && LA230_1<=EXPONENT)||LA230_1==DOUBLEQUOTED_STRING||LA230_1==112||LA230_1==158||(LA230_1>=178 && LA230_1<=179)) ) {
                    alt230=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA230_2 = input.LA(2);

                if ( (LA230_2==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt230=1;
                        }
                        break;
                    case ID:
                        {
                        int LA230_7 = input.LA(4);

                        if ( (LA230_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_7==EOF||(LA230_7>=ID && LA230_7<=LPAREN)||LA230_7==EQ||LA230_7==COMMA||(LA230_7>=PLUS && LA230_7<=DIV)||(LA230_7>=AND && LA230_7<=NOT)||(LA230_7>=BOOLOP_LT && LA230_7<=BOOLOP_LE)||(LA230_7>=FOUND_ATTR && LA230_7<=EXPONENT)||LA230_7==NOT_EQ||LA230_7==DOUBLEQUOTED_STRING||(LA230_7>=111 && LA230_7<=112)||LA230_7==158||LA230_7==160||(LA230_7>=178 && LA230_7<=179)||LA230_7==192||LA230_7==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA230_8 = input.LA(4);

                        if ( (LA230_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_8==EOF||(LA230_8>=ID && LA230_8<=LPAREN)||LA230_8==EQ||LA230_8==COMMA||(LA230_8>=PLUS && LA230_8<=DIV)||(LA230_8>=AND && LA230_8<=NOT)||(LA230_8>=BOOLOP_LT && LA230_8<=BOOLOP_LE)||(LA230_8>=FOUND_ATTR && LA230_8<=EXPONENT)||LA230_8==NOT_EQ||LA230_8==DOUBLEQUOTED_STRING||(LA230_8>=111 && LA230_8<=112)||LA230_8==158||LA230_8==160||(LA230_8>=178 && LA230_8<=179)||LA230_8==192||LA230_8==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA230_9 = input.LA(4);

                        if ( (LA230_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_9==EOF||(LA230_9>=ID && LA230_9<=LPAREN)||LA230_9==EQ||LA230_9==COMMA||(LA230_9>=PLUS && LA230_9<=DIV)||(LA230_9>=AND && LA230_9<=NOT)||(LA230_9>=BOOLOP_LT && LA230_9<=BOOLOP_LE)||(LA230_9>=FOUND_ATTR && LA230_9<=EXPONENT)||LA230_9==NOT_EQ||LA230_9==DOUBLEQUOTED_STRING||(LA230_9>=111 && LA230_9<=112)||LA230_9==158||LA230_9==160||(LA230_9>=178 && LA230_9<=179)||LA230_9==192||LA230_9==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    case SUBSTR:
                    case TO_CHAR:
                    case TRIM:
                    case LPAREN:
                    case SQL:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case NOT:
                    case QUOTED_STRING:
                    case 116:
                    case 168:
                    case 169:
                    case 174:
                    case 175:
                    case 197:
                    case 198:
                    case 200:
                    case 201:
                        {
                        alt230=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA230_2==EOF||(LA230_2>=ID && LA230_2<=LPAREN)||LA230_2==COMMA||(LA230_2>=PLUS && LA230_2<=DIV)||(LA230_2>=DOUBLEVERTBAR && LA230_2<=EXPONENT)||LA230_2==DOUBLEQUOTED_STRING||LA230_2==112||LA230_2==158||(LA230_2>=178 && LA230_2<=179)) ) {
                    alt230=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 2, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA230_3 = input.LA(2);

                if ( (LA230_3==DOT) ) {
                    switch ( input.LA(3) ) {
                    case ASTERISK:
                        {
                        alt230=1;
                        }
                        break;
                    case ID:
                        {
                        int LA230_7 = input.LA(4);

                        if ( (LA230_7==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_7==EOF||(LA230_7>=ID && LA230_7<=LPAREN)||LA230_7==EQ||LA230_7==COMMA||(LA230_7>=PLUS && LA230_7<=DIV)||(LA230_7>=AND && LA230_7<=NOT)||(LA230_7>=BOOLOP_LT && LA230_7<=BOOLOP_LE)||(LA230_7>=FOUND_ATTR && LA230_7<=EXPONENT)||LA230_7==NOT_EQ||LA230_7==DOUBLEQUOTED_STRING||(LA230_7>=111 && LA230_7<=112)||LA230_7==158||LA230_7==160||(LA230_7>=178 && LA230_7<=179)||LA230_7==192||LA230_7==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 7, input);

                            throw nvae;
                        }
                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA230_8 = input.LA(4);

                        if ( (LA230_8==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_8==EOF||(LA230_8>=ID && LA230_8<=LPAREN)||LA230_8==EQ||LA230_8==COMMA||(LA230_8>=PLUS && LA230_8<=DIV)||(LA230_8>=AND && LA230_8<=NOT)||(LA230_8>=BOOLOP_LT && LA230_8<=BOOLOP_LE)||(LA230_8>=FOUND_ATTR && LA230_8<=EXPONENT)||LA230_8==NOT_EQ||LA230_8==DOUBLEQUOTED_STRING||(LA230_8>=111 && LA230_8<=112)||LA230_8==158||LA230_8==160||(LA230_8>=178 && LA230_8<=179)||LA230_8==192||LA230_8==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 8, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 158:
                        {
                        int LA230_9 = input.LA(4);

                        if ( (LA230_9==DOT) ) {
                            switch ( input.LA(5) ) {
                            case ASTERISK:
                                {
                                alt230=1;
                                }
                                break;
                            case ID:
                                {
                                int LA230_11 = input.LA(6);

                                if ( (LA230_11==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_11==EOF||(LA230_11>=ID && LA230_11<=LPAREN)||LA230_11==EQ||LA230_11==COMMA||(LA230_11>=PLUS && LA230_11<=DIV)||(LA230_11>=AND && LA230_11<=NOT)||(LA230_11>=BOOLOP_LT && LA230_11<=BOOLOP_LE)||(LA230_11>=FOUND_ATTR && LA230_11<=EXPONENT)||LA230_11==NOT_EQ||LA230_11==DOUBLEQUOTED_STRING||(LA230_11>=111 && LA230_11<=112)||LA230_11==158||LA230_11==160||(LA230_11>=178 && LA230_11<=179)||LA230_11==192||LA230_11==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 11, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA230_12 = input.LA(6);

                                if ( (LA230_12==EOF||(LA230_12>=ID && LA230_12<=LPAREN)||LA230_12==EQ||LA230_12==COMMA||(LA230_12>=PLUS && LA230_12<=DIV)||(LA230_12>=AND && LA230_12<=NOT)||(LA230_12>=BOOLOP_LT && LA230_12<=BOOLOP_LE)||(LA230_12>=FOUND_ATTR && LA230_12<=EXPONENT)||LA230_12==NOT_EQ||LA230_12==DOUBLEQUOTED_STRING||(LA230_12>=111 && LA230_12<=112)||LA230_12==158||LA230_12==160||(LA230_12>=178 && LA230_12<=179)||LA230_12==192||LA230_12==196) ) {
                                    alt230=2;
                                }
                                else if ( (LA230_12==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 12, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case 158:
                                {
                                int LA230_13 = input.LA(6);

                                if ( (LA230_13==DOT) ) {
                                    int LA230_14 = input.LA(7);

                                    if ( (LA230_14==ASTERISK) ) {
                                        alt230=1;
                                    }
                                    else if ( ((LA230_14>=SUBSTR && LA230_14<=TO_CHAR)||LA230_14==TRIM||(LA230_14>=ID && LA230_14<=LPAREN)||(LA230_14>=SQL && LA230_14<=MINUS)||LA230_14==NUMBER||LA230_14==NOT||LA230_14==QUOTED_STRING||LA230_14==DOUBLEQUOTED_STRING||LA230_14==116||LA230_14==158||(LA230_14>=168 && LA230_14<=169)||(LA230_14>=174 && LA230_14<=175)||(LA230_14>=197 && LA230_14<=198)||(LA230_14>=200 && LA230_14<=201)) ) {
                                        alt230=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 230, 14, input);

                                        throw nvae;
                                    }
                                }
                                else if ( (LA230_13==EOF||(LA230_13>=ID && LA230_13<=LPAREN)||LA230_13==EQ||LA230_13==COMMA||(LA230_13>=PLUS && LA230_13<=DIV)||(LA230_13>=AND && LA230_13<=NOT)||(LA230_13>=BOOLOP_LT && LA230_13<=BOOLOP_LE)||(LA230_13>=FOUND_ATTR && LA230_13<=EXPONENT)||LA230_13==NOT_EQ||LA230_13==DOUBLEQUOTED_STRING||(LA230_13>=111 && LA230_13<=112)||LA230_13==158||LA230_13==160||(LA230_13>=178 && LA230_13<=179)||LA230_13==192||LA230_13==196) ) {
                                    alt230=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 230, 13, input);

                                    throw nvae;
                                }
                                }
                                break;
                            case SUBSTR:
                            case TO_CHAR:
                            case TRIM:
                            case LPAREN:
                            case SQL:
                            case PLUS:
                            case MINUS:
                            case NUMBER:
                            case NOT:
                            case QUOTED_STRING:
                            case 116:
                            case 168:
                            case 169:
                            case 174:
                            case 175:
                            case 197:
                            case 198:
                            case 200:
                            case 201:
                                {
                                alt230=2;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 230, 10, input);

                                throw nvae;
                            }

                        }
                        else if ( (LA230_9==EOF||(LA230_9>=ID && LA230_9<=LPAREN)||LA230_9==EQ||LA230_9==COMMA||(LA230_9>=PLUS && LA230_9<=DIV)||(LA230_9>=AND && LA230_9<=NOT)||(LA230_9>=BOOLOP_LT && LA230_9<=BOOLOP_LE)||(LA230_9>=FOUND_ATTR && LA230_9<=EXPONENT)||LA230_9==NOT_EQ||LA230_9==DOUBLEQUOTED_STRING||(LA230_9>=111 && LA230_9<=112)||LA230_9==158||LA230_9==160||(LA230_9>=178 && LA230_9<=179)||LA230_9==192||LA230_9==196) ) {
                            alt230=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 230, 9, input);

                            throw nvae;
                        }
                        }
                        break;
                    case SUBSTR:
                    case TO_CHAR:
                    case TRIM:
                    case LPAREN:
                    case SQL:
                    case PLUS:
                    case MINUS:
                    case NUMBER:
                    case NOT:
                    case QUOTED_STRING:
                    case 116:
                    case 168:
                    case 169:
                    case 174:
                    case 175:
                    case 197:
                    case 198:
                    case 200:
                    case 201:
                        {
                        alt230=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 230, 5, input);

                        throw nvae;
                    }

                }
                else if ( (LA230_3==EOF||(LA230_3>=ID && LA230_3<=LPAREN)||LA230_3==COMMA||(LA230_3>=PLUS && LA230_3<=DIV)||(LA230_3>=DOUBLEVERTBAR && LA230_3<=EXPONENT)||LA230_3==DOUBLEQUOTED_STRING||LA230_3==112||LA230_3==158||(LA230_3>=178 && LA230_3<=179)) ) {
                    alt230=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 230, 3, input);

                    throw nvae;
                }
                }
                break;
            case SUBSTR:
            case TO_CHAR:
            case TRIM:
            case LPAREN:
            case SQL:
            case PLUS:
            case MINUS:
            case NUMBER:
            case QUOTED_STRING:
            case 116:
            case 168:
            case 169:
            case 174:
            case 175:
            case 198:
                {
                alt230=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 230, 0, input);

                throw nvae;
            }

            switch (alt230) {
                case 1 :
                    // RPIExprWalker.g:1129:13: column_spec DOT ASTERISK
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_spec_in_displayed_column8632);
                    column_spec879=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_spec879.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT880=(CommonTree)match(input,DOT,FOLLOW_DOT_in_displayed_column8634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT880_tree = (CommonTree)adaptor.dupNode(DOT880);

                    adaptor.addChild(root_0, DOT880_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    ASTERISK881=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_displayed_column8636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASTERISK881_tree = (CommonTree)adaptor.dupNode(ASTERISK881);

                    adaptor.addChild(root_0, ASTERISK881_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (column_spec879!=null?column_spec879.value:null).toString().trim() + " .*");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1132:13: sql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_displayed_column8654);
                    sql_expression882=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression882.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (sql_expression882!=null?sql_expression882.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1134:9: ( alias )?
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==DOUBLEQUOTED_STRING||LA231_0==112||LA231_0==158) ) {
                alt231=1;
            }
            else if ( (LA231_0==ID) ) {
                int LA231_2 = input.LA(2);

                if ( (LA231_2==ID) ) {
                    int LA231_4 = input.LA(3);

                    if ( (LA231_4==ID) ) {
                        alt231=1;
                    }
                }
                else if ( (LA231_2==EOF||LA231_2==COMMA||(LA231_2>=178 && LA231_2<=179)) ) {
                    alt231=1;
                }
            }
            switch (alt231) {
                case 1 :
                    // RPIExprWalker.g:1134:11: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_displayed_column8678);
                    alias883=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias883.getTree());
                    if ( state.backtracking==0 ) {

                                 retval.value.append(" " + (alias883!=null?alias883.value:null).toString().trim());
                                 retval.dimension = (alias883!=null?alias883.dimension:null);
                              
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 147, displayed_column_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "displayed_column"

    public static class schema_name_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "schema_name"
    // RPIExprWalker.g:1141:1: schema_name returns [StringBuffer value] : sql_identifier ;
    public final RPIExprWalker.schema_name_return schema_name() throws RecognitionException {
        RPIExprWalker.schema_name_return retval = new RPIExprWalker.schema_name_return();
        retval.start = input.LT(1);
        int schema_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_identifier_return sql_identifier884 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 148) ) { return retval; }
            // RPIExprWalker.g:1142:5: ( sql_identifier )
            // RPIExprWalker.g:1142:9: sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_schema_name8714);
            sql_identifier884=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier884.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (sql_identifier884!=null?sql_identifier884.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 148, schema_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "schema_name"

    public static class table_name_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_name"
    // RPIExprWalker.g:1145:1: table_name returns [StringBuffer value] : sql_identifier ;
    public final RPIExprWalker.table_name_return table_name() throws RecognitionException {
        RPIExprWalker.table_name_return retval = new RPIExprWalker.table_name_return();
        retval.start = input.LT(1);
        int table_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_identifier_return sql_identifier885 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 149) ) { return retval; }
            // RPIExprWalker.g:1146:5: ( sql_identifier )
            // RPIExprWalker.g:1146:9: sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_table_name8739);
            sql_identifier885=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier885.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (sql_identifier885!=null?sql_identifier885.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 149, table_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_name"

    public static class nested_expressions_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_expressions"
    // RPIExprWalker.g:1149:1: nested_expressions : nested_expression ( COMMA nested_expression )* ;
    public final RPIExprWalker.nested_expressions_return nested_expressions() throws RecognitionException {
        RPIExprWalker.nested_expressions_return retval = new RPIExprWalker.nested_expressions_return();
        retval.start = input.LT(1);
        int nested_expressions_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA887=null;
        RPIExprWalker.nested_expression_return nested_expression886 = null;

        RPIExprWalker.nested_expression_return nested_expression888 = null;


        CommonTree COMMA887_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 150) ) { return retval; }
            // RPIExprWalker.g:1150:5: ( nested_expression ( COMMA nested_expression )* )
            // RPIExprWalker.g:1150:9: nested_expression ( COMMA nested_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_expression_in_nested_expressions8760);
            nested_expression886=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_expression886.getTree());
            // RPIExprWalker.g:1150:27: ( COMMA nested_expression )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==COMMA) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // RPIExprWalker.g:1150:29: COMMA nested_expression
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA887=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_nested_expressions8764); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA887_tree = (CommonTree)adaptor.dupNode(COMMA887);

            	    adaptor.addChild(root_0, COMMA887_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_expression_in_nested_expressions8766);
            	    nested_expression888=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_expression888.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 150, nested_expressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_expressions"

    public static class nested_expression_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_expression"
    // RPIExprWalker.g:1153:1: nested_expression returns [StringBuffer value] : ({...}? sql_expression | {...}? plsql_expression );
    public final RPIExprWalker.nested_expression_return nested_expression() throws RecognitionException {
        RPIExprWalker.nested_expression_return retval = new RPIExprWalker.nested_expression_return();
        retval.start = input.LT(1);
        int nested_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_expression_return sql_expression889 = null;

        RPIExprWalker.plsql_expression_return plsql_expression890 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 151) ) { return retval; }
            // RPIExprWalker.g:1154:5: ({...}? sql_expression | {...}? plsql_expression )
            int alt233=2;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                int LA233_1 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 1, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA233_2 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA233_3 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 3, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA233_4 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 4, input);

                    throw nvae;
                }
                }
                break;
            case TO_CHAR:
                {
                int LA233_5 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 5, input);

                    throw nvae;
                }
                }
                break;
            case SUBSTR:
                {
                int LA233_6 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 6, input);

                    throw nvae;
                }
                }
                break;
            case TRIM:
                {
                int LA233_7 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 7, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA233_8 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 8, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA233_9 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 9, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA233_10 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 10, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA233_11 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 11, input);

                    throw nvae;
                }
                }
                break;
            case 168:
                {
                int LA233_12 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 12, input);

                    throw nvae;
                }
                }
                break;
            case 169:
                {
                int LA233_13 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 13, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA233_14 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 14, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA233_15 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 15, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA233_16 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 16, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA233_17 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 17, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA233_18 = input.LA(2);

                if ( ((synpred381_RPIExprWalker()&&(  is_sql ))) ) {
                    alt233=1;
                }
                else if ( (( !is_sql )) ) {
                    alt233=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 18, input);

                    throw nvae;
                }
                }
                break;
            case NOT:
                {
                alt233=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }

            switch (alt233) {
                case 1 :
                    // RPIExprWalker.g:1154:9: {...}? sql_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", "  is_sql ");
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_nested_expression8794);
                    sql_expression889=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression889.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (sql_expression889!=null?sql_expression889.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1155:9: {...}? plsql_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_expression", " !is_sql ");
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expression_in_nested_expression8808);
                    plsql_expression890=plsql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expression890.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (plsql_expression890!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(plsql_expression890.start),
                        input.getTreeAdaptor().getTokenStopIndex(plsql_expression890.start))):null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 151, nested_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_expression"

    public static class plsql_condition_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_condition"
    // RPIExprWalker.g:1157:1: plsql_condition : expr_bool ;
    public final RPIExprWalker.plsql_condition_return plsql_condition() throws RecognitionException {
        RPIExprWalker.plsql_condition_return retval = new RPIExprWalker.plsql_condition_return();
        retval.start = input.LT(1);
        int plsql_condition_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.expr_bool_return expr_bool891 = null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 152) ) { return retval; }
            // RPIExprWalker.g:1159:5: ( expr_bool )
            // RPIExprWalker.g:1159:9: expr_bool
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_bool_in_plsql_condition8841);
            expr_bool891=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_bool891.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 152, plsql_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_condition"

    public static class plsql_expressions_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_expressions"
    // RPIExprWalker.g:1162:1: plsql_expressions : plsql_expression ( COMMA plsql_expression )* ;
    public final RPIExprWalker.plsql_expressions_return plsql_expressions() throws RecognitionException {
        RPIExprWalker.plsql_expressions_return retval = new RPIExprWalker.plsql_expressions_return();
        retval.start = input.LT(1);
        int plsql_expressions_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA893=null;
        RPIExprWalker.plsql_expression_return plsql_expression892 = null;

        RPIExprWalker.plsql_expression_return plsql_expression894 = null;


        CommonTree COMMA893_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 153) ) { return retval; }
            // RPIExprWalker.g:1163:5: ( plsql_expression ( COMMA plsql_expression )* )
            // RPIExprWalker.g:1163:9: plsql_expression ( COMMA plsql_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_expression_in_plsql_expressions8860);
            plsql_expression892=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_expression892.getTree());
            // RPIExprWalker.g:1163:26: ( COMMA plsql_expression )*
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( (LA234_0==COMMA) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    // RPIExprWalker.g:1163:28: COMMA plsql_expression
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA893=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_plsql_expressions8864); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA893_tree = (CommonTree)adaptor.dupNode(COMMA893);

            	    adaptor.addChild(root_0, COMMA893_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_plsql_expression_in_plsql_expressions8866);
            	    plsql_expression894=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, plsql_expression894.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 153, plsql_expressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_expressions"

    public static class plsql_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "plsql_expression"
    // RPIExprWalker.g:1166:1: plsql_expression : expr_bool ;
    public final RPIExprWalker.plsql_expression_return plsql_expression() throws RecognitionException {
        RPIExprWalker.plsql_expression_return retval = new RPIExprWalker.plsql_expression_return();
        retval.start = input.LT(1);
        int plsql_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.expr_bool_return expr_bool895 = null;



         is_sql = false; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 154) ) { return retval; }
            // RPIExprWalker.g:1168:5: ( expr_bool )
            // RPIExprWalker.g:1168:9: expr_bool
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_bool_in_plsql_expression8901);
            expr_bool895=expr_bool();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_bool895.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 154, plsql_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "plsql_expression"

    public static class expr_bool_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_bool"
    // RPIExprWalker.g:1172:1: expr_bool : expr_or ( 'OR' expr_or )* ;
    public final RPIExprWalker.expr_bool_return expr_bool() throws RecognitionException {
        RPIExprWalker.expr_bool_return retval = new RPIExprWalker.expr_bool_return();
        retval.start = input.LT(1);
        int expr_bool_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal897=null;
        RPIExprWalker.expr_or_return expr_or896 = null;

        RPIExprWalker.expr_or_return expr_or898 = null;


        CommonTree string_literal897_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 155) ) { return retval; }
            // RPIExprWalker.g:1173:5: ( expr_or ( 'OR' expr_or )* )
            // RPIExprWalker.g:1173:9: expr_or ( 'OR' expr_or )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_or_in_expr_bool8921);
            expr_or896=expr_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_or896.getTree());
            // RPIExprWalker.g:1173:17: ( 'OR' expr_or )*
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( (LA235_0==OR) ) {
                    int LA235_2 = input.LA(2);

                    if ( (synpred383_RPIExprWalker()) ) {
                        alt235=1;
                    }


                }


                switch (alt235) {
            	case 1 :
            	    // RPIExprWalker.g:1173:19: 'OR' expr_or
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal897=(CommonTree)match(input,OR,FOLLOW_OR_in_expr_bool8925); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal897_tree = (CommonTree)adaptor.dupNode(string_literal897);

            	    adaptor.addChild(root_0, string_literal897_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_or_in_expr_bool8927);
            	    expr_or898=expr_or();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, expr_or898.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 155, expr_bool_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_bool"

    public static class expr_or_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_or"
    // RPIExprWalker.g:1175:1: expr_or : expr_and ( 'AND' expr_and )* ;
    public final RPIExprWalker.expr_or_return expr_or() throws RecognitionException {
        RPIExprWalker.expr_or_return retval = new RPIExprWalker.expr_or_return();
        retval.start = input.LT(1);
        int expr_or_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal900=null;
        RPIExprWalker.expr_and_return expr_and899 = null;

        RPIExprWalker.expr_and_return expr_and901 = null;


        CommonTree string_literal900_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 156) ) { return retval; }
            // RPIExprWalker.g:1176:5: ( expr_and ( 'AND' expr_and )* )
            // RPIExprWalker.g:1176:9: expr_and ( 'AND' expr_and )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_and_in_expr_or8948);
            expr_and899=expr_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_and899.getTree());
            // RPIExprWalker.g:1176:18: ( 'AND' expr_and )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==AND) ) {
                    int LA236_2 = input.LA(2);

                    if ( (synpred384_RPIExprWalker()) ) {
                        alt236=1;
                    }


                }


                switch (alt236) {
            	case 1 :
            	    // RPIExprWalker.g:1176:20: 'AND' expr_and
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal900=(CommonTree)match(input,AND,FOLLOW_AND_in_expr_or8952); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal900_tree = (CommonTree)adaptor.dupNode(string_literal900);

            	    adaptor.addChild(root_0, string_literal900_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_and_in_expr_or8954);
            	    expr_and901=expr_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, expr_and901.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 156, expr_or_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_or"

    public static class expr_and_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_and"
    // RPIExprWalker.g:1178:1: expr_and : ( 'NOT' )? expr_not ;
    public final RPIExprWalker.expr_and_return expr_and() throws RecognitionException {
        RPIExprWalker.expr_and_return retval = new RPIExprWalker.expr_and_return();
        retval.start = input.LT(1);
        int expr_and_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal902=null;
        RPIExprWalker.expr_not_return expr_not903 = null;


        CommonTree string_literal902_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 157) ) { return retval; }
            // RPIExprWalker.g:1179:5: ( ( 'NOT' )? expr_not )
            // RPIExprWalker.g:1179:9: ( 'NOT' )? expr_not
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1179:9: ( 'NOT' )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==NOT) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // RPIExprWalker.g:1179:11: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal902=(CommonTree)match(input,NOT,FOLLOW_NOT_in_expr_and8977); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal902_tree = (CommonTree)adaptor.dupNode(string_literal902);

                    adaptor.addChild(root_0, string_literal902_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_not_in_expr_and8982);
            expr_not903=expr_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_not903.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 157, expr_and_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_and"

    public static class expr_not_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_not"
    // RPIExprWalker.g:1181:1: expr_not : expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* ;
    public final RPIExprWalker.expr_not_return expr_not() throws RecognitionException {
        RPIExprWalker.expr_not_return retval = new RPIExprWalker.expr_not_return();
        retval.start = input.LT(1);
        int expr_not_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree FOUND_ATTR907=null;
        CommonTree NOTFOUND_ATTR908=null;
        CommonTree ISOPEN_ATTR909=null;
        CommonTree ROWCOUNT_ATTR910=null;
        CommonTree BULK_ROWCOUNT_ATTR911=null;
        CommonTree string_literal912=null;
        CommonTree string_literal913=null;
        CommonTree string_literal914=null;
        CommonTree string_literal915=null;
        CommonTree string_literal916=null;
        CommonTree string_literal918=null;
        CommonTree string_literal919=null;
        CommonTree string_literal921=null;
        CommonTree string_literal923=null;
        CommonTree string_literal924=null;
        CommonTree LPAREN925=null;
        CommonTree RPAREN927=null;
        RPIExprWalker.expr_add_return expr_add904 = null;

        RPIExprWalker.relational_op_return relational_op905 = null;

        RPIExprWalker.expr_add_return expr_add906 = null;

        RPIExprWalker.expr_add_return expr_add917 = null;

        RPIExprWalker.expr_add_return expr_add920 = null;

        RPIExprWalker.expr_add_return expr_add922 = null;

        RPIExprWalker.nested_expressions_return nested_expressions926 = null;


        CommonTree FOUND_ATTR907_tree=null;
        CommonTree NOTFOUND_ATTR908_tree=null;
        CommonTree ISOPEN_ATTR909_tree=null;
        CommonTree ROWCOUNT_ATTR910_tree=null;
        CommonTree BULK_ROWCOUNT_ATTR911_tree=null;
        CommonTree string_literal912_tree=null;
        CommonTree string_literal913_tree=null;
        CommonTree string_literal914_tree=null;
        CommonTree string_literal915_tree=null;
        CommonTree string_literal916_tree=null;
        CommonTree string_literal918_tree=null;
        CommonTree string_literal919_tree=null;
        CommonTree string_literal921_tree=null;
        CommonTree string_literal923_tree=null;
        CommonTree string_literal924_tree=null;
        CommonTree LPAREN925_tree=null;
        CommonTree RPAREN927_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 158) ) { return retval; }
            // RPIExprWalker.g:1182:5: ( expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )* )
            // RPIExprWalker.g:1182:9: expr_add ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_add_in_expr_not9000);
            expr_add904=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_add904.getTree());
            // RPIExprWalker.g:1183:9: ( relational_op expr_add | FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR | 'IS' ( 'NOT' )? 'NULL' | ( 'NOT' )? 'LIKE' expr_add | ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add | ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )*
            loop242:
            do {
                int alt242=11;
                switch ( input.LA(1) ) {
                case EQ:
                    {
                    int LA242_2 = input.LA(2);

                    if ( (synpred386_RPIExprWalker()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case FOUND_ATTR:
                    {
                    int LA242_3 = input.LA(2);

                    if ( (synpred387_RPIExprWalker()) ) {
                        alt242=2;
                    }


                    }
                    break;
                case NOTFOUND_ATTR:
                    {
                    int LA242_4 = input.LA(2);

                    if ( (synpred388_RPIExprWalker()) ) {
                        alt242=3;
                    }


                    }
                    break;
                case ISOPEN_ATTR:
                    {
                    int LA242_5 = input.LA(2);

                    if ( (synpred389_RPIExprWalker()) ) {
                        alt242=4;
                    }


                    }
                    break;
                case ROWCOUNT_ATTR:
                    {
                    int LA242_6 = input.LA(2);

                    if ( (synpred390_RPIExprWalker()) ) {
                        alt242=5;
                    }


                    }
                    break;
                case BULK_ROWCOUNT_ATTR:
                    {
                    int LA242_7 = input.LA(2);

                    if ( (synpred391_RPIExprWalker()) ) {
                        alt242=6;
                    }


                    }
                    break;
                case 111:
                    {
                    int LA242_8 = input.LA(2);

                    if ( (synpred393_RPIExprWalker()) ) {
                        alt242=7;
                    }


                    }
                    break;
                case NOT:
                    {
                    int LA242_9 = input.LA(2);

                    if ( (synpred395_RPIExprWalker()) ) {
                        alt242=8;
                    }
                    else if ( (synpred397_RPIExprWalker()) ) {
                        alt242=9;
                    }
                    else if ( (synpred399_RPIExprWalker()) ) {
                        alt242=10;
                    }


                    }
                    break;
                case 192:
                    {
                    int LA242_10 = input.LA(2);

                    if ( (synpred395_RPIExprWalker()) ) {
                        alt242=8;
                    }


                    }
                    break;
                case 196:
                    {
                    int LA242_11 = input.LA(2);

                    if ( (synpred397_RPIExprWalker()) ) {
                        alt242=9;
                    }


                    }
                    break;
                case 160:
                    {
                    int LA242_12 = input.LA(2);

                    if ( (synpred399_RPIExprWalker()) ) {
                        alt242=10;
                    }


                    }
                    break;
                case NOT_EQ:
                    {
                    int LA242_13 = input.LA(2);

                    if ( (synpred386_RPIExprWalker()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case BOOLOP_GT:
                    {
                    int LA242_14 = input.LA(2);

                    if ( (synpred386_RPIExprWalker()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case BOOLOP_GE:
                    {
                    int LA242_15 = input.LA(2);

                    if ( (synpred386_RPIExprWalker()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case BOOLOP_LT:
                    {
                    int LA242_16 = input.LA(2);

                    if ( (synpred386_RPIExprWalker()) ) {
                        alt242=1;
                    }


                    }
                    break;
                case BOOLOP_LE:
                    {
                    int LA242_17 = input.LA(2);

                    if ( (synpred386_RPIExprWalker()) ) {
                        alt242=1;
                    }


                    }
                    break;

                }

                switch (alt242) {
            	case 1 :
            	    // RPIExprWalker.g:1183:13: relational_op expr_add
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_relational_op_in_expr_not9015);
            	    relational_op905=relational_op();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, relational_op905.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_add_in_expr_not9017);
            	    expr_add906=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, expr_add906.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 2 :
            	    // RPIExprWalker.g:1184:13: FOUND_ATTR
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    FOUND_ATTR907=(CommonTree)match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_expr_not9031); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    FOUND_ATTR907_tree = (CommonTree)adaptor.dupNode(FOUND_ATTR907);

            	    adaptor.addChild(root_0, FOUND_ATTR907_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 3 :
            	    // RPIExprWalker.g:1184:26: NOTFOUND_ATTR
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    NOTFOUND_ATTR908=(CommonTree)match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_expr_not9035); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOTFOUND_ATTR908_tree = (CommonTree)adaptor.dupNode(NOTFOUND_ATTR908);

            	    adaptor.addChild(root_0, NOTFOUND_ATTR908_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 4 :
            	    // RPIExprWalker.g:1184:42: ISOPEN_ATTR
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    ISOPEN_ATTR909=(CommonTree)match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_expr_not9039); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ISOPEN_ATTR909_tree = (CommonTree)adaptor.dupNode(ISOPEN_ATTR909);

            	    adaptor.addChild(root_0, ISOPEN_ATTR909_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 5 :
            	    // RPIExprWalker.g:1184:56: ROWCOUNT_ATTR
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    ROWCOUNT_ATTR910=(CommonTree)match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_expr_not9043); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ROWCOUNT_ATTR910_tree = (CommonTree)adaptor.dupNode(ROWCOUNT_ATTR910);

            	    adaptor.addChild(root_0, ROWCOUNT_ATTR910_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 6 :
            	    // RPIExprWalker.g:1184:72: BULK_ROWCOUNT_ATTR
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    BULK_ROWCOUNT_ATTR911=(CommonTree)match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not9047); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BULK_ROWCOUNT_ATTR911_tree = (CommonTree)adaptor.dupNode(BULK_ROWCOUNT_ATTR911);

            	    adaptor.addChild(root_0, BULK_ROWCOUNT_ATTR911_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 7 :
            	    // RPIExprWalker.g:1185:13: 'IS' ( 'NOT' )? 'NULL'
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal912=(CommonTree)match(input,111,FOLLOW_111_in_expr_not9061); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal912_tree = (CommonTree)adaptor.dupNode(string_literal912);

            	    adaptor.addChild(root_0, string_literal912_tree);
            	    }
            	    // RPIExprWalker.g:1185:18: ( 'NOT' )?
            	    int alt238=2;
            	    int LA238_0 = input.LA(1);

            	    if ( (LA238_0==NOT) ) {
            	        alt238=1;
            	    }
            	    switch (alt238) {
            	        case 1 :
            	            // RPIExprWalker.g:1185:20: 'NOT'
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            string_literal913=(CommonTree)match(input,NOT,FOLLOW_NOT_in_expr_not9065); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal913_tree = (CommonTree)adaptor.dupNode(string_literal913);

            	            adaptor.addChild(root_0, string_literal913_tree);
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (CommonTree)input.LT(1);
            	    string_literal914=(CommonTree)match(input,116,FOLLOW_116_in_expr_not9070); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal914_tree = (CommonTree)adaptor.dupNode(string_literal914);

            	    adaptor.addChild(root_0, string_literal914_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 8 :
            	    // RPIExprWalker.g:1186:13: ( 'NOT' )? 'LIKE' expr_add
            	    {
            	    // RPIExprWalker.g:1186:13: ( 'NOT' )?
            	    int alt239=2;
            	    int LA239_0 = input.LA(1);

            	    if ( (LA239_0==NOT) ) {
            	        alt239=1;
            	    }
            	    switch (alt239) {
            	        case 1 :
            	            // RPIExprWalker.g:1186:15: 'NOT'
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            string_literal915=(CommonTree)match(input,NOT,FOLLOW_NOT_in_expr_not9086); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal915_tree = (CommonTree)adaptor.dupNode(string_literal915);

            	            adaptor.addChild(root_0, string_literal915_tree);
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (CommonTree)input.LT(1);
            	    string_literal916=(CommonTree)match(input,192,FOLLOW_192_in_expr_not9091); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal916_tree = (CommonTree)adaptor.dupNode(string_literal916);

            	    adaptor.addChild(root_0, string_literal916_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_add_in_expr_not9093);
            	    expr_add917=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, expr_add917.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 9 :
            	    // RPIExprWalker.g:1187:13: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
            	    {
            	    // RPIExprWalker.g:1187:13: ( 'NOT' )?
            	    int alt240=2;
            	    int LA240_0 = input.LA(1);

            	    if ( (LA240_0==NOT) ) {
            	        alt240=1;
            	    }
            	    switch (alt240) {
            	        case 1 :
            	            // RPIExprWalker.g:1187:15: 'NOT'
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            string_literal918=(CommonTree)match(input,NOT,FOLLOW_NOT_in_expr_not9109); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal918_tree = (CommonTree)adaptor.dupNode(string_literal918);

            	            adaptor.addChild(root_0, string_literal918_tree);
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (CommonTree)input.LT(1);
            	    string_literal919=(CommonTree)match(input,196,FOLLOW_196_in_expr_not9114); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal919_tree = (CommonTree)adaptor.dupNode(string_literal919);

            	    adaptor.addChild(root_0, string_literal919_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_add_in_expr_not9116);
            	    expr_add920=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, expr_add920.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    string_literal921=(CommonTree)match(input,AND,FOLLOW_AND_in_expr_not9118); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal921_tree = (CommonTree)adaptor.dupNode(string_literal921);

            	    adaptor.addChild(root_0, string_literal921_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_add_in_expr_not9120);
            	    expr_add922=expr_add();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, expr_add922.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;
            	case 10 :
            	    // RPIExprWalker.g:1188:13: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
            	    {
            	    // RPIExprWalker.g:1188:13: ( 'NOT' )?
            	    int alt241=2;
            	    int LA241_0 = input.LA(1);

            	    if ( (LA241_0==NOT) ) {
            	        alt241=1;
            	    }
            	    switch (alt241) {
            	        case 1 :
            	            // RPIExprWalker.g:1188:15: 'NOT'
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            string_literal923=(CommonTree)match(input,NOT,FOLLOW_NOT_in_expr_not9136); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal923_tree = (CommonTree)adaptor.dupNode(string_literal923);

            	            adaptor.addChild(root_0, string_literal923_tree);
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (CommonTree)input.LT(1);
            	    string_literal924=(CommonTree)match(input,160,FOLLOW_160_in_expr_not9141); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal924_tree = (CommonTree)adaptor.dupNode(string_literal924);

            	    adaptor.addChild(root_0, string_literal924_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    LPAREN925=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_expr_not9143); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN925_tree = (CommonTree)adaptor.dupNode(LPAREN925);

            	    adaptor.addChild(root_0, LPAREN925_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_expressions_in_expr_not9145);
            	    nested_expressions926=nested_expressions();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_expressions926.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    RPAREN927=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_expr_not9147); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN927_tree = (CommonTree)adaptor.dupNode(RPAREN927);

            	    adaptor.addChild(root_0, RPAREN927_tree);
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 158, expr_not_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_not"

    public static class boolean_literal_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "boolean_literal"
    // RPIExprWalker.g:1192:1: boolean_literal returns [StringBuffer value] : ( 'TRUE' | 'FALSE' );
    public final RPIExprWalker.boolean_literal_return boolean_literal() throws RecognitionException {
        RPIExprWalker.boolean_literal_return retval = new RPIExprWalker.boolean_literal_return();
        retval.start = input.LT(1);
        int boolean_literal_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal928=null;
        CommonTree string_literal929=null;

        CommonTree string_literal928_tree=null;
        CommonTree string_literal929_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 159) ) { return retval; }
            // RPIExprWalker.g:1193:5: ( 'TRUE' | 'FALSE' )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==168) ) {
                alt243=1;
            }
            else if ( (LA243_0==169) ) {
                alt243=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // RPIExprWalker.g:1193:9: 'TRUE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal928=(CommonTree)match(input,168,FOLLOW_168_in_boolean_literal9181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal928_tree = (CommonTree)adaptor.dupNode(string_literal928);

                    adaptor.addChild(root_0, string_literal928_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" TRUE");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1193:56: 'FALSE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal929=(CommonTree)match(input,169,FOLLOW_169_in_boolean_literal9187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal929_tree = (CommonTree)adaptor.dupNode(string_literal929);

                    adaptor.addChild(root_0, string_literal929_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" FALSE");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 159, boolean_literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "boolean_literal"

    public static class sql_expressions_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_expressions"
    // RPIExprWalker.g:1196:1: sql_expressions returns [StringBuffer value] : s1= sql_expression ( COMMA s2= sql_expression )* ;
    public final RPIExprWalker.sql_expressions_return sql_expressions() throws RecognitionException {
        RPIExprWalker.sql_expressions_return retval = new RPIExprWalker.sql_expressions_return();
        retval.start = input.LT(1);
        int sql_expressions_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA930=null;
        RPIExprWalker.sql_expression_return s1 = null;

        RPIExprWalker.sql_expression_return s2 = null;


        CommonTree COMMA930_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 160) ) { return retval; }
            // RPIExprWalker.g:1197:5: (s1= sql_expression ( COMMA s2= sql_expression )* )
            // RPIExprWalker.g:1197:9: s1= sql_expression ( COMMA s2= sql_expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_sql_expressions9214);
            s1=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (s1!=null?s1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1198:5: ( COMMA s2= sql_expression )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==COMMA) ) {
                    int LA244_2 = input.LA(2);

                    if ( (synpred401_RPIExprWalker()) ) {
                        alt244=1;
                    }


                }


                switch (alt244) {
            	case 1 :
            	    // RPIExprWalker.g:1198:7: COMMA s2= sql_expression
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA930=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_sql_expressions9226); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA930_tree = (CommonTree)adaptor.dupNode(COMMA930);

            	    adaptor.addChild(root_0, COMMA930_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_sql_expression_in_sql_expressions9230);
            	    s2=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, s2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" ," + (s2!=null?s2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 160, sql_expressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_expressions"

    public static class sql_expression_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_expression"
    // RPIExprWalker.g:1200:1: sql_expression returns [StringBuffer value] : expr_add ;
    public final RPIExprWalker.sql_expression_return sql_expression() throws RecognitionException {
        RPIExprWalker.sql_expression_return retval = new RPIExprWalker.sql_expression_return();
        retval.start = input.LT(1);
        int sql_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.expr_add_return expr_add931 = null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 161) ) { return retval; }
            // RPIExprWalker.g:1202:5: ( expr_add )
            // RPIExprWalker.g:1202:9: expr_add
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_add_in_sql_expression9269);
            expr_add931=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_add931.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (expr_add931!=null?expr_add931.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 161, sql_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_expression"

    public static class expr_add_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_add"
    // RPIExprWalker.g:1204:1: expr_add returns [StringBuffer value] : e1= expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul )* ;
    public final RPIExprWalker.expr_add_return expr_add() throws RecognitionException {
        RPIExprWalker.expr_add_return retval = new RPIExprWalker.expr_add_return();
        retval.start = input.LT(1);
        int expr_add_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS932=null;
        CommonTree MINUS933=null;
        CommonTree DOUBLEVERTBAR934=null;
        RPIExprWalker.expr_mul_return e1 = null;

        RPIExprWalker.expr_mul_return e2 = null;


        CommonTree PLUS932_tree=null;
        CommonTree MINUS933_tree=null;
        CommonTree DOUBLEVERTBAR934_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 162) ) { return retval; }
            // RPIExprWalker.g:1205:5: (e1= expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul )* )
            // RPIExprWalker.g:1205:9: e1= expr_mul ( ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_mul_in_expr_add9297);
            e1=expr_mul();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (e1!=null?e1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1206:9: ( ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul )*
            loop246:
            do {
                int alt246=2;
                switch ( input.LA(1) ) {
                case PLUS:
                    {
                    int LA246_2 = input.LA(2);

                    if ( (synpred404_RPIExprWalker()) ) {
                        alt246=1;
                    }


                    }
                    break;
                case MINUS:
                    {
                    int LA246_3 = input.LA(2);

                    if ( (synpred404_RPIExprWalker()) ) {
                        alt246=1;
                    }


                    }
                    break;
                case DOUBLEVERTBAR:
                    {
                    int LA246_4 = input.LA(2);

                    if ( (synpred404_RPIExprWalker()) ) {
                        alt246=1;
                    }


                    }
                    break;

                }

                switch (alt246) {
            	case 1 :
            	    // RPIExprWalker.g:1206:11: ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul
            	    {
            	    // RPIExprWalker.g:1206:11: ( PLUS | MINUS | DOUBLEVERTBAR )
            	    int alt245=3;
            	    switch ( input.LA(1) ) {
            	    case PLUS:
            	        {
            	        alt245=1;
            	        }
            	        break;
            	    case MINUS:
            	        {
            	        alt245=2;
            	        }
            	        break;
            	    case DOUBLEVERTBAR:
            	        {
            	        alt245=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 245, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt245) {
            	        case 1 :
            	            // RPIExprWalker.g:1206:13: PLUS
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            PLUS932=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr_add9313); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS932_tree = (CommonTree)adaptor.dupNode(PLUS932);

            	            adaptor.addChild(root_0, PLUS932_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              retval.value.append(" +");
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 2 :
            	            // RPIExprWalker.g:1206:42: MINUS
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            MINUS933=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr_add9318); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS933_tree = (CommonTree)adaptor.dupNode(MINUS933);

            	            adaptor.addChild(root_0, MINUS933_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              retval.value.append(" -");
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 3 :
            	            // RPIExprWalker.g:1206:72: DOUBLEVERTBAR
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            DOUBLEVERTBAR934=(CommonTree)match(input,DOUBLEVERTBAR,FOLLOW_DOUBLEVERTBAR_in_expr_add9323); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOUBLEVERTBAR934_tree = (CommonTree)adaptor.dupNode(DOUBLEVERTBAR934);

            	            adaptor.addChild(root_0, DOUBLEVERTBAR934_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              retval.value.append(" ||");
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_mul_in_expr_add9339);
            	    e2=expr_mul();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" " +(e2!=null?e2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop246;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 162, expr_add_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_add"

    public static class expr_mul_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_mul"
    // RPIExprWalker.g:1209:1: expr_mul returns [StringBuffer value] : e1= expr_sign ( ( ASTERISK | DIV ) e2= expr_sign )* ;
    public final RPIExprWalker.expr_mul_return expr_mul() throws RecognitionException {
        RPIExprWalker.expr_mul_return retval = new RPIExprWalker.expr_mul_return();
        retval.start = input.LT(1);
        int expr_mul_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ASTERISK935=null;
        CommonTree DIV936=null;
        RPIExprWalker.expr_sign_return e1 = null;

        RPIExprWalker.expr_sign_return e2 = null;


        CommonTree ASTERISK935_tree=null;
        CommonTree DIV936_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 163) ) { return retval; }
            // RPIExprWalker.g:1210:5: (e1= expr_sign ( ( ASTERISK | DIV ) e2= expr_sign )* )
            // RPIExprWalker.g:1210:9: e1= expr_sign ( ( ASTERISK | DIV ) e2= expr_sign )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_sign_in_expr_mul9367);
            e1=expr_sign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (e1!=null?e1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1211:9: ( ( ASTERISK | DIV ) e2= expr_sign )*
            loop248:
            do {
                int alt248=2;
                int LA248_0 = input.LA(1);

                if ( (LA248_0==ASTERISK) ) {
                    int LA248_2 = input.LA(2);

                    if ( (synpred406_RPIExprWalker()) ) {
                        alt248=1;
                    }


                }
                else if ( (LA248_0==DIV) ) {
                    int LA248_3 = input.LA(2);

                    if ( (synpred406_RPIExprWalker()) ) {
                        alt248=1;
                    }


                }


                switch (alt248) {
            	case 1 :
            	    // RPIExprWalker.g:1211:11: ( ASTERISK | DIV ) e2= expr_sign
            	    {
            	    // RPIExprWalker.g:1211:11: ( ASTERISK | DIV )
            	    int alt247=2;
            	    int LA247_0 = input.LA(1);

            	    if ( (LA247_0==ASTERISK) ) {
            	        alt247=1;
            	    }
            	    else if ( (LA247_0==DIV) ) {
            	        alt247=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 247, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt247) {
            	        case 1 :
            	            // RPIExprWalker.g:1211:13: ASTERISK
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            ASTERISK935=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_expr_mul9384); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ASTERISK935_tree = (CommonTree)adaptor.dupNode(ASTERISK935);

            	            adaptor.addChild(root_0, ASTERISK935_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              retval.value.append(" *");
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;
            	        case 2 :
            	            // RPIExprWalker.g:1211:46: DIV
            	            {
            	            _last = (CommonTree)input.LT(1);
            	            DIV936=(CommonTree)match(input,DIV,FOLLOW_DIV_in_expr_mul9389); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV936_tree = (CommonTree)adaptor.dupNode(DIV936);

            	            adaptor.addChild(root_0, DIV936_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              retval.value.append(" /");
            	            }

            	            if ( state.backtracking==0 ) {
            	            }
            	            }
            	            break;

            	    }

            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_sign_in_expr_mul9396);
            	    e2=expr_sign();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" " + (e2!=null?e2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop248;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 163, expr_mul_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_mul"

    public static class expr_sign_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_sign"
    // RPIExprWalker.g:1213:1: expr_sign returns [StringBuffer value] : ( PLUS | MINUS )? expr_pow ;
    public final RPIExprWalker.expr_sign_return expr_sign() throws RecognitionException {
        RPIExprWalker.expr_sign_return retval = new RPIExprWalker.expr_sign_return();
        retval.start = input.LT(1);
        int expr_sign_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree PLUS937=null;
        CommonTree MINUS938=null;
        RPIExprWalker.expr_pow_return expr_pow939 = null;


        CommonTree PLUS937_tree=null;
        CommonTree MINUS938_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 164) ) { return retval; }
            // RPIExprWalker.g:1214:5: ( ( PLUS | MINUS )? expr_pow )
            // RPIExprWalker.g:1214:9: ( PLUS | MINUS )? expr_pow
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer();
            }
            // RPIExprWalker.g:1214:40: ( PLUS | MINUS )?
            int alt249=3;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==PLUS) ) {
                alt249=1;
            }
            else if ( (LA249_0==MINUS) ) {
                alt249=2;
            }
            switch (alt249) {
                case 1 :
                    // RPIExprWalker.g:1214:42: PLUS
                    {
                    _last = (CommonTree)input.LT(1);
                    PLUS937=(CommonTree)match(input,PLUS,FOLLOW_PLUS_in_expr_sign9426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS937_tree = (CommonTree)adaptor.dupNode(PLUS937);

                    adaptor.addChild(root_0, PLUS937_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" +");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1214:71: MINUS
                    {
                    _last = (CommonTree)input.LT(1);
                    MINUS938=(CommonTree)match(input,MINUS,FOLLOW_MINUS_in_expr_sign9431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS938_tree = (CommonTree)adaptor.dupNode(MINUS938);

                    adaptor.addChild(root_0, MINUS938_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" -");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_pow_in_expr_sign9446);
            expr_pow939=expr_pow();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_pow939.getTree());
            if ( state.backtracking==0 ) {
              retval.value.append(" " + (expr_pow939!=null?expr_pow939.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 164, expr_sign_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_sign"

    public static class expr_pow_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_pow"
    // RPIExprWalker.g:1217:1: expr_pow returns [StringBuffer value] : e1= expr_expr ( EXPONENT e2= expr_expr )* ;
    public final RPIExprWalker.expr_pow_return expr_pow() throws RecognitionException {
        RPIExprWalker.expr_pow_return retval = new RPIExprWalker.expr_pow_return();
        retval.start = input.LT(1);
        int expr_pow_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EXPONENT940=null;
        RPIExprWalker.expr_expr_return e1 = null;

        RPIExprWalker.expr_expr_return e2 = null;


        CommonTree EXPONENT940_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 165) ) { return retval; }
            // RPIExprWalker.g:1218:5: (e1= expr_expr ( EXPONENT e2= expr_expr )* )
            // RPIExprWalker.g:1218:9: e1= expr_expr ( EXPONENT e2= expr_expr )*
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer();
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_expr_in_expr_pow9474);
            e1=expr_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.value.append(" " + (e1!=null?e1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1219:9: ( EXPONENT e2= expr_expr )*
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==EXPONENT) ) {
                    int LA250_2 = input.LA(2);

                    if ( (synpred409_RPIExprWalker()) ) {
                        alt250=1;
                    }


                }


                switch (alt250) {
            	case 1 :
            	    // RPIExprWalker.g:1219:11: EXPONENT e2= expr_expr
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    EXPONENT940=(CommonTree)match(input,EXPONENT,FOLLOW_EXPONENT_in_expr_pow9488); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    EXPONENT940_tree = (CommonTree)adaptor.dupNode(EXPONENT940);

            	    adaptor.addChild(root_0, EXPONENT940_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expr_expr_in_expr_pow9492);
            	    e2=expr_expr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" **" + (e2!=null?e2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 165, expr_pow_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_pow"

    public static class expr_expr_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_expr"
    // RPIExprWalker.g:1221:1: expr_expr returns [StringBuffer value] : ( ( expr_paren )=> expr_paren | ( function_expression )=> function_expression | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression );
    public final RPIExprWalker.expr_expr_return expr_expr() throws RecognitionException {
        RPIExprWalker.expr_expr_return retval = new RPIExprWalker.expr_expr_return();
        retval.start = input.LT(1);
        int expr_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.expr_paren_return expr_paren941 = null;

        RPIExprWalker.function_expression_return function_expression942 = null;

        RPIExprWalker.case_expression_return case_expression943 = null;

        RPIExprWalker.cursor_expression_return cursor_expression944 = null;

        RPIExprWalker.simple_expression_return simple_expression945 = null;

        RPIExprWalker.select_expression_return select_expression946 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 166) ) { return retval; }
            // RPIExprWalker.g:1222:5: ( ( expr_paren )=> expr_paren | ( function_expression )=> function_expression | ( case_expression )=> case_expression | ( cursor_expression )=> cursor_expression | ( simple_expression )=> simple_expression | ( select_expression )=> select_expression )
            int alt251=6;
            int LA251_0 = input.LA(1);

            if ( (LA251_0==LPAREN) && (synpred410_RPIExprWalker())) {
                alt251=1;
            }
            else if ( (LA251_0==ID) ) {
                int LA251_2 = input.LA(2);

                if ( (LA251_2==LPAREN) && (synpred413_RPIExprWalker())) {
                    alt251=4;
                }
                else if ( ((((synpred411_RPIExprWalker()&&( is_sql ))&&(((CommonTree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))||(synpred411_RPIExprWalker()&&( is_sql )))) ) {
                    alt251=2;
                }
                else if ( (synpred414_RPIExprWalker()) ) {
                    alt251=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA251_0==TO_CHAR) && (synpred411_RPIExprWalker())) {
                alt251=2;
            }
            else if ( (LA251_0==SUBSTR) && (synpred411_RPIExprWalker())) {
                alt251=2;
            }
            else if ( (LA251_0==TRIM) && (synpred411_RPIExprWalker())) {
                alt251=2;
            }
            else if ( (LA251_0==DOUBLEQUOTED_STRING) ) {
                int LA251_6 = input.LA(2);

                if ( ((synpred411_RPIExprWalker()&&( is_sql ))) ) {
                    alt251=2;
                }
                else if ( (synpred414_RPIExprWalker()) ) {
                    alt251=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA251_0==158) ) {
                int LA251_7 = input.LA(2);

                if ( ((synpred411_RPIExprWalker()&&( is_sql ))) ) {
                    alt251=2;
                }
                else if ( (synpred414_RPIExprWalker()) ) {
                    alt251=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA251_0==175) && (synpred411_RPIExprWalker())) {
                alt251=2;
            }
            else if ( (LA251_0==198) && (synpred412_RPIExprWalker())) {
                alt251=3;
            }
            else if ( (LA251_0==168) && (synpred414_RPIExprWalker())) {
                alt251=5;
            }
            else if ( (LA251_0==169) && (synpred414_RPIExprWalker())) {
                alt251=5;
            }
            else if ( (LA251_0==SQL) && (synpred414_RPIExprWalker())) {
                alt251=5;
            }
            else if ( (LA251_0==QUOTED_STRING) && (synpred414_RPIExprWalker())) {
                alt251=5;
            }
            else if ( (LA251_0==NUMBER) && (synpred414_RPIExprWalker())) {
                alt251=5;
            }
            else if ( (LA251_0==116) && (synpred414_RPIExprWalker())) {
                alt251=5;
            }
            else if ( (LA251_0==174) && (synpred415_RPIExprWalker())) {
                alt251=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }
            switch (alt251) {
                case 1 :
                    // RPIExprWalker.g:1222:9: ( expr_paren )=> expr_paren
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_paren_in_expr_expr9526);
                    expr_paren941=expr_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr_paren941.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (expr_paren941!=null?expr_paren941.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1223:9: ( function_expression )=> function_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_expression_in_expr_expr9545);
                    function_expression942=function_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_expression942.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (function_expression942!=null?function_expression942.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1225:9: ( case_expression )=> case_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_case_expression_in_expr_expr9566);
                    case_expression943=case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, case_expression943.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:1226:9: ( cursor_expression )=> cursor_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_cursor_expression_in_expr_expr9585);
                    cursor_expression944=cursor_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, cursor_expression944.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:1227:9: ( simple_expression )=> simple_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_expression_in_expr_expr9604);
                    simple_expression945=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_expression945.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (simple_expression945!=null?simple_expression945.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:1228:9: ( select_expression )=> select_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_select_expression_in_expr_expr9624);
                    select_expression946=select_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, select_expression946.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (select_expression946!=null?select_expression946.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 166, expr_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_expr"

    public static class simple_expression_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_expression"
    // RPIExprWalker.g:1239:1: simple_expression returns [StringBuffer value] : ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | ( column_spec )=> column_spec | QUOTED_STRING | NUMBER | 'NULL' );
    public final RPIExprWalker.simple_expression_return simple_expression() throws RecognitionException {
        RPIExprWalker.simple_expression_return retval = new RPIExprWalker.simple_expression_return();
        retval.start = input.LT(1);
        int simple_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal948=null;
        CommonTree FOUND_ATTR949=null;
        CommonTree NOTFOUND_ATTR950=null;
        CommonTree ISOPEN_ATTR951=null;
        CommonTree ROWCOUNT_ATTR952=null;
        CommonTree BULK_ROWCOUNT_ATTR953=null;
        CommonTree QUOTED_STRING955=null;
        CommonTree NUMBER956=null;
        CommonTree string_literal957=null;
        RPIExprWalker.boolean_literal_return boolean_literal947 = null;

        RPIExprWalker.column_spec_return column_spec954 = null;


        CommonTree string_literal948_tree=null;
        CommonTree FOUND_ATTR949_tree=null;
        CommonTree NOTFOUND_ATTR950_tree=null;
        CommonTree ISOPEN_ATTR951_tree=null;
        CommonTree ROWCOUNT_ATTR952_tree=null;
        CommonTree BULK_ROWCOUNT_ATTR953_tree=null;
        CommonTree QUOTED_STRING955_tree=null;
        CommonTree NUMBER956_tree=null;
        CommonTree string_literal957_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 167) ) { return retval; }
            // RPIExprWalker.g:1240:5: ( boolean_literal | 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR ) | ( column_spec )=> column_spec | QUOTED_STRING | NUMBER | 'NULL' )
            int alt253=6;
            int LA253_0 = input.LA(1);

            if ( ((LA253_0>=168 && LA253_0<=169)) ) {
                alt253=1;
            }
            else if ( (LA253_0==SQL) ) {
                alt253=2;
            }
            else if ( (LA253_0==ID) && (synpred422_RPIExprWalker())) {
                alt253=3;
            }
            else if ( (LA253_0==DOUBLEQUOTED_STRING) && (synpred422_RPIExprWalker())) {
                alt253=3;
            }
            else if ( (LA253_0==158) && (synpred422_RPIExprWalker())) {
                alt253=3;
            }
            else if ( (LA253_0==QUOTED_STRING) ) {
                alt253=4;
            }
            else if ( (LA253_0==NUMBER) ) {
                alt253=5;
            }
            else if ( (LA253_0==116) ) {
                alt253=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 253, 0, input);

                throw nvae;
            }
            switch (alt253) {
                case 1 :
                    // RPIExprWalker.g:1240:9: boolean_literal
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_boolean_literal_in_simple_expression9657);
                    boolean_literal947=boolean_literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, boolean_literal947.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (boolean_literal947!=null?boolean_literal947.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1241:9: 'SQL' ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal948=(CommonTree)match(input,SQL,FOLLOW_SQL_in_simple_expression9669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal948_tree = (CommonTree)adaptor.dupNode(string_literal948);

                    adaptor.addChild(root_0, string_literal948_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" SQL");
                    }
                    // RPIExprWalker.g:1242:9: ( FOUND_ATTR | NOTFOUND_ATTR | ISOPEN_ATTR | ROWCOUNT_ATTR | BULK_ROWCOUNT_ATTR )
                    int alt252=5;
                    switch ( input.LA(1) ) {
                    case FOUND_ATTR:
                        {
                        alt252=1;
                        }
                        break;
                    case NOTFOUND_ATTR:
                        {
                        alt252=2;
                        }
                        break;
                    case ISOPEN_ATTR:
                        {
                        alt252=3;
                        }
                        break;
                    case ROWCOUNT_ATTR:
                        {
                        alt252=4;
                        }
                        break;
                    case BULK_ROWCOUNT_ATTR:
                        {
                        alt252=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 252, 0, input);

                        throw nvae;
                    }

                    switch (alt252) {
                        case 1 :
                            // RPIExprWalker.g:1242:11: FOUND_ATTR
                            {
                            _last = (CommonTree)input.LT(1);
                            FOUND_ATTR949=(CommonTree)match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_simple_expression9684); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FOUND_ATTR949_tree = (CommonTree)adaptor.dupNode(FOUND_ATTR949);

                            adaptor.addChild(root_0, FOUND_ATTR949_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (FOUND_ATTR949!=null?FOUND_ATTR949.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1243:9: NOTFOUND_ATTR
                            {
                            _last = (CommonTree)input.LT(1);
                            NOTFOUND_ATTR950=(CommonTree)match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_simple_expression9698); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOTFOUND_ATTR950_tree = (CommonTree)adaptor.dupNode(NOTFOUND_ATTR950);

                            adaptor.addChild(root_0, NOTFOUND_ATTR950_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (NOTFOUND_ATTR950!=null?NOTFOUND_ATTR950.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:1244:9: ISOPEN_ATTR
                            {
                            _last = (CommonTree)input.LT(1);
                            ISOPEN_ATTR951=(CommonTree)match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_simple_expression9713); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ISOPEN_ATTR951_tree = (CommonTree)adaptor.dupNode(ISOPEN_ATTR951);

                            adaptor.addChild(root_0, ISOPEN_ATTR951_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (ISOPEN_ATTR951!=null?ISOPEN_ATTR951.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RPIExprWalker.g:1245:9: ROWCOUNT_ATTR
                            {
                            _last = (CommonTree)input.LT(1);
                            ROWCOUNT_ATTR952=(CommonTree)match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_simple_expression9727); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ROWCOUNT_ATTR952_tree = (CommonTree)adaptor.dupNode(ROWCOUNT_ATTR952);

                            adaptor.addChild(root_0, ROWCOUNT_ATTR952_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (ROWCOUNT_ATTR952!=null?ROWCOUNT_ATTR952.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RPIExprWalker.g:1246:9: BULK_ROWCOUNT_ATTR
                            {
                            _last = (CommonTree)input.LT(1);
                            BULK_ROWCOUNT_ATTR953=(CommonTree)match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_simple_expression9741); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BULK_ROWCOUNT_ATTR953_tree = (CommonTree)adaptor.dupNode(BULK_ROWCOUNT_ATTR953);

                            adaptor.addChild(root_0, BULK_ROWCOUNT_ATTR953_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (BULK_ROWCOUNT_ATTR953!=null?BULK_ROWCOUNT_ATTR953.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1247:9: ( column_spec )=> column_spec
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_spec_in_simple_expression9761);
                    column_spec954=column_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_spec954.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (column_spec954!=null?column_spec954.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:1248:9: QUOTED_STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    QUOTED_STRING955=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_simple_expression9773); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUOTED_STRING955_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING955);

                    adaptor.addChild(root_0, QUOTED_STRING955_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (QUOTED_STRING955!=null?QUOTED_STRING955.getText():null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:1249:9: NUMBER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    NUMBER956=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_simple_expression9785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER956_tree = (CommonTree)adaptor.dupNode(NUMBER956);

                    adaptor.addChild(root_0, NUMBER956_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (NUMBER956!=null?NUMBER956.getText():null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:1253:9: 'NULL'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal957=(CommonTree)match(input,116,FOLLOW_116_in_simple_expression9800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal957_tree = (CommonTree)adaptor.dupNode(string_literal957);

                    adaptor.addChild(root_0, string_literal957_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" NULL");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 167, simple_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_expression"

    public static class compound_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_expression"
    // RPIExprWalker.g:1255:1: compound_expression : expr_prior ;
    public final RPIExprWalker.compound_expression_return compound_expression() throws RecognitionException {
        RPIExprWalker.compound_expression_return retval = new RPIExprWalker.compound_expression_return();
        retval.start = input.LT(1);
        int compound_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.expr_prior_return expr_prior958 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 168) ) { return retval; }
            // RPIExprWalker.g:1258:5: ( expr_prior )
            // RPIExprWalker.g:1258:9: expr_prior
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_prior_in_compound_expression9822);
            expr_prior958=expr_prior();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_prior958.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 168, compound_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compound_expression"

    public static class expr_paren_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_paren"
    // RPIExprWalker.g:1262:1: expr_paren returns [StringBuffer value] : LPAREN nested_expression RPAREN ;
    public final RPIExprWalker.expr_paren_return expr_paren() throws RecognitionException {
        RPIExprWalker.expr_paren_return retval = new RPIExprWalker.expr_paren_return();
        retval.start = input.LT(1);
        int expr_paren_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN959=null;
        CommonTree RPAREN961=null;
        RPIExprWalker.nested_expression_return nested_expression960 = null;


        CommonTree LPAREN959_tree=null;
        CommonTree RPAREN961_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 169) ) { return retval; }
            // RPIExprWalker.g:1263:5: ( LPAREN nested_expression RPAREN )
            // RPIExprWalker.g:1263:9: LPAREN nested_expression RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            LPAREN959=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_expr_paren9846); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN959_tree = (CommonTree)adaptor.dupNode(LPAREN959);

            adaptor.addChild(root_0, LPAREN959_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" (");
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_expression_in_expr_paren9859);
            nested_expression960=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_expression960.getTree());
            if ( state.backtracking==0 ) {
              retval.value.append(" " + (nested_expression960!=null?nested_expression960.value:null).toString().trim());
            }
            _last = (CommonTree)input.LT(1);
            RPAREN961=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_expr_paren9872); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN961_tree = (CommonTree)adaptor.dupNode(RPAREN961);

            adaptor.addChild(root_0, RPAREN961_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value.append(" )");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 169, expr_paren_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_paren"

    public static class expr_prior_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_prior"
    // RPIExprWalker.g:1267:1: expr_prior : 'PRIOR' expr_add ;
    public final RPIExprWalker.expr_prior_return expr_prior() throws RecognitionException {
        RPIExprWalker.expr_prior_return retval = new RPIExprWalker.expr_prior_return();
        retval.start = input.LT(1);
        int expr_prior_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal962=null;
        RPIExprWalker.expr_add_return expr_add963 = null;


        CommonTree string_literal962_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 170) ) { return retval; }
            // RPIExprWalker.g:1268:5: ( 'PRIOR' expr_add )
            // RPIExprWalker.g:1268:9: 'PRIOR' expr_add
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal962=(CommonTree)match(input,197,FOLLOW_197_in_expr_prior9892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal962_tree = (CommonTree)adaptor.dupNode(string_literal962);

            adaptor.addChild(root_0, string_literal962_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expr_add_in_expr_prior9894);
            expr_add963=expr_add();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, expr_add963.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 170, expr_prior_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expr_prior"

    public static class case_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_expression"
    // RPIExprWalker.g:1270:1: case_expression : 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' ;
    public final RPIExprWalker.case_expression_return case_expression() throws RecognitionException {
        RPIExprWalker.case_expression_return retval = new RPIExprWalker.case_expression_return();
        retval.start = input.LT(1);
        int case_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal964=null;
        CommonTree string_literal968=null;
        RPIExprWalker.simple_case_expression_return simple_case_expression965 = null;

        RPIExprWalker.searched_case_expression_return searched_case_expression966 = null;

        RPIExprWalker.else_case_expression_return else_case_expression967 = null;


        CommonTree string_literal964_tree=null;
        CommonTree string_literal968_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 171) ) { return retval; }
            // RPIExprWalker.g:1271:5: ( 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END' )
            // RPIExprWalker.g:1271:9: 'CASE' ( simple_case_expression | searched_case_expression ) ( else_case_expression )? 'END'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal964=(CommonTree)match(input,198,FOLLOW_198_in_case_expression9912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal964_tree = (CommonTree)adaptor.dupNode(string_literal964);

            adaptor.addChild(root_0, string_literal964_tree);
            }
            // RPIExprWalker.g:1271:16: ( simple_case_expression | searched_case_expression )
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( ((LA254_0>=SUBSTR && LA254_0<=TO_CHAR)||LA254_0==TRIM||(LA254_0>=ID && LA254_0<=LPAREN)||(LA254_0>=SQL && LA254_0<=MINUS)||LA254_0==NUMBER||LA254_0==NOT||LA254_0==QUOTED_STRING||LA254_0==DOUBLEQUOTED_STRING||LA254_0==116||LA254_0==158||(LA254_0>=168 && LA254_0<=169)||(LA254_0>=174 && LA254_0<=175)||LA254_0==198) ) {
                alt254=1;
            }
            else if ( (LA254_0==121) ) {
                alt254=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    // RPIExprWalker.g:1271:18: simple_case_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_case_expression_in_case_expression9916);
                    simple_case_expression965=simple_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_case_expression965.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1271:43: searched_case_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_searched_case_expression_in_case_expression9920);
                    searched_case_expression966=searched_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, searched_case_expression966.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1271:70: ( else_case_expression )?
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==173) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    // RPIExprWalker.g:1271:72: else_case_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_else_case_expression_in_case_expression9926);
                    else_case_expression967=else_case_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, else_case_expression967.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal968=(CommonTree)match(input,113,FOLLOW_113_in_case_expression9931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal968_tree = (CommonTree)adaptor.dupNode(string_literal968);

            adaptor.addChild(root_0, string_literal968_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 171, case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_expression"

    public static class simple_case_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_expression"
    // RPIExprWalker.g:1273:1: simple_case_expression : nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ ;
    public final RPIExprWalker.simple_case_expression_return simple_case_expression() throws RecognitionException {
        RPIExprWalker.simple_case_expression_return retval = new RPIExprWalker.simple_case_expression_return();
        retval.start = input.LT(1);
        int simple_case_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal970=null;
        CommonTree string_literal972=null;
        RPIExprWalker.nested_expression_return nested_expression969 = null;

        RPIExprWalker.nested_expression_return nested_expression971 = null;

        RPIExprWalker.nested_expression_return nested_expression973 = null;


        CommonTree string_literal970_tree=null;
        CommonTree string_literal972_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 172) ) { return retval; }
            // RPIExprWalker.g:1274:5: ( nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+ )
            // RPIExprWalker.g:1274:9: nested_expression ( 'WHEN' nested_expression 'THEN' nested_expression )+
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_expression_in_simple_case_expression9949);
            nested_expression969=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_expression969.getTree());
            // RPIExprWalker.g:1274:27: ( 'WHEN' nested_expression 'THEN' nested_expression )+
            int cnt256=0;
            loop256:
            do {
                int alt256=2;
                int LA256_0 = input.LA(1);

                if ( (LA256_0==121) ) {
                    alt256=1;
                }


                switch (alt256) {
            	case 1 :
            	    // RPIExprWalker.g:1274:29: 'WHEN' nested_expression 'THEN' nested_expression
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal970=(CommonTree)match(input,121,FOLLOW_121_in_simple_case_expression9953); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal970_tree = (CommonTree)adaptor.dupNode(string_literal970);

            	    adaptor.addChild(root_0, string_literal970_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression9955);
            	    nested_expression971=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_expression971.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    string_literal972=(CommonTree)match(input,167,FOLLOW_167_in_simple_case_expression9957); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal972_tree = (CommonTree)adaptor.dupNode(string_literal972);

            	    adaptor.addChild(root_0, string_literal972_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_expression_in_simple_case_expression9959);
            	    nested_expression973=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_expression973.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt256 >= 1 ) break loop256;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(256, input);
                        throw eee;
                }
                cnt256++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 172, simple_case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_expression"

    public static class searched_case_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_expression"
    // RPIExprWalker.g:1276:1: searched_case_expression : ( 'WHEN' nested_condition 'THEN' nested_expression )+ ;
    public final RPIExprWalker.searched_case_expression_return searched_case_expression() throws RecognitionException {
        RPIExprWalker.searched_case_expression_return retval = new RPIExprWalker.searched_case_expression_return();
        retval.start = input.LT(1);
        int searched_case_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal974=null;
        CommonTree string_literal976=null;
        RPIExprWalker.nested_condition_return nested_condition975 = null;

        RPIExprWalker.nested_expression_return nested_expression977 = null;


        CommonTree string_literal974_tree=null;
        CommonTree string_literal976_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 173) ) { return retval; }
            // RPIExprWalker.g:1277:5: ( ( 'WHEN' nested_condition 'THEN' nested_expression )+ )
            // RPIExprWalker.g:1277:9: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1277:9: ( 'WHEN' nested_condition 'THEN' nested_expression )+
            int cnt257=0;
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==121) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // RPIExprWalker.g:1277:11: 'WHEN' nested_condition 'THEN' nested_expression
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal974=(CommonTree)match(input,121,FOLLOW_121_in_searched_case_expression9982); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal974_tree = (CommonTree)adaptor.dupNode(string_literal974);

            	    adaptor.addChild(root_0, string_literal974_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_condition_in_searched_case_expression9984);
            	    nested_condition975=nested_condition();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_condition975.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    string_literal976=(CommonTree)match(input,167,FOLLOW_167_in_searched_case_expression9986); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal976_tree = (CommonTree)adaptor.dupNode(string_literal976);

            	    adaptor.addChild(root_0, string_literal976_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_nested_expression_in_searched_case_expression9988);
            	    nested_expression977=nested_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, nested_expression977.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt257 >= 1 ) break loop257;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(257, input);
                        throw eee;
                }
                cnt257++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 173, searched_case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_expression"

    public static class else_case_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_case_expression"
    // RPIExprWalker.g:1279:1: else_case_expression : 'ELSE' nested_expression ;
    public final RPIExprWalker.else_case_expression_return else_case_expression() throws RecognitionException {
        RPIExprWalker.else_case_expression_return retval = new RPIExprWalker.else_case_expression_return();
        retval.start = input.LT(1);
        int else_case_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal978=null;
        RPIExprWalker.nested_expression_return nested_expression979 = null;


        CommonTree string_literal978_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 174) ) { return retval; }
            // RPIExprWalker.g:1280:5: ( 'ELSE' nested_expression )
            // RPIExprWalker.g:1280:9: 'ELSE' nested_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal978=(CommonTree)match(input,173,FOLLOW_173_in_else_case_expression10009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal978_tree = (CommonTree)adaptor.dupNode(string_literal978);

            adaptor.addChild(root_0, string_literal978_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_expression_in_else_case_expression10011);
            nested_expression979=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_expression979.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 174, else_case_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_case_expression"

    public static class case_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "case_statement"
    // RPIExprWalker.g:1282:1: case_statement : ( label_name )? 'CASE' ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? ;
    public final RPIExprWalker.case_statement_return case_statement() throws RecognitionException {
        RPIExprWalker.case_statement_return retval = new RPIExprWalker.case_statement_return();
        retval.start = input.LT(1);
        int case_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal981=null;
        CommonTree string_literal985=null;
        CommonTree string_literal986=null;
        RPIExprWalker.label_name_return label_name980 = null;

        RPIExprWalker.simple_case_statement_return simple_case_statement982 = null;

        RPIExprWalker.searched_case_statement_return searched_case_statement983 = null;

        RPIExprWalker.else_case_statement_return else_case_statement984 = null;

        RPIExprWalker.label_name_return label_name987 = null;


        CommonTree string_literal981_tree=null;
        CommonTree string_literal985_tree=null;
        CommonTree string_literal986_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 175) ) { return retval; }
            // RPIExprWalker.g:1283:5: ( ( label_name )? 'CASE' ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )? )
            // RPIExprWalker.g:1283:9: ( label_name )? 'CASE' ( simple_case_statement | searched_case_statement ) ( else_case_statement )? 'END' 'CASE' ( label_name )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1283:9: ( label_name )?
            int alt258=2;
            int LA258_0 = input.LA(1);

            if ( (LA258_0==ID||LA258_0==DOUBLEQUOTED_STRING) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    // RPIExprWalker.g:1283:11: label_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_case_statement10031);
                    label_name980=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name980.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal981=(CommonTree)match(input,198,FOLLOW_198_in_case_statement10036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal981_tree = (CommonTree)adaptor.dupNode(string_literal981);

            root_0 = (CommonTree)adaptor.becomeRoot(string_literal981_tree, root_0);
            }
            // RPIExprWalker.g:1283:33: ( simple_case_statement | searched_case_statement )
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( ((LA259_0>=SUBSTR && LA259_0<=TO_CHAR)||LA259_0==TRIM||(LA259_0>=ID && LA259_0<=LPAREN)||(LA259_0>=SQL && LA259_0<=MINUS)||LA259_0==NUMBER||LA259_0==NOT||LA259_0==QUOTED_STRING||LA259_0==DOUBLEQUOTED_STRING||LA259_0==116||LA259_0==158||(LA259_0>=168 && LA259_0<=169)||(LA259_0>=174 && LA259_0<=175)||LA259_0==198) ) {
                alt259=1;
            }
            else if ( (LA259_0==121) ) {
                alt259=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    // RPIExprWalker.g:1283:35: simple_case_statement
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_simple_case_statement_in_case_statement10041);
                    simple_case_statement982=simple_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, simple_case_statement982.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1283:59: searched_case_statement
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_searched_case_statement_in_case_statement10045);
                    searched_case_statement983=searched_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, searched_case_statement983.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1283:85: ( else_case_statement )?
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==173) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    // RPIExprWalker.g:1283:87: else_case_statement
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_else_case_statement_in_case_statement10051);
                    else_case_statement984=else_case_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, else_case_statement984.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal985=(CommonTree)match(input,113,FOLLOW_113_in_case_statement10056); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal985_tree = (CommonTree)adaptor.dupNode(string_literal985);

            adaptor.addChild(root_0, string_literal985_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal986=(CommonTree)match(input,198,FOLLOW_198_in_case_statement10058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal986_tree = (CommonTree)adaptor.dupNode(string_literal986);

            adaptor.addChild(root_0, string_literal986_tree);
            }
            // RPIExprWalker.g:1283:123: ( label_name )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==ID||LA261_0==DOUBLEQUOTED_STRING) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // RPIExprWalker.g:1283:125: label_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_label_name_in_case_statement10062);
                    label_name987=label_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, label_name987.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 175, case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "case_statement"

    public static class simple_case_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_case_statement"
    // RPIExprWalker.g:1285:1: simple_case_statement : plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final RPIExprWalker.simple_case_statement_return simple_case_statement() throws RecognitionException {
        RPIExprWalker.simple_case_statement_return retval = new RPIExprWalker.simple_case_statement_return();
        retval.start = input.LT(1);
        int simple_case_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal989=null;
        CommonTree string_literal991=null;
        RPIExprWalker.plsql_expression_return plsql_expression988 = null;

        RPIExprWalker.plsql_expression_return plsql_expression990 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements992 = null;


        CommonTree string_literal989_tree=null;
        CommonTree string_literal991_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 176) ) { return retval; }
            // RPIExprWalker.g:1286:5: ( plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // RPIExprWalker.g:1286:9: plsql_expression ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_plsql_expression_in_simple_case_statement10083);
            plsql_expression988=plsql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, plsql_expression988.getTree());
            // RPIExprWalker.g:1286:26: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt262=0;
            loop262:
            do {
                int alt262=2;
                int LA262_0 = input.LA(1);

                if ( (LA262_0==121) ) {
                    alt262=1;
                }


                switch (alt262) {
            	case 1 :
            	    // RPIExprWalker.g:1286:28: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal989=(CommonTree)match(input,121,FOLLOW_121_in_simple_case_statement10087); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal989_tree = (CommonTree)adaptor.dupNode(string_literal989);

            	    adaptor.addChild(root_0, string_literal989_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_plsql_expression_in_simple_case_statement10089);
            	    plsql_expression990=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, plsql_expression990.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    string_literal991=(CommonTree)match(input,167,FOLLOW_167_in_simple_case_statement10091); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal991_tree = (CommonTree)adaptor.dupNode(string_literal991);

            	    adaptor.addChild(root_0, string_literal991_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_seq_of_statements_in_simple_case_statement10093);
            	    seq_of_statements992=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, seq_of_statements992.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt262 >= 1 ) break loop262;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(262, input);
                        throw eee;
                }
                cnt262++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 176, simple_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simple_case_statement"

    public static class searched_case_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "searched_case_statement"
    // RPIExprWalker.g:1288:1: searched_case_statement : ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ ;
    public final RPIExprWalker.searched_case_statement_return searched_case_statement() throws RecognitionException {
        RPIExprWalker.searched_case_statement_return retval = new RPIExprWalker.searched_case_statement_return();
        retval.start = input.LT(1);
        int searched_case_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal993=null;
        CommonTree string_literal995=null;
        RPIExprWalker.plsql_expression_return plsql_expression994 = null;

        RPIExprWalker.seq_of_statements_return seq_of_statements996 = null;


        CommonTree string_literal993_tree=null;
        CommonTree string_literal995_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 177) ) { return retval; }
            // RPIExprWalker.g:1289:5: ( ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+ )
            // RPIExprWalker.g:1289:9: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1289:9: ( 'WHEN' plsql_expression 'THEN' seq_of_statements )+
            int cnt263=0;
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);

                if ( (LA263_0==121) ) {
                    alt263=1;
                }


                switch (alt263) {
            	case 1 :
            	    // RPIExprWalker.g:1289:11: 'WHEN' plsql_expression 'THEN' seq_of_statements
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal993=(CommonTree)match(input,121,FOLLOW_121_in_searched_case_statement10116); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal993_tree = (CommonTree)adaptor.dupNode(string_literal993);

            	    adaptor.addChild(root_0, string_literal993_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_plsql_expression_in_searched_case_statement10118);
            	    plsql_expression994=plsql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, plsql_expression994.getTree());
            	    _last = (CommonTree)input.LT(1);
            	    string_literal995=(CommonTree)match(input,167,FOLLOW_167_in_searched_case_statement10120); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal995_tree = (CommonTree)adaptor.dupNode(string_literal995);

            	    adaptor.addChild(root_0, string_literal995_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_seq_of_statements_in_searched_case_statement10122);
            	    seq_of_statements996=seq_of_statements();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, seq_of_statements996.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    if ( cnt263 >= 1 ) break loop263;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(263, input);
                        throw eee;
                }
                cnt263++;
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 177, searched_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "searched_case_statement"

    public static class else_case_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_case_statement"
    // RPIExprWalker.g:1291:1: else_case_statement : 'ELSE' seq_of_statements ;
    public final RPIExprWalker.else_case_statement_return else_case_statement() throws RecognitionException {
        RPIExprWalker.else_case_statement_return retval = new RPIExprWalker.else_case_statement_return();
        retval.start = input.LT(1);
        int else_case_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal997=null;
        RPIExprWalker.seq_of_statements_return seq_of_statements998 = null;


        CommonTree string_literal997_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 178) ) { return retval; }
            // RPIExprWalker.g:1292:5: ( 'ELSE' seq_of_statements )
            // RPIExprWalker.g:1292:9: 'ELSE' seq_of_statements
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal997=(CommonTree)match(input,173,FOLLOW_173_in_else_case_statement10143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal997_tree = (CommonTree)adaptor.dupNode(string_literal997);

            adaptor.addChild(root_0, string_literal997_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_seq_of_statements_in_else_case_statement10145);
            seq_of_statements998=seq_of_statements();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, seq_of_statements998.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 178, else_case_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "else_case_statement"

    public static class cursor_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cursor_expression"
    // RPIExprWalker.g:1294:1: cursor_expression : keyCURSOR LPAREN subquery RPAREN ;
    public final RPIExprWalker.cursor_expression_return cursor_expression() throws RecognitionException {
        RPIExprWalker.cursor_expression_return retval = new RPIExprWalker.cursor_expression_return();
        retval.start = input.LT(1);
        int cursor_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1000=null;
        CommonTree RPAREN1002=null;
        RPIExprWalker.keyCURSOR_return keyCURSOR999 = null;

        RPIExprWalker.subquery_return subquery1001 = null;


        CommonTree LPAREN1000_tree=null;
        CommonTree RPAREN1002_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 179) ) { return retval; }
            // RPIExprWalker.g:1295:5: ( keyCURSOR LPAREN subquery RPAREN )
            // RPIExprWalker.g:1295:9: keyCURSOR LPAREN subquery RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyCURSOR_in_cursor_expression10163);
            keyCURSOR999=keyCURSOR();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyCURSOR999.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN1000=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_cursor_expression10165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1000_tree = (CommonTree)adaptor.dupNode(LPAREN1000);

            adaptor.addChild(root_0, LPAREN1000_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_subquery_in_cursor_expression10167);
            subquery1001=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, subquery1001.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1002=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_cursor_expression10169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1002_tree = (CommonTree)adaptor.dupNode(RPAREN1002);

            adaptor.addChild(root_0, RPAREN1002_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 179, cursor_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cursor_expression"

    public static class datetime_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "datetime_expression"
    // RPIExprWalker.g:1297:1: datetime_expression : sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) ;
    public final RPIExprWalker.datetime_expression_return datetime_expression() throws RecognitionException {
        RPIExprWalker.datetime_expression_return retval = new RPIExprWalker.datetime_expression_return();
        retval.start = input.LT(1);
        int datetime_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1004=null;
        RPIExprWalker.sql_expression_return sql_expression1003 = null;

        RPIExprWalker.keyLOCAL_return keyLOCAL1005 = null;

        RPIExprWalker.keyTIME_return keyTIME1006 = null;

        RPIExprWalker.keyZONE_return keyZONE1007 = null;

        RPIExprWalker.keyDBTIMEZONE_return keyDBTIMEZONE1008 = null;

        RPIExprWalker.keySESSIONTIMEZONE_return keySESSIONTIMEZONE1009 = null;

        RPIExprWalker.sql_expression_return sql_expression1010 = null;


        CommonTree string_literal1004_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 180) ) { return retval; }
            // RPIExprWalker.g:1298:5: ( sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) ) )
            // RPIExprWalker.g:1298:9: sql_expression 'AT' ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_datetime_expression10187);
            sql_expression1003=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1003.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1004=(CommonTree)match(input,199,FOLLOW_199_in_datetime_expression10189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1004_tree = (CommonTree)adaptor.dupNode(string_literal1004);

            adaptor.addChild(root_0, string_literal1004_tree);
            }
            // RPIExprWalker.g:1299:9: ( keyLOCAL | keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression ) )
            int alt265=2;
            int LA265_0 = input.LA(1);

            if ( (LA265_0==ID) ) {
                int LA265_1 = input.LA(2);

                if ( (LA265_1==ID) ) {
                    alt265=2;
                }
                else if ( (LA265_1==EOF) ) {
                    alt265=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 265, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    // RPIExprWalker.g:1299:13: keyLOCAL
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyLOCAL_in_datetime_expression10203);
                    keyLOCAL1005=keyLOCAL();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyLOCAL1005.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1300:13: keyTIME keyZONE ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyTIME_in_datetime_expression10217);
                    keyTIME1006=keyTIME();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyTIME1006.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyZONE_in_datetime_expression10219);
                    keyZONE1007=keyZONE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyZONE1007.getTree());
                    // RPIExprWalker.g:1300:29: ( keyDBTIMEZONE | keySESSIONTIMEZONE | sql_expression )
                    int alt264=3;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==ID) ) {
                        int LA264_1 = input.LA(2);

                        if ( ((synpred436_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DBTIMEZONE")))) ) {
                            alt264=1;
                        }
                        else if ( ((synpred437_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SESSIONTIMEZONE")))) ) {
                            alt264=2;
                        }
                        else if ( (true) ) {
                            alt264=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 264, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA264_0>=SUBSTR && LA264_0<=TO_CHAR)||LA264_0==TRIM||LA264_0==LPAREN||(LA264_0>=SQL && LA264_0<=MINUS)||LA264_0==NUMBER||LA264_0==QUOTED_STRING||LA264_0==DOUBLEQUOTED_STRING||LA264_0==116||LA264_0==158||(LA264_0>=168 && LA264_0<=169)||(LA264_0>=174 && LA264_0<=175)||LA264_0==198) ) {
                        alt264=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 264, 0, input);

                        throw nvae;
                    }
                    switch (alt264) {
                        case 1 :
                            // RPIExprWalker.g:1300:31: keyDBTIMEZONE
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyDBTIMEZONE_in_datetime_expression10223);
                            keyDBTIMEZONE1008=keyDBTIMEZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyDBTIMEZONE1008.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1300:47: keySESSIONTIMEZONE
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keySESSIONTIMEZONE_in_datetime_expression10227);
                            keySESSIONTIMEZONE1009=keySESSIONTIMEZONE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keySESSIONTIMEZONE1009.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:1300:68: sql_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_expression_in_datetime_expression10231);
                            sql_expression1010=sql_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_expression1010.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 180, datetime_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "datetime_expression"

    public static class function_expression_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "function_expression"
    // RPIExprWalker.g:1303:1: function_expression returns [StringBuffer value] : {...}? ( keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN | ^( TO_CHAR n2= nested_expression ( quoted_string )? ) | ^( SUBSTR n3= nested_expression int1= integer_expr (int2= integer_expr )? ) | ^( TRIM n4= nested_expression ) | function_call ( DOT n5= nested_expression )? | 'DISTINCT' ( LPAREN n6= nested_expression RPAREN | n7= nested_expression ) ) ;
    public final RPIExprWalker.function_expression_return function_expression() throws RecognitionException {
        RPIExprWalker.function_expression_return retval = new RPIExprWalker.function_expression_return();
        retval.start = input.LT(1);
        int function_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1012=null;
        CommonTree ASTERISK1013=null;
        CommonTree RPAREN1014=null;
        CommonTree TO_CHAR1015=null;
        CommonTree SUBSTR1017=null;
        CommonTree TRIM1018=null;
        CommonTree DOT1020=null;
        CommonTree string_literal1021=null;
        CommonTree LPAREN1022=null;
        CommonTree RPAREN1023=null;
        RPIExprWalker.nested_expression_return n1 = null;

        RPIExprWalker.nested_expression_return n2 = null;

        RPIExprWalker.nested_expression_return n3 = null;

        RPIExprWalker.integer_expr_return int1 = null;

        RPIExprWalker.integer_expr_return int2 = null;

        RPIExprWalker.nested_expression_return n4 = null;

        RPIExprWalker.nested_expression_return n5 = null;

        RPIExprWalker.nested_expression_return n6 = null;

        RPIExprWalker.nested_expression_return n7 = null;

        RPIExprWalker.keyCOUNT_return keyCOUNT1011 = null;

        RPIExprWalker.quoted_string_return quoted_string1016 = null;

        RPIExprWalker.function_call_return function_call1019 = null;


        CommonTree LPAREN1012_tree=null;
        CommonTree ASTERISK1013_tree=null;
        CommonTree RPAREN1014_tree=null;
        CommonTree TO_CHAR1015_tree=null;
        CommonTree SUBSTR1017_tree=null;
        CommonTree TRIM1018_tree=null;
        CommonTree DOT1020_tree=null;
        CommonTree string_literal1021_tree=null;
        CommonTree LPAREN1022_tree=null;
        CommonTree RPAREN1023_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 181) ) { return retval; }
            // RPIExprWalker.g:1304:5: ({...}? ( keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN | ^( TO_CHAR n2= nested_expression ( quoted_string )? ) | ^( SUBSTR n3= nested_expression int1= integer_expr (int2= integer_expr )? ) | ^( TRIM n4= nested_expression ) | function_call ( DOT n5= nested_expression )? | 'DISTINCT' ( LPAREN n6= nested_expression RPAREN | n7= nested_expression ) ) )
            // RPIExprWalker.g:1304:12: {...}? ( keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN | ^( TO_CHAR n2= nested_expression ( quoted_string )? ) | ^( SUBSTR n3= nested_expression int1= integer_expr (int2= integer_expr )? ) | ^( TRIM n4= nested_expression ) | function_call ( DOT n5= nested_expression )? | 'DISTINCT' ( LPAREN n6= nested_expression RPAREN | n7= nested_expression ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(( is_sql )) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "function_expression", " is_sql ");
            }
            // RPIExprWalker.g:1305:9: ( keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN | ^( TO_CHAR n2= nested_expression ( quoted_string )? ) | ^( SUBSTR n3= nested_expression int1= integer_expr (int2= integer_expr )? ) | ^( TRIM n4= nested_expression ) | function_call ( DOT n5= nested_expression )? | 'DISTINCT' ( LPAREN n6= nested_expression RPAREN | n7= nested_expression ) )
            int alt271=6;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA271_1 = input.LA(2);

                if ( ((synpred439_RPIExprWalker()&&(((CommonTree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "COUNT")))) ) {
                    alt271=1;
                }
                else if ( (synpred446_RPIExprWalker()) ) {
                    alt271=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 1, input);

                    throw nvae;
                }
                }
                break;
            case TO_CHAR:
                {
                alt271=2;
                }
                break;
            case SUBSTR:
                {
                alt271=3;
                }
                break;
            case TRIM:
                {
                alt271=4;
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 158:
                {
                alt271=5;
                }
                break;
            case 175:
                {
                alt271=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }

            switch (alt271) {
                case 1 :
                    // RPIExprWalker.g:1305:13: keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyCOUNT_in_function_expression10282);
                    keyCOUNT1011=keyCOUNT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyCOUNT1011.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN1012=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10284); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1012_tree = (CommonTree)adaptor.dupNode(LPAREN1012);

                    adaptor.addChild(root_0, LPAREN1012_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" COUNT (");
                    }
                    // RPIExprWalker.g:1306:9: ( ASTERISK | n1= nested_expression )
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==ASTERISK) ) {
                        alt266=1;
                    }
                    else if ( ((LA266_0>=SUBSTR && LA266_0<=TO_CHAR)||LA266_0==TRIM||(LA266_0>=ID && LA266_0<=LPAREN)||(LA266_0>=SQL && LA266_0<=MINUS)||LA266_0==NUMBER||LA266_0==NOT||LA266_0==QUOTED_STRING||LA266_0==DOUBLEQUOTED_STRING||LA266_0==116||LA266_0==158||(LA266_0>=168 && LA266_0<=169)||(LA266_0>=174 && LA266_0<=175)||LA266_0==198) ) {
                        alt266=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 266, 0, input);

                        throw nvae;
                    }
                    switch (alt266) {
                        case 1 :
                            // RPIExprWalker.g:1306:11: ASTERISK
                            {
                            _last = (CommonTree)input.LT(1);
                            ASTERISK1013=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_function_expression10299); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASTERISK1013_tree = (CommonTree)adaptor.dupNode(ASTERISK1013);

                            adaptor.addChild(root_0, ASTERISK1013_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" *");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1307:9: n1= nested_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_nested_expression_in_function_expression10315);
                            n1=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, n1.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + n1.value.toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN1014=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1014_tree = (CommonTree)adaptor.dupNode(RPAREN1014);

                    adaptor.addChild(root_0, RPAREN1014_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1309:13: ^( TO_CHAR n2= nested_expression ( quoted_string )? )
                    {
                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    TO_CHAR1015=(CommonTree)match(input,TO_CHAR,FOLLOW_TO_CHAR_in_function_expression10347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TO_CHAR1015_tree = (CommonTree)adaptor.dupNode(TO_CHAR1015);

                    root_1 = (CommonTree)adaptor.becomeRoot(TO_CHAR1015_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" TO_CHAR (");
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_expression_in_function_expression10370);
                    n2=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, n2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + n2.value.toString().trim());
                    }
                    // RPIExprWalker.g:1311:9: ( quoted_string )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==QUOTED_STRING) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // RPIExprWalker.g:1311:10: quoted_string
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_quoted_string_in_function_expression10383);
                            quoted_string1016=quoted_string();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, quoted_string1016.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" ," + (quoted_string1016!=null?quoted_string1016.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1313:13: ^( SUBSTR n3= nested_expression int1= integer_expr (int2= integer_expr )? )
                    {
                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    SUBSTR1017=(CommonTree)match(input,SUBSTR,FOLLOW_SUBSTR_in_function_expression10417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUBSTR1017_tree = (CommonTree)adaptor.dupNode(SUBSTR1017);

                    root_1 = (CommonTree)adaptor.becomeRoot(SUBSTR1017_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" SUBSTR (");
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_expression_in_function_expression10435);
                    n3=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, n3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + n3.value.toString().trim());
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_integer_expr_in_function_expression10453);
                    int1=integer_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, int1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append("," + int1.value.toString().trim());
                    }
                    // RPIExprWalker.g:1315:84: (int2= integer_expr )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( ((LA268_0>=SUBSTR && LA268_0<=TO_CHAR)||LA268_0==TRIM||(LA268_0>=ID && LA268_0<=LPAREN)||(LA268_0>=SQL && LA268_0<=MINUS)||LA268_0==NUMBER||LA268_0==QUOTED_STRING||LA268_0==DOUBLEQUOTED_STRING||LA268_0==116||LA268_0==158||(LA268_0>=168 && LA268_0<=169)||(LA268_0>=174 && LA268_0<=175)||LA268_0==198) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // RPIExprWalker.g:1315:85: int2= integer_expr
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_integer_expr_in_function_expression10460);
                            int2=integer_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_1, int2.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append("," + int2.value.toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:1318:13: ^( TRIM n4= nested_expression )
                    {
                    _last = (CommonTree)input.LT(1);
                    {
                    CommonTree _save_last_1 = _last;
                    CommonTree _first_1 = null;
                    CommonTree root_1 = (CommonTree)adaptor.nil();_last = (CommonTree)input.LT(1);
                    TRIM1018=(CommonTree)match(input,TRIM,FOLLOW_TRIM_in_function_expression10504); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRIM1018_tree = (CommonTree)adaptor.dupNode(TRIM1018);

                    root_1 = (CommonTree)adaptor.becomeRoot(TRIM1018_tree, root_1);
                    }

                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" TRIM (");
                    }

                    match(input, Token.DOWN, null); if (state.failed) return retval;
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_expression_in_function_expression10520);
                    n4=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_1, n4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + n4.value.toString().trim());
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    match(input, Token.UP, null); if (state.failed) return retval;adaptor.addChild(root_0, root_1);_last = _save_last_1;
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:1321:9: function_call ( DOT n5= nested_expression )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_function_call_in_function_expression10546);
                    function_call1019=function_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, function_call1019.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (function_call1019!=null?function_call1019.value:null).toString().trim());
                    }
                    // RPIExprWalker.g:1322:9: ( DOT n5= nested_expression )?
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==DOT) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            // RPIExprWalker.g:1322:11: DOT n5= nested_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            DOT1020=(CommonTree)match(input,DOT,FOLLOW_DOT_in_function_expression10561); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT1020_tree = (CommonTree)adaptor.dupNode(DOT1020);

                            adaptor.addChild(root_0, DOT1020_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" .");
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_nested_expression_in_function_expression10567);
                            n5=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, n5.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (n5!=null?n5.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:1323:13: 'DISTINCT' ( LPAREN n6= nested_expression RPAREN | n7= nested_expression )
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1021=(CommonTree)match(input,175,FOLLOW_175_in_function_expression10585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1021_tree = (CommonTree)adaptor.dupNode(string_literal1021);

                    adaptor.addChild(root_0, string_literal1021_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" DISTINCT");
                    }
                    // RPIExprWalker.g:1324:9: ( LPAREN n6= nested_expression RPAREN | n7= nested_expression )
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==LPAREN) ) {
                        int LA270_1 = input.LA(2);

                        if ( (synpred447_RPIExprWalker()) ) {
                            alt270=1;
                        }
                        else if ( ((( !is_sql )||(  is_sql ))) ) {
                            alt270=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 270, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA270_0>=SUBSTR && LA270_0<=TO_CHAR)||LA270_0==TRIM||LA270_0==ID||(LA270_0>=SQL && LA270_0<=MINUS)||LA270_0==NUMBER||LA270_0==NOT||LA270_0==QUOTED_STRING||LA270_0==DOUBLEQUOTED_STRING||LA270_0==116||LA270_0==158||(LA270_0>=168 && LA270_0<=169)||(LA270_0>=174 && LA270_0<=175)||LA270_0==198) ) {
                        alt270=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 270, 0, input);

                        throw nvae;
                    }
                    switch (alt270) {
                        case 1 :
                            // RPIExprWalker.g:1324:11: LPAREN n6= nested_expression RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN1022=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_function_expression10600); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1022_tree = (CommonTree)adaptor.dupNode(LPAREN1022);

                            adaptor.addChild(root_0, LPAREN1022_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_nested_expression_in_function_expression10604);
                            n6=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, n6.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN1023=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_function_expression10606); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1023_tree = (CommonTree)adaptor.dupNode(RPAREN1023);

                            adaptor.addChild(root_0, RPAREN1023_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" (" + (n6!=null?n6.value:null).toString().trim() + " )");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1326:9: n7= nested_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_nested_expression_in_function_expression10631);
                            n7=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, n7.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (n7!=null?n7.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 181, function_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "function_expression"

    public static class special_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "special_expression"
    // RPIExprWalker.g:1329:1: special_expression : {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) ;
    public final RPIExprWalker.special_expression_return special_expression() throws RecognitionException {
        RPIExprWalker.special_expression_return retval = new RPIExprWalker.special_expression_return();
        retval.start = input.LT(1);
        int special_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1025=null;
        CommonTree ASTERISK1026=null;
        CommonTree RPAREN1028=null;
        CommonTree string_literal1029=null;
        CommonTree LPAREN1030=null;
        CommonTree RPAREN1032=null;
        RPIExprWalker.keyCOUNT_return keyCOUNT1024 = null;

        RPIExprWalker.nested_expression_return nested_expression1027 = null;

        RPIExprWalker.nested_expression_return nested_expression1031 = null;


        CommonTree LPAREN1025_tree=null;
        CommonTree ASTERISK1026_tree=null;
        CommonTree RPAREN1028_tree=null;
        CommonTree string_literal1029_tree=null;
        CommonTree LPAREN1030_tree=null;
        CommonTree RPAREN1032_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 182) ) { return retval; }
            // RPIExprWalker.g:1330:5: ({...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN ) )
            // RPIExprWalker.g:1330:9: {...}? ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(( is_sql )) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "special_expression", " is_sql ");
            }
            // RPIExprWalker.g:1331:9: ( keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN | 'DISTINCT' LPAREN nested_expression RPAREN )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==ID) ) {
                alt273=1;
            }
            else if ( (LA273_0==175) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    // RPIExprWalker.g:1331:13: keyCOUNT LPAREN ( ASTERISK | nested_expression ) RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyCOUNT_in_special_expression10677);
                    keyCOUNT1024=keyCOUNT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyCOUNT1024.getTree());
                    _last = (CommonTree)input.LT(1);
                    LPAREN1025=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression10679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1025_tree = (CommonTree)adaptor.dupNode(LPAREN1025);

                    adaptor.addChild(root_0, LPAREN1025_tree);
                    }
                    // RPIExprWalker.g:1331:29: ( ASTERISK | nested_expression )
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==ASTERISK) ) {
                        alt272=1;
                    }
                    else if ( ((LA272_0>=SUBSTR && LA272_0<=TO_CHAR)||LA272_0==TRIM||(LA272_0>=ID && LA272_0<=LPAREN)||(LA272_0>=SQL && LA272_0<=MINUS)||LA272_0==NUMBER||LA272_0==NOT||LA272_0==QUOTED_STRING||LA272_0==DOUBLEQUOTED_STRING||LA272_0==116||LA272_0==158||(LA272_0>=168 && LA272_0<=169)||(LA272_0>=174 && LA272_0<=175)||LA272_0==198) ) {
                        alt272=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 272, 0, input);

                        throw nvae;
                    }
                    switch (alt272) {
                        case 1 :
                            // RPIExprWalker.g:1331:31: ASTERISK
                            {
                            _last = (CommonTree)input.LT(1);
                            ASTERISK1026=(CommonTree)match(input,ASTERISK,FOLLOW_ASTERISK_in_special_expression10683); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ASTERISK1026_tree = (CommonTree)adaptor.dupNode(ASTERISK1026);

                            adaptor.addChild(root_0, ASTERISK1026_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1331:42: nested_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_nested_expression_in_special_expression10687);
                            nested_expression1027=nested_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, nested_expression1027.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN1028=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression10691); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1028_tree = (CommonTree)adaptor.dupNode(RPAREN1028);

                    adaptor.addChild(root_0, RPAREN1028_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1332:13: 'DISTINCT' LPAREN nested_expression RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1029=(CommonTree)match(input,175,FOLLOW_175_in_special_expression10705); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1029_tree = (CommonTree)adaptor.dupNode(string_literal1029);

                    adaptor.addChild(root_0, string_literal1029_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    LPAREN1030=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_special_expression10707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1030_tree = (CommonTree)adaptor.dupNode(LPAREN1030);

                    adaptor.addChild(root_0, LPAREN1030_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_nested_expression_in_special_expression10709);
                    nested_expression1031=nested_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, nested_expression1031.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1032=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_special_expression10711); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1032_tree = (CommonTree)adaptor.dupNode(RPAREN1032);

                    adaptor.addChild(root_0, RPAREN1032_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 182, special_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "special_expression"

    public static class interval_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interval_expression"
    // RPIExprWalker.g:1335:1: interval_expression : sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) ;
    public final RPIExprWalker.interval_expression_return interval_expression() throws RecognitionException {
        RPIExprWalker.interval_expression_return retval = new RPIExprWalker.interval_expression_return();
        retval.start = input.LT(1);
        int interval_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1035=null;
        CommonTree RPAREN1037=null;
        CommonTree string_literal1038=null;
        CommonTree LPAREN1040=null;
        CommonTree RPAREN1042=null;
        CommonTree LPAREN1044=null;
        CommonTree RPAREN1046=null;
        CommonTree string_literal1047=null;
        RPIExprWalker.sql_expression_return sql_expression1033 = null;

        RPIExprWalker.keyDAY_return keyDAY1034 = null;

        RPIExprWalker.leading_field_precision_return leading_field_precision1036 = null;

        RPIExprWalker.keySECOND_return keySECOND1039 = null;

        RPIExprWalker.fractional_second_precision_return fractional_second_precision1041 = null;

        RPIExprWalker.keyYEAR_return keyYEAR1043 = null;

        RPIExprWalker.leading_field_precision_return leading_field_precision1045 = null;

        RPIExprWalker.keyMONTH_return keyMONTH1048 = null;


        CommonTree LPAREN1035_tree=null;
        CommonTree RPAREN1037_tree=null;
        CommonTree string_literal1038_tree=null;
        CommonTree LPAREN1040_tree=null;
        CommonTree RPAREN1042_tree=null;
        CommonTree LPAREN1044_tree=null;
        CommonTree RPAREN1046_tree=null;
        CommonTree string_literal1047_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 183) ) { return retval; }
            // RPIExprWalker.g:1336:5: ( sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH ) )
            // RPIExprWalker.g:1336:9: sql_expression ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_interval_expression10739);
            sql_expression1033=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1033.getTree());
            // RPIExprWalker.g:1337:9: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? | keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH )
            int alt277=2;
            int LA277_0 = input.LA(1);

            if ( (LA277_0==ID) ) {
                int LA277_1 = input.LA(2);

                if ( (LA277_1==LPAREN) ) {
                    int LA277_2 = input.LA(3);

                    if ( (LA277_2==NUMBER) ) {
                        int LA277_4 = input.LA(4);

                        if ( (LA277_4==RPAREN) ) {
                            int LA277_6 = input.LA(5);

                            if ( (LA277_6==135) ) {
                                int LA277_3 = input.LA(6);

                                if ( (LA277_3==ID) ) {
                                    int LA277_5 = input.LA(7);

                                    if ( ((synpred452_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DAY")))) ) {
                                        alt277=1;
                                    }
                                    else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "YEAR"))) ) {
                                        alt277=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 277, 5, input);

                                        throw nvae;
                                    }
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 277, 3, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 277, 6, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 277, 4, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA277_1==135) ) {
                    int LA277_3 = input.LA(3);

                    if ( (LA277_3==ID) ) {
                        int LA277_5 = input.LA(4);

                        if ( ((synpred452_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DAY")))) ) {
                            alt277=1;
                        }
                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "YEAR"))) ) {
                            alt277=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 277, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 277, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }
            switch (alt277) {
                case 1 :
                    // RPIExprWalker.g:1337:13: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyDAY_in_interval_expression10753);
                    keyDAY1034=keyDAY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyDAY1034.getTree());
                    // RPIExprWalker.g:1337:20: ( LPAREN leading_field_precision RPAREN )?
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==LPAREN) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            // RPIExprWalker.g:1337:22: LPAREN leading_field_precision RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN1035=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression10757); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1035_tree = (CommonTree)adaptor.dupNode(LPAREN1035);

                            adaptor.addChild(root_0, LPAREN1035_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_leading_field_precision_in_interval_expression10759);
                            leading_field_precision1036=leading_field_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, leading_field_precision1036.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN1037=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression10761); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1037_tree = (CommonTree)adaptor.dupNode(RPAREN1037);

                            adaptor.addChild(root_0, RPAREN1037_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal1038=(CommonTree)match(input,135,FOLLOW_135_in_interval_expression10766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1038_tree = (CommonTree)adaptor.dupNode(string_literal1038);

                    adaptor.addChild(root_0, string_literal1038_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keySECOND_in_interval_expression10768);
                    keySECOND1039=keySECOND();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keySECOND1039.getTree());
                    // RPIExprWalker.g:1337:78: ( LPAREN fractional_second_precision RPAREN )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==LPAREN) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // RPIExprWalker.g:1337:80: LPAREN fractional_second_precision RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN1040=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression10772); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1040_tree = (CommonTree)adaptor.dupNode(LPAREN1040);

                            adaptor.addChild(root_0, LPAREN1040_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_fractional_second_precision_in_interval_expression10774);
                            fractional_second_precision1041=fractional_second_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, fractional_second_precision1041.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN1042=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression10776); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1042_tree = (CommonTree)adaptor.dupNode(RPAREN1042);

                            adaptor.addChild(root_0, RPAREN1042_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1338:13: keyYEAR ( LPAREN leading_field_precision RPAREN )? 'TO' keyMONTH
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyYEAR_in_interval_expression10793);
                    keyYEAR1043=keyYEAR();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyYEAR1043.getTree());
                    // RPIExprWalker.g:1338:21: ( LPAREN leading_field_precision RPAREN )?
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==LPAREN) ) {
                        alt276=1;
                    }
                    switch (alt276) {
                        case 1 :
                            // RPIExprWalker.g:1338:23: LPAREN leading_field_precision RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN1044=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_interval_expression10797); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1044_tree = (CommonTree)adaptor.dupNode(LPAREN1044);

                            adaptor.addChild(root_0, LPAREN1044_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_leading_field_precision_in_interval_expression10799);
                            leading_field_precision1045=leading_field_precision();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, leading_field_precision1045.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN1046=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_interval_expression10801); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1046_tree = (CommonTree)adaptor.dupNode(RPAREN1046);

                            adaptor.addChild(root_0, RPAREN1046_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal1047=(CommonTree)match(input,135,FOLLOW_135_in_interval_expression10806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1047_tree = (CommonTree)adaptor.dupNode(string_literal1047);

                    adaptor.addChild(root_0, string_literal1047_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyMONTH_in_interval_expression10808);
                    keyMONTH1048=keyMONTH();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyMONTH1048.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 183, interval_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interval_expression"

    public static class leading_field_precision_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "leading_field_precision"
    // RPIExprWalker.g:1341:1: leading_field_precision : integer ;
    public final RPIExprWalker.leading_field_precision_return leading_field_precision() throws RecognitionException {
        RPIExprWalker.leading_field_precision_return retval = new RPIExprWalker.leading_field_precision_return();
        retval.start = input.LT(1);
        int leading_field_precision_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.integer_return integer1049 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 184) ) { return retval; }
            // RPIExprWalker.g:1342:5: ( integer )
            // RPIExprWalker.g:1342:9: integer
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_in_leading_field_precision10836);
            integer1049=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer1049.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 184, leading_field_precision_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "leading_field_precision"

    public static class fractional_second_precision_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fractional_second_precision"
    // RPIExprWalker.g:1344:1: fractional_second_precision : integer ;
    public final RPIExprWalker.fractional_second_precision_return fractional_second_precision() throws RecognitionException {
        RPIExprWalker.fractional_second_precision_return retval = new RPIExprWalker.fractional_second_precision_return();
        retval.start = input.LT(1);
        int fractional_second_precision_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.integer_return integer1050 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 185) ) { return retval; }
            // RPIExprWalker.g:1345:5: ( integer )
            // RPIExprWalker.g:1345:9: integer
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_in_fractional_second_precision10855);
            integer1050=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer1050.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 185, fractional_second_precision_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fractional_second_precision"

    public static class object_access_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "object_access_expression"
    // RPIExprWalker.g:1347:1: object_access_expression : ;
    public final RPIExprWalker.object_access_expression_return object_access_expression() throws RecognitionException {
        RPIExprWalker.object_access_expression_return retval = new RPIExprWalker.object_access_expression_return();
        retval.start = input.LT(1);
        int object_access_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 186) ) { return retval; }
            // RPIExprWalker.g:1348:5: ()
            // RPIExprWalker.g:1349:5: 
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 186, object_access_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "object_access_expression"

    public static class scalar_subquery_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "scalar_subquery_expression"
    // RPIExprWalker.g:1350:1: scalar_subquery_expression : ;
    public final RPIExprWalker.scalar_subquery_expression_return scalar_subquery_expression() throws RecognitionException {
        RPIExprWalker.scalar_subquery_expression_return retval = new RPIExprWalker.scalar_subquery_expression_return();
        retval.start = input.LT(1);
        int scalar_subquery_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 187) ) { return retval; }
            // RPIExprWalker.g:1351:5: ()
            // RPIExprWalker.g:1352:5: 
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 187, scalar_subquery_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "scalar_subquery_expression"

    public static class model_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "model_expression"
    // RPIExprWalker.g:1353:1: model_expression : ;
    public final RPIExprWalker.model_expression_return model_expression() throws RecognitionException {
        RPIExprWalker.model_expression_return retval = new RPIExprWalker.model_expression_return();
        retval.start = input.LT(1);
        int model_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 188) ) { return retval; }
            // RPIExprWalker.g:1354:5: ()
            // RPIExprWalker.g:1355:5: 
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 188, model_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "model_expression"

    public static class type_constructor_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type_constructor_expression"
    // RPIExprWalker.g:1356:1: type_constructor_expression : ;
    public final RPIExprWalker.type_constructor_expression_return type_constructor_expression() throws RecognitionException {
        RPIExprWalker.type_constructor_expression_return retval = new RPIExprWalker.type_constructor_expression_return();
        retval.start = input.LT(1);
        int type_constructor_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 189) ) { return retval; }
            // RPIExprWalker.g:1357:5: ()
            // RPIExprWalker.g:1358:5: 
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 189, type_constructor_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type_constructor_expression"

    public static class variable_expression_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variable_expression"
    // RPIExprWalker.g:1359:1: variable_expression : ;
    public final RPIExprWalker.variable_expression_return variable_expression() throws RecognitionException {
        RPIExprWalker.variable_expression_return retval = new RPIExprWalker.variable_expression_return();
        retval.start = input.LT(1);
        int variable_expression_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 190) ) { return retval; }
            // RPIExprWalker.g:1360:5: ()
            // RPIExprWalker.g:1361:5: 
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 190, variable_expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variable_expression"

    public static class sequence_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sequence_name"
    // RPIExprWalker.g:1362:1: sequence_name : identifier ;
    public final RPIExprWalker.sequence_name_return sequence_name() throws RecognitionException {
        RPIExprWalker.sequence_name_return retval = new RPIExprWalker.sequence_name_return();
        retval.start = input.LT(1);
        int sequence_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier1051 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 191) ) { return retval; }
            // RPIExprWalker.g:1363:5: ( identifier )
            // RPIExprWalker.g:1363:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_sequence_name10944);
            identifier1051=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier1051.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 191, sequence_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sequence_name"

    public static class integer_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integer"
    // RPIExprWalker.g:1365:1: integer : NUMBER ;
    public final RPIExprWalker.integer_return integer() throws RecognitionException {
        RPIExprWalker.integer_return retval = new RPIExprWalker.integer_return();
        retval.start = input.LT(1);
        int integer_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NUMBER1052=null;

        CommonTree NUMBER1052_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 192) ) { return retval; }
            // RPIExprWalker.g:1366:5: ( NUMBER )
            // RPIExprWalker.g:1366:9: NUMBER
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            NUMBER1052=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_integer10962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER1052_tree = (CommonTree)adaptor.dupNode(NUMBER1052);

            adaptor.addChild(root_0, NUMBER1052_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 192, integer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integer"

    public static class alias_return extends TreeRuleReturnScope {
        public StringBuffer value;
        public String dimension;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "alias"
    // RPIExprWalker.g:1369:1: alias returns [StringBuffer value, String dimension] : ( 'AS' )? sql_identifier ;
    public final RPIExprWalker.alias_return alias() throws RecognitionException {
        RPIExprWalker.alias_return retval = new RPIExprWalker.alias_return();
        retval.start = input.LT(1);
        int alias_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1053=null;
        RPIExprWalker.sql_identifier_return sql_identifier1054 = null;


        CommonTree string_literal1053_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 193) ) { return retval; }
            // RPIExprWalker.g:1370:5: ( ( 'AS' )? sql_identifier )
            // RPIExprWalker.g:1370:9: ( 'AS' )? sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer();
            }
            // RPIExprWalker.g:1370:40: ( 'AS' )?
            int alt278=2;
            int LA278_0 = input.LA(1);

            if ( (LA278_0==112) ) {
                alt278=1;
            }
            switch (alt278) {
                case 1 :
                    // RPIExprWalker.g:1370:42: 'AS'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1053=(CommonTree)match(input,112,FOLLOW_112_in_alias10989); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1053_tree = (CommonTree)adaptor.dupNode(string_literal1053);

                    adaptor.addChild(root_0, string_literal1053_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" AS");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_alias11004);
            sql_identifier1054=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier1054.getTree());
            if ( state.backtracking==0 ) {

                         retval.value.append(" " + (sql_identifier1054!=null?sql_identifier1054.value:null).toString().trim());
                         retval.dimension = (sql_identifier1054!=null?sql_identifier1054.value:null).toString().trim().toString().replaceAll("\"", "");
                      
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 193, alias_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "alias"

    public static class column_specs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_specs"
    // RPIExprWalker.g:1378:1: column_specs : column_spec ( COMMA column_spec )* ;
    public final RPIExprWalker.column_specs_return column_specs() throws RecognitionException {
        RPIExprWalker.column_specs_return retval = new RPIExprWalker.column_specs_return();
        retval.start = input.LT(1);
        int column_specs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA1056=null;
        RPIExprWalker.column_spec_return column_spec1055 = null;

        RPIExprWalker.column_spec_return column_spec1057 = null;


        CommonTree COMMA1056_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 194) ) { return retval; }
            // RPIExprWalker.g:1379:5: ( column_spec ( COMMA column_spec )* )
            // RPIExprWalker.g:1379:9: column_spec ( COMMA column_spec )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_spec_in_column_specs11034);
            column_spec1055=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_spec1055.getTree());
            // RPIExprWalker.g:1379:21: ( COMMA column_spec )*
            loop279:
            do {
                int alt279=2;
                int LA279_0 = input.LA(1);

                if ( (LA279_0==COMMA) ) {
                    alt279=1;
                }


                switch (alt279) {
            	case 1 :
            	    // RPIExprWalker.g:1379:23: COMMA column_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1056=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_column_specs11038); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1056_tree = (CommonTree)adaptor.dupNode(COMMA1056);

            	    adaptor.addChild(root_0, COMMA1056_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_column_spec_in_column_specs11040);
            	    column_spec1057=column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, column_spec1057.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop279;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 194, column_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_specs"

    public static class column_spec_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_spec"
    // RPIExprWalker.g:1382:1: column_spec returns [StringBuffer value] : s1= sql_identifier ( DOT s2= sql_identifier ( DOT s3= sql_identifier )? )? ;
    public final RPIExprWalker.column_spec_return column_spec() throws RecognitionException {
        RPIExprWalker.column_spec_return retval = new RPIExprWalker.column_spec_return();
        retval.start = input.LT(1);
        int column_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT1058=null;
        CommonTree DOT1059=null;
        RPIExprWalker.sql_identifier_return s1 = null;

        RPIExprWalker.sql_identifier_return s2 = null;

        RPIExprWalker.sql_identifier_return s3 = null;


        CommonTree DOT1058_tree=null;
        CommonTree DOT1059_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 195) ) { return retval; }
            // RPIExprWalker.g:1383:5: (s1= sql_identifier ( DOT s2= sql_identifier ( DOT s3= sql_identifier )? )? )
            // RPIExprWalker.g:1383:9: s1= sql_identifier ( DOT s2= sql_identifier ( DOT s3= sql_identifier )? )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_column_spec11068);
            s1=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer((s1!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(s1.start),
                input.getTreeAdaptor().getTokenStopIndex(s1.start))):null));
            }
            // RPIExprWalker.g:1384:9: ( DOT s2= sql_identifier ( DOT s3= sql_identifier )? )?
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==DOT) ) {
                int LA281_1 = input.LA(2);

                if ( (LA281_1==ID||LA281_1==DOUBLEQUOTED_STRING||LA281_1==158) ) {
                    alt281=1;
                }
            }
            switch (alt281) {
                case 1 :
                    // RPIExprWalker.g:1384:10: DOT s2= sql_identifier ( DOT s3= sql_identifier )?
                    {
                    _last = (CommonTree)input.LT(1);
                    DOT1058=(CommonTree)match(input,DOT,FOLLOW_DOT_in_column_spec11082); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1058_tree = (CommonTree)adaptor.dupNode(DOT1058);

                    adaptor.addChild(root_0, DOT1058_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_identifier_in_column_spec11086);
                    s2=sql_identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, s2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append("." + (s2!=null?(input.getTokenStream().toString(
                        input.getTreeAdaptor().getTokenStartIndex(s2.start),
                        input.getTreeAdaptor().getTokenStopIndex(s2.start))):null));
                    }
                    // RPIExprWalker.g:1385:9: ( DOT s3= sql_identifier )?
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==DOT) ) {
                        int LA280_1 = input.LA(2);

                        if ( (LA280_1==ID||LA280_1==DOUBLEQUOTED_STRING||LA280_1==158) ) {
                            alt280=1;
                        }
                    }
                    switch (alt280) {
                        case 1 :
                            // RPIExprWalker.g:1385:10: DOT s3= sql_identifier
                            {
                            _last = (CommonTree)input.LT(1);
                            DOT1059=(CommonTree)match(input,DOT,FOLLOW_DOT_in_column_spec11100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT1059_tree = (CommonTree)adaptor.dupNode(DOT1059);

                            adaptor.addChild(root_0, DOT1059_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_identifier_in_column_spec11104);
                            s3=sql_identifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, s3.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append("." + (s3!=null?(input.getTokenStream().toString(
                                input.getTreeAdaptor().getTokenStartIndex(s3.start),
                                input.getTreeAdaptor().getTokenStopIndex(s3.start))):null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 195, column_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_spec"

    public static class column_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "column_name"
    // RPIExprWalker.g:1393:1: column_name : sql_identifier ;
    public final RPIExprWalker.column_name_return column_name() throws RecognitionException {
        RPIExprWalker.column_name_return retval = new RPIExprWalker.column_name_return();
        retval.start = input.LT(1);
        int column_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_identifier_return sql_identifier1060 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 196) ) { return retval; }
            // RPIExprWalker.g:1394:5: ( sql_identifier )
            // RPIExprWalker.g:1394:9: sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_column_name11136);
            sql_identifier1060=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier1060.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 196, column_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "column_name"

    public static class nested_table_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table"
    // RPIExprWalker.g:1396:1: nested_table : sql_identifier ;
    public final RPIExprWalker.nested_table_return nested_table() throws RecognitionException {
        RPIExprWalker.nested_table_return retval = new RPIExprWalker.nested_table_return();
        retval.start = input.LT(1);
        int nested_table_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_identifier_return sql_identifier1061 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 197) ) { return retval; }
            // RPIExprWalker.g:1397:5: ( sql_identifier )
            // RPIExprWalker.g:1397:9: sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_nested_table11154);
            sql_identifier1061=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier1061.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 197, nested_table_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table"

    public static class nested_table_column_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_table_column_name"
    // RPIExprWalker.g:1399:1: nested_table_column_name : ( schema_name DOT )? table_name DOT nested_table DOT column_name ;
    public final RPIExprWalker.nested_table_column_name_return nested_table_column_name() throws RecognitionException {
        RPIExprWalker.nested_table_column_name_return retval = new RPIExprWalker.nested_table_column_name_return();
        retval.start = input.LT(1);
        int nested_table_column_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT1063=null;
        CommonTree DOT1065=null;
        CommonTree DOT1067=null;
        RPIExprWalker.schema_name_return schema_name1062 = null;

        RPIExprWalker.table_name_return table_name1064 = null;

        RPIExprWalker.nested_table_return nested_table1066 = null;

        RPIExprWalker.column_name_return column_name1068 = null;


        CommonTree DOT1063_tree=null;
        CommonTree DOT1065_tree=null;
        CommonTree DOT1067_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 198) ) { return retval; }
            // RPIExprWalker.g:1400:5: ( ( schema_name DOT )? table_name DOT nested_table DOT column_name )
            // RPIExprWalker.g:1400:9: ( schema_name DOT )? table_name DOT nested_table DOT column_name
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1400:9: ( schema_name DOT )?
            int alt282=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA282_1 = input.LA(2);

                    if ( (LA282_1==DOT) ) {
                        switch ( input.LA(3) ) {
                            case ID:
                                {
                                int LA282_5 = input.LA(4);

                                if ( (LA282_5==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA282_6 = input.LA(4);

                                if ( (LA282_6==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case 158:
                                {
                                int LA282_7 = input.LA(4);

                                if ( (LA282_7==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                        }

                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA282_2 = input.LA(2);

                    if ( (LA282_2==DOT) ) {
                        switch ( input.LA(3) ) {
                            case ID:
                                {
                                int LA282_5 = input.LA(4);

                                if ( (LA282_5==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA282_6 = input.LA(4);

                                if ( (LA282_6==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case 158:
                                {
                                int LA282_7 = input.LA(4);

                                if ( (LA282_7==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                        }

                    }
                    }
                    break;
                case 158:
                    {
                    int LA282_3 = input.LA(2);

                    if ( (LA282_3==DOT) ) {
                        switch ( input.LA(3) ) {
                            case ID:
                                {
                                int LA282_5 = input.LA(4);

                                if ( (LA282_5==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case DOUBLEQUOTED_STRING:
                                {
                                int LA282_6 = input.LA(4);

                                if ( (LA282_6==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                            case 158:
                                {
                                int LA282_7 = input.LA(4);

                                if ( (LA282_7==DOT) ) {
                                    switch ( input.LA(5) ) {
                                        case ID:
                                            {
                                            int LA282_9 = input.LA(6);

                                            if ( (LA282_9==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case DOUBLEQUOTED_STRING:
                                            {
                                            int LA282_10 = input.LA(6);

                                            if ( (LA282_10==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                        case 158:
                                            {
                                            int LA282_11 = input.LA(6);

                                            if ( (LA282_11==DOT) ) {
                                                alt282=1;
                                            }
                                            }
                                            break;
                                    }

                                }
                                }
                                break;
                        }

                    }
                    }
                    break;
            }

            switch (alt282) {
                case 1 :
                    // RPIExprWalker.g:1400:11: schema_name DOT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_schema_name_in_nested_table_column_name11174);
                    schema_name1062=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, schema_name1062.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT1063=(CommonTree)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name11176); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1063_tree = (CommonTree)adaptor.dupNode(DOT1063);

                    adaptor.addChild(root_0, DOT1063_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_name_in_nested_table_column_name11181);
            table_name1064=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_name1064.getTree());
            _last = (CommonTree)input.LT(1);
            DOT1065=(CommonTree)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name11183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1065_tree = (CommonTree)adaptor.dupNode(DOT1065);

            adaptor.addChild(root_0, DOT1065_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_table_in_nested_table_column_name11185);
            nested_table1066=nested_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_table1066.getTree());
            _last = (CommonTree)input.LT(1);
            DOT1067=(CommonTree)match(input,DOT,FOLLOW_DOT_in_nested_table_column_name11187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT1067_tree = (CommonTree)adaptor.dupNode(DOT1067);

            adaptor.addChild(root_0, DOT1067_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_name_in_nested_table_column_name11189);
            column_name1068=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_name1068.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 198, nested_table_column_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_table_column_name"

    public static class user_defined_function_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "user_defined_function"
    // RPIExprWalker.g:1403:1: user_defined_function returns [StringBuffer value] : s1= sql_identifier ( DOT s2= sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? ;
    public final RPIExprWalker.user_defined_function_return user_defined_function() throws RecognitionException {
        RPIExprWalker.user_defined_function_return retval = new RPIExprWalker.user_defined_function_return();
        retval.start = input.LT(1);
        int user_defined_function_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT1069=null;
        CommonTree DOT1070=null;
        CommonTree string_literal1071=null;
        CommonTree string_literal1072=null;
        CommonTree string_literal1073=null;
        RPIExprWalker.sql_identifier_return s1 = null;

        RPIExprWalker.sql_identifier_return s2 = null;


        CommonTree DOT1069_tree=null;
        CommonTree DOT1070_tree=null;
        CommonTree string_literal1071_tree=null;
        CommonTree string_literal1072_tree=null;
        CommonTree string_literal1073_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 199) ) { return retval; }
            // RPIExprWalker.g:1404:5: (s1= sql_identifier ( DOT s2= sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )? )
            // RPIExprWalker.g:1404:9: s1= sql_identifier ( DOT s2= sql_identifier )* ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_user_defined_function11214);
            s1=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (s1!=null?s1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1405:9: ( DOT s2= sql_identifier )*
            loop283:
            do {
                int alt283=2;
                int LA283_0 = input.LA(1);

                if ( (LA283_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case ID:
                        {
                        int LA283_3 = input.LA(3);

                        if ( (synpred459_RPIExprWalker()) ) {
                            alt283=1;
                        }


                        }
                        break;
                    case DOUBLEQUOTED_STRING:
                        {
                        int LA283_4 = input.LA(3);

                        if ( (synpred459_RPIExprWalker()) ) {
                            alt283=1;
                        }


                        }
                        break;
                    case 158:
                        {
                        int LA283_5 = input.LA(3);

                        if ( (synpred459_RPIExprWalker()) ) {
                            alt283=1;
                        }


                        }
                        break;

                    }

                }


                switch (alt283) {
            	case 1 :
            	    // RPIExprWalker.g:1405:11: DOT s2= sql_identifier
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    DOT1069=(CommonTree)match(input,DOT,FOLLOW_DOT_in_user_defined_function11229); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT1069_tree = (CommonTree)adaptor.dupNode(DOT1069);

            	    adaptor.addChild(root_0, DOT1069_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_sql_identifier_in_user_defined_function11233);
            	    s2=sql_identifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, s2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" ." + (s2!=null?s2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop283;
                }
            } while (true);

            // RPIExprWalker.g:1406:9: ( DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' ) )?
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==DOT) ) {
                int LA285_1 = input.LA(2);

                if ( (LA285_1==197||(LA285_1>=200 && LA285_1<=201)) ) {
                    alt285=1;
                }
            }
            switch (alt285) {
                case 1 :
                    // RPIExprWalker.g:1406:11: DOT ( 'EXISTS' | 'PRIOR' | 'DELETE' )
                    {
                    _last = (CommonTree)input.LT(1);
                    DOT1070=(CommonTree)match(input,DOT,FOLLOW_DOT_in_user_defined_function11251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1070_tree = (CommonTree)adaptor.dupNode(DOT1070);

                    adaptor.addChild(root_0, DOT1070_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" .");
                    }
                    // RPIExprWalker.g:1407:9: ( 'EXISTS' | 'PRIOR' | 'DELETE' )
                    int alt284=3;
                    switch ( input.LA(1) ) {
                    case 200:
                        {
                        alt284=1;
                        }
                        break;
                    case 197:
                        {
                        alt284=2;
                        }
                        break;
                    case 201:
                        {
                        alt284=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 284, 0, input);

                        throw nvae;
                    }

                    switch (alt284) {
                        case 1 :
                            // RPIExprWalker.g:1407:11: 'EXISTS'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1071=(CommonTree)match(input,200,FOLLOW_200_in_user_defined_function11266); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1071_tree = (CommonTree)adaptor.dupNode(string_literal1071);

                            adaptor.addChild(root_0, string_literal1071_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" EXISTS");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1407:49: 'PRIOR'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1072=(CommonTree)match(input,197,FOLLOW_197_in_user_defined_function11271); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1072_tree = (CommonTree)adaptor.dupNode(string_literal1072);

                            adaptor.addChild(root_0, string_literal1072_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" PRIOR");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:1407:85: 'DELETE'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1073=(CommonTree)match(input,201,FOLLOW_201_in_user_defined_function11276); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1073_tree = (CommonTree)adaptor.dupNode(string_literal1073);

                            adaptor.addChild(root_0, string_literal1073_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" DELETE");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 199, user_defined_function_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "user_defined_function"

    public static class selected_table_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selected_table"
    // RPIExprWalker.g:1419:1: selected_table returns [StringBuffer value] : ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )? ;
    public final RPIExprWalker.selected_table_return selected_table() throws RecognitionException {
        RPIExprWalker.selected_table_return retval = new RPIExprWalker.selected_table_return();
        retval.start = input.LT(1);
        int selected_table_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1075=null;
        RPIExprWalker.table_spec_return table_spec1074 = null;

        RPIExprWalker.keyTHE_return keyTHE1076 = null;

        RPIExprWalker.subquery_return subquery1077 = null;

        RPIExprWalker.alias_return alias1078 = null;


        CommonTree string_literal1075_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 200) ) { return retval; }
            // RPIExprWalker.g:1420:5: ( ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )? )
            // RPIExprWalker.g:1420:8: ( table_spec | ( 'TABLE' | keyTHE )? subquery ) ( alias )?
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer();
            }
            // RPIExprWalker.g:1421:8: ( table_spec | ( 'TABLE' | keyTHE )? subquery )
            int alt287=2;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA287_1 = input.LA(2);

                if ( (synpred463_RPIExprWalker()) ) {
                    alt287=1;
                }
                else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "THE"))) ) {
                    alt287=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 287, 1, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
            case 158:
                {
                alt287=1;
                }
                break;
            case LPAREN:
            case 163:
                {
                alt287=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                throw nvae;
            }

            switch (alt287) {
                case 1 :
                    // RPIExprWalker.g:1421:10: table_spec
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_table_spec_in_selected_table11326);
                    table_spec1074=table_spec();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, table_spec1074.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (table_spec1074!=null?table_spec1074.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1422:8: ( 'TABLE' | keyTHE )? subquery
                    {
                    // RPIExprWalker.g:1422:8: ( 'TABLE' | keyTHE )?
                    int alt286=3;
                    int LA286_0 = input.LA(1);

                    if ( (LA286_0==163) ) {
                        alt286=1;
                    }
                    else if ( (LA286_0==ID) ) {
                        alt286=2;
                    }
                    switch (alt286) {
                        case 1 :
                            // RPIExprWalker.g:1422:10: 'TABLE'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1075=(CommonTree)match(input,163,FOLLOW_163_in_selected_table11342); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1075_tree = (CommonTree)adaptor.dupNode(string_literal1075);

                            adaptor.addChild(root_0, string_literal1075_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" TABLE");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1422:46: keyTHE
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyTHE_in_selected_table11347);
                            keyTHE1076=keyTHE();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyTHE1076.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (keyTHE1076!=null?(input.getTokenStream().toString(
                                input.getTreeAdaptor().getTokenStartIndex(keyTHE1076.start),
                                input.getTreeAdaptor().getTokenStopIndex(keyTHE1076.start))):null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subquery_in_selected_table11361);
                    subquery1077=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subquery1077.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (subquery1077!=null?subquery1077.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1423:76: ( alias )?
            int alt288=2;
            switch ( input.LA(1) ) {
                case 112:
                    {
                    switch ( input.LA(2) ) {
                        case ID:
                            {
                            int LA288_6 = input.LA(3);

                            if ( (synpred466_RPIExprWalker()) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            int LA288_7 = input.LA(3);

                            if ( (synpred466_RPIExprWalker()) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case 158:
                            {
                            int LA288_8 = input.LA(3);

                            if ( (synpred466_RPIExprWalker()) ) {
                                alt288=1;
                            }
                            }
                            break;
                    }

                    }
                    break;
                case ID:
                    {
                    int LA288_2 = input.LA(2);

                    if ( (synpred466_RPIExprWalker()) ) {
                        alt288=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA288_3 = input.LA(2);

                    if ( (synpred466_RPIExprWalker()) ) {
                        alt288=1;
                    }
                    }
                    break;
                case 158:
                    {
                    int LA288_4 = input.LA(2);

                    if ( (synpred466_RPIExprWalker()) ) {
                        alt288=1;
                    }
                    }
                    break;
            }

            switch (alt288) {
                case 1 :
                    // RPIExprWalker.g:1423:78: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_selected_table11368);
                    alias1078=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias1078.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (alias1078!=null?alias1078.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 200, selected_table_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selected_table"

    public static class table_spec_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_spec"
    // RPIExprWalker.g:1426:1: table_spec returns [StringBuffer value] : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ;
    public final RPIExprWalker.table_spec_return table_spec() throws RecognitionException {
        RPIExprWalker.table_spec_return retval = new RPIExprWalker.table_spec_return();
        retval.start = input.LT(1);
        int table_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT1080=null;
        CommonTree AT_SIGN1082=null;
        RPIExprWalker.schema_name_return schema_name1079 = null;

        RPIExprWalker.table_name_return table_name1081 = null;

        RPIExprWalker.link_name_return link_name1083 = null;


        CommonTree DOT1080_tree=null;
        CommonTree AT_SIGN1082_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 201) ) { return retval; }
            // RPIExprWalker.g:1427:5: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? )
            // RPIExprWalker.g:1427:8: ( schema_name DOT )? table_name ( AT_SIGN link_name )?
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer();
            }
            // RPIExprWalker.g:1428:8: ( schema_name DOT )?
            int alt289=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA289_1 = input.LA(2);

                    if ( (LA289_1==DOT) ) {
                        alt289=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA289_2 = input.LA(2);

                    if ( (LA289_2==DOT) ) {
                        alt289=1;
                    }
                    }
                    break;
                case 158:
                    {
                    int LA289_3 = input.LA(2);

                    if ( (LA289_3==DOT) ) {
                        alt289=1;
                    }
                    }
                    break;
            }

            switch (alt289) {
                case 1 :
                    // RPIExprWalker.g:1428:10: schema_name DOT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_schema_name_in_table_spec11406);
                    schema_name1079=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, schema_name1079.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT1080=(CommonTree)match(input,DOT,FOLLOW_DOT_in_table_spec11408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1080_tree = (CommonTree)adaptor.dupNode(DOT1080);

                    adaptor.addChild(root_0, DOT1080_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (schema_name1079!=null?schema_name1079.value:null).toString().trim() + " .");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_name_in_table_spec11422);
            table_name1081=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_name1081.getTree());
            if ( state.backtracking==0 ) {
              retval.value.append(" " + (table_name1081!=null?table_name1081.value:null).toString().trim());
            }
            // RPIExprWalker.g:1430:8: ( AT_SIGN link_name )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==AT_SIGN) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // RPIExprWalker.g:1430:10: AT_SIGN link_name
                    {
                    _last = (CommonTree)input.LT(1);
                    AT_SIGN1082=(CommonTree)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_spec11436); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT_SIGN1082_tree = (CommonTree)adaptor.dupNode(AT_SIGN1082);

                    adaptor.addChild(root_0, AT_SIGN1082_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_link_name_in_table_spec11438);
                    link_name1083=link_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, link_name1083.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" @" + (link_name1083!=null?link_name1083.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 201, table_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_spec"

    public static class table_alias_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "table_alias"
    // RPIExprWalker.g:1433:1: table_alias : ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )? ;
    public final RPIExprWalker.table_alias_return table_alias() throws RecognitionException {
        RPIExprWalker.table_alias_return retval = new RPIExprWalker.table_alias_return();
        retval.start = input.LT(1);
        int table_alias_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree DOT1085=null;
        CommonTree AT_SIGN1087=null;
        RPIExprWalker.schema_name_return schema_name1084 = null;

        RPIExprWalker.table_name_return table_name1086 = null;

        RPIExprWalker.link_name_return link_name1088 = null;

        RPIExprWalker.alias_return alias1089 = null;


        CommonTree DOT1085_tree=null;
        CommonTree AT_SIGN1087_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 202) ) { return retval; }
            // RPIExprWalker.g:1434:5: ( ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )? )
            // RPIExprWalker.g:1434:9: ( schema_name DOT )? table_name ( AT_SIGN link_name )? ( alias )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1434:9: ( schema_name DOT )?
            int alt291=2;
            switch ( input.LA(1) ) {
                case ID:
                    {
                    int LA291_1 = input.LA(2);

                    if ( (LA291_1==DOT) ) {
                        alt291=1;
                    }
                    }
                    break;
                case DOUBLEQUOTED_STRING:
                    {
                    int LA291_2 = input.LA(2);

                    if ( (LA291_2==DOT) ) {
                        alt291=1;
                    }
                    }
                    break;
                case 158:
                    {
                    int LA291_3 = input.LA(2);

                    if ( (LA291_3==DOT) ) {
                        alt291=1;
                    }
                    }
                    break;
            }

            switch (alt291) {
                case 1 :
                    // RPIExprWalker.g:1434:11: schema_name DOT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_schema_name_in_table_alias11463);
                    schema_name1084=schema_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, schema_name1084.getTree());
                    _last = (CommonTree)input.LT(1);
                    DOT1085=(CommonTree)match(input,DOT,FOLLOW_DOT_in_table_alias11465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT1085_tree = (CommonTree)adaptor.dupNode(DOT1085);

                    adaptor.addChild(root_0, DOT1085_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_name_in_table_alias11470);
            table_name1086=table_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_name1086.getTree());
            // RPIExprWalker.g:1434:41: ( AT_SIGN link_name )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==AT_SIGN) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // RPIExprWalker.g:1434:43: AT_SIGN link_name
                    {
                    _last = (CommonTree)input.LT(1);
                    AT_SIGN1087=(CommonTree)match(input,AT_SIGN,FOLLOW_AT_SIGN_in_table_alias11474); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT_SIGN1087_tree = (CommonTree)adaptor.dupNode(AT_SIGN1087);

                    adaptor.addChild(root_0, AT_SIGN1087_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_link_name_in_table_alias11476);
                    link_name1088=link_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, link_name1088.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1434:64: ( alias )?
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==ID||LA293_0==DOUBLEQUOTED_STRING||LA293_0==112||LA293_0==158) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    // RPIExprWalker.g:1434:66: alias
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_alias_in_table_alias11483);
                    alias1089=alias();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, alias1089.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 202, table_alias_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "table_alias"

    public static class link_name_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "link_name"
    // RPIExprWalker.g:1437:1: link_name returns [StringBuffer value] : sql_identifier ;
    public final RPIExprWalker.link_name_return link_name() throws RecognitionException {
        RPIExprWalker.link_name_return retval = new RPIExprWalker.link_name_return();
        retval.start = input.LT(1);
        int link_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_identifier_return sql_identifier1090 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 203) ) { return retval; }
            // RPIExprWalker.g:1438:5: ( sql_identifier )
            // RPIExprWalker.g:1438:9: sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_link_name11509);
            sql_identifier1090=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier1090.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (sql_identifier1090!=null?sql_identifier1090.value:null).toString().trim());
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 203, link_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "link_name"

    public static class nested_condition_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nested_condition"
    // RPIExprWalker.g:1440:1: nested_condition : ({...}? condition_or | {...}? expr_bool );
    public final RPIExprWalker.nested_condition_return nested_condition() throws RecognitionException {
        RPIExprWalker.nested_condition_return retval = new RPIExprWalker.nested_condition_return();
        retval.start = input.LT(1);
        int nested_condition_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.condition_or_return condition_or1091 = null;

        RPIExprWalker.expr_bool_return expr_bool1092 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 204) ) { return retval; }
            // RPIExprWalker.g:1441:5: ({...}? condition_or | {...}? expr_bool )
            int alt294=2;
            switch ( input.LA(1) ) {
            case NOT:
                {
                int LA294_1 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 1, input);

                    throw nvae;
                }
                }
                break;
            case 197:
            case 200:
            case 202:
                {
                alt294=1;
                }
                break;
            case PLUS:
                {
                int LA294_3 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 3, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA294_4 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 4, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA294_5 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 5, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA294_6 = input.LA(2);

                if ( ((((synpred472_RPIExprWalker()&&(  is_sql ))&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))||((synpred472_RPIExprWalker()&&(  is_sql ))&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))||(synpred472_RPIExprWalker()&&(  is_sql ))||((synpred472_RPIExprWalker()&&(  is_sql ))&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH"))))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 6, input);

                    throw nvae;
                }
                }
                break;
            case TO_CHAR:
                {
                int LA294_7 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 7, input);

                    throw nvae;
                }
                }
                break;
            case SUBSTR:
                {
                int LA294_8 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 8, input);

                    throw nvae;
                }
                }
                break;
            case TRIM:
                {
                int LA294_9 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 9, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA294_10 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 10, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA294_11 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 11, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA294_12 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 12, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA294_13 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 13, input);

                    throw nvae;
                }
                }
                break;
            case 168:
                {
                int LA294_14 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 14, input);

                    throw nvae;
                }
                }
                break;
            case 169:
                {
                int LA294_15 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 15, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA294_16 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 16, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA294_17 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 17, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA294_18 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 18, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA294_19 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 19, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA294_20 = input.LA(2);

                if ( ((synpred472_RPIExprWalker()&&(  is_sql ))) ) {
                    alt294=1;
                }
                else if ( (( !is_sql )) ) {
                    alt294=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 294, 20, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 294, 0, input);

                throw nvae;
            }

            switch (alt294) {
                case 1 :
                    // RPIExprWalker.g:1441:9: {...}? condition_or
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !((  is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", "  is_sql ");
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_or_in_nested_condition11531);
                    condition_or1091=condition_or();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_or1091.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1442:9: {...}? expr_bool
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( !(( !is_sql )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "nested_condition", " !is_sql ");
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_expr_bool_in_nested_condition11543);
                    expr_bool1092=expr_bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, expr_bool1092.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 204, nested_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nested_condition"

    public static class sql_condition_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_condition"
    // RPIExprWalker.g:1444:1: sql_condition returns [StringBuffer value] : condition_or ;
    public final RPIExprWalker.sql_condition_return sql_condition() throws RecognitionException {
        RPIExprWalker.sql_condition_return retval = new RPIExprWalker.sql_condition_return();
        retval.start = input.LT(1);
        int sql_condition_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.condition_or_return condition_or1093 = null;



         is_sql = true; 
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 205) ) { return retval; }
            // RPIExprWalker.g:1446:5: ( condition_or )
            // RPIExprWalker.g:1446:9: condition_or
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_condition_or_in_sql_condition11578);
            condition_or1093=condition_or();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, condition_or1093.getTree());
            if ( state.backtracking==0 ) {
              retval.value = (condition_or1093!=null?condition_or1093.value:null);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 205, sql_condition_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_condition"

    public static class condition_paren_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_paren"
    // RPIExprWalker.g:1449:1: condition_paren : LPAREN sql_condition RPAREN ;
    public final RPIExprWalker.condition_paren_return condition_paren() throws RecognitionException {
        RPIExprWalker.condition_paren_return retval = new RPIExprWalker.condition_paren_return();
        retval.start = input.LT(1);
        int condition_paren_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1094=null;
        CommonTree RPAREN1096=null;
        RPIExprWalker.sql_condition_return sql_condition1095 = null;


        CommonTree LPAREN1094_tree=null;
        CommonTree RPAREN1096_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 206) ) { return retval; }
            // RPIExprWalker.g:1450:5: ( LPAREN sql_condition RPAREN )
            // RPIExprWalker.g:1450:9: LPAREN sql_condition RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            LPAREN1094=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_paren11599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1094_tree = (CommonTree)adaptor.dupNode(LPAREN1094);

            adaptor.addChild(root_0, LPAREN1094_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_condition_in_condition_paren11601);
            sql_condition1095=sql_condition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_condition1095.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1096=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_paren11603); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1096_tree = (CommonTree)adaptor.dupNode(RPAREN1096);

            adaptor.addChild(root_0, RPAREN1096_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 206, condition_paren_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_paren"

    public static class condition_or_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_or"
    // RPIExprWalker.g:1452:1: condition_or returns [StringBuffer value] : c1= condition_and ( 'OR' c2= condition_and )* ;
    public final RPIExprWalker.condition_or_return condition_or() throws RecognitionException {
        RPIExprWalker.condition_or_return retval = new RPIExprWalker.condition_or_return();
        retval.start = input.LT(1);
        int condition_or_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1097=null;
        RPIExprWalker.condition_and_return c1 = null;

        RPIExprWalker.condition_and_return c2 = null;


        CommonTree string_literal1097_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 207) ) { return retval; }
            // RPIExprWalker.g:1453:5: (c1= condition_and ( 'OR' c2= condition_and )* )
            // RPIExprWalker.g:1453:9: c1= condition_and ( 'OR' c2= condition_and )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_condition_and_in_condition_or11627);
            c1=condition_and();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, c1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (c1!=null?c1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1454:9: ( 'OR' c2= condition_and )*
            loop295:
            do {
                int alt295=2;
                int LA295_0 = input.LA(1);

                if ( (LA295_0==OR) ) {
                    int LA295_2 = input.LA(2);

                    if ( (synpred473_RPIExprWalker()) ) {
                        alt295=1;
                    }


                }


                switch (alt295) {
            	case 1 :
            	    // RPIExprWalker.g:1454:11: 'OR' c2= condition_and
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal1097=(CommonTree)match(input,OR,FOLLOW_OR_in_condition_or11642); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1097_tree = (CommonTree)adaptor.dupNode(string_literal1097);

            	    adaptor.addChild(root_0, string_literal1097_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_condition_and_in_condition_or11646);
            	    c2=condition_and();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, c2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" OR " + (c2!=null?c2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop295;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 207, condition_or_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_or"

    public static class condition_and_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_and"
    // RPIExprWalker.g:1456:1: condition_and returns [StringBuffer value] : c1= condition_not ( 'AND' c2= condition_not )* ;
    public final RPIExprWalker.condition_and_return condition_and() throws RecognitionException {
        RPIExprWalker.condition_and_return retval = new RPIExprWalker.condition_and_return();
        retval.start = input.LT(1);
        int condition_and_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1098=null;
        RPIExprWalker.condition_not_return c1 = null;

        RPIExprWalker.condition_not_return c2 = null;


        CommonTree string_literal1098_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 208) ) { return retval; }
            // RPIExprWalker.g:1457:5: (c1= condition_not ( 'AND' c2= condition_not )* )
            // RPIExprWalker.g:1457:9: c1= condition_not ( 'AND' c2= condition_not )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_condition_not_in_condition_and11675);
            c1=condition_not();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, c1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (c1!=null?c1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1458:9: ( 'AND' c2= condition_not )*
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==AND) ) {
                    int LA296_2 = input.LA(2);

                    if ( (synpred474_RPIExprWalker()) ) {
                        alt296=1;
                    }


                }


                switch (alt296) {
            	case 1 :
            	    // RPIExprWalker.g:1458:11: 'AND' c2= condition_not
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    string_literal1098=(CommonTree)match(input,AND,FOLLOW_AND_in_condition_and11691); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal1098_tree = (CommonTree)adaptor.dupNode(string_literal1098);

            	    adaptor.addChild(root_0, string_literal1098_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_condition_not_in_condition_and11695);
            	    c2=condition_not();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, c2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(" AND " + (c2!=null?c2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop296;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 208, condition_and_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_and"

    public static class condition_not_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_not"
    // RPIExprWalker.g:1460:1: condition_not returns [StringBuffer value] : ( 'NOT' c1= condition_expr | c2= condition_expr );
    public final RPIExprWalker.condition_not_return condition_not() throws RecognitionException {
        RPIExprWalker.condition_not_return retval = new RPIExprWalker.condition_not_return();
        retval.start = input.LT(1);
        int condition_not_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1099=null;
        RPIExprWalker.condition_expr_return c1 = null;

        RPIExprWalker.condition_expr_return c2 = null;


        CommonTree string_literal1099_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 209) ) { return retval; }
            // RPIExprWalker.g:1461:5: ( 'NOT' c1= condition_expr | c2= condition_expr )
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==NOT) ) {
                alt297=1;
            }
            else if ( ((LA297_0>=SUBSTR && LA297_0<=TO_CHAR)||LA297_0==TRIM||(LA297_0>=ID && LA297_0<=LPAREN)||(LA297_0>=SQL && LA297_0<=MINUS)||LA297_0==NUMBER||LA297_0==QUOTED_STRING||LA297_0==DOUBLEQUOTED_STRING||LA297_0==116||LA297_0==158||(LA297_0>=168 && LA297_0<=169)||(LA297_0>=174 && LA297_0<=175)||(LA297_0>=197 && LA297_0<=198)||LA297_0==200||LA297_0==202) ) {
                alt297=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 297, 0, input);

                throw nvae;
            }
            switch (alt297) {
                case 1 :
                    // RPIExprWalker.g:1461:9: 'NOT' c1= condition_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1099=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_not11722); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1099_tree = (CommonTree)adaptor.dupNode(string_literal1099);

                    adaptor.addChild(root_0, string_literal1099_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_expr_in_condition_not11726);
                    c1=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, c1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" NOT " + (c1!=null?c1.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1462:9: c2= condition_expr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_expr_in_condition_not11740);
                    c2=condition_expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, c2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (c2!=null?c2.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 209, condition_not_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_not"

    public static class condition_expr_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_expr"
    // RPIExprWalker.g:1464:1: condition_expr returns [StringBuffer value] : ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren );
    public final RPIExprWalker.condition_expr_return condition_expr() throws RecognitionException {
        RPIExprWalker.condition_expr_return retval = new RPIExprWalker.condition_expr_return();
        retval.start = input.LT(1);
        int condition_expr_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.condition_exists_return condition_exists1100 = null;

        RPIExprWalker.condition_is_return condition_is1101 = null;

        RPIExprWalker.condition_comparison_return condition_comparison1102 = null;

        RPIExprWalker.condition_group_comparison_return condition_group_comparison1103 = null;

        RPIExprWalker.condition_in_return condition_in1104 = null;

        RPIExprWalker.condition_is_a_set_return condition_is_a_set1105 = null;

        RPIExprWalker.condition_is_any_return condition_is_any1106 = null;

        RPIExprWalker.condition_is_empty_return condition_is_empty1107 = null;

        RPIExprWalker.condition_is_of_type_return condition_is_of_type1108 = null;

        RPIExprWalker.condition_is_present_return condition_is_present1109 = null;

        RPIExprWalker.condition_like_return condition_like1110 = null;

        RPIExprWalker.condition_memeber_return condition_memeber1111 = null;

        RPIExprWalker.condition_between_return condition_between1112 = null;

        RPIExprWalker.condition_regexp_like_return condition_regexp_like1113 = null;

        RPIExprWalker.condition_submultiset_return condition_submultiset1114 = null;

        RPIExprWalker.condition_equals_path_return condition_equals_path1115 = null;

        RPIExprWalker.condition_under_path_return condition_under_path1116 = null;

        RPIExprWalker.condition_paren_return condition_paren1117 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 210) ) { return retval; }
            // RPIExprWalker.g:1465:5: ( condition_exists | condition_is | condition_comparison | condition_group_comparison | condition_in | condition_is_a_set | condition_is_any | condition_is_empty | condition_is_of_type | condition_is_present | condition_like | condition_memeber | condition_between | condition_regexp_like | condition_submultiset | condition_equals_path | condition_under_path | condition_paren )
            int alt298=18;
            switch ( input.LA(1) ) {
            case 200:
                {
                alt298=1;
                }
                break;
            case PLUS:
                {
                int LA298_2 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 2, input);

                    throw nvae;
                }
                }
                break;
            case MINUS:
                {
                int LA298_3 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 3, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
                {
                int LA298_4 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else if ( (true) ) {
                    alt298=18;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 4, input);

                    throw nvae;
                }
                }
                break;
            case ID:
                {
                int LA298_5 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred481_RPIExprWalker()) ) {
                    alt298=6;
                }
                else if ( (synpred482_RPIExprWalker()) ) {
                    alt298=7;
                }
                else if ( (synpred483_RPIExprWalker()) ) {
                    alt298=8;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred485_RPIExprWalker()) ) {
                    alt298=10;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else if ( ((synpred489_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))) ) {
                    alt298=14;
                }
                else if ( (synpred490_RPIExprWalker()) ) {
                    alt298=15;
                }
                else if ( ((synpred491_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH")))) ) {
                    alt298=16;
                }
                else if ( ((synpred492_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))) ) {
                    alt298=17;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 5, input);

                    throw nvae;
                }
                }
                break;
            case TO_CHAR:
                {
                int LA298_6 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 6, input);

                    throw nvae;
                }
                }
                break;
            case SUBSTR:
                {
                int LA298_7 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 7, input);

                    throw nvae;
                }
                }
                break;
            case TRIM:
                {
                int LA298_8 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 8, input);

                    throw nvae;
                }
                }
                break;
            case DOUBLEQUOTED_STRING:
                {
                int LA298_9 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred481_RPIExprWalker()) ) {
                    alt298=6;
                }
                else if ( (synpred482_RPIExprWalker()) ) {
                    alt298=7;
                }
                else if ( (synpred483_RPIExprWalker()) ) {
                    alt298=8;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred485_RPIExprWalker()) ) {
                    alt298=10;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else if ( (synpred490_RPIExprWalker()) ) {
                    alt298=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 9, input);

                    throw nvae;
                }
                }
                break;
            case 158:
                {
                int LA298_10 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred481_RPIExprWalker()) ) {
                    alt298=6;
                }
                else if ( (synpred482_RPIExprWalker()) ) {
                    alt298=7;
                }
                else if ( (synpred483_RPIExprWalker()) ) {
                    alt298=8;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred485_RPIExprWalker()) ) {
                    alt298=10;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else if ( (synpred490_RPIExprWalker()) ) {
                    alt298=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 10, input);

                    throw nvae;
                }
                }
                break;
            case 175:
                {
                int LA298_11 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 11, input);

                    throw nvae;
                }
                }
                break;
            case 198:
                {
                int LA298_12 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 12, input);

                    throw nvae;
                }
                }
                break;
            case 168:
                {
                int LA298_13 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 13, input);

                    throw nvae;
                }
                }
                break;
            case 169:
                {
                int LA298_14 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 14, input);

                    throw nvae;
                }
                }
                break;
            case SQL:
                {
                int LA298_15 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 15, input);

                    throw nvae;
                }
                }
                break;
            case QUOTED_STRING:
                {
                int LA298_16 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 16, input);

                    throw nvae;
                }
                }
                break;
            case NUMBER:
                {
                int LA298_17 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 17, input);

                    throw nvae;
                }
                }
                break;
            case 116:
                {
                int LA298_18 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 18, input);

                    throw nvae;
                }
                }
                break;
            case 174:
                {
                int LA298_19 = input.LA(2);

                if ( (synpred477_RPIExprWalker()) ) {
                    alt298=2;
                }
                else if ( (synpred478_RPIExprWalker()) ) {
                    alt298=3;
                }
                else if ( (synpred479_RPIExprWalker()) ) {
                    alt298=4;
                }
                else if ( (synpred480_RPIExprWalker()) ) {
                    alt298=5;
                }
                else if ( (synpred484_RPIExprWalker()) ) {
                    alt298=9;
                }
                else if ( (synpred486_RPIExprWalker()) ) {
                    alt298=11;
                }
                else if ( (synpred487_RPIExprWalker()) ) {
                    alt298=12;
                }
                else if ( (synpred488_RPIExprWalker()) ) {
                    alt298=13;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 298, 19, input);

                    throw nvae;
                }
                }
                break;
            case 197:
                {
                alt298=3;
                }
                break;
            case 202:
                {
                alt298=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 298, 0, input);

                throw nvae;
            }

            switch (alt298) {
                case 1 :
                    // RPIExprWalker.g:1465:9: condition_exists
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_exists_in_condition_expr11764);
                    condition_exists1100=condition_exists();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_exists1100.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1466:9: condition_is
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_is_in_condition_expr11774);
                    condition_is1101=condition_is();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_is1101.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1467:9: condition_comparison
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_comparison_in_condition_expr11784);
                    condition_comparison1102=condition_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_comparison1102.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = (condition_comparison1102!=null?condition_comparison1102.value:null);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:1468:9: condition_group_comparison
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_group_comparison_in_condition_expr11796);
                    condition_group_comparison1103=condition_group_comparison();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_group_comparison1103.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:1469:9: condition_in
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_in_in_condition_expr11806);
                    condition_in1104=condition_in();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_in1104.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = (condition_in1104!=null?condition_in1104.value:null);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:1470:9: condition_is_a_set
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_is_a_set_in_condition_expr11818);
                    condition_is_a_set1105=condition_is_a_set();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_is_a_set1105.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 7 :
                    // RPIExprWalker.g:1471:9: condition_is_any
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_is_any_in_condition_expr11828);
                    condition_is_any1106=condition_is_any();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_is_any1106.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 8 :
                    // RPIExprWalker.g:1472:9: condition_is_empty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_is_empty_in_condition_expr11838);
                    condition_is_empty1107=condition_is_empty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_is_empty1107.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 9 :
                    // RPIExprWalker.g:1473:9: condition_is_of_type
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_is_of_type_in_condition_expr11848);
                    condition_is_of_type1108=condition_is_of_type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_is_of_type1108.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 10 :
                    // RPIExprWalker.g:1474:9: condition_is_present
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_is_present_in_condition_expr11858);
                    condition_is_present1109=condition_is_present();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_is_present1109.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 11 :
                    // RPIExprWalker.g:1475:9: condition_like
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_like_in_condition_expr11868);
                    condition_like1110=condition_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_like1110.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 12 :
                    // RPIExprWalker.g:1476:9: condition_memeber
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_memeber_in_condition_expr11878);
                    condition_memeber1111=condition_memeber();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_memeber1111.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 13 :
                    // RPIExprWalker.g:1477:9: condition_between
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_between_in_condition_expr11888);
                    condition_between1112=condition_between();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_between1112.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 14 :
                    // RPIExprWalker.g:1478:9: condition_regexp_like
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_regexp_like_in_condition_expr11898);
                    condition_regexp_like1113=condition_regexp_like();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_regexp_like1113.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 15 :
                    // RPIExprWalker.g:1479:9: condition_submultiset
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_submultiset_in_condition_expr11908);
                    condition_submultiset1114=condition_submultiset();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_submultiset1114.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 16 :
                    // RPIExprWalker.g:1480:9: condition_equals_path
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_equals_path_in_condition_expr11918);
                    condition_equals_path1115=condition_equals_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_equals_path1115.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 17 :
                    // RPIExprWalker.g:1481:9: condition_under_path
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_under_path_in_condition_expr11928);
                    condition_under_path1116=condition_under_path();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_under_path1116.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 18 :
                    // RPIExprWalker.g:1482:9: condition_paren
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_condition_paren_in_condition_expr11938);
                    condition_paren1117=condition_paren();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, condition_paren1117.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 210, condition_expr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_expr"

    public static class condition_exists_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_exists"
    // RPIExprWalker.g:1484:1: condition_exists returns [StringBuffer value] : 'EXISTS' LPAREN select_command RPAREN ;
    public final RPIExprWalker.condition_exists_return condition_exists() throws RecognitionException {
        RPIExprWalker.condition_exists_return retval = new RPIExprWalker.condition_exists_return();
        retval.start = input.LT(1);
        int condition_exists_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1118=null;
        CommonTree LPAREN1119=null;
        CommonTree RPAREN1121=null;
        RPIExprWalker.select_command_return select_command1120 = null;


        CommonTree string_literal1118_tree=null;
        CommonTree LPAREN1119_tree=null;
        CommonTree RPAREN1121_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 211) ) { return retval; }
            // RPIExprWalker.g:1485:5: ( 'EXISTS' LPAREN select_command RPAREN )
            // RPIExprWalker.g:1485:9: 'EXISTS' LPAREN select_command RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1118=(CommonTree)match(input,200,FOLLOW_200_in_condition_exists11960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1118_tree = (CommonTree)adaptor.dupNode(string_literal1118);

            adaptor.addChild(root_0, string_literal1118_tree);
            }
            _last = (CommonTree)input.LT(1);
            LPAREN1119=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_exists11962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1119_tree = (CommonTree)adaptor.dupNode(LPAREN1119);

            adaptor.addChild(root_0, LPAREN1119_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_command_in_condition_exists11964);
            select_command1120=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_command1120.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1121=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_exists11966); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1121_tree = (CommonTree)adaptor.dupNode(RPAREN1121);

            adaptor.addChild(root_0, RPAREN1121_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" EXISTS (" + (select_command1120!=null?select_command1120.value:null).toString().trim() + " )");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 211, condition_exists_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_exists"

    public static class condition_is_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is"
    // RPIExprWalker.g:1488:1: condition_is returns [StringBuffer value] : sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) ;
    public final RPIExprWalker.condition_is_return condition_is() throws RecognitionException {
        RPIExprWalker.condition_is_return retval = new RPIExprWalker.condition_is_return();
        retval.start = input.LT(1);
        int condition_is_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1123=null;
        CommonTree string_literal1124=null;
        CommonTree string_literal1127=null;
        RPIExprWalker.sql_expression_return sql_expression1122 = null;

        RPIExprWalker.keyNAN_return keyNAN1125 = null;

        RPIExprWalker.keyINFINITE_return keyINFINITE1126 = null;


        CommonTree string_literal1123_tree=null;
        CommonTree string_literal1124_tree=null;
        CommonTree string_literal1127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 212) ) { return retval; }
            // RPIExprWalker.g:1489:5: ( sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' ) )
            // RPIExprWalker.g:1489:9: sql_expression 'IS' ( 'NOT' )? ( keyNAN | keyINFINITE | 'NULL' )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_is12000);
            sql_expression1122=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1122.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1123=(CommonTree)match(input,111,FOLLOW_111_in_condition_is12002); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1123_tree = (CommonTree)adaptor.dupNode(string_literal1123);

            adaptor.addChild(root_0, string_literal1123_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (sql_expression1122!=null?sql_expression1122.value:null).toString().trim() + " IS");
            }
            // RPIExprWalker.g:1491:9: ( 'NOT' )?
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==NOT) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    // RPIExprWalker.g:1491:11: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1124=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_is12026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1124_tree = (CommonTree)adaptor.dupNode(string_literal1124);

                    adaptor.addChild(root_0, string_literal1124_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" NOT");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1492:9: ( keyNAN | keyINFINITE | 'NULL' )
            int alt300=3;
            int LA300_0 = input.LA(1);

            if ( (LA300_0==ID) ) {
                int LA300_1 = input.LA(2);

                if ( ((synpred494_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NAN")))) ) {
                    alt300=1;
                }
                else if ( ((synpred495_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INFINITE")))) ) {
                    alt300=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 300, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA300_0==116) ) {
                alt300=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 300, 0, input);

                throw nvae;
            }
            switch (alt300) {
                case 1 :
                    // RPIExprWalker.g:1492:11: keyNAN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyNAN_in_condition_is12043);
                    keyNAN1125=keyNAN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyNAN1125.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (keyNAN1125!=null?keyNAN1125.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1493:9: keyINFINITE
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyINFINITE_in_condition_is12058);
                    keyINFINITE1126=keyINFINITE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyINFINITE1126.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (keyINFINITE1126!=null?keyINFINITE1126.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1494:9: 'NULL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1127=(CommonTree)match(input,116,FOLLOW_116_in_condition_is12072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1127_tree = (CommonTree)adaptor.dupNode(string_literal1127);

                    adaptor.addChild(root_0, string_literal1127_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" NULL");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 212, condition_is_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is"

    public static class condition_comparison_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_comparison"
    // RPIExprWalker.g:1496:1: condition_comparison returns [StringBuffer value] : ( LPAREN sql_expressions RPAREN (o1= outer_join_sign )? ( EQ | n1= NOT_EQ ) LPAREN s1= select_command RPAREN (o2= outer_join_sign )? | ( 'PRIOR' )? sql1= sql_expression (o3= outer_join_sign )? ( EQ | n2= NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'PRIOR' )? (sql2= sql_expression | LPAREN s2= select_command RPAREN ) (o4= outer_join_sign )? );
    public final RPIExprWalker.condition_comparison_return condition_comparison() throws RecognitionException {
        RPIExprWalker.condition_comparison_return retval = new RPIExprWalker.condition_comparison_return();
        retval.start = input.LT(1);
        int condition_comparison_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree n1=null;
        CommonTree n2=null;
        CommonTree LPAREN1128=null;
        CommonTree RPAREN1130=null;
        CommonTree EQ1131=null;
        CommonTree LPAREN1132=null;
        CommonTree RPAREN1133=null;
        CommonTree string_literal1134=null;
        CommonTree EQ1135=null;
        CommonTree BOOLOP_GT1136=null;
        CommonTree BOOLOP_GE1137=null;
        CommonTree BOOLOP_LT1138=null;
        CommonTree BOOLOP_LE1139=null;
        CommonTree string_literal1140=null;
        CommonTree LPAREN1141=null;
        CommonTree RPAREN1142=null;
        RPIExprWalker.outer_join_sign_return o1 = null;

        RPIExprWalker.select_command_return s1 = null;

        RPIExprWalker.outer_join_sign_return o2 = null;

        RPIExprWalker.sql_expression_return sql1 = null;

        RPIExprWalker.outer_join_sign_return o3 = null;

        RPIExprWalker.sql_expression_return sql2 = null;

        RPIExprWalker.select_command_return s2 = null;

        RPIExprWalker.outer_join_sign_return o4 = null;

        RPIExprWalker.sql_expressions_return sql_expressions1129 = null;


        CommonTree n1_tree=null;
        CommonTree n2_tree=null;
        CommonTree LPAREN1128_tree=null;
        CommonTree RPAREN1130_tree=null;
        CommonTree EQ1131_tree=null;
        CommonTree LPAREN1132_tree=null;
        CommonTree RPAREN1133_tree=null;
        CommonTree string_literal1134_tree=null;
        CommonTree EQ1135_tree=null;
        CommonTree BOOLOP_GT1136_tree=null;
        CommonTree BOOLOP_GE1137_tree=null;
        CommonTree BOOLOP_LT1138_tree=null;
        CommonTree BOOLOP_LE1139_tree=null;
        CommonTree string_literal1140_tree=null;
        CommonTree LPAREN1141_tree=null;
        CommonTree RPAREN1142_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 213) ) { return retval; }
            // RPIExprWalker.g:1497:5: ( LPAREN sql_expressions RPAREN (o1= outer_join_sign )? ( EQ | n1= NOT_EQ ) LPAREN s1= select_command RPAREN (o2= outer_join_sign )? | ( 'PRIOR' )? sql1= sql_expression (o3= outer_join_sign )? ( EQ | n2= NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'PRIOR' )? (sql2= sql_expression | LPAREN s2= select_command RPAREN ) (o4= outer_join_sign )? )
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==LPAREN) ) {
                int LA310_1 = input.LA(2);

                if ( (synpred499_RPIExprWalker()) ) {
                    alt310=1;
                }
                else if ( (true) ) {
                    alt310=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 310, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA310_0>=SUBSTR && LA310_0<=TO_CHAR)||LA310_0==TRIM||LA310_0==ID||(LA310_0>=SQL && LA310_0<=MINUS)||LA310_0==NUMBER||LA310_0==QUOTED_STRING||LA310_0==DOUBLEQUOTED_STRING||LA310_0==116||LA310_0==158||(LA310_0>=168 && LA310_0<=169)||(LA310_0>=174 && LA310_0<=175)||(LA310_0>=197 && LA310_0<=198)) ) {
                alt310=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);

                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    // RPIExprWalker.g:1497:9: LPAREN sql_expressions RPAREN (o1= outer_join_sign )? ( EQ | n1= NOT_EQ ) LPAREN s1= select_command RPAREN (o2= outer_join_sign )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    LPAREN1128=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison12097); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1128_tree = (CommonTree)adaptor.dupNode(LPAREN1128);

                    adaptor.addChild(root_0, LPAREN1128_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expressions_in_condition_comparison12099);
                    sql_expressions1129=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expressions1129.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1130=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison12101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1130_tree = (CommonTree)adaptor.dupNode(RPAREN1130);

                    adaptor.addChild(root_0, RPAREN1130_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" (" + (sql_expressions1129!=null?sql_expressions1129.value:null).toString().trim() + " )");
                    }
                    // RPIExprWalker.g:1498:9: (o1= outer_join_sign )?
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==LPAREN) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            // RPIExprWalker.g:1498:11: o1= outer_join_sign
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison12117);
                            o1=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, o1.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (o1!=null?o1.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:1499:9: ( EQ | n1= NOT_EQ )
                    int alt302=2;
                    int LA302_0 = input.LA(1);

                    if ( (LA302_0==EQ) ) {
                        alt302=1;
                    }
                    else if ( (LA302_0==NOT_EQ) ) {
                        alt302=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 302, 0, input);

                        throw nvae;
                    }
                    switch (alt302) {
                        case 1 :
                            // RPIExprWalker.g:1499:11: EQ
                            {
                            _last = (CommonTree)input.LT(1);
                            EQ1131=(CommonTree)match(input,EQ,FOLLOW_EQ_in_condition_comparison12134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ1131_tree = (CommonTree)adaptor.dupNode(EQ1131);

                            adaptor.addChild(root_0, EQ1131_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" =");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1499:38: n1= NOT_EQ
                            {
                            _last = (CommonTree)input.LT(1);
                            n1=(CommonTree)match(input,NOT_EQ,FOLLOW_NOT_EQ_in_condition_comparison12141); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            n1_tree = (CommonTree)adaptor.dupNode(n1);

                            adaptor.addChild(root_0, n1_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (n1!=null?n1.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    LPAREN1132=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison12155); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1132_tree = (CommonTree)adaptor.dupNode(LPAREN1132);

                    adaptor.addChild(root_0, LPAREN1132_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_select_command_in_condition_comparison12159);
                    s1=select_command();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, s1.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1133=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison12161); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1133_tree = (CommonTree)adaptor.dupNode(RPAREN1133);

                    adaptor.addChild(root_0, RPAREN1133_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" (" + (s1!=null?s1.value:null).toString().trim() + " )");
                    }
                    // RPIExprWalker.g:1501:9: (o2= outer_join_sign )?
                    int alt303=2;
                    int LA303_0 = input.LA(1);

                    if ( (LA303_0==LPAREN) ) {
                        int LA303_1 = input.LA(2);

                        if ( (LA303_1==PLUS) ) {
                            int LA303_3 = input.LA(3);

                            if ( (LA303_3==RPAREN) ) {
                                int LA303_4 = input.LA(4);

                                if ( (synpred498_RPIExprWalker()) ) {
                                    alt303=1;
                                }
                            }
                        }
                    }
                    switch (alt303) {
                        case 1 :
                            // RPIExprWalker.g:1501:11: o2= outer_join_sign
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison12177);
                            o2=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, o2.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (o2!=null?o2.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1502:9: ( 'PRIOR' )? sql1= sql_expression (o3= outer_join_sign )? ( EQ | n2= NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'PRIOR' )? (sql2= sql_expression | LPAREN s2= select_command RPAREN ) (o4= outer_join_sign )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer();
                    }
                    // RPIExprWalker.g:1503:9: ( 'PRIOR' )?
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==197) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            // RPIExprWalker.g:1503:11: 'PRIOR'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1134=(CommonTree)match(input,197,FOLLOW_197_in_condition_comparison12204); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1134_tree = (CommonTree)adaptor.dupNode(string_literal1134);

                            adaptor.addChild(root_0, string_literal1134_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" PRIOR");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_condition_comparison12221);
                    sql1=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql1.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value.append(" " + (sql1!=null?sql1.value:null).toString().trim());
                    }
                    // RPIExprWalker.g:1505:9: (o3= outer_join_sign )?
                    int alt305=2;
                    int LA305_0 = input.LA(1);

                    if ( (LA305_0==LPAREN) ) {
                        alt305=1;
                    }
                    switch (alt305) {
                        case 1 :
                            // RPIExprWalker.g:1505:11: o3= outer_join_sign
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison12238);
                            o3=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, o3.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (o3!=null?o3.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:1506:9: ( EQ | n2= NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE )
                    int alt306=6;
                    switch ( input.LA(1) ) {
                    case EQ:
                        {
                        alt306=1;
                        }
                        break;
                    case NOT_EQ:
                        {
                        alt306=2;
                        }
                        break;
                    case BOOLOP_GT:
                        {
                        alt306=3;
                        }
                        break;
                    case BOOLOP_GE:
                        {
                        alt306=4;
                        }
                        break;
                    case BOOLOP_LT:
                        {
                        alt306=5;
                        }
                        break;
                    case BOOLOP_LE:
                        {
                        alt306=6;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 306, 0, input);

                        throw nvae;
                    }

                    switch (alt306) {
                        case 1 :
                            // RPIExprWalker.g:1506:11: EQ
                            {
                            _last = (CommonTree)input.LT(1);
                            EQ1135=(CommonTree)match(input,EQ,FOLLOW_EQ_in_condition_comparison12255); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQ1135_tree = (CommonTree)adaptor.dupNode(EQ1135);

                            adaptor.addChild(root_0, EQ1135_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" =");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1507:9: n2= NOT_EQ
                            {
                            _last = (CommonTree)input.LT(1);
                            n2=(CommonTree)match(input,NOT_EQ,FOLLOW_NOT_EQ_in_condition_comparison12272); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            n2_tree = (CommonTree)adaptor.dupNode(n2);

                            adaptor.addChild(root_0, n2_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (n2!=null?n2.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:1508:9: BOOLOP_GT
                            {
                            _last = (CommonTree)input.LT(1);
                            BOOLOP_GT1136=(CommonTree)match(input,BOOLOP_GT,FOLLOW_BOOLOP_GT_in_condition_comparison12286); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BOOLOP_GT1136_tree = (CommonTree)adaptor.dupNode(BOOLOP_GT1136);

                            adaptor.addChild(root_0, BOOLOP_GT1136_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (BOOLOP_GT1136!=null?BOOLOP_GT1136.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 4 :
                            // RPIExprWalker.g:1509:9: BOOLOP_GE
                            {
                            _last = (CommonTree)input.LT(1);
                            BOOLOP_GE1137=(CommonTree)match(input,BOOLOP_GE,FOLLOW_BOOLOP_GE_in_condition_comparison12300); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BOOLOP_GE1137_tree = (CommonTree)adaptor.dupNode(BOOLOP_GE1137);

                            adaptor.addChild(root_0, BOOLOP_GE1137_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (BOOLOP_GE1137!=null?BOOLOP_GE1137.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 5 :
                            // RPIExprWalker.g:1510:9: BOOLOP_LT
                            {
                            _last = (CommonTree)input.LT(1);
                            BOOLOP_LT1138=(CommonTree)match(input,BOOLOP_LT,FOLLOW_BOOLOP_LT_in_condition_comparison12314); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BOOLOP_LT1138_tree = (CommonTree)adaptor.dupNode(BOOLOP_LT1138);

                            adaptor.addChild(root_0, BOOLOP_LT1138_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (BOOLOP_LT1138!=null?BOOLOP_LT1138.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 6 :
                            // RPIExprWalker.g:1511:9: BOOLOP_LE
                            {
                            _last = (CommonTree)input.LT(1);
                            BOOLOP_LE1139=(CommonTree)match(input,BOOLOP_LE,FOLLOW_BOOLOP_LE_in_condition_comparison12328); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BOOLOP_LE1139_tree = (CommonTree)adaptor.dupNode(BOOLOP_LE1139);

                            adaptor.addChild(root_0, BOOLOP_LE1139_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (BOOLOP_LE1139!=null?BOOLOP_LE1139.getText():null));
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:1512:9: ( 'PRIOR' )?
                    int alt307=2;
                    int LA307_0 = input.LA(1);

                    if ( (LA307_0==197) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            // RPIExprWalker.g:1512:11: 'PRIOR'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1140=(CommonTree)match(input,197,FOLLOW_197_in_condition_comparison12344); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1140_tree = (CommonTree)adaptor.dupNode(string_literal1140);

                            adaptor.addChild(root_0, string_literal1140_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" PRIOR");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:1513:9: (sql2= sql_expression | LPAREN s2= select_command RPAREN )
                    int alt308=2;
                    int LA308_0 = input.LA(1);

                    if ( ((LA308_0>=SUBSTR && LA308_0<=TO_CHAR)||LA308_0==TRIM||LA308_0==ID||(LA308_0>=SQL && LA308_0<=MINUS)||LA308_0==NUMBER||LA308_0==QUOTED_STRING||LA308_0==DOUBLEQUOTED_STRING||LA308_0==116||LA308_0==158||(LA308_0>=168 && LA308_0<=169)||(LA308_0>=174 && LA308_0<=175)||LA308_0==198) ) {
                        alt308=1;
                    }
                    else if ( (LA308_0==LPAREN) ) {
                        int LA308_3 = input.LA(2);

                        if ( (synpred508_RPIExprWalker()) ) {
                            alt308=1;
                        }
                        else if ( (true) ) {
                            alt308=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 308, 3, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 308, 0, input);

                        throw nvae;
                    }
                    switch (alt308) {
                        case 1 :
                            // RPIExprWalker.g:1513:11: sql2= sql_expression
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_expression_in_condition_comparison12363);
                            sql2=sql_expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql2.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (sql2!=null?sql2.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1514:9: LPAREN s2= select_command RPAREN
                            {
                            _last = (CommonTree)input.LT(1);
                            LPAREN1141=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_comparison12377); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN1141_tree = (CommonTree)adaptor.dupNode(LPAREN1141);

                            adaptor.addChild(root_0, LPAREN1141_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_select_command_in_condition_comparison12381);
                            s2=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, s2.getTree());
                            _last = (CommonTree)input.LT(1);
                            RPAREN1142=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_comparison12383); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN1142_tree = (CommonTree)adaptor.dupNode(RPAREN1142);

                            adaptor.addChild(root_0, RPAREN1142_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" (" + (s2!=null?s2.value:null).toString().trim() + " )");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    // RPIExprWalker.g:1515:9: (o4= outer_join_sign )?
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==LPAREN) ) {
                        int LA309_1 = input.LA(2);

                        if ( (synpred509_RPIExprWalker()) ) {
                            alt309=1;
                        }
                    }
                    switch (alt309) {
                        case 1 :
                            // RPIExprWalker.g:1515:11: o4= outer_join_sign
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_outer_join_sign_in_condition_comparison12401);
                            o4=outer_join_sign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, o4.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (o4!=null?o4.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 213, condition_comparison_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_comparison"

    public static class condition_group_comparison_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_group_comparison"
    // RPIExprWalker.g:1517:1: condition_group_comparison : ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN );
    public final RPIExprWalker.condition_group_comparison_return condition_group_comparison() throws RecognitionException {
        RPIExprWalker.condition_group_comparison_return retval = new RPIExprWalker.condition_group_comparison_return();
        retval.start = input.LT(1);
        int condition_group_comparison_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1143=null;
        CommonTree RPAREN1145=null;
        CommonTree set1146=null;
        CommonTree string_literal1147=null;
        CommonTree string_literal1149=null;
        CommonTree LPAREN1150=null;
        CommonTree RPAREN1153=null;
        CommonTree set1155=null;
        CommonTree string_literal1156=null;
        CommonTree string_literal1158=null;
        CommonTree LPAREN1159=null;
        CommonTree RPAREN1162=null;
        RPIExprWalker.sql_expressions_return sql_expressions1144 = null;

        RPIExprWalker.keySOME_return keySOME1148 = null;

        RPIExprWalker.grouping_expression_list_return grouping_expression_list1151 = null;

        RPIExprWalker.select_command_return select_command1152 = null;

        RPIExprWalker.sql_expression_return sql_expression1154 = null;

        RPIExprWalker.keySOME_return keySOME1157 = null;

        RPIExprWalker.sql_expressions_return sql_expressions1160 = null;

        RPIExprWalker.select_command_return select_command1161 = null;


        CommonTree LPAREN1143_tree=null;
        CommonTree RPAREN1145_tree=null;
        CommonTree set1146_tree=null;
        CommonTree string_literal1147_tree=null;
        CommonTree string_literal1149_tree=null;
        CommonTree LPAREN1150_tree=null;
        CommonTree RPAREN1153_tree=null;
        CommonTree set1155_tree=null;
        CommonTree string_literal1156_tree=null;
        CommonTree string_literal1158_tree=null;
        CommonTree LPAREN1159_tree=null;
        CommonTree RPAREN1162_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 214) ) { return retval; }
            // RPIExprWalker.g:1518:5: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN )
            int alt315=2;
            int LA315_0 = input.LA(1);

            if ( (LA315_0==LPAREN) ) {
                int LA315_1 = input.LA(2);

                if ( (synpred514_RPIExprWalker()) ) {
                    alt315=1;
                }
                else if ( (true) ) {
                    alt315=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 315, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA315_0>=SUBSTR && LA315_0<=TO_CHAR)||LA315_0==TRIM||LA315_0==ID||(LA315_0>=SQL && LA315_0<=MINUS)||LA315_0==NUMBER||LA315_0==QUOTED_STRING||LA315_0==DOUBLEQUOTED_STRING||LA315_0==116||LA315_0==158||(LA315_0>=168 && LA315_0<=169)||(LA315_0>=174 && LA315_0<=175)||LA315_0==198) ) {
                alt315=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);

                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    // RPIExprWalker.g:1518:9: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    LPAREN1143=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison12423); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1143_tree = (CommonTree)adaptor.dupNode(LPAREN1143);

                    adaptor.addChild(root_0, LPAREN1143_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison12425);
                    sql_expressions1144=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expressions1144.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1145=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison12427); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1145_tree = (CommonTree)adaptor.dupNode(RPAREN1145);

                    adaptor.addChild(root_0, RPAREN1145_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    set1146=(CommonTree)input.LT(1);
                    if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set1146_tree = (CommonTree)adaptor.dupNode(set1146);

                        adaptor.addChild(root_0, set1146_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprWalker.g:1518:55: ( 'ANY' | keySOME | 'ALL' )
                    int alt311=3;
                    switch ( input.LA(1) ) {
                    case 202:
                        {
                        alt311=1;
                        }
                        break;
                    case ID:
                        {
                        alt311=2;
                        }
                        break;
                    case 177:
                        {
                        alt311=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 311, 0, input);

                        throw nvae;
                    }

                    switch (alt311) {
                        case 1 :
                            // RPIExprWalker.g:1518:57: 'ANY'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1147=(CommonTree)match(input,202,FOLLOW_202_in_condition_group_comparison12441); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1147_tree = (CommonTree)adaptor.dupNode(string_literal1147);

                            adaptor.addChild(root_0, string_literal1147_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1518:65: keySOME
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison12445);
                            keySOME1148=keySOME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keySOME1148.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:1518:75: 'ALL'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1149=(CommonTree)match(input,177,FOLLOW_177_in_condition_group_comparison12449); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1149_tree = (CommonTree)adaptor.dupNode(string_literal1149);

                            adaptor.addChild(root_0, string_literal1149_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    LPAREN1150=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison12453); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1150_tree = (CommonTree)adaptor.dupNode(LPAREN1150);

                    adaptor.addChild(root_0, LPAREN1150_tree);
                    }
                    // RPIExprWalker.g:1518:90: ( grouping_expression_list | select_command )
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( ((LA312_0>=SUBSTR && LA312_0<=TO_CHAR)||LA312_0==TRIM||(LA312_0>=ID && LA312_0<=LPAREN)||(LA312_0>=SQL && LA312_0<=MINUS)||LA312_0==NUMBER||LA312_0==QUOTED_STRING||LA312_0==DOUBLEQUOTED_STRING||LA312_0==116||LA312_0==158||(LA312_0>=168 && LA312_0<=169)||LA312_0==175||LA312_0==198) ) {
                        alt312=1;
                    }
                    else if ( (LA312_0==174) ) {
                        int LA312_18 = input.LA(2);

                        if ( (synpred513_RPIExprWalker()) ) {
                            alt312=1;
                        }
                        else if ( (true) ) {
                            alt312=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 312, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 312, 0, input);

                        throw nvae;
                    }
                    switch (alt312) {
                        case 1 :
                            // RPIExprWalker.g:1518:92: grouping_expression_list
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_group_comparison12457);
                            grouping_expression_list1151=grouping_expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, grouping_expression_list1151.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1518:119: select_command
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison12461);
                            select_command1152=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, select_command1152.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN1153=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison12465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1153_tree = (CommonTree)adaptor.dupNode(RPAREN1153);

                    adaptor.addChild(root_0, RPAREN1153_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1519:9: sql_expression ( EQ | NOT_EQ | BOOLOP_GT | BOOLOP_GE | BOOLOP_LT | BOOLOP_LE ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( sql_expressions | select_command ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_condition_group_comparison12475);
                    sql_expression1154=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1154.getTree());
                    _last = (CommonTree)input.LT(1);
                    set1155=(CommonTree)input.LT(1);
                    if ( input.LA(1)==EQ||(input.LA(1)>=BOOLOP_LT && input.LA(1)<=BOOLOP_LE)||input.LA(1)==NOT_EQ ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set1155_tree = (CommonTree)adaptor.dupNode(set1155);

                        adaptor.addChild(root_0, set1155_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }

                    // RPIExprWalker.g:1519:88: ( 'ANY' | keySOME | 'ALL' )
                    int alt313=3;
                    switch ( input.LA(1) ) {
                    case 202:
                        {
                        alt313=1;
                        }
                        break;
                    case ID:
                        {
                        alt313=2;
                        }
                        break;
                    case 177:
                        {
                        alt313=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 313, 0, input);

                        throw nvae;
                    }

                    switch (alt313) {
                        case 1 :
                            // RPIExprWalker.g:1519:90: 'ANY'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1156=(CommonTree)match(input,202,FOLLOW_202_in_condition_group_comparison12505); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1156_tree = (CommonTree)adaptor.dupNode(string_literal1156);

                            adaptor.addChild(root_0, string_literal1156_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1519:98: keySOME
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keySOME_in_condition_group_comparison12509);
                            keySOME1157=keySOME();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keySOME1157.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 3 :
                            // RPIExprWalker.g:1519:108: 'ALL'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1158=(CommonTree)match(input,177,FOLLOW_177_in_condition_group_comparison12513); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1158_tree = (CommonTree)adaptor.dupNode(string_literal1158);

                            adaptor.addChild(root_0, string_literal1158_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    LPAREN1159=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_group_comparison12517); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1159_tree = (CommonTree)adaptor.dupNode(LPAREN1159);

                    adaptor.addChild(root_0, LPAREN1159_tree);
                    }
                    // RPIExprWalker.g:1519:123: ( sql_expressions | select_command )
                    int alt314=2;
                    int LA314_0 = input.LA(1);

                    if ( ((LA314_0>=SUBSTR && LA314_0<=TO_CHAR)||LA314_0==TRIM||(LA314_0>=ID && LA314_0<=LPAREN)||(LA314_0>=SQL && LA314_0<=MINUS)||LA314_0==NUMBER||LA314_0==QUOTED_STRING||LA314_0==DOUBLEQUOTED_STRING||LA314_0==116||LA314_0==158||(LA314_0>=168 && LA314_0<=169)||LA314_0==175||LA314_0==198) ) {
                        alt314=1;
                    }
                    else if ( (LA314_0==174) ) {
                        int LA314_18 = input.LA(2);

                        if ( (synpred522_RPIExprWalker()) ) {
                            alt314=1;
                        }
                        else if ( (true) ) {
                            alt314=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 314, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 314, 0, input);

                        throw nvae;
                    }
                    switch (alt314) {
                        case 1 :
                            // RPIExprWalker.g:1519:125: sql_expressions
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_expressions_in_condition_group_comparison12521);
                            sql_expressions1160=sql_expressions();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_expressions1160.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1519:143: select_command
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_select_command_in_condition_group_comparison12525);
                            select_command1161=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, select_command1161.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN1162=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_group_comparison12529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1162_tree = (CommonTree)adaptor.dupNode(RPAREN1162);

                    adaptor.addChild(root_0, RPAREN1162_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 214, condition_group_comparison_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_group_comparison"

    public static class condition_in_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_in"
    // RPIExprWalker.g:1521:1: condition_in returns [StringBuffer value] : ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN );
    public final RPIExprWalker.condition_in_return condition_in() throws RecognitionException {
        RPIExprWalker.condition_in_return retval = new RPIExprWalker.condition_in_return();
        retval.start = input.LT(1);
        int condition_in_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1163=null;
        CommonTree RPAREN1165=null;
        CommonTree string_literal1166=null;
        CommonTree string_literal1167=null;
        CommonTree LPAREN1168=null;
        CommonTree RPAREN1171=null;
        CommonTree string_literal1173=null;
        CommonTree string_literal1174=null;
        CommonTree LPAREN1175=null;
        CommonTree RPAREN1178=null;
        RPIExprWalker.sql_expressions_return sql_expressions1164 = null;

        RPIExprWalker.grouping_expression_list_return grouping_expression_list1169 = null;

        RPIExprWalker.select_command_return select_command1170 = null;

        RPIExprWalker.sql_expression_return sql_expression1172 = null;

        RPIExprWalker.expression_list_return expression_list1176 = null;

        RPIExprWalker.select_command_return select_command1177 = null;


        CommonTree LPAREN1163_tree=null;
        CommonTree RPAREN1165_tree=null;
        CommonTree string_literal1166_tree=null;
        CommonTree string_literal1167_tree=null;
        CommonTree LPAREN1168_tree=null;
        CommonTree RPAREN1171_tree=null;
        CommonTree string_literal1173_tree=null;
        CommonTree string_literal1174_tree=null;
        CommonTree LPAREN1175_tree=null;
        CommonTree RPAREN1178_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 215) ) { return retval; }
            // RPIExprWalker.g:1522:5: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN | sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN )
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==LPAREN) ) {
                int LA320_1 = input.LA(2);

                if ( (synpred525_RPIExprWalker()) ) {
                    alt320=1;
                }
                else if ( (true) ) {
                    alt320=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 320, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA320_0>=SUBSTR && LA320_0<=TO_CHAR)||LA320_0==TRIM||LA320_0==ID||(LA320_0>=SQL && LA320_0<=MINUS)||LA320_0==NUMBER||LA320_0==QUOTED_STRING||LA320_0==DOUBLEQUOTED_STRING||LA320_0==116||LA320_0==158||(LA320_0>=168 && LA320_0<=169)||(LA320_0>=174 && LA320_0<=175)||LA320_0==198) ) {
                alt320=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);

                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    // RPIExprWalker.g:1522:9: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    LPAREN1163=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in12551); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1163_tree = (CommonTree)adaptor.dupNode(LPAREN1163);

                    adaptor.addChild(root_0, LPAREN1163_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expressions_in_condition_in12553);
                    sql_expressions1164=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expressions1164.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1165=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in12555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1165_tree = (CommonTree)adaptor.dupNode(RPAREN1165);

                    adaptor.addChild(root_0, RPAREN1165_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" (" + (sql_expressions1164!=null?sql_expressions1164.value:null).toString().trim() + " )");
                    }
                    // RPIExprWalker.g:1523:9: ( 'NOT' )?
                    int alt316=2;
                    int LA316_0 = input.LA(1);

                    if ( (LA316_0==NOT) ) {
                        alt316=1;
                    }
                    switch (alt316) {
                        case 1 :
                            // RPIExprWalker.g:1523:11: 'NOT'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1166=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_in12569); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1166_tree = (CommonTree)adaptor.dupNode(string_literal1166);

                            adaptor.addChild(root_0, string_literal1166_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" NOT");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal1167=(CommonTree)match(input,160,FOLLOW_160_in_condition_in12575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1167_tree = (CommonTree)adaptor.dupNode(string_literal1167);

                    adaptor.addChild(root_0, string_literal1167_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    LPAREN1168=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in12577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1168_tree = (CommonTree)adaptor.dupNode(LPAREN1168);

                    adaptor.addChild(root_0, LPAREN1168_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" IN ( ");
                    }
                    // RPIExprWalker.g:1524:9: ( grouping_expression_list | select_command )
                    int alt317=2;
                    int LA317_0 = input.LA(1);

                    if ( ((LA317_0>=SUBSTR && LA317_0<=TO_CHAR)||LA317_0==TRIM||(LA317_0>=ID && LA317_0<=LPAREN)||(LA317_0>=SQL && LA317_0<=MINUS)||LA317_0==NUMBER||LA317_0==QUOTED_STRING||LA317_0==DOUBLEQUOTED_STRING||LA317_0==116||LA317_0==158||(LA317_0>=168 && LA317_0<=169)||LA317_0==175||LA317_0==198) ) {
                        alt317=1;
                    }
                    else if ( (LA317_0==174) ) {
                        int LA317_18 = input.LA(2);

                        if ( (synpred524_RPIExprWalker()) ) {
                            alt317=1;
                        }
                        else if ( (true) ) {
                            alt317=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 317, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 317, 0, input);

                        throw nvae;
                    }
                    switch (alt317) {
                        case 1 :
                            // RPIExprWalker.g:1524:11: grouping_expression_list
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_grouping_expression_list_in_condition_in12592);
                            grouping_expression_list1169=grouping_expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, grouping_expression_list1169.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (grouping_expression_list1169!=null?grouping_expression_list1169.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1525:9: select_command
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_select_command_in_condition_in12607);
                            select_command1170=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, select_command1170.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (select_command1170!=null?select_command1170.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN1171=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in12612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1171_tree = (CommonTree)adaptor.dupNode(RPAREN1171);

                    adaptor.addChild(root_0, RPAREN1171_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1526:9: sql_expression ( 'NOT' )? 'IN' LPAREN ( expression_list | select_command ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_condition_in12624);
                    sql_expression1172=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1172.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (sql_expression1172!=null?sql_expression1172.value:null).toString().trim());
                    }
                    // RPIExprWalker.g:1527:9: ( 'NOT' )?
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==NOT) ) {
                        alt318=1;
                    }
                    switch (alt318) {
                        case 1 :
                            // RPIExprWalker.g:1527:11: 'NOT'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1173=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_in12639); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1173_tree = (CommonTree)adaptor.dupNode(string_literal1173);

                            adaptor.addChild(root_0, string_literal1173_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.value.append(" NOT");
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    string_literal1174=(CommonTree)match(input,160,FOLLOW_160_in_condition_in12645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1174_tree = (CommonTree)adaptor.dupNode(string_literal1174);

                    adaptor.addChild(root_0, string_literal1174_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    LPAREN1175=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_in12648); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1175_tree = (CommonTree)adaptor.dupNode(LPAREN1175);

                    adaptor.addChild(root_0, LPAREN1175_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" IN ( ");
                    }
                    // RPIExprWalker.g:1528:9: ( expression_list | select_command )
                    int alt319=2;
                    int LA319_0 = input.LA(1);

                    if ( ((LA319_0>=SUBSTR && LA319_0<=TO_CHAR)||LA319_0==TRIM||(LA319_0>=ID && LA319_0<=LPAREN)||(LA319_0>=SQL && LA319_0<=MINUS)||LA319_0==NUMBER||LA319_0==QUOTED_STRING||LA319_0==DOUBLEQUOTED_STRING||LA319_0==116||LA319_0==158||(LA319_0>=168 && LA319_0<=169)||LA319_0==175||LA319_0==198) ) {
                        alt319=1;
                    }
                    else if ( (LA319_0==174) ) {
                        int LA319_18 = input.LA(2);

                        if ( (synpred527_RPIExprWalker()) ) {
                            alt319=1;
                        }
                        else if ( (true) ) {
                            alt319=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 319, 18, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 319, 0, input);

                        throw nvae;
                    }
                    switch (alt319) {
                        case 1 :
                            // RPIExprWalker.g:1528:11: expression_list
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_expression_list_in_condition_in12663);
                            expression_list1176=expression_list();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, expression_list1176.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (expression_list1176!=null?expression_list1176.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1529:9: select_command
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_select_command_in_condition_in12678);
                            select_command1177=select_command();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, select_command1177.getTree());
                            if ( state.backtracking==0 ) {
                              retval.value.append(" " + (select_command1177!=null?select_command1177.value:null).toString().trim());
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    RPAREN1178=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_in12683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1178_tree = (CommonTree)adaptor.dupNode(RPAREN1178);

                    adaptor.addChild(root_0, RPAREN1178_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value.append(" )");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 215, condition_in_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_in"

    public static class condition_is_a_set_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_a_set"
    // RPIExprWalker.g:1531:1: condition_is_a_set : nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' ;
    public final RPIExprWalker.condition_is_a_set_return condition_is_a_set() throws RecognitionException {
        RPIExprWalker.condition_is_a_set_return retval = new RPIExprWalker.condition_is_a_set_return();
        retval.start = input.LT(1);
        int condition_is_a_set_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1180=null;
        CommonTree string_literal1181=null;
        CommonTree string_literal1183=null;
        RPIExprWalker.nested_table_column_name_return nested_table_column_name1179 = null;

        RPIExprWalker.keyA_return keyA1182 = null;


        CommonTree string_literal1180_tree=null;
        CommonTree string_literal1181_tree=null;
        CommonTree string_literal1183_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 216) ) { return retval; }
            // RPIExprWalker.g:1532:5: ( nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET' )
            // RPIExprWalker.g:1532:9: nested_table_column_name 'IS' ( 'NOT' )? keyA 'SET'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_a_set12703);
            nested_table_column_name1179=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_table_column_name1179.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1180=(CommonTree)match(input,111,FOLLOW_111_in_condition_is_a_set12705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1180_tree = (CommonTree)adaptor.dupNode(string_literal1180);

            adaptor.addChild(root_0, string_literal1180_tree);
            }
            // RPIExprWalker.g:1532:39: ( 'NOT' )?
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==NOT) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    // RPIExprWalker.g:1532:41: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1181=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_is_a_set12709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1181_tree = (CommonTree)adaptor.dupNode(string_literal1181);

                    adaptor.addChild(root_0, string_literal1181_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyA_in_condition_is_a_set12714);
            keyA1182=keyA();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyA1182.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1183=(CommonTree)match(input,145,FOLLOW_145_in_condition_is_a_set12716); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1183_tree = (CommonTree)adaptor.dupNode(string_literal1183);

            adaptor.addChild(root_0, string_literal1183_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 216, condition_is_a_set_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_a_set"

    public static class condition_is_any_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_any"
    // RPIExprWalker.g:1534:1: condition_is_any : ( column_name 'IS' )? 'ANY' ;
    public final RPIExprWalker.condition_is_any_return condition_is_any() throws RecognitionException {
        RPIExprWalker.condition_is_any_return retval = new RPIExprWalker.condition_is_any_return();
        retval.start = input.LT(1);
        int condition_is_any_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1185=null;
        CommonTree string_literal1186=null;
        RPIExprWalker.column_name_return column_name1184 = null;


        CommonTree string_literal1185_tree=null;
        CommonTree string_literal1186_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 217) ) { return retval; }
            // RPIExprWalker.g:1535:5: ( ( column_name 'IS' )? 'ANY' )
            // RPIExprWalker.g:1535:9: ( column_name 'IS' )? 'ANY'
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1535:9: ( column_name 'IS' )?
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==ID||LA322_0==DOUBLEQUOTED_STRING||LA322_0==158) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    // RPIExprWalker.g:1535:11: column_name 'IS'
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_name_in_condition_is_any12736);
                    column_name1184=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_name1184.getTree());
                    _last = (CommonTree)input.LT(1);
                    string_literal1185=(CommonTree)match(input,111,FOLLOW_111_in_condition_is_any12738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1185_tree = (CommonTree)adaptor.dupNode(string_literal1185);

                    adaptor.addChild(root_0, string_literal1185_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal1186=(CommonTree)match(input,202,FOLLOW_202_in_condition_is_any12743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1186_tree = (CommonTree)adaptor.dupNode(string_literal1186);

            adaptor.addChild(root_0, string_literal1186_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 217, condition_is_any_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_any"

    public static class condition_is_empty_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_empty"
    // RPIExprWalker.g:1537:1: condition_is_empty : nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY ;
    public final RPIExprWalker.condition_is_empty_return condition_is_empty() throws RecognitionException {
        RPIExprWalker.condition_is_empty_return retval = new RPIExprWalker.condition_is_empty_return();
        retval.start = input.LT(1);
        int condition_is_empty_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1188=null;
        CommonTree string_literal1189=null;
        RPIExprWalker.nested_table_column_name_return nested_table_column_name1187 = null;

        RPIExprWalker.keyEMPTY_return keyEMPTY1190 = null;


        CommonTree string_literal1188_tree=null;
        CommonTree string_literal1189_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 218) ) { return retval; }
            // RPIExprWalker.g:1538:5: ( nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY )
            // RPIExprWalker.g:1538:9: nested_table_column_name 'IS' ( 'NOT' )? keyEMPTY
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_table_column_name_in_condition_is_empty12761);
            nested_table_column_name1187=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_table_column_name1187.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1188=(CommonTree)match(input,111,FOLLOW_111_in_condition_is_empty12763); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1188_tree = (CommonTree)adaptor.dupNode(string_literal1188);

            adaptor.addChild(root_0, string_literal1188_tree);
            }
            // RPIExprWalker.g:1538:39: ( 'NOT' )?
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==NOT) ) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    // RPIExprWalker.g:1538:41: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1189=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_is_empty12767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1189_tree = (CommonTree)adaptor.dupNode(string_literal1189);

                    adaptor.addChild(root_0, string_literal1189_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyEMPTY_in_condition_is_empty12772);
            keyEMPTY1190=keyEMPTY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyEMPTY1190.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 218, condition_is_empty_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_empty"

    public static class condition_is_of_type_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_of_type"
    // RPIExprWalker.g:1540:1: condition_is_of_type : sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN ;
    public final RPIExprWalker.condition_is_of_type_return condition_is_of_type() throws RecognitionException {
        RPIExprWalker.condition_is_of_type_return retval = new RPIExprWalker.condition_is_of_type_return();
        retval.start = input.LT(1);
        int condition_is_of_type_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1192=null;
        CommonTree string_literal1193=null;
        CommonTree string_literal1194=null;
        CommonTree LPAREN1196=null;
        CommonTree RPAREN1198=null;
        RPIExprWalker.sql_expression_return sql_expression1191 = null;

        RPIExprWalker.keyTYPE_return keyTYPE1195 = null;

        RPIExprWalker.type_name_return type_name1197 = null;


        CommonTree string_literal1192_tree=null;
        CommonTree string_literal1193_tree=null;
        CommonTree string_literal1194_tree=null;
        CommonTree LPAREN1196_tree=null;
        CommonTree RPAREN1198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 219) ) { return retval; }
            // RPIExprWalker.g:1541:5: ( sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN )
            // RPIExprWalker.g:1541:9: sql_expression 'IS' ( 'NOT' )? 'OF' ( keyTYPE )? LPAREN type_name RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_is_of_type12790);
            sql_expression1191=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1191.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1192=(CommonTree)match(input,111,FOLLOW_111_in_condition_is_of_type12792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1192_tree = (CommonTree)adaptor.dupNode(string_literal1192);

            adaptor.addChild(root_0, string_literal1192_tree);
            }
            // RPIExprWalker.g:1541:29: ( 'NOT' )?
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==NOT) ) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    // RPIExprWalker.g:1541:31: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1193=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_is_of_type12796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1193_tree = (CommonTree)adaptor.dupNode(string_literal1193);

                    adaptor.addChild(root_0, string_literal1193_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal1194=(CommonTree)match(input,164,FOLLOW_164_in_condition_is_of_type12801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1194_tree = (CommonTree)adaptor.dupNode(string_literal1194);

            adaptor.addChild(root_0, string_literal1194_tree);
            }
            // RPIExprWalker.g:1541:45: ( keyTYPE )?
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==ID) ) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    // RPIExprWalker.g:1541:47: keyTYPE
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyTYPE_in_condition_is_of_type12805);
                    keyTYPE1195=keyTYPE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyTYPE1195.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            LPAREN1196=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_is_of_type12810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1196_tree = (CommonTree)adaptor.dupNode(LPAREN1196);

            adaptor.addChild(root_0, LPAREN1196_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_name_in_condition_is_of_type12812);
            type_name1197=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_name1197.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1198=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_is_of_type12814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1198_tree = (CommonTree)adaptor.dupNode(RPAREN1198);

            adaptor.addChild(root_0, RPAREN1198_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 219, condition_is_of_type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type"

    public static class condition_is_of_type_names_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_of_type_names"
    // RPIExprWalker.g:1543:1: condition_is_of_type_names : condition_is_of_type_name ( COMMA condition_is_of_type_name )* ;
    public final RPIExprWalker.condition_is_of_type_names_return condition_is_of_type_names() throws RecognitionException {
        RPIExprWalker.condition_is_of_type_names_return retval = new RPIExprWalker.condition_is_of_type_names_return();
        retval.start = input.LT(1);
        int condition_is_of_type_names_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA1200=null;
        RPIExprWalker.condition_is_of_type_name_return condition_is_of_type_name1199 = null;

        RPIExprWalker.condition_is_of_type_name_return condition_is_of_type_name1201 = null;


        CommonTree COMMA1200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 220) ) { return retval; }
            // RPIExprWalker.g:1544:5: ( condition_is_of_type_name ( COMMA condition_is_of_type_name )* )
            // RPIExprWalker.g:1544:9: condition_is_of_type_name ( COMMA condition_is_of_type_name )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12832);
            condition_is_of_type_name1199=condition_is_of_type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, condition_is_of_type_name1199.getTree());
            // RPIExprWalker.g:1544:35: ( COMMA condition_is_of_type_name )*
            loop326:
            do {
                int alt326=2;
                int LA326_0 = input.LA(1);

                if ( (LA326_0==COMMA) ) {
                    alt326=1;
                }


                switch (alt326) {
            	case 1 :
            	    // RPIExprWalker.g:1544:37: COMMA condition_is_of_type_name
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1200=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_condition_is_of_type_names12836); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1200_tree = (CommonTree)adaptor.dupNode(COMMA1200);

            	    adaptor.addChild(root_0, COMMA1200_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12838);
            	    condition_is_of_type_name1201=condition_is_of_type_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, condition_is_of_type_name1201.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop326;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 220, condition_is_of_type_names_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_names"

    public static class condition_is_of_type_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_of_type_name"
    // RPIExprWalker.g:1546:1: condition_is_of_type_name : ( keyONLY )? type_name ;
    public final RPIExprWalker.condition_is_of_type_name_return condition_is_of_type_name() throws RecognitionException {
        RPIExprWalker.condition_is_of_type_name_return retval = new RPIExprWalker.condition_is_of_type_name_return();
        retval.start = input.LT(1);
        int condition_is_of_type_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyONLY_return keyONLY1202 = null;

        RPIExprWalker.type_name_return type_name1203 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 221) ) { return retval; }
            // RPIExprWalker.g:1547:5: ( ( keyONLY )? type_name )
            // RPIExprWalker.g:1547:9: ( keyONLY )? type_name
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1547:9: ( keyONLY )?
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( (LA327_0==ID) ) {
                int LA327_1 = input.LA(2);

                if ( (LA327_1==ID||LA327_1==DOUBLEQUOTED_STRING) ) {
                    alt327=1;
                }
            }
            switch (alt327) {
                case 1 :
                    // RPIExprWalker.g:1547:11: keyONLY
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyONLY_in_condition_is_of_type_name12861);
                    keyONLY1202=keyONLY();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyONLY1202.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_type_name_in_condition_is_of_type_name12866);
            type_name1203=type_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, type_name1203.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 221, condition_is_of_type_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_of_type_name"

    public static class condition_is_present_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_is_present"
    // RPIExprWalker.g:1549:1: condition_is_present : cell_reference 'IS' keyPRESENT ;
    public final RPIExprWalker.condition_is_present_return condition_is_present() throws RecognitionException {
        RPIExprWalker.condition_is_present_return retval = new RPIExprWalker.condition_is_present_return();
        retval.start = input.LT(1);
        int condition_is_present_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1205=null;
        RPIExprWalker.cell_reference_return cell_reference1204 = null;

        RPIExprWalker.keyPRESENT_return keyPRESENT1206 = null;


        CommonTree string_literal1205_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 222) ) { return retval; }
            // RPIExprWalker.g:1550:5: ( cell_reference 'IS' keyPRESENT )
            // RPIExprWalker.g:1550:9: cell_reference 'IS' keyPRESENT
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cell_reference_in_condition_is_present12884);
            cell_reference1204=cell_reference();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cell_reference1204.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1205=(CommonTree)match(input,111,FOLLOW_111_in_condition_is_present12886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1205_tree = (CommonTree)adaptor.dupNode(string_literal1205);

            adaptor.addChild(root_0, string_literal1205_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyPRESENT_in_condition_is_present12888);
            keyPRESENT1206=keyPRESENT();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyPRESENT1206.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 222, condition_is_present_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_is_present"

    public static class condition_like_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_like"
    // RPIExprWalker.g:1552:1: condition_like : sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? ;
    public final RPIExprWalker.condition_like_return condition_like() throws RecognitionException {
        RPIExprWalker.condition_like_return retval = new RPIExprWalker.condition_like_return();
        retval.start = input.LT(1);
        int condition_like_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1208=null;
        CommonTree string_literal1209=null;
        RPIExprWalker.sql_expression_return sql_expression1207 = null;

        RPIExprWalker.keyLIKEC_return keyLIKEC1210 = null;

        RPIExprWalker.keyLIKE2_return keyLIKE21211 = null;

        RPIExprWalker.keyLIKE4_return keyLIKE41212 = null;

        RPIExprWalker.sql_expression_return sql_expression1213 = null;

        RPIExprWalker.keyESCAPE_return keyESCAPE1214 = null;

        RPIExprWalker.sql_expression_return sql_expression1215 = null;


        CommonTree string_literal1208_tree=null;
        CommonTree string_literal1209_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 223) ) { return retval; }
            // RPIExprWalker.g:1553:5: ( sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )? )
            // RPIExprWalker.g:1553:9: sql_expression ( 'NOT' )? ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 ) sql_expression ( keyESCAPE sql_expression )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_like12906);
            sql_expression1207=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1207.getTree());
            // RPIExprWalker.g:1553:24: ( 'NOT' )?
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( (LA328_0==NOT) ) {
                alt328=1;
            }
            switch (alt328) {
                case 1 :
                    // RPIExprWalker.g:1553:26: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1208=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_like12910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1208_tree = (CommonTree)adaptor.dupNode(string_literal1208);

                    adaptor.addChild(root_0, string_literal1208_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1553:35: ( 'LIKE' | keyLIKEC | keyLIKE2 | keyLIKE4 )
            int alt329=4;
            int LA329_0 = input.LA(1);

            if ( (LA329_0==192) ) {
                alt329=1;
            }
            else if ( (LA329_0==ID) ) {
                int LA329_2 = input.LA(2);

                if ( ((synpred537_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LIKEC")))) ) {
                    alt329=2;
                }
                else if ( ((synpred538_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LIKE2")))) ) {
                    alt329=3;
                }
                else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LIKE4"))) ) {
                    alt329=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 329, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 329, 0, input);

                throw nvae;
            }
            switch (alt329) {
                case 1 :
                    // RPIExprWalker.g:1553:37: 'LIKE'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1209=(CommonTree)match(input,192,FOLLOW_192_in_condition_like12917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1209_tree = (CommonTree)adaptor.dupNode(string_literal1209);

                    adaptor.addChild(root_0, string_literal1209_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1553:46: keyLIKEC
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyLIKEC_in_condition_like12921);
                    keyLIKEC1210=keyLIKEC();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyLIKEC1210.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1553:57: keyLIKE2
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyLIKE2_in_condition_like12925);
                    keyLIKE21211=keyLIKE2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyLIKE21211.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:1553:68: keyLIKE4
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyLIKE4_in_condition_like12929);
                    keyLIKE41212=keyLIKE4();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyLIKE41212.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_like12933);
            sql_expression1213=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1213.getTree());
            // RPIExprWalker.g:1553:94: ( keyESCAPE sql_expression )?
            int alt330=2;
            int LA330_0 = input.LA(1);

            if ( (LA330_0==ID) ) {
                int LA330_1 = input.LA(2);

                if ( ((synpred539_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ESCAPE")))) ) {
                    alt330=1;
                }
            }
            switch (alt330) {
                case 1 :
                    // RPIExprWalker.g:1553:96: keyESCAPE sql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyESCAPE_in_condition_like12937);
                    keyESCAPE1214=keyESCAPE();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyESCAPE1214.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_condition_like12939);
                    sql_expression1215=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1215.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 223, condition_like_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_like"

    public static class condition_memeber_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_memeber"
    // RPIExprWalker.g:1555:1: condition_memeber : sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name ;
    public final RPIExprWalker.condition_memeber_return condition_memeber() throws RecognitionException {
        RPIExprWalker.condition_memeber_return retval = new RPIExprWalker.condition_memeber_return();
        retval.start = input.LT(1);
        int condition_memeber_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1217=null;
        CommonTree string_literal1219=null;
        RPIExprWalker.sql_expression_return sql_expression1216 = null;

        RPIExprWalker.keyMEMBER_return keyMEMBER1218 = null;

        RPIExprWalker.nested_table_column_name_return nested_table_column_name1220 = null;


        CommonTree string_literal1217_tree=null;
        CommonTree string_literal1219_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 224) ) { return retval; }
            // RPIExprWalker.g:1556:5: ( sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name )
            // RPIExprWalker.g:1556:9: sql_expression ( 'NOT' )? keyMEMBER ( 'OF' )? nested_table_column_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_memeber12960);
            sql_expression1216=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1216.getTree());
            // RPIExprWalker.g:1556:24: ( 'NOT' )?
            int alt331=2;
            int LA331_0 = input.LA(1);

            if ( (LA331_0==NOT) ) {
                alt331=1;
            }
            switch (alt331) {
                case 1 :
                    // RPIExprWalker.g:1556:26: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1217=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_memeber12964); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1217_tree = (CommonTree)adaptor.dupNode(string_literal1217);

                    adaptor.addChild(root_0, string_literal1217_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyMEMBER_in_condition_memeber12969);
            keyMEMBER1218=keyMEMBER();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyMEMBER1218.getTree());
            // RPIExprWalker.g:1556:45: ( 'OF' )?
            int alt332=2;
            int LA332_0 = input.LA(1);

            if ( (LA332_0==164) ) {
                alt332=1;
            }
            switch (alt332) {
                case 1 :
                    // RPIExprWalker.g:1556:47: 'OF'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1219=(CommonTree)match(input,164,FOLLOW_164_in_condition_memeber12973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1219_tree = (CommonTree)adaptor.dupNode(string_literal1219);

                    adaptor.addChild(root_0, string_literal1219_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_table_column_name_in_condition_memeber12978);
            nested_table_column_name1220=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_table_column_name1220.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 224, condition_memeber_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_memeber"

    public static class condition_between_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_between"
    // RPIExprWalker.g:1558:1: condition_between : sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression ;
    public final RPIExprWalker.condition_between_return condition_between() throws RecognitionException {
        RPIExprWalker.condition_between_return retval = new RPIExprWalker.condition_between_return();
        retval.start = input.LT(1);
        int condition_between_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1222=null;
        CommonTree string_literal1223=null;
        CommonTree string_literal1225=null;
        RPIExprWalker.sql_expression_return sql_expression1221 = null;

        RPIExprWalker.sql_expression_return sql_expression1224 = null;

        RPIExprWalker.sql_expression_return sql_expression1226 = null;


        CommonTree string_literal1222_tree=null;
        CommonTree string_literal1223_tree=null;
        CommonTree string_literal1225_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 225) ) { return retval; }
            // RPIExprWalker.g:1559:5: ( sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression )
            // RPIExprWalker.g:1559:9: sql_expression ( 'NOT' )? 'BETWEEN' sql_expression 'AND' sql_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_between12996);
            sql_expression1221=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1221.getTree());
            // RPIExprWalker.g:1559:24: ( 'NOT' )?
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==NOT) ) {
                alt333=1;
            }
            switch (alt333) {
                case 1 :
                    // RPIExprWalker.g:1559:26: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1222=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_between13000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1222_tree = (CommonTree)adaptor.dupNode(string_literal1222);

                    adaptor.addChild(root_0, string_literal1222_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal1223=(CommonTree)match(input,196,FOLLOW_196_in_condition_between13005); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1223_tree = (CommonTree)adaptor.dupNode(string_literal1223);

            adaptor.addChild(root_0, string_literal1223_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_between13007);
            sql_expression1224=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1224.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1225=(CommonTree)match(input,AND,FOLLOW_AND_in_condition_between13009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1225_tree = (CommonTree)adaptor.dupNode(string_literal1225);

            adaptor.addChild(root_0, string_literal1225_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_condition_between13011);
            sql_expression1226=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1226.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 225, condition_between_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_between"

    public static class condition_regexp_like_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_regexp_like"
    // RPIExprWalker.g:1561:1: condition_regexp_like : keyREGEXP_LIKE LPAREN call_parameters RPAREN ;
    public final RPIExprWalker.condition_regexp_like_return condition_regexp_like() throws RecognitionException {
        RPIExprWalker.condition_regexp_like_return retval = new RPIExprWalker.condition_regexp_like_return();
        retval.start = input.LT(1);
        int condition_regexp_like_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1228=null;
        CommonTree RPAREN1230=null;
        RPIExprWalker.keyREGEXP_LIKE_return keyREGEXP_LIKE1227 = null;

        RPIExprWalker.call_parameters_return call_parameters1229 = null;


        CommonTree LPAREN1228_tree=null;
        CommonTree RPAREN1230_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 226) ) { return retval; }
            // RPIExprWalker.g:1562:5: ( keyREGEXP_LIKE LPAREN call_parameters RPAREN )
            // RPIExprWalker.g:1562:9: keyREGEXP_LIKE LPAREN call_parameters RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like13029);
            keyREGEXP_LIKE1227=keyREGEXP_LIKE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyREGEXP_LIKE1227.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN1228=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_regexp_like13031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1228_tree = (CommonTree)adaptor.dupNode(LPAREN1228);

            adaptor.addChild(root_0, LPAREN1228_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_call_parameters_in_condition_regexp_like13033);
            call_parameters1229=call_parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, call_parameters1229.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1230=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_regexp_like13035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1230_tree = (CommonTree)adaptor.dupNode(RPAREN1230);

            adaptor.addChild(root_0, RPAREN1230_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 226, condition_regexp_like_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_regexp_like"

    public static class condition_submultiset_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_submultiset"
    // RPIExprWalker.g:1564:1: condition_submultiset : nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name ;
    public final RPIExprWalker.condition_submultiset_return condition_submultiset() throws RecognitionException {
        RPIExprWalker.condition_submultiset_return retval = new RPIExprWalker.condition_submultiset_return();
        retval.start = input.LT(1);
        int condition_submultiset_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1232=null;
        CommonTree string_literal1234=null;
        RPIExprWalker.nested_table_column_name_return nested_table_column_name1231 = null;

        RPIExprWalker.keySUBMULTISET_return keySUBMULTISET1233 = null;

        RPIExprWalker.nested_table_column_name_return nested_table_column_name1235 = null;


        CommonTree string_literal1232_tree=null;
        CommonTree string_literal1234_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 227) ) { return retval; }
            // RPIExprWalker.g:1565:5: ( nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name )
            // RPIExprWalker.g:1565:9: nested_table_column_name ( 'NOT' )? keySUBMULTISET ( 'OF' )? nested_table_column_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset13053);
            nested_table_column_name1231=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_table_column_name1231.getTree());
            // RPIExprWalker.g:1565:34: ( 'NOT' )?
            int alt334=2;
            int LA334_0 = input.LA(1);

            if ( (LA334_0==NOT) ) {
                alt334=1;
            }
            switch (alt334) {
                case 1 :
                    // RPIExprWalker.g:1565:36: 'NOT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1232=(CommonTree)match(input,NOT,FOLLOW_NOT_in_condition_submultiset13057); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1232_tree = (CommonTree)adaptor.dupNode(string_literal1232);

                    adaptor.addChild(root_0, string_literal1232_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keySUBMULTISET_in_condition_submultiset13062);
            keySUBMULTISET1233=keySUBMULTISET();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keySUBMULTISET1233.getTree());
            // RPIExprWalker.g:1565:60: ( 'OF' )?
            int alt335=2;
            int LA335_0 = input.LA(1);

            if ( (LA335_0==164) ) {
                alt335=1;
            }
            switch (alt335) {
                case 1 :
                    // RPIExprWalker.g:1565:62: 'OF'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1234=(CommonTree)match(input,164,FOLLOW_164_in_condition_submultiset13066); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1234_tree = (CommonTree)adaptor.dupNode(string_literal1234);

                    adaptor.addChild(root_0, string_literal1234_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_table_column_name_in_condition_submultiset13071);
            nested_table_column_name1235=nested_table_column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_table_column_name1235.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 227, condition_submultiset_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_submultiset"

    public static class condition_equals_path_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_equals_path"
    // RPIExprWalker.g:1567:1: condition_equals_path : keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final RPIExprWalker.condition_equals_path_return condition_equals_path() throws RecognitionException {
        RPIExprWalker.condition_equals_path_return retval = new RPIExprWalker.condition_equals_path_return();
        retval.start = input.LT(1);
        int condition_equals_path_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1237=null;
        CommonTree COMMA1239=null;
        CommonTree COMMA1241=null;
        CommonTree RPAREN1243=null;
        RPIExprWalker.keyEQUALS_PATH_return keyEQUALS_PATH1236 = null;

        RPIExprWalker.column_name_return column_name1238 = null;

        RPIExprWalker.path_string_return path_string1240 = null;

        RPIExprWalker.correlation_integer_return correlation_integer1242 = null;


        CommonTree LPAREN1237_tree=null;
        CommonTree COMMA1239_tree=null;
        CommonTree COMMA1241_tree=null;
        CommonTree RPAREN1243_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 228) ) { return retval; }
            // RPIExprWalker.g:1568:5: ( keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // RPIExprWalker.g:1568:9: keyEQUALS_PATH LPAREN column_name COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyEQUALS_PATH_in_condition_equals_path13089);
            keyEQUALS_PATH1236=keyEQUALS_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyEQUALS_PATH1236.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN1237=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_equals_path13091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1237_tree = (CommonTree)adaptor.dupNode(LPAREN1237);

            adaptor.addChild(root_0, LPAREN1237_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_name_in_condition_equals_path13093);
            column_name1238=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_name1238.getTree());
            _last = (CommonTree)input.LT(1);
            COMMA1239=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path13095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1239_tree = (CommonTree)adaptor.dupNode(COMMA1239);

            adaptor.addChild(root_0, COMMA1239_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_path_string_in_condition_equals_path13097);
            path_string1240=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, path_string1240.getTree());
            // RPIExprWalker.g:1568:61: ( COMMA correlation_integer )?
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==COMMA) ) {
                alt336=1;
            }
            switch (alt336) {
                case 1 :
                    // RPIExprWalker.g:1568:63: COMMA correlation_integer
                    {
                    _last = (CommonTree)input.LT(1);
                    COMMA1241=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_condition_equals_path13101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1241_tree = (CommonTree)adaptor.dupNode(COMMA1241);

                    adaptor.addChild(root_0, COMMA1241_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_correlation_integer_in_condition_equals_path13103);
                    correlation_integer1242=correlation_integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, correlation_integer1242.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            RPAREN1243=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_equals_path13108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1243_tree = (CommonTree)adaptor.dupNode(RPAREN1243);

            adaptor.addChild(root_0, RPAREN1243_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 228, condition_equals_path_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_equals_path"

    public static class condition_under_path_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "condition_under_path"
    // RPIExprWalker.g:1570:1: condition_under_path : keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN ;
    public final RPIExprWalker.condition_under_path_return condition_under_path() throws RecognitionException {
        RPIExprWalker.condition_under_path_return retval = new RPIExprWalker.condition_under_path_return();
        retval.start = input.LT(1);
        int condition_under_path_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1245=null;
        CommonTree COMMA1247=null;
        CommonTree COMMA1249=null;
        CommonTree COMMA1251=null;
        CommonTree RPAREN1253=null;
        RPIExprWalker.keyUNDER_PATH_return keyUNDER_PATH1244 = null;

        RPIExprWalker.column_name_return column_name1246 = null;

        RPIExprWalker.levels_return levels1248 = null;

        RPIExprWalker.path_string_return path_string1250 = null;

        RPIExprWalker.correlation_integer_return correlation_integer1252 = null;


        CommonTree LPAREN1245_tree=null;
        CommonTree COMMA1247_tree=null;
        CommonTree COMMA1249_tree=null;
        CommonTree COMMA1251_tree=null;
        CommonTree RPAREN1253_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 229) ) { return retval; }
            // RPIExprWalker.g:1571:5: ( keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN )
            // RPIExprWalker.g:1571:9: keyUNDER_PATH LPAREN column_name ( COMMA levels )? COMMA path_string ( COMMA correlation_integer )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyUNDER_PATH_in_condition_under_path13126);
            keyUNDER_PATH1244=keyUNDER_PATH();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyUNDER_PATH1244.getTree());
            _last = (CommonTree)input.LT(1);
            LPAREN1245=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_condition_under_path13128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1245_tree = (CommonTree)adaptor.dupNode(LPAREN1245);

            adaptor.addChild(root_0, LPAREN1245_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_name_in_condition_under_path13130);
            column_name1246=column_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_name1246.getTree());
            // RPIExprWalker.g:1571:42: ( COMMA levels )?
            int alt337=2;
            int LA337_0 = input.LA(1);

            if ( (LA337_0==COMMA) ) {
                int LA337_1 = input.LA(2);

                if ( (LA337_1==NUMBER) ) {
                    alt337=1;
                }
            }
            switch (alt337) {
                case 1 :
                    // RPIExprWalker.g:1571:44: COMMA levels
                    {
                    _last = (CommonTree)input.LT(1);
                    COMMA1247=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path13134); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1247_tree = (CommonTree)adaptor.dupNode(COMMA1247);

                    adaptor.addChild(root_0, COMMA1247_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_levels_in_condition_under_path13136);
                    levels1248=levels();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, levels1248.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            COMMA1249=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path13141); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA1249_tree = (CommonTree)adaptor.dupNode(COMMA1249);

            adaptor.addChild(root_0, COMMA1249_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_path_string_in_condition_under_path13143);
            path_string1250=path_string();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, path_string1250.getTree());
            // RPIExprWalker.g:1571:78: ( COMMA correlation_integer )?
            int alt338=2;
            int LA338_0 = input.LA(1);

            if ( (LA338_0==COMMA) ) {
                alt338=1;
            }
            switch (alt338) {
                case 1 :
                    // RPIExprWalker.g:1571:80: COMMA correlation_integer
                    {
                    _last = (CommonTree)input.LT(1);
                    COMMA1251=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_condition_under_path13147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA1251_tree = (CommonTree)adaptor.dupNode(COMMA1251);

                    adaptor.addChild(root_0, COMMA1251_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_correlation_integer_in_condition_under_path13149);
                    correlation_integer1252=correlation_integer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, correlation_integer1252.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            RPAREN1253=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_condition_under_path13154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1253_tree = (CommonTree)adaptor.dupNode(RPAREN1253);

            adaptor.addChild(root_0, RPAREN1253_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 229, condition_under_path_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "condition_under_path"

    public static class levels_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "levels"
    // RPIExprWalker.g:1573:1: levels : integer ;
    public final RPIExprWalker.levels_return levels() throws RecognitionException {
        RPIExprWalker.levels_return retval = new RPIExprWalker.levels_return();
        retval.start = input.LT(1);
        int levels_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.integer_return integer1254 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 230) ) { return retval; }
            // RPIExprWalker.g:1574:5: ( integer )
            // RPIExprWalker.g:1574:9: integer
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_in_levels13172);
            integer1254=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer1254.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 230, levels_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "levels"

    public static class correlation_integer_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "correlation_integer"
    // RPIExprWalker.g:1576:1: correlation_integer : integer ;
    public final RPIExprWalker.correlation_integer_return correlation_integer() throws RecognitionException {
        RPIExprWalker.correlation_integer_return retval = new RPIExprWalker.correlation_integer_return();
        retval.start = input.LT(1);
        int correlation_integer_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.integer_return integer1255 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 231) ) { return retval; }
            // RPIExprWalker.g:1577:5: ( integer )
            // RPIExprWalker.g:1577:9: integer
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_integer_in_correlation_integer13190);
            integer1255=integer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, integer1255.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 231, correlation_integer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "correlation_integer"

    public static class path_string_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path_string"
    // RPIExprWalker.g:1579:1: path_string : QUOTED_STRING ;
    public final RPIExprWalker.path_string_return path_string() throws RecognitionException {
        RPIExprWalker.path_string_return retval = new RPIExprWalker.path_string_return();
        retval.start = input.LT(1);
        int path_string_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTED_STRING1256=null;

        CommonTree QUOTED_STRING1256_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 232) ) { return retval; }
            // RPIExprWalker.g:1580:5: ( QUOTED_STRING )
            // RPIExprWalker.g:1580:9: QUOTED_STRING
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            QUOTED_STRING1256=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_path_string13208); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1256_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING1256);

            adaptor.addChild(root_0, QUOTED_STRING1256_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 232, path_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "path_string"

    public static class grouping_expression_list_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "grouping_expression_list"
    // RPIExprWalker.g:1582:1: grouping_expression_list returns [StringBuffer value] : e1= expression_list ( COMMA e2= expression_list )* ;
    public final RPIExprWalker.grouping_expression_list_return grouping_expression_list() throws RecognitionException {
        RPIExprWalker.grouping_expression_list_return retval = new RPIExprWalker.grouping_expression_list_return();
        retval.start = input.LT(1);
        int grouping_expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA1257=null;
        RPIExprWalker.expression_list_return e1 = null;

        RPIExprWalker.expression_list_return e2 = null;


        CommonTree COMMA1257_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 233) ) { return retval; }
            // RPIExprWalker.g:1583:5: (e1= expression_list ( COMMA e2= expression_list )* )
            // RPIExprWalker.g:1583:9: e1= expression_list ( COMMA e2= expression_list )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_expression_list_in_grouping_expression_list13232);
            e1=expression_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, e1.getTree());
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (e1!=null?e1.value:null).toString().trim());
            }
            // RPIExprWalker.g:1584:9: ( COMMA e2= expression_list )*
            loop339:
            do {
                int alt339=2;
                int LA339_0 = input.LA(1);

                if ( (LA339_0==COMMA) ) {
                    int LA339_1 = input.LA(2);

                    if ( (synpred548_RPIExprWalker()) ) {
                        alt339=1;
                    }


                }


                switch (alt339) {
            	case 1 :
            	    // RPIExprWalker.g:1584:11: COMMA e2= expression_list
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1257=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_grouping_expression_list13247); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1257_tree = (CommonTree)adaptor.dupNode(COMMA1257);

            	    adaptor.addChild(root_0, COMMA1257_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_expression_list_in_grouping_expression_list13251);
            	    e2=expression_list();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, e2.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.value.append(", " + (e2!=null?e2.value:null).toString().trim());
            	    }

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop339;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 233, grouping_expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "grouping_expression_list"

    public static class expression_list_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression_list"
    // RPIExprWalker.g:1586:1: expression_list returns [StringBuffer value] : ( LPAREN s1= sql_expressions RPAREN | s2= sql_expressions );
    public final RPIExprWalker.expression_list_return expression_list() throws RecognitionException {
        RPIExprWalker.expression_list_return retval = new RPIExprWalker.expression_list_return();
        retval.start = input.LT(1);
        int expression_list_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1258=null;
        CommonTree RPAREN1259=null;
        RPIExprWalker.sql_expressions_return s1 = null;

        RPIExprWalker.sql_expressions_return s2 = null;


        CommonTree LPAREN1258_tree=null;
        CommonTree RPAREN1259_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 234) ) { return retval; }
            // RPIExprWalker.g:1587:5: ( LPAREN s1= sql_expressions RPAREN | s2= sql_expressions )
            int alt340=2;
            int LA340_0 = input.LA(1);

            if ( (LA340_0==LPAREN) ) {
                int LA340_1 = input.LA(2);

                if ( (synpred549_RPIExprWalker()) ) {
                    alt340=1;
                }
                else if ( (true) ) {
                    alt340=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 340, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA340_0>=SUBSTR && LA340_0<=TO_CHAR)||LA340_0==TRIM||LA340_0==ID||(LA340_0>=SQL && LA340_0<=MINUS)||LA340_0==NUMBER||LA340_0==QUOTED_STRING||LA340_0==DOUBLEQUOTED_STRING||LA340_0==116||LA340_0==158||(LA340_0>=168 && LA340_0<=169)||(LA340_0>=174 && LA340_0<=175)||LA340_0==198) ) {
                alt340=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 340, 0, input);

                throw nvae;
            }
            switch (alt340) {
                case 1 :
                    // RPIExprWalker.g:1587:9: LPAREN s1= sql_expressions RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    LPAREN1258=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_expression_list13277); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1258_tree = (CommonTree)adaptor.dupNode(LPAREN1258);

                    adaptor.addChild(root_0, LPAREN1258_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expressions_in_expression_list13281);
                    s1=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, s1.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1259=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_expression_list13283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1259_tree = (CommonTree)adaptor.dupNode(RPAREN1259);

                    adaptor.addChild(root_0, RPAREN1259_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" (" + (s1!=null?s1.value:null).toString().trim() + " )");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1588:9: s2= sql_expressions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expressions_in_expression_list13297);
                    s2=sql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, s2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (s2!=null?s2.value:null).toString().trim() + " ");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 234, expression_list_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression_list"

    public static class cell_reference_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "cell_reference"
    // RPIExprWalker.g:1590:1: cell_reference : sql_identifier ;
    public final RPIExprWalker.cell_reference_return cell_reference() throws RecognitionException {
        RPIExprWalker.cell_reference_return retval = new RPIExprWalker.cell_reference_return();
        retval.start = input.LT(1);
        int cell_reference_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_identifier_return sql_identifier1260 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 235) ) { return retval; }
            // RPIExprWalker.g:1591:5: ( sql_identifier )
            // RPIExprWalker.g:1591:9: sql_identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_identifier_in_cell_reference13317);
            sql_identifier1260=sql_identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_identifier1260.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 235, cell_reference_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "cell_reference"

    public static class call_parameters_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_parameters"
    // RPIExprWalker.g:1593:1: call_parameters : call_parameter ( COMMA call_parameter )* ;
    public final RPIExprWalker.call_parameters_return call_parameters() throws RecognitionException {
        RPIExprWalker.call_parameters_return retval = new RPIExprWalker.call_parameters_return();
        retval.start = input.LT(1);
        int call_parameters_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA1262=null;
        RPIExprWalker.call_parameter_return call_parameter1261 = null;

        RPIExprWalker.call_parameter_return call_parameter1263 = null;


        CommonTree COMMA1262_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 236) ) { return retval; }
            // RPIExprWalker.g:1594:5: ( call_parameter ( COMMA call_parameter )* )
            // RPIExprWalker.g:1594:9: call_parameter ( COMMA call_parameter )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_call_parameter_in_call_parameters13335);
            call_parameter1261=call_parameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, call_parameter1261.getTree());
            // RPIExprWalker.g:1594:24: ( COMMA call_parameter )*
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);

                if ( (LA341_0==COMMA) ) {
                    alt341=1;
                }


                switch (alt341) {
            	case 1 :
            	    // RPIExprWalker.g:1594:26: COMMA call_parameter
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1262=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_call_parameters13339); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1262_tree = (CommonTree)adaptor.dupNode(COMMA1262);

            	    adaptor.addChild(root_0, COMMA1262_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_call_parameter_in_call_parameters13341);
            	    call_parameter1263=call_parameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, call_parameter1263.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 236, call_parameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_parameters"

    public static class call_parameter_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "call_parameter"
    // RPIExprWalker.g:1596:1: call_parameter : ( parameter_name ARROW )? nested_expression ;
    public final RPIExprWalker.call_parameter_return call_parameter() throws RecognitionException {
        RPIExprWalker.call_parameter_return retval = new RPIExprWalker.call_parameter_return();
        retval.start = input.LT(1);
        int call_parameter_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ARROW1265=null;
        RPIExprWalker.parameter_name_return parameter_name1264 = null;

        RPIExprWalker.nested_expression_return nested_expression1266 = null;


        CommonTree ARROW1265_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 237) ) { return retval; }
            // RPIExprWalker.g:1597:5: ( ( parameter_name ARROW )? nested_expression )
            // RPIExprWalker.g:1597:9: ( parameter_name ARROW )? nested_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1597:9: ( parameter_name ARROW )?
            int alt342=2;
            int LA342_0 = input.LA(1);

            if ( (LA342_0==ID) ) {
                int LA342_1 = input.LA(2);

                if ( (LA342_1==ARROW) ) {
                    alt342=1;
                }
            }
            else if ( (LA342_0==DOUBLEQUOTED_STRING) ) {
                int LA342_2 = input.LA(2);

                if ( (LA342_2==ARROW) ) {
                    alt342=1;
                }
            }
            switch (alt342) {
                case 1 :
                    // RPIExprWalker.g:1597:11: parameter_name ARROW
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_parameter_name_in_call_parameter13364);
                    parameter_name1264=parameter_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, parameter_name1264.getTree());
                    _last = (CommonTree)input.LT(1);
                    ARROW1265=(CommonTree)match(input,ARROW,FOLLOW_ARROW_in_call_parameter13366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ARROW1265_tree = (CommonTree)adaptor.dupNode(ARROW1265);

                    adaptor.addChild(root_0, ARROW1265_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_nested_expression_in_call_parameter13371);
            nested_expression1266=nested_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, nested_expression1266.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 237, call_parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "call_parameter"

    public static class relational_op_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relational_op"
    // RPIExprWalker.g:1600:1: relational_op : ( EQ | BOOLOP_LT | BOOLOP_GT | NOT_EQ | BOOLOP_LE | BOOLOP_GE );
    public final RPIExprWalker.relational_op_return relational_op() throws RecognitionException {
        RPIExprWalker.relational_op_return retval = new RPIExprWalker.relational_op_return();
        retval.start = input.LT(1);
        int relational_op_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree set1267=null;

        CommonTree set1267_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 238) ) { return retval; }
            // RPIExprWalker.g:1601:5: ( EQ | BOOLOP_LT | BOOLOP_GT | NOT_EQ | BOOLOP_LE | BOOLOP_GE )
            // RPIExprWalker.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            set1267=(CommonTree)input.LT(1);
            if ( input.LA(1)==EQ||(input.LA(1)>=BOOLOP_LT && input.LA(1)<=BOOLOP_LE)||input.LA(1)==NOT_EQ ) {
                input.consume();

                if ( state.backtracking==0 ) {
                set1267_tree = (CommonTree)adaptor.dupNode(set1267);

                adaptor.addChild(root_0, set1267_tree);
                }
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
            } 

            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 238, relational_op_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relational_op"

    public static class exp_set_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exp_set"
    // RPIExprWalker.g:1604:1: exp_set : ( ( sql_expression )=> sql_expression | subquery );
    public final RPIExprWalker.exp_set_return exp_set() throws RecognitionException {
        RPIExprWalker.exp_set_return retval = new RPIExprWalker.exp_set_return();
        retval.start = input.LT(1);
        int exp_set_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.sql_expression_return sql_expression1268 = null;

        RPIExprWalker.subquery_return subquery1269 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 239) ) { return retval; }
            // RPIExprWalker.g:1605:5: ( ( sql_expression )=> sql_expression | subquery )
            int alt343=2;
            int LA343_0 = input.LA(1);

            if ( (LA343_0==PLUS) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==MINUS) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==LPAREN) ) {
                int LA343_3 = input.LA(2);

                if ( (synpred557_RPIExprWalker()) ) {
                    alt343=1;
                }
                else if ( (true) ) {
                    alt343=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 343, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA343_0==ID) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==TO_CHAR) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==SUBSTR) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==TRIM) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==DOUBLEQUOTED_STRING) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==158) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==175) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==198) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==168) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==169) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==SQL) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==QUOTED_STRING) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==NUMBER) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==116) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else if ( (LA343_0==174) && (synpred557_RPIExprWalker())) {
                alt343=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 343, 0, input);

                throw nvae;
            }
            switch (alt343) {
                case 1 :
                    // RPIExprWalker.g:1605:9: ( sql_expression )=> sql_expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_exp_set13437);
                    sql_expression1268=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1268.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1606:9: subquery
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_subquery_in_exp_set13447);
                    subquery1269=subquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, subquery1269.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 239, exp_set_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exp_set"

    public static class subquery_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery"
    // RPIExprWalker.g:1609:1: subquery returns [StringBuffer value] : LPAREN select_command RPAREN ;
    public final RPIExprWalker.subquery_return subquery() throws RecognitionException {
        RPIExprWalker.subquery_return retval = new RPIExprWalker.subquery_return();
        retval.start = input.LT(1);
        int subquery_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1270=null;
        CommonTree RPAREN1272=null;
        RPIExprWalker.select_command_return select_command1271 = null;


        CommonTree LPAREN1270_tree=null;
        CommonTree RPAREN1272_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 240) ) { return retval; }
            // RPIExprWalker.g:1610:5: ( LPAREN select_command RPAREN )
            // RPIExprWalker.g:1610:9: LPAREN select_command RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            LPAREN1270=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_subquery13470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1270_tree = (CommonTree)adaptor.dupNode(LPAREN1270);

            adaptor.addChild(root_0, LPAREN1270_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_command_in_subquery13472);
            select_command1271=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_command1271.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1272=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_subquery13474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1272_tree = (CommonTree)adaptor.dupNode(RPAREN1272);

            adaptor.addChild(root_0, RPAREN1272_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" (" + (select_command1271!=null?(input.getTokenStream().toString(
                input.getTreeAdaptor().getTokenStartIndex(select_command1271.start),
                input.getTreeAdaptor().getTokenStopIndex(select_command1271.start))):null) + ")");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 240, subquery_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subquery"

    public static class connect_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "connect_clause"
    // RPIExprWalker.g:1613:1: connect_clause : ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? ;
    public final RPIExprWalker.connect_clause_return connect_clause() throws RecognitionException {
        RPIExprWalker.connect_clause_return retval = new RPIExprWalker.connect_clause_return();
        retval.start = input.LT(1);
        int connect_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1273=null;
        CommonTree string_literal1274=null;
        CommonTree string_literal1276=null;
        CommonTree string_literal1277=null;
        CommonTree string_literal1278=null;
        CommonTree string_literal1285=null;
        CommonTree string_literal1286=null;
        CommonTree string_literal1290=null;
        CommonTree string_literal1292=null;
        CommonTree string_literal1294=null;
        CommonTree string_literal1295=null;
        RPIExprWalker.sql_condition_return sql_condition1275 = null;

        RPIExprWalker.sql_expression_return sql_expression1279 = null;

        RPIExprWalker.relational_op_return relational_op1280 = null;

        RPIExprWalker.sql_expression_return sql_expression1281 = null;

        RPIExprWalker.sql_expression_return sql_expression1282 = null;

        RPIExprWalker.relational_op_return relational_op1283 = null;

        RPIExprWalker.sql_expression_return sql_expression1284 = null;

        RPIExprWalker.sql_condition_return sql_condition1287 = null;

        RPIExprWalker.sql_expression_return sql_expression1288 = null;

        RPIExprWalker.relational_op_return relational_op1289 = null;

        RPIExprWalker.sql_expression_return sql_expression1291 = null;

        RPIExprWalker.sql_condition_return sql_condition1293 = null;

        RPIExprWalker.sql_condition_return sql_condition1296 = null;


        CommonTree string_literal1273_tree=null;
        CommonTree string_literal1274_tree=null;
        CommonTree string_literal1276_tree=null;
        CommonTree string_literal1277_tree=null;
        CommonTree string_literal1278_tree=null;
        CommonTree string_literal1285_tree=null;
        CommonTree string_literal1286_tree=null;
        CommonTree string_literal1290_tree=null;
        CommonTree string_literal1292_tree=null;
        CommonTree string_literal1294_tree=null;
        CommonTree string_literal1295_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 241) ) { return retval; }
            // RPIExprWalker.g:1614:5: ( ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )? )
            // RPIExprWalker.g:1614:9: ( 'START' 'WITH' sql_condition )? 'CONNECT' 'BY' ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' ) ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? ) ( 'START' 'WITH' sql_condition )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1614:9: ( 'START' 'WITH' sql_condition )?
            int alt344=2;
            int LA344_0 = input.LA(1);

            if ( (LA344_0==186) ) {
                alt344=1;
            }
            switch (alt344) {
                case 1 :
                    // RPIExprWalker.g:1614:11: 'START' 'WITH' sql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1273=(CommonTree)match(input,186,FOLLOW_186_in_connect_clause13497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1273_tree = (CommonTree)adaptor.dupNode(string_literal1273);

                    adaptor.addChild(root_0, string_literal1273_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1274=(CommonTree)match(input,136,FOLLOW_136_in_connect_clause13499); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1274_tree = (CommonTree)adaptor.dupNode(string_literal1274);

                    adaptor.addChild(root_0, string_literal1274_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_connect_clause13501);
                    sql_condition1275=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition1275.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal1276=(CommonTree)match(input,187,FOLLOW_187_in_connect_clause13514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1276_tree = (CommonTree)adaptor.dupNode(string_literal1276);

            adaptor.addChild(root_0, string_literal1276_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal1277=(CommonTree)match(input,166,FOLLOW_166_in_connect_clause13516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1277_tree = (CommonTree)adaptor.dupNode(string_literal1277);

            adaptor.addChild(root_0, string_literal1277_tree);
            }
            // RPIExprWalker.g:1616:9: ( 'PRIOR' sql_expression relational_op sql_expression | sql_expression relational_op sql_expression 'PRIOR' )
            int alt345=2;
            int LA345_0 = input.LA(1);

            if ( (LA345_0==197) ) {
                alt345=1;
            }
            else if ( ((LA345_0>=SUBSTR && LA345_0<=TO_CHAR)||LA345_0==TRIM||(LA345_0>=ID && LA345_0<=LPAREN)||(LA345_0>=SQL && LA345_0<=MINUS)||LA345_0==NUMBER||LA345_0==QUOTED_STRING||LA345_0==DOUBLEQUOTED_STRING||LA345_0==116||LA345_0==158||(LA345_0>=168 && LA345_0<=169)||(LA345_0>=174 && LA345_0<=175)||LA345_0==198) ) {
                alt345=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 345, 0, input);

                throw nvae;
            }
            switch (alt345) {
                case 1 :
                    // RPIExprWalker.g:1616:13: 'PRIOR' sql_expression relational_op sql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1278=(CommonTree)match(input,197,FOLLOW_197_in_connect_clause13531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1278_tree = (CommonTree)adaptor.dupNode(string_literal1278);

                    adaptor.addChild(root_0, string_literal1278_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_connect_clause13533);
                    sql_expression1279=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1279.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_relational_op_in_connect_clause13535);
                    relational_op1280=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, relational_op1280.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_connect_clause13537);
                    sql_expression1281=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1281.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1617:13: sql_expression relational_op sql_expression 'PRIOR'
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_connect_clause13551);
                    sql_expression1282=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1282.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_relational_op_in_connect_clause13553);
                    relational_op1283=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, relational_op1283.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_connect_clause13555);
                    sql_expression1284=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1284.getTree());
                    _last = (CommonTree)input.LT(1);
                    string_literal1285=(CommonTree)match(input,197,FOLLOW_197_in_connect_clause13557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1285_tree = (CommonTree)adaptor.dupNode(string_literal1285);

                    adaptor.addChild(root_0, string_literal1285_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1619:9: ( ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition | sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )? )
            int alt349=2;
            int LA349_0 = input.LA(1);

            if ( (LA349_0==197) && (synpred561_RPIExprWalker())) {
                alt349=1;
            }
            else if ( (LA349_0==NOT) && (synpred561_RPIExprWalker())) {
                alt349=1;
            }
            else if ( (LA349_0==200) && (synpred561_RPIExprWalker())) {
                alt349=1;
            }
            else if ( (LA349_0==PLUS) ) {
                int LA349_4 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==MINUS) ) {
                int LA349_5 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==LPAREN) ) {
                int LA349_6 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==ID) ) {
                int LA349_7 = input.LA(2);

                if ( ((synpred561_RPIExprWalker()||(synpred561_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH")))||(synpred561_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE")))||(synpred561_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH"))))) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==TO_CHAR) ) {
                int LA349_8 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 8, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==SUBSTR) ) {
                int LA349_9 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 9, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==TRIM) ) {
                int LA349_10 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 10, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==DOUBLEQUOTED_STRING) ) {
                int LA349_11 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 11, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==158) ) {
                int LA349_12 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 12, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==175) ) {
                int LA349_13 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 13, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==198) ) {
                int LA349_14 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 14, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==168) ) {
                int LA349_15 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 15, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==169) ) {
                int LA349_16 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 16, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==SQL) ) {
                int LA349_17 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 17, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==QUOTED_STRING) ) {
                int LA349_18 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 18, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==NUMBER) ) {
                int LA349_19 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 19, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==116) ) {
                int LA349_20 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 20, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==174) ) {
                int LA349_21 = input.LA(2);

                if ( (synpred561_RPIExprWalker()) ) {
                    alt349=1;
                }
                else if ( (true) ) {
                    alt349=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 349, 21, input);

                    throw nvae;
                }
            }
            else if ( (LA349_0==202) && (synpred561_RPIExprWalker())) {
                alt349=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 349, 0, input);

                throw nvae;
            }
            switch (alt349) {
                case 1 :
                    // RPIExprWalker.g:1619:13: ( ( 'PRIOR' )? sql_condition )=> ( 'PRIOR' )? sql_condition
                    {
                    // RPIExprWalker.g:1619:47: ( 'PRIOR' )?
                    int alt346=2;
                    int LA346_0 = input.LA(1);

                    if ( (LA346_0==197) ) {
                        int LA346_1 = input.LA(2);

                        if ( (synpred562_RPIExprWalker()) ) {
                            alt346=1;
                        }
                    }
                    switch (alt346) {
                        case 1 :
                            // RPIExprWalker.g:1619:48: 'PRIOR'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1286=(CommonTree)match(input,197,FOLLOW_197_in_connect_clause13597); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1286_tree = (CommonTree)adaptor.dupNode(string_literal1286);

                            adaptor.addChild(root_0, string_literal1286_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_connect_clause13601);
                    sql_condition1287=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition1287.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1620:13: sql_expression relational_op ( 'PRIOR' )? sql_expression ( 'AND' sql_condition )?
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_connect_clause13615);
                    sql_expression1288=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1288.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_relational_op_in_connect_clause13617);
                    relational_op1289=relational_op();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, relational_op1289.getTree());
                    // RPIExprWalker.g:1620:42: ( 'PRIOR' )?
                    int alt347=2;
                    int LA347_0 = input.LA(1);

                    if ( (LA347_0==197) ) {
                        alt347=1;
                    }
                    switch (alt347) {
                        case 1 :
                            // RPIExprWalker.g:1620:44: 'PRIOR'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1290=(CommonTree)match(input,197,FOLLOW_197_in_connect_clause13621); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1290_tree = (CommonTree)adaptor.dupNode(string_literal1290);

                            adaptor.addChild(root_0, string_literal1290_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_connect_clause13626);
                    sql_expression1291=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1291.getTree());
                    // RPIExprWalker.g:1620:70: ( 'AND' sql_condition )?
                    int alt348=2;
                    int LA348_0 = input.LA(1);

                    if ( (LA348_0==AND) ) {
                        alt348=1;
                    }
                    switch (alt348) {
                        case 1 :
                            // RPIExprWalker.g:1620:72: 'AND' sql_condition
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1292=(CommonTree)match(input,AND,FOLLOW_AND_in_connect_clause13630); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1292_tree = (CommonTree)adaptor.dupNode(string_literal1292);

                            adaptor.addChild(root_0, string_literal1292_tree);
                            }
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_condition_in_connect_clause13632);
                            sql_condition1293=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_condition1293.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1622:9: ( 'START' 'WITH' sql_condition )?
            int alt350=2;
            int LA350_0 = input.LA(1);

            if ( (LA350_0==186) ) {
                alt350=1;
            }
            switch (alt350) {
                case 1 :
                    // RPIExprWalker.g:1622:11: 'START' 'WITH' sql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1294=(CommonTree)match(input,186,FOLLOW_186_in_connect_clause13657); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1294_tree = (CommonTree)adaptor.dupNode(string_literal1294);

                    adaptor.addChild(root_0, string_literal1294_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1295=(CommonTree)match(input,136,FOLLOW_136_in_connect_clause13659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1295_tree = (CommonTree)adaptor.dupNode(string_literal1295);

                    adaptor.addChild(root_0, string_literal1295_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_connect_clause13661);
                    sql_condition1296=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition1296.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 241, connect_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "connect_clause"

    public static class group_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "group_clause"
    // RPIExprWalker.g:1625:1: group_clause : 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? ;
    public final RPIExprWalker.group_clause_return group_clause() throws RecognitionException {
        RPIExprWalker.group_clause_return retval = new RPIExprWalker.group_clause_return();
        retval.start = input.LT(1);
        int group_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1297=null;
        CommonTree string_literal1298=null;
        CommonTree COMMA1300=null;
        CommonTree string_literal1302=null;
        RPIExprWalker.sql_expression_return sql_expression1299 = null;

        RPIExprWalker.sql_expression_return sql_expression1301 = null;

        RPIExprWalker.sql_condition_return sql_condition1303 = null;


        CommonTree string_literal1297_tree=null;
        CommonTree string_literal1298_tree=null;
        CommonTree COMMA1300_tree=null;
        CommonTree string_literal1302_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 242) ) { return retval; }
            // RPIExprWalker.g:1626:5: ( 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )? )
            // RPIExprWalker.g:1626:9: 'GROUP' 'BY' sql_expression ( COMMA sql_expression )* ( 'HAVING' sql_condition )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1297=(CommonTree)match(input,188,FOLLOW_188_in_group_clause13683); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1297_tree = (CommonTree)adaptor.dupNode(string_literal1297);

            adaptor.addChild(root_0, string_literal1297_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal1298=(CommonTree)match(input,166,FOLLOW_166_in_group_clause13685); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1298_tree = (CommonTree)adaptor.dupNode(string_literal1298);

            adaptor.addChild(root_0, string_literal1298_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_group_clause13687);
            sql_expression1299=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1299.getTree());
            // RPIExprWalker.g:1626:37: ( COMMA sql_expression )*
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==COMMA) ) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    // RPIExprWalker.g:1626:39: COMMA sql_expression
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1300=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_group_clause13691); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1300_tree = (CommonTree)adaptor.dupNode(COMMA1300);

            	    adaptor.addChild(root_0, COMMA1300_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_sql_expression_in_group_clause13693);
            	    sql_expression1301=sql_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, sql_expression1301.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);

            // RPIExprWalker.g:1626:63: ( 'HAVING' sql_condition )?
            int alt352=2;
            int LA352_0 = input.LA(1);

            if ( (LA352_0==180) ) {
                alt352=1;
            }
            switch (alt352) {
                case 1 :
                    // RPIExprWalker.g:1626:65: 'HAVING' sql_condition
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1302=(CommonTree)match(input,180,FOLLOW_180_in_group_clause13700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1302_tree = (CommonTree)adaptor.dupNode(string_literal1302);

                    adaptor.addChild(root_0, string_literal1302_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_condition_in_group_clause13702);
                    sql_condition1303=sql_condition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_condition1303.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 242, group_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "group_clause"

    public static class set_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_clause"
    // RPIExprWalker.g:1629:1: set_clause : ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command ;
    public final RPIExprWalker.set_clause_return set_clause() throws RecognitionException {
        RPIExprWalker.set_clause_return retval = new RPIExprWalker.set_clause_return();
        retval.start = input.LT(1);
        int set_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1304=null;
        CommonTree string_literal1305=null;
        CommonTree string_literal1306=null;
        CommonTree string_literal1307=null;
        RPIExprWalker.select_command_return select_command1308 = null;


        CommonTree string_literal1304_tree=null;
        CommonTree string_literal1305_tree=null;
        CommonTree string_literal1306_tree=null;
        CommonTree string_literal1307_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 243) ) { return retval; }
            // RPIExprWalker.g:1630:5: ( ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command )
            // RPIExprWalker.g:1630:9: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' ) select_command
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1630:9: ( ( 'UNION' 'ALL' ) | 'INTERSECT' | 'MINUS' )
            int alt353=3;
            switch ( input.LA(1) ) {
            case 181:
                {
                alt353=1;
                }
                break;
            case 182:
                {
                alt353=2;
                }
                break;
            case 183:
                {
                alt353=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 353, 0, input);

                throw nvae;
            }

            switch (alt353) {
                case 1 :
                    // RPIExprWalker.g:1630:11: ( 'UNION' 'ALL' )
                    {
                    // RPIExprWalker.g:1630:11: ( 'UNION' 'ALL' )
                    // RPIExprWalker.g:1630:13: 'UNION' 'ALL'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1304=(CommonTree)match(input,181,FOLLOW_181_in_set_clause13728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1304_tree = (CommonTree)adaptor.dupNode(string_literal1304);

                    adaptor.addChild(root_0, string_literal1304_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1305=(CommonTree)match(input,177,FOLLOW_177_in_set_clause13730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1305_tree = (CommonTree)adaptor.dupNode(string_literal1305);

                    adaptor.addChild(root_0, string_literal1305_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1630:31: 'INTERSECT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1306=(CommonTree)match(input,182,FOLLOW_182_in_set_clause13736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1306_tree = (CommonTree)adaptor.dupNode(string_literal1306);

                    adaptor.addChild(root_0, string_literal1306_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1630:45: 'MINUS'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1307=(CommonTree)match(input,183,FOLLOW_183_in_set_clause13740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1307_tree = (CommonTree)adaptor.dupNode(string_literal1307);

                    adaptor.addChild(root_0, string_literal1307_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_command_in_set_clause13744);
            select_command1308=select_command();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_command1308.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 243, set_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_clause"

    public static class order_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "order_clause"
    // RPIExprWalker.g:1633:1: order_clause : 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* ;
    public final RPIExprWalker.order_clause_return order_clause() throws RecognitionException {
        RPIExprWalker.order_clause_return retval = new RPIExprWalker.order_clause_return();
        retval.start = input.LT(1);
        int order_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1309=null;
        CommonTree string_literal1310=null;
        CommonTree COMMA1312=null;
        RPIExprWalker.sorted_def_return sorted_def1311 = null;

        RPIExprWalker.sorted_def_return sorted_def1313 = null;


        CommonTree string_literal1309_tree=null;
        CommonTree string_literal1310_tree=null;
        CommonTree COMMA1312_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 244) ) { return retval; }
            // RPIExprWalker.g:1634:5: ( 'ORDER' 'BY' sorted_def ( COMMA sorted_def )* )
            // RPIExprWalker.g:1634:9: 'ORDER' 'BY' sorted_def ( COMMA sorted_def )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1309=(CommonTree)match(input,191,FOLLOW_191_in_order_clause13764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1309_tree = (CommonTree)adaptor.dupNode(string_literal1309);

            adaptor.addChild(root_0, string_literal1309_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal1310=(CommonTree)match(input,166,FOLLOW_166_in_order_clause13766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1310_tree = (CommonTree)adaptor.dupNode(string_literal1310);

            adaptor.addChild(root_0, string_literal1310_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sorted_def_in_order_clause13768);
            sorted_def1311=sorted_def();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sorted_def1311.getTree());
            // RPIExprWalker.g:1634:33: ( COMMA sorted_def )*
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==COMMA) ) {
                    alt354=1;
                }


                switch (alt354) {
            	case 1 :
            	    // RPIExprWalker.g:1634:35: COMMA sorted_def
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1312=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_order_clause13772); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1312_tree = (CommonTree)adaptor.dupNode(COMMA1312);

            	    adaptor.addChild(root_0, COMMA1312_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_sorted_def_in_order_clause13774);
            	    sorted_def1313=sorted_def();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, sorted_def1313.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 244, order_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "order_clause"

    public static class sorted_def_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sorted_def"
    // RPIExprWalker.g:1637:1: sorted_def : ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? ;
    public final RPIExprWalker.sorted_def_return sorted_def() throws RecognitionException {
        RPIExprWalker.sorted_def_return retval = new RPIExprWalker.sorted_def_return();
        retval.start = input.LT(1);
        int sorted_def_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree NUMBER1315=null;
        CommonTree set1316=null;
        RPIExprWalker.sql_expression_return sql_expression1314 = null;


        CommonTree NUMBER1315_tree=null;
        CommonTree set1316_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 245) ) { return retval; }
            // RPIExprWalker.g:1638:5: ( ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )? )
            // RPIExprWalker.g:1638:9: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER ) ( 'ASC' | 'DESC' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1638:9: ( ( sql_expression )=> sql_expression | ( NUMBER )=> NUMBER )
            int alt355=2;
            int LA355_0 = input.LA(1);

            if ( (LA355_0==PLUS) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==MINUS) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==LPAREN) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==ID) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==TO_CHAR) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==SUBSTR) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==TRIM) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==DOUBLEQUOTED_STRING) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==158) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==175) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==198) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==168) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==169) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==SQL) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==QUOTED_STRING) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==NUMBER) ) {
                int LA355_16 = input.LA(2);

                if ( (synpred571_RPIExprWalker()) ) {
                    alt355=1;
                }
                else if ( (synpred572_RPIExprWalker()) ) {
                    alt355=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 355, 16, input);

                    throw nvae;
                }
            }
            else if ( (LA355_0==116) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else if ( (LA355_0==174) && (synpred571_RPIExprWalker())) {
                alt355=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 355, 0, input);

                throw nvae;
            }
            switch (alt355) {
                case 1 :
                    // RPIExprWalker.g:1638:11: ( sql_expression )=> sql_expression
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_sql_expression_in_sorted_def13806);
                    sql_expression1314=sql_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, sql_expression1314.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1638:50: ( NUMBER )=> NUMBER
                    {
                    _last = (CommonTree)input.LT(1);
                    NUMBER1315=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_sorted_def13818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER1315_tree = (CommonTree)adaptor.dupNode(NUMBER1315);

                    adaptor.addChild(root_0, NUMBER1315_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1638:73: ( 'ASC' | 'DESC' )?
            int alt356=2;
            int LA356_0 = input.LA(1);

            if ( ((LA356_0>=193 && LA356_0<=194)) ) {
                alt356=1;
            }
            switch (alt356) {
                case 1 :
                    // RPIExprWalker.g:
                    {
                    _last = (CommonTree)input.LT(1);
                    set1316=(CommonTree)input.LT(1);
                    if ( (input.LA(1)>=193 && input.LA(1)<=194) ) {
                        input.consume();

                        if ( state.backtracking==0 ) {
                        set1316_tree = (CommonTree)adaptor.dupNode(set1316);

                        adaptor.addChild(root_0, set1316_tree);
                        }
                        state.errorRecovery=false;state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 245, sorted_def_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sorted_def"

    public static class update_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_clause"
    // RPIExprWalker.g:1641:1: update_clause : 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? ;
    public final RPIExprWalker.update_clause_return update_clause() throws RecognitionException {
        RPIExprWalker.update_clause_return retval = new RPIExprWalker.update_clause_return();
        retval.start = input.LT(1);
        int update_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1317=null;
        CommonTree string_literal1318=null;
        CommonTree string_literal1319=null;
        CommonTree COMMA1321=null;
        CommonTree string_literal1323=null;
        RPIExprWalker.column_name_return column_name1320 = null;

        RPIExprWalker.column_name_return column_name1322 = null;


        CommonTree string_literal1317_tree=null;
        CommonTree string_literal1318_tree=null;
        CommonTree string_literal1319_tree=null;
        CommonTree COMMA1321_tree=null;
        CommonTree string_literal1323_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 246) ) { return retval; }
            // RPIExprWalker.g:1642:5: ( 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )? )
            // RPIExprWalker.g:1642:9: 'FOR' 'UPDATE' ( 'OF' column_name ( COMMA column_name )* )? ( 'NOWAIT' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1317=(CommonTree)match(input,170,FOLLOW_170_in_update_clause13850); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1317_tree = (CommonTree)adaptor.dupNode(string_literal1317);

            adaptor.addChild(root_0, string_literal1317_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal1318=(CommonTree)match(input,190,FOLLOW_190_in_update_clause13852); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1318_tree = (CommonTree)adaptor.dupNode(string_literal1318);

            adaptor.addChild(root_0, string_literal1318_tree);
            }
            // RPIExprWalker.g:1642:24: ( 'OF' column_name ( COMMA column_name )* )?
            int alt358=2;
            int LA358_0 = input.LA(1);

            if ( (LA358_0==164) ) {
                alt358=1;
            }
            switch (alt358) {
                case 1 :
                    // RPIExprWalker.g:1642:26: 'OF' column_name ( COMMA column_name )*
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1319=(CommonTree)match(input,164,FOLLOW_164_in_update_clause13856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1319_tree = (CommonTree)adaptor.dupNode(string_literal1319);

                    adaptor.addChild(root_0, string_literal1319_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_name_in_update_clause13858);
                    column_name1320=column_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_name1320.getTree());
                    // RPIExprWalker.g:1642:43: ( COMMA column_name )*
                    loop357:
                    do {
                        int alt357=2;
                        int LA357_0 = input.LA(1);

                        if ( (LA357_0==COMMA) ) {
                            alt357=1;
                        }


                        switch (alt357) {
                    	case 1 :
                    	    // RPIExprWalker.g:1642:45: COMMA column_name
                    	    {
                    	    _last = (CommonTree)input.LT(1);
                    	    COMMA1321=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_update_clause13862); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA1321_tree = (CommonTree)adaptor.dupNode(COMMA1321);

                    	    adaptor.addChild(root_0, COMMA1321_tree);
                    	    }
                    	    _last = (CommonTree)input.LT(1);
                    	    pushFollow(FOLLOW_column_name_in_update_clause13864);
                    	    column_name1322=column_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) 
                    	    adaptor.addChild(root_0, column_name1322.getTree());

                    	    if ( state.backtracking==0 ) {
                    	    }
                    	    }
                    	    break;

                    	default :
                    	    break loop357;
                        }
                    } while (true);


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1642:69: ( 'NOWAIT' )?
            int alt359=2;
            int LA359_0 = input.LA(1);

            if ( (LA359_0==195) ) {
                alt359=1;
            }
            switch (alt359) {
                case 1 :
                    // RPIExprWalker.g:1642:71: 'NOWAIT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1323=(CommonTree)match(input,195,FOLLOW_195_in_update_clause13874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1323_tree = (CommonTree)adaptor.dupNode(string_literal1323);

                    adaptor.addChild(root_0, string_literal1323_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 246, update_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_clause"

    public static class insert_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insert_command"
    // RPIExprWalker.g:1645:1: insert_command : 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? ;
    public final RPIExprWalker.insert_command_return insert_command() throws RecognitionException {
        RPIExprWalker.insert_command_return retval = new RPIExprWalker.insert_command_return();
        retval.start = input.LT(1);
        int insert_command_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1324=null;
        CommonTree string_literal1325=null;
        CommonTree LPAREN1327=null;
        CommonTree RPAREN1329=null;
        CommonTree string_literal1330=null;
        CommonTree LPAREN1331=null;
        CommonTree RPAREN1333=null;
        RPIExprWalker.table_reference_list_return table_reference_list1326 = null;

        RPIExprWalker.column_specs_return column_specs1328 = null;

        RPIExprWalker.plsql_expressions_return plsql_expressions1332 = null;

        RPIExprWalker.select_statement_return select_statement1334 = null;

        RPIExprWalker.returning_clause_return returning_clause1335 = null;


        CommonTree string_literal1324_tree=null;
        CommonTree string_literal1325_tree=null;
        CommonTree LPAREN1327_tree=null;
        CommonTree RPAREN1329_tree=null;
        CommonTree string_literal1330_tree=null;
        CommonTree LPAREN1331_tree=null;
        CommonTree RPAREN1333_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 247) ) { return retval; }
            // RPIExprWalker.g:1646:5: ( 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )? )
            // RPIExprWalker.g:1646:9: 'INSERT' 'INTO' table_reference_list ( LPAREN column_specs RPAREN )? ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement ) ( returning_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1324=(CommonTree)match(input,203,FOLLOW_203_in_insert_command13896); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1324_tree = (CommonTree)adaptor.dupNode(string_literal1324);

            adaptor.addChild(root_0, string_literal1324_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal1325=(CommonTree)match(input,178,FOLLOW_178_in_insert_command13898); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1325_tree = (CommonTree)adaptor.dupNode(string_literal1325);

            adaptor.addChild(root_0, string_literal1325_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_reference_list_in_insert_command13900);
            table_reference_list1326=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_reference_list1326.getTree());
            // RPIExprWalker.g:1647:9: ( LPAREN column_specs RPAREN )?
            int alt360=2;
            int LA360_0 = input.LA(1);

            if ( (LA360_0==LPAREN) ) {
                alt360=1;
            }
            switch (alt360) {
                case 1 :
                    // RPIExprWalker.g:1647:11: LPAREN column_specs RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN1327=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command13912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1327_tree = (CommonTree)adaptor.dupNode(LPAREN1327);

                    adaptor.addChild(root_0, LPAREN1327_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_column_specs_in_insert_command13914);
                    column_specs1328=column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, column_specs1328.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1329=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command13916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1329_tree = (CommonTree)adaptor.dupNode(RPAREN1329);

                    adaptor.addChild(root_0, RPAREN1329_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1648:9: ( 'VALUES' LPAREN plsql_expressions RPAREN | select_statement )
            int alt361=2;
            int LA361_0 = input.LA(1);

            if ( (LA361_0==204) ) {
                alt361=1;
            }
            else if ( (LA361_0==174) ) {
                alt361=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 361, 0, input);

                throw nvae;
            }
            switch (alt361) {
                case 1 :
                    // RPIExprWalker.g:1648:13: 'VALUES' LPAREN plsql_expressions RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1330=(CommonTree)match(input,204,FOLLOW_204_in_insert_command13933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1330_tree = (CommonTree)adaptor.dupNode(string_literal1330);

                    adaptor.addChild(root_0, string_literal1330_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    LPAREN1331=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_insert_command13935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1331_tree = (CommonTree)adaptor.dupNode(LPAREN1331);

                    adaptor.addChild(root_0, LPAREN1331_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expressions_in_insert_command13937);
                    plsql_expressions1332=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expressions1332.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1333=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_insert_command13939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1333_tree = (CommonTree)adaptor.dupNode(RPAREN1333);

                    adaptor.addChild(root_0, RPAREN1333_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1649:13: select_statement
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_select_statement_in_insert_command13953);
                    select_statement1334=select_statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, select_statement1334.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1651:9: ( returning_clause )?
            int alt362=2;
            int LA362_0 = input.LA(1);

            if ( ((LA362_0>=220 && LA362_0<=221)) ) {
                alt362=1;
            }
            switch (alt362) {
                case 1 :
                    // RPIExprWalker.g:1651:11: returning_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_returning_clause_in_insert_command13975);
                    returning_clause1335=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, returning_clause1335.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 247, insert_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "insert_command"

    public static class update_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_command"
    // RPIExprWalker.g:1654:1: update_command : 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final RPIExprWalker.update_command_return update_command() throws RecognitionException {
        RPIExprWalker.update_command_return retval = new RPIExprWalker.update_command_return();
        retval.start = input.LT(1);
        int update_command_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1336=null;
        CommonTree string_literal1338=null;
        CommonTree string_literal1341=null;
        RPIExprWalker.selected_table_return selected_table1337 = null;

        RPIExprWalker.update_nested_column_specs_return update_nested_column_specs1339 = null;

        RPIExprWalker.update_column_specs_return update_column_specs1340 = null;

        RPIExprWalker.keyCURRENT_OF_return keyCURRENT_OF1342 = null;

        RPIExprWalker.cursor_name_return cursor_name1343 = null;

        RPIExprWalker.sql_condition_return sql_condition1344 = null;

        RPIExprWalker.returning_clause_return returning_clause1345 = null;


        CommonTree string_literal1336_tree=null;
        CommonTree string_literal1338_tree=null;
        CommonTree string_literal1341_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 248) ) { return retval; }
            // RPIExprWalker.g:1655:5: ( 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // RPIExprWalker.g:1655:9: 'UPDATE' selected_table 'SET' ( update_nested_column_specs | update_column_specs ) ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1336=(CommonTree)match(input,190,FOLLOW_190_in_update_command13997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1336_tree = (CommonTree)adaptor.dupNode(string_literal1336);

            adaptor.addChild(root_0, string_literal1336_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_selected_table_in_update_command13999);
            selected_table1337=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, selected_table1337.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1338=(CommonTree)match(input,145,FOLLOW_145_in_update_command14009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1338_tree = (CommonTree)adaptor.dupNode(string_literal1338);

            adaptor.addChild(root_0, string_literal1338_tree);
            }
            // RPIExprWalker.g:1657:9: ( update_nested_column_specs | update_column_specs )
            int alt363=2;
            int LA363_0 = input.LA(1);

            if ( (LA363_0==LPAREN) ) {
                alt363=1;
            }
            else if ( (LA363_0==ID||LA363_0==DOUBLEQUOTED_STRING||LA363_0==158) ) {
                alt363=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 363, 0, input);

                throw nvae;
            }
            switch (alt363) {
                case 1 :
                    // RPIExprWalker.g:1657:13: update_nested_column_specs
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_update_nested_column_specs_in_update_command14024);
                    update_nested_column_specs1339=update_nested_column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, update_nested_column_specs1339.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1658:13: update_column_specs
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_update_column_specs_in_update_command14038);
                    update_column_specs1340=update_column_specs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, update_column_specs1340.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1660:9: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( (LA365_0==185) ) {
                alt365=1;
            }
            switch (alt365) {
                case 1 :
                    // RPIExprWalker.g:1660:13: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1341=(CommonTree)match(input,185,FOLLOW_185_in_update_command14062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1341_tree = (CommonTree)adaptor.dupNode(string_literal1341);

                    adaptor.addChild(root_0, string_literal1341_tree);
                    }
                    // RPIExprWalker.g:1661:13: ( keyCURRENT_OF cursor_name | sql_condition )
                    int alt364=2;
                    int LA364_0 = input.LA(1);

                    if ( (LA364_0==ID) ) {
                        switch ( input.LA(2) ) {
                        case LPAREN:
                        case EQ:
                        case PLUS:
                        case MINUS:
                        case ASTERISK:
                        case DIV:
                        case NOT:
                        case BOOLOP_LT:
                        case BOOLOP_GT:
                        case BOOLOP_GE:
                        case BOOLOP_LE:
                        case DOT:
                        case DOUBLEVERTBAR:
                        case EXPONENT:
                        case NOT_EQ:
                        case 111:
                        case 160:
                        case 192:
                        case 196:
                            {
                            alt364=2;
                            }
                            break;
                        case ID:
                            {
                            int LA364_3 = input.LA(3);

                            if ( ((LA364_3>=SUBSTR && LA364_3<=TO_CHAR)||LA364_3==TRIM||(LA364_3>=ID && LA364_3<=LPAREN)||(LA364_3>=SQL && LA364_3<=MINUS)||LA364_3==NUMBER||LA364_3==QUOTED_STRING||LA364_3==DOUBLEQUOTED_STRING||LA364_3==116||LA364_3==158||LA364_3==164||(LA364_3>=168 && LA364_3<=169)||(LA364_3>=174 && LA364_3<=175)||LA364_3==198) ) {
                                alt364=2;
                            }
                            else if ( (LA364_3==EOF||LA364_3==SEMICOLON||(LA364_3>=220 && LA364_3<=221)) ) {
                                alt364=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 364, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            alt364=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 364, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA364_0>=SUBSTR && LA364_0<=TO_CHAR)||LA364_0==TRIM||LA364_0==LPAREN||(LA364_0>=SQL && LA364_0<=MINUS)||LA364_0==NUMBER||LA364_0==NOT||LA364_0==QUOTED_STRING||LA364_0==DOUBLEQUOTED_STRING||LA364_0==116||LA364_0==158||(LA364_0>=168 && LA364_0<=169)||(LA364_0>=174 && LA364_0<=175)||(LA364_0>=197 && LA364_0<=198)||LA364_0==200||LA364_0==202) ) {
                        alt364=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 364, 0, input);

                        throw nvae;
                    }
                    switch (alt364) {
                        case 1 :
                            // RPIExprWalker.g:1661:17: keyCURRENT_OF cursor_name
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyCURRENT_OF_in_update_command14080);
                            keyCURRENT_OF1342=keyCURRENT_OF();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyCURRENT_OF1342.getTree());
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_cursor_name_in_update_command14082);
                            cursor_name1343=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, cursor_name1343.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1662:17: sql_condition
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_condition_in_update_command14100);
                            sql_condition1344=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_condition1344.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1665:9: ( returning_clause )?
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( ((LA366_0>=220 && LA366_0<=221)) ) {
                alt366=1;
            }
            switch (alt366) {
                case 1 :
                    // RPIExprWalker.g:1665:11: returning_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_returning_clause_in_update_command14137);
                    returning_clause1345=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, returning_clause1345.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 248, update_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_command"

    public static class update_column_specs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_column_specs"
    // RPIExprWalker.g:1668:1: update_column_specs : update_column_spec ( COMMA update_column_spec )* ;
    public final RPIExprWalker.update_column_specs_return update_column_specs() throws RecognitionException {
        RPIExprWalker.update_column_specs_return retval = new RPIExprWalker.update_column_specs_return();
        retval.start = input.LT(1);
        int update_column_specs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA1347=null;
        RPIExprWalker.update_column_spec_return update_column_spec1346 = null;

        RPIExprWalker.update_column_spec_return update_column_spec1348 = null;


        CommonTree COMMA1347_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 249) ) { return retval; }
            // RPIExprWalker.g:1669:5: ( update_column_spec ( COMMA update_column_spec )* )
            // RPIExprWalker.g:1669:9: update_column_spec ( COMMA update_column_spec )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_update_column_spec_in_update_column_specs14159);
            update_column_spec1346=update_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, update_column_spec1346.getTree());
            // RPIExprWalker.g:1669:28: ( COMMA update_column_spec )*
            loop367:
            do {
                int alt367=2;
                int LA367_0 = input.LA(1);

                if ( (LA367_0==COMMA) ) {
                    alt367=1;
                }


                switch (alt367) {
            	case 1 :
            	    // RPIExprWalker.g:1669:30: COMMA update_column_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1347=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_update_column_specs14163); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1347_tree = (CommonTree)adaptor.dupNode(COMMA1347);

            	    adaptor.addChild(root_0, COMMA1347_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_update_column_spec_in_update_column_specs14165);
            	    update_column_spec1348=update_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, update_column_spec1348.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop367;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 249, update_column_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_column_specs"

    public static class update_column_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_column_spec"
    // RPIExprWalker.g:1672:1: update_column_spec : column_spec EQ sql_expression ;
    public final RPIExprWalker.update_column_spec_return update_column_spec() throws RecognitionException {
        RPIExprWalker.update_column_spec_return retval = new RPIExprWalker.update_column_spec_return();
        retval.start = input.LT(1);
        int update_column_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree EQ1350=null;
        RPIExprWalker.column_spec_return column_spec1349 = null;

        RPIExprWalker.sql_expression_return sql_expression1351 = null;


        CommonTree EQ1350_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 250) ) { return retval; }
            // RPIExprWalker.g:1673:5: ( column_spec EQ sql_expression )
            // RPIExprWalker.g:1673:9: column_spec EQ sql_expression
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_spec_in_update_column_spec14187);
            column_spec1349=column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_spec1349.getTree());
            _last = (CommonTree)input.LT(1);
            EQ1350=(CommonTree)match(input,EQ,FOLLOW_EQ_in_update_column_spec14189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1350_tree = (CommonTree)adaptor.dupNode(EQ1350);

            adaptor.addChild(root_0, EQ1350_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_sql_expression_in_update_column_spec14191);
            sql_expression1351=sql_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, sql_expression1351.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 250, update_column_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_column_spec"

    public static class update_nested_column_specs_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_nested_column_specs"
    // RPIExprWalker.g:1676:1: update_nested_column_specs : update_nested_column_spec ( COMMA update_nested_column_spec )* ;
    public final RPIExprWalker.update_nested_column_specs_return update_nested_column_specs() throws RecognitionException {
        RPIExprWalker.update_nested_column_specs_return retval = new RPIExprWalker.update_nested_column_specs_return();
        retval.start = input.LT(1);
        int update_nested_column_specs_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree COMMA1353=null;
        RPIExprWalker.update_nested_column_spec_return update_nested_column_spec1352 = null;

        RPIExprWalker.update_nested_column_spec_return update_nested_column_spec1354 = null;


        CommonTree COMMA1353_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 251) ) { return retval; }
            // RPIExprWalker.g:1677:5: ( update_nested_column_spec ( COMMA update_nested_column_spec )* )
            // RPIExprWalker.g:1677:9: update_nested_column_spec ( COMMA update_nested_column_spec )*
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs14210);
            update_nested_column_spec1352=update_nested_column_spec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, update_nested_column_spec1352.getTree());
            // RPIExprWalker.g:1677:35: ( COMMA update_nested_column_spec )*
            loop368:
            do {
                int alt368=2;
                int LA368_0 = input.LA(1);

                if ( (LA368_0==COMMA) ) {
                    alt368=1;
                }


                switch (alt368) {
            	case 1 :
            	    // RPIExprWalker.g:1677:37: COMMA update_nested_column_spec
            	    {
            	    _last = (CommonTree)input.LT(1);
            	    COMMA1353=(CommonTree)match(input,COMMA,FOLLOW_COMMA_in_update_nested_column_specs14214); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA1353_tree = (CommonTree)adaptor.dupNode(COMMA1353);

            	    adaptor.addChild(root_0, COMMA1353_tree);
            	    }
            	    _last = (CommonTree)input.LT(1);
            	    pushFollow(FOLLOW_update_nested_column_spec_in_update_nested_column_specs14216);
            	    update_nested_column_spec1354=update_nested_column_spec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) 
            	    adaptor.addChild(root_0, update_nested_column_spec1354.getTree());

            	    if ( state.backtracking==0 ) {
            	    }
            	    }
            	    break;

            	default :
            	    break loop368;
                }
            } while (true);


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 251, update_nested_column_specs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_nested_column_specs"

    public static class update_nested_column_spec_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "update_nested_column_spec"
    // RPIExprWalker.g:1680:1: update_nested_column_spec : LPAREN column_specs RPAREN EQ subquery ;
    public final RPIExprWalker.update_nested_column_spec_return update_nested_column_spec() throws RecognitionException {
        RPIExprWalker.update_nested_column_spec_return retval = new RPIExprWalker.update_nested_column_spec_return();
        retval.start = input.LT(1);
        int update_nested_column_spec_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1355=null;
        CommonTree RPAREN1357=null;
        CommonTree EQ1358=null;
        RPIExprWalker.column_specs_return column_specs1356 = null;

        RPIExprWalker.subquery_return subquery1359 = null;


        CommonTree LPAREN1355_tree=null;
        CommonTree RPAREN1357_tree=null;
        CommonTree EQ1358_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 252) ) { return retval; }
            // RPIExprWalker.g:1681:5: ( LPAREN column_specs RPAREN EQ subquery )
            // RPIExprWalker.g:1681:9: LPAREN column_specs RPAREN EQ subquery
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            LPAREN1355=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_update_nested_column_spec14238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN1355_tree = (CommonTree)adaptor.dupNode(LPAREN1355);

            adaptor.addChild(root_0, LPAREN1355_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_column_specs_in_update_nested_column_spec14240);
            column_specs1356=column_specs();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, column_specs1356.getTree());
            _last = (CommonTree)input.LT(1);
            RPAREN1357=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_update_nested_column_spec14242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN1357_tree = (CommonTree)adaptor.dupNode(RPAREN1357);

            adaptor.addChild(root_0, RPAREN1357_tree);
            }
            _last = (CommonTree)input.LT(1);
            EQ1358=(CommonTree)match(input,EQ,FOLLOW_EQ_in_update_nested_column_spec14244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ1358_tree = (CommonTree)adaptor.dupNode(EQ1358);

            adaptor.addChild(root_0, EQ1358_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_subquery_in_update_nested_column_spec14246);
            subquery1359=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, subquery1359.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 252, update_nested_column_spec_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "update_nested_column_spec"

    public static class delete_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "delete_command"
    // RPIExprWalker.g:1684:1: delete_command : 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? ;
    public final RPIExprWalker.delete_command_return delete_command() throws RecognitionException {
        RPIExprWalker.delete_command_return retval = new RPIExprWalker.delete_command_return();
        retval.start = input.LT(1);
        int delete_command_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1360=null;
        CommonTree string_literal1361=null;
        CommonTree string_literal1363=null;
        RPIExprWalker.selected_table_return selected_table1362 = null;

        RPIExprWalker.keyCURRENT_OF_return keyCURRENT_OF1364 = null;

        RPIExprWalker.cursor_name_return cursor_name1365 = null;

        RPIExprWalker.sql_condition_return sql_condition1366 = null;

        RPIExprWalker.returning_clause_return returning_clause1367 = null;


        CommonTree string_literal1360_tree=null;
        CommonTree string_literal1361_tree=null;
        CommonTree string_literal1363_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 253) ) { return retval; }
            // RPIExprWalker.g:1685:5: ( 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )? )
            // RPIExprWalker.g:1685:9: 'DELETE' ( 'FROM' )? selected_table ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )? ( returning_clause )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1360=(CommonTree)match(input,201,FOLLOW_201_in_delete_command14265); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1360_tree = (CommonTree)adaptor.dupNode(string_literal1360);

            adaptor.addChild(root_0, string_literal1360_tree);
            }
            // RPIExprWalker.g:1685:18: ( 'FROM' )?
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==179) ) {
                alt369=1;
            }
            switch (alt369) {
                case 1 :
                    // RPIExprWalker.g:1685:20: 'FROM'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1361=(CommonTree)match(input,179,FOLLOW_179_in_delete_command14269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1361_tree = (CommonTree)adaptor.dupNode(string_literal1361);

                    adaptor.addChild(root_0, string_literal1361_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_selected_table_in_delete_command14274);
            selected_table1362=selected_table();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, selected_table1362.getTree());
            // RPIExprWalker.g:1687:9: ( 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition ) )?
            int alt371=2;
            int LA371_0 = input.LA(1);

            if ( (LA371_0==185) ) {
                alt371=1;
            }
            switch (alt371) {
                case 1 :
                    // RPIExprWalker.g:1687:13: 'WHERE' ( keyCURRENT_OF cursor_name | sql_condition )
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1363=(CommonTree)match(input,185,FOLLOW_185_in_delete_command14289); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1363_tree = (CommonTree)adaptor.dupNode(string_literal1363);

                    adaptor.addChild(root_0, string_literal1363_tree);
                    }
                    // RPIExprWalker.g:1688:13: ( keyCURRENT_OF cursor_name | sql_condition )
                    int alt370=2;
                    int LA370_0 = input.LA(1);

                    if ( (LA370_0==ID) ) {
                        switch ( input.LA(2) ) {
                        case LPAREN:
                        case EQ:
                        case PLUS:
                        case MINUS:
                        case ASTERISK:
                        case DIV:
                        case NOT:
                        case BOOLOP_LT:
                        case BOOLOP_GT:
                        case BOOLOP_GE:
                        case BOOLOP_LE:
                        case DOT:
                        case DOUBLEVERTBAR:
                        case EXPONENT:
                        case NOT_EQ:
                        case 111:
                        case 160:
                        case 192:
                        case 196:
                            {
                            alt370=2;
                            }
                            break;
                        case ID:
                            {
                            int LA370_3 = input.LA(3);

                            if ( ((LA370_3>=SUBSTR && LA370_3<=TO_CHAR)||LA370_3==TRIM||(LA370_3>=ID && LA370_3<=LPAREN)||(LA370_3>=SQL && LA370_3<=MINUS)||LA370_3==NUMBER||LA370_3==QUOTED_STRING||LA370_3==DOUBLEQUOTED_STRING||LA370_3==116||LA370_3==158||LA370_3==164||(LA370_3>=168 && LA370_3<=169)||(LA370_3>=174 && LA370_3<=175)||LA370_3==198) ) {
                                alt370=2;
                            }
                            else if ( (LA370_3==EOF||LA370_3==SEMICOLON||(LA370_3>=220 && LA370_3<=221)) ) {
                                alt370=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 370, 3, input);

                                throw nvae;
                            }
                            }
                            break;
                        case DOUBLEQUOTED_STRING:
                            {
                            alt370=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 370, 1, input);

                            throw nvae;
                        }

                    }
                    else if ( ((LA370_0>=SUBSTR && LA370_0<=TO_CHAR)||LA370_0==TRIM||LA370_0==LPAREN||(LA370_0>=SQL && LA370_0<=MINUS)||LA370_0==NUMBER||LA370_0==NOT||LA370_0==QUOTED_STRING||LA370_0==DOUBLEQUOTED_STRING||LA370_0==116||LA370_0==158||(LA370_0>=168 && LA370_0<=169)||(LA370_0>=174 && LA370_0<=175)||(LA370_0>=197 && LA370_0<=198)||LA370_0==200||LA370_0==202) ) {
                        alt370=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 370, 0, input);

                        throw nvae;
                    }
                    switch (alt370) {
                        case 1 :
                            // RPIExprWalker.g:1688:17: keyCURRENT_OF cursor_name
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_keyCURRENT_OF_in_delete_command14307);
                            keyCURRENT_OF1364=keyCURRENT_OF();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, keyCURRENT_OF1364.getTree());
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_cursor_name_in_delete_command14309);
                            cursor_name1365=cursor_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, cursor_name1365.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;
                        case 2 :
                            // RPIExprWalker.g:1689:17: sql_condition
                            {
                            _last = (CommonTree)input.LT(1);
                            pushFollow(FOLLOW_sql_condition_in_delete_command14327);
                            sql_condition1366=sql_condition();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) 
                            adaptor.addChild(root_0, sql_condition1366.getTree());

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }


                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1692:9: ( returning_clause )?
            int alt372=2;
            int LA372_0 = input.LA(1);

            if ( ((LA372_0>=220 && LA372_0<=221)) ) {
                alt372=1;
            }
            switch (alt372) {
                case 1 :
                    // RPIExprWalker.g:1692:11: returning_clause
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_returning_clause_in_delete_command14364);
                    returning_clause1367=returning_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, returning_clause1367.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 253, delete_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "delete_command"

    public static class returning_clause_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "returning_clause"
    // RPIExprWalker.g:1695:1: returning_clause : ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues ;
    public final RPIExprWalker.returning_clause_return returning_clause() throws RecognitionException {
        RPIExprWalker.returning_clause_return retval = new RPIExprWalker.returning_clause_return();
        retval.start = input.LT(1);
        int returning_clause_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1373=null;
        RPIExprWalker.keyRETURN_return keyRETURN1368 = null;

        RPIExprWalker.keyRETURNING_return keyRETURNING1369 = null;

        RPIExprWalker.select_list_return select_list1370 = null;

        RPIExprWalker.keyBULK_return keyBULK1371 = null;

        RPIExprWalker.keyCOLLECT_return keyCOLLECT1372 = null;

        RPIExprWalker.lvalues_return lvalues1374 = null;


        CommonTree string_literal1373_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 254) ) { return retval; }
            // RPIExprWalker.g:1696:5: ( ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues )
            // RPIExprWalker.g:1696:9: ( keyRETURN | keyRETURNING ) select_list ( keyBULK keyCOLLECT )? 'INTO' lvalues
            {
            root_0 = (CommonTree)adaptor.nil();

            // RPIExprWalker.g:1696:9: ( keyRETURN | keyRETURNING )
            int alt373=2;
            int LA373_0 = input.LA(1);

            if ( (LA373_0==220) ) {
                alt373=1;
            }
            else if ( (LA373_0==221) ) {
                alt373=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 373, 0, input);

                throw nvae;
            }
            switch (alt373) {
                case 1 :
                    // RPIExprWalker.g:1696:11: keyRETURN
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyRETURN_in_returning_clause14388);
                    keyRETURN1368=keyRETURN();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyRETURN1368.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1696:23: keyRETURNING
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyRETURNING_in_returning_clause14392);
                    keyRETURNING1369=keyRETURNING();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyRETURNING1369.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_select_list_in_returning_clause14396);
            select_list1370=select_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, select_list1370.getTree());
            // RPIExprWalker.g:1696:50: ( keyBULK keyCOLLECT )?
            int alt374=2;
            int LA374_0 = input.LA(1);

            if ( (LA374_0==ID) ) {
                alt374=1;
            }
            switch (alt374) {
                case 1 :
                    // RPIExprWalker.g:1696:52: keyBULK keyCOLLECT
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyBULK_in_returning_clause14400);
                    keyBULK1371=keyBULK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyBULK1371.getTree());
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyCOLLECT_in_returning_clause14402);
                    keyCOLLECT1372=keyCOLLECT();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyCOLLECT1372.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            _last = (CommonTree)input.LT(1);
            string_literal1373=(CommonTree)match(input,178,FOLLOW_178_in_returning_clause14407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1373_tree = (CommonTree)adaptor.dupNode(string_literal1373);

            adaptor.addChild(root_0, string_literal1373_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_lvalues_in_returning_clause14409);
            lvalues1374=lvalues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, lvalues1374.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 254, returning_clause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "returning_clause"

    public static class set_transaction_command_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "set_transaction_command"
    // RPIExprWalker.g:1699:1: set_transaction_command : 'SET' keyTRANSACTION keyREAD keyONLY ;
    public final RPIExprWalker.set_transaction_command_return set_transaction_command() throws RecognitionException {
        RPIExprWalker.set_transaction_command_return retval = new RPIExprWalker.set_transaction_command_return();
        retval.start = input.LT(1);
        int set_transaction_command_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1375=null;
        RPIExprWalker.keyTRANSACTION_return keyTRANSACTION1376 = null;

        RPIExprWalker.keyREAD_return keyREAD1377 = null;

        RPIExprWalker.keyONLY_return keyONLY1378 = null;


        CommonTree string_literal1375_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 255) ) { return retval; }
            // RPIExprWalker.g:1700:5: ( 'SET' keyTRANSACTION keyREAD keyONLY )
            // RPIExprWalker.g:1700:9: 'SET' keyTRANSACTION keyREAD keyONLY
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1375=(CommonTree)match(input,145,FOLLOW_145_in_set_transaction_command14428); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1375_tree = (CommonTree)adaptor.dupNode(string_literal1375);

            adaptor.addChild(root_0, string_literal1375_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyTRANSACTION_in_set_transaction_command14430);
            keyTRANSACTION1376=keyTRANSACTION();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyTRANSACTION1376.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyREAD_in_set_transaction_command14432);
            keyREAD1377=keyREAD();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyREAD1377.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyONLY_in_set_transaction_command14434);
            keyONLY1378=keyONLY();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyONLY1378.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 255, set_transaction_command_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "set_transaction_command"

    public static class close_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "close_statement"
    // RPIExprWalker.g:1703:1: close_statement : keyCLOSE cursor_name ;
    public final RPIExprWalker.close_statement_return close_statement() throws RecognitionException {
        RPIExprWalker.close_statement_return retval = new RPIExprWalker.close_statement_return();
        retval.start = input.LT(1);
        int close_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.keyCLOSE_return keyCLOSE1379 = null;

        RPIExprWalker.cursor_name_return cursor_name1380 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 256) ) { return retval; }
            // RPIExprWalker.g:1704:5: ( keyCLOSE cursor_name )
            // RPIExprWalker.g:1704:9: keyCLOSE cursor_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyCLOSE_in_close_statement14453);
            keyCLOSE1379=keyCLOSE();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyCLOSE1379.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cursor_name_in_close_statement14455);
            cursor_name1380=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cursor_name1380.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 256, close_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "close_statement"

    public static class fetch_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fetch_statement"
    // RPIExprWalker.g:1707:1: fetch_statement : 'FETCH' cursor_name 'INTO' ( variable_names | record_name ) ;
    public final RPIExprWalker.fetch_statement_return fetch_statement() throws RecognitionException {
        RPIExprWalker.fetch_statement_return retval = new RPIExprWalker.fetch_statement_return();
        retval.start = input.LT(1);
        int fetch_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1381=null;
        CommonTree string_literal1383=null;
        RPIExprWalker.cursor_name_return cursor_name1382 = null;

        RPIExprWalker.variable_names_return variable_names1384 = null;

        RPIExprWalker.record_name_return record_name1385 = null;


        CommonTree string_literal1381_tree=null;
        CommonTree string_literal1383_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 257) ) { return retval; }
            // RPIExprWalker.g:1708:5: ( 'FETCH' cursor_name 'INTO' ( variable_names | record_name ) )
            // RPIExprWalker.g:1708:9: 'FETCH' cursor_name 'INTO' ( variable_names | record_name )
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1381=(CommonTree)match(input,205,FOLLOW_205_in_fetch_statement14474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1381_tree = (CommonTree)adaptor.dupNode(string_literal1381);

            adaptor.addChild(root_0, string_literal1381_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cursor_name_in_fetch_statement14476);
            cursor_name1382=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cursor_name1382.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1383=(CommonTree)match(input,178,FOLLOW_178_in_fetch_statement14478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1383_tree = (CommonTree)adaptor.dupNode(string_literal1383);

            adaptor.addChild(root_0, string_literal1383_tree);
            }
            // RPIExprWalker.g:1709:9: ( variable_names | record_name )
            int alt375=2;
            int LA375_0 = input.LA(1);

            if ( (LA375_0==ID) ) {
                int LA375_1 = input.LA(2);

                if ( (synpred593_RPIExprWalker()) ) {
                    alt375=1;
                }
                else if ( (true) ) {
                    alt375=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA375_0==DOUBLEQUOTED_STRING) ) {
                int LA375_2 = input.LA(2);

                if ( (synpred593_RPIExprWalker()) ) {
                    alt375=1;
                }
                else if ( (true) ) {
                    alt375=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 375, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 375, 0, input);

                throw nvae;
            }
            switch (alt375) {
                case 1 :
                    // RPIExprWalker.g:1709:13: variable_names
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_variable_names_in_fetch_statement14493);
                    variable_names1384=variable_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, variable_names1384.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1710:13: record_name
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_record_name_in_fetch_statement14507);
                    record_name1385=record_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, record_name1385.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 257, fetch_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fetch_statement"

    public static class lock_table_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_table_statement"
    // RPIExprWalker.g:1714:1: lock_table_statement : 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? ;
    public final RPIExprWalker.lock_table_statement_return lock_table_statement() throws RecognitionException {
        RPIExprWalker.lock_table_statement_return retval = new RPIExprWalker.lock_table_statement_return();
        retval.start = input.LT(1);
        int lock_table_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1386=null;
        CommonTree string_literal1387=null;
        CommonTree string_literal1389=null;
        CommonTree string_literal1391=null;
        CommonTree string_literal1392=null;
        RPIExprWalker.table_reference_list_return table_reference_list1388 = null;

        RPIExprWalker.lock_mode_return lock_mode1390 = null;


        CommonTree string_literal1386_tree=null;
        CommonTree string_literal1387_tree=null;
        CommonTree string_literal1389_tree=null;
        CommonTree string_literal1391_tree=null;
        CommonTree string_literal1392_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 258) ) { return retval; }
            // RPIExprWalker.g:1715:5: ( 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )? )
            // RPIExprWalker.g:1715:9: 'LOCK' 'TABLE' table_reference_list 'IN' lock_mode 'MODE' ( 'NOWAIT' )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1386=(CommonTree)match(input,206,FOLLOW_206_in_lock_table_statement14536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1386_tree = (CommonTree)adaptor.dupNode(string_literal1386);

            adaptor.addChild(root_0, string_literal1386_tree);
            }
            _last = (CommonTree)input.LT(1);
            string_literal1387=(CommonTree)match(input,163,FOLLOW_163_in_lock_table_statement14538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1387_tree = (CommonTree)adaptor.dupNode(string_literal1387);

            adaptor.addChild(root_0, string_literal1387_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_table_reference_list_in_lock_table_statement14540);
            table_reference_list1388=table_reference_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, table_reference_list1388.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1389=(CommonTree)match(input,160,FOLLOW_160_in_lock_table_statement14550); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1389_tree = (CommonTree)adaptor.dupNode(string_literal1389);

            adaptor.addChild(root_0, string_literal1389_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_lock_mode_in_lock_table_statement14552);
            lock_mode1390=lock_mode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, lock_mode1390.getTree());
            _last = (CommonTree)input.LT(1);
            string_literal1391=(CommonTree)match(input,207,FOLLOW_207_in_lock_table_statement14554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1391_tree = (CommonTree)adaptor.dupNode(string_literal1391);

            adaptor.addChild(root_0, string_literal1391_tree);
            }
            // RPIExprWalker.g:1716:31: ( 'NOWAIT' )?
            int alt376=2;
            int LA376_0 = input.LA(1);

            if ( (LA376_0==195) ) {
                alt376=1;
            }
            switch (alt376) {
                case 1 :
                    // RPIExprWalker.g:1716:33: 'NOWAIT'
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1392=(CommonTree)match(input,195,FOLLOW_195_in_lock_table_statement14558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1392_tree = (CommonTree)adaptor.dupNode(string_literal1392);

                    adaptor.addChild(root_0, string_literal1392_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 258, lock_table_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_table_statement"

    public static class lock_mode_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lock_mode"
    // RPIExprWalker.g:1719:1: lock_mode : ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' );
    public final RPIExprWalker.lock_mode_return lock_mode() throws RecognitionException {
        RPIExprWalker.lock_mode_return retval = new RPIExprWalker.lock_mode_return();
        retval.start = input.LT(1);
        int lock_mode_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1393=null;
        CommonTree string_literal1394=null;
        CommonTree string_literal1395=null;
        CommonTree string_literal1396=null;
        CommonTree string_literal1397=null;
        CommonTree string_literal1398=null;
        CommonTree string_literal1399=null;
        CommonTree string_literal1400=null;
        CommonTree string_literal1401=null;
        CommonTree string_literal1402=null;
        CommonTree string_literal1403=null;

        CommonTree string_literal1393_tree=null;
        CommonTree string_literal1394_tree=null;
        CommonTree string_literal1395_tree=null;
        CommonTree string_literal1396_tree=null;
        CommonTree string_literal1397_tree=null;
        CommonTree string_literal1398_tree=null;
        CommonTree string_literal1399_tree=null;
        CommonTree string_literal1400_tree=null;
        CommonTree string_literal1401_tree=null;
        CommonTree string_literal1402_tree=null;
        CommonTree string_literal1403_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 259) ) { return retval; }
            // RPIExprWalker.g:1720:5: ( 'ROW' 'SHARE' | 'ROW' 'EXCLUSIVE' | 'SHARE' 'UPDATE' | 'SHARE' | 'SHARE' 'ROW' 'EXCLUSIVE' | 'EXCLUSIVE' )
            int alt377=6;
            switch ( input.LA(1) ) {
            case 208:
                {
                int LA377_1 = input.LA(2);

                if ( (LA377_1==209) ) {
                    alt377=1;
                }
                else if ( (LA377_1==210) ) {
                    alt377=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 377, 1, input);

                    throw nvae;
                }
                }
                break;
            case 209:
                {
                switch ( input.LA(2) ) {
                case 190:
                    {
                    alt377=3;
                    }
                    break;
                case 208:
                    {
                    alt377=5;
                    }
                    break;
                case 207:
                    {
                    alt377=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 377, 2, input);

                    throw nvae;
                }

                }
                break;
            case 210:
                {
                alt377=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 377, 0, input);

                throw nvae;
            }

            switch (alt377) {
                case 1 :
                    // RPIExprWalker.g:1720:9: 'ROW' 'SHARE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1393=(CommonTree)match(input,208,FOLLOW_208_in_lock_mode14580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1393_tree = (CommonTree)adaptor.dupNode(string_literal1393);

                    adaptor.addChild(root_0, string_literal1393_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1394=(CommonTree)match(input,209,FOLLOW_209_in_lock_mode14582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1394_tree = (CommonTree)adaptor.dupNode(string_literal1394);

                    adaptor.addChild(root_0, string_literal1394_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1721:9: 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1395=(CommonTree)match(input,208,FOLLOW_208_in_lock_mode14592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1395_tree = (CommonTree)adaptor.dupNode(string_literal1395);

                    adaptor.addChild(root_0, string_literal1395_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1396=(CommonTree)match(input,210,FOLLOW_210_in_lock_mode14594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1396_tree = (CommonTree)adaptor.dupNode(string_literal1396);

                    adaptor.addChild(root_0, string_literal1396_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 3 :
                    // RPIExprWalker.g:1722:9: 'SHARE' 'UPDATE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1397=(CommonTree)match(input,209,FOLLOW_209_in_lock_mode14604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1397_tree = (CommonTree)adaptor.dupNode(string_literal1397);

                    adaptor.addChild(root_0, string_literal1397_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1398=(CommonTree)match(input,190,FOLLOW_190_in_lock_mode14606); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1398_tree = (CommonTree)adaptor.dupNode(string_literal1398);

                    adaptor.addChild(root_0, string_literal1398_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 4 :
                    // RPIExprWalker.g:1723:9: 'SHARE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1399=(CommonTree)match(input,209,FOLLOW_209_in_lock_mode14616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1399_tree = (CommonTree)adaptor.dupNode(string_literal1399);

                    adaptor.addChild(root_0, string_literal1399_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 5 :
                    // RPIExprWalker.g:1724:9: 'SHARE' 'ROW' 'EXCLUSIVE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1400=(CommonTree)match(input,209,FOLLOW_209_in_lock_mode14626); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1400_tree = (CommonTree)adaptor.dupNode(string_literal1400);

                    adaptor.addChild(root_0, string_literal1400_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1401=(CommonTree)match(input,208,FOLLOW_208_in_lock_mode14628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1401_tree = (CommonTree)adaptor.dupNode(string_literal1401);

                    adaptor.addChild(root_0, string_literal1401_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    string_literal1402=(CommonTree)match(input,210,FOLLOW_210_in_lock_mode14630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1402_tree = (CommonTree)adaptor.dupNode(string_literal1402);

                    adaptor.addChild(root_0, string_literal1402_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 6 :
                    // RPIExprWalker.g:1725:9: 'EXCLUSIVE'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1403=(CommonTree)match(input,210,FOLLOW_210_in_lock_mode14640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1403_tree = (CommonTree)adaptor.dupNode(string_literal1403);

                    adaptor.addChild(root_0, string_literal1403_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 259, lock_mode_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "lock_mode"

    public static class open_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "open_statement"
    // RPIExprWalker.g:1728:1: open_statement : keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? ;
    public final RPIExprWalker.open_statement_return open_statement() throws RecognitionException {
        RPIExprWalker.open_statement_return retval = new RPIExprWalker.open_statement_return();
        retval.start = input.LT(1);
        int open_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree LPAREN1406=null;
        CommonTree RPAREN1408=null;
        RPIExprWalker.keyOPEN_return keyOPEN1404 = null;

        RPIExprWalker.cursor_name_return cursor_name1405 = null;

        RPIExprWalker.plsql_expressions_return plsql_expressions1407 = null;


        CommonTree LPAREN1406_tree=null;
        CommonTree RPAREN1408_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 260) ) { return retval; }
            // RPIExprWalker.g:1729:5: ( keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )? )
            // RPIExprWalker.g:1729:9: keyOPEN cursor_name ( LPAREN plsql_expressions RPAREN )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyOPEN_in_open_statement14659);
            keyOPEN1404=keyOPEN();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyOPEN1404.getTree());
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_cursor_name_in_open_statement14661);
            cursor_name1405=cursor_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, cursor_name1405.getTree());
            // RPIExprWalker.g:1729:29: ( LPAREN plsql_expressions RPAREN )?
            int alt378=2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0==LPAREN) ) {
                alt378=1;
            }
            switch (alt378) {
                case 1 :
                    // RPIExprWalker.g:1729:31: LPAREN plsql_expressions RPAREN
                    {
                    _last = (CommonTree)input.LT(1);
                    LPAREN1406=(CommonTree)match(input,LPAREN,FOLLOW_LPAREN_in_open_statement14665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN1406_tree = (CommonTree)adaptor.dupNode(LPAREN1406);

                    adaptor.addChild(root_0, LPAREN1406_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_plsql_expressions_in_open_statement14667);
                    plsql_expressions1407=plsql_expressions();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, plsql_expressions1407.getTree());
                    _last = (CommonTree)input.LT(1);
                    RPAREN1408=(CommonTree)match(input,RPAREN,FOLLOW_RPAREN_in_open_statement14669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN1408_tree = (CommonTree)adaptor.dupNode(RPAREN1408);

                    adaptor.addChild(root_0, RPAREN1408_tree);
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 260, open_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "open_statement"

    public static class rollback_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rollback_statement"
    // RPIExprWalker.g:1732:1: rollback_statement : keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? ;
    public final RPIExprWalker.rollback_statement_return rollback_statement() throws RecognitionException {
        RPIExprWalker.rollback_statement_return retval = new RPIExprWalker.rollback_statement_return();
        retval.start = input.LT(1);
        int rollback_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1411=null;
        CommonTree string_literal1412=null;
        CommonTree string_literal1414=null;
        RPIExprWalker.keyROLLBACK_return keyROLLBACK1409 = null;

        RPIExprWalker.keyWORK_return keyWORK1410 = null;

        RPIExprWalker.savepoint_name_return savepoint_name1413 = null;

        RPIExprWalker.quoted_string_return quoted_string1415 = null;


        CommonTree string_literal1411_tree=null;
        CommonTree string_literal1412_tree=null;
        CommonTree string_literal1414_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 261) ) { return retval; }
            // RPIExprWalker.g:1733:5: ( keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )? )
            // RPIExprWalker.g:1733:9: keyROLLBACK ( keyWORK )? ( 'TO' ( 'SAVEPOINT' )? savepoint_name )? ( 'COMMENT' quoted_string )?
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_keyROLLBACK_in_rollback_statement14691);
            keyROLLBACK1409=keyROLLBACK();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, keyROLLBACK1409.getTree());
            // RPIExprWalker.g:1733:21: ( keyWORK )?
            int alt379=2;
            int LA379_0 = input.LA(1);

            if ( (LA379_0==ID) ) {
                alt379=1;
            }
            switch (alt379) {
                case 1 :
                    // RPIExprWalker.g:1733:23: keyWORK
                    {
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_keyWORK_in_rollback_statement14695);
                    keyWORK1410=keyWORK();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, keyWORK1410.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1734:9: ( 'TO' ( 'SAVEPOINT' )? savepoint_name )?
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==135) ) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    // RPIExprWalker.g:1734:11: 'TO' ( 'SAVEPOINT' )? savepoint_name
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1411=(CommonTree)match(input,135,FOLLOW_135_in_rollback_statement14710); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1411_tree = (CommonTree)adaptor.dupNode(string_literal1411);

                    adaptor.addChild(root_0, string_literal1411_tree);
                    }
                    // RPIExprWalker.g:1734:16: ( 'SAVEPOINT' )?
                    int alt380=2;
                    int LA380_0 = input.LA(1);

                    if ( (LA380_0==211) ) {
                        alt380=1;
                    }
                    switch (alt380) {
                        case 1 :
                            // RPIExprWalker.g:1734:18: 'SAVEPOINT'
                            {
                            _last = (CommonTree)input.LT(1);
                            string_literal1412=(CommonTree)match(input,211,FOLLOW_211_in_rollback_statement14714); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal1412_tree = (CommonTree)adaptor.dupNode(string_literal1412);

                            adaptor.addChild(root_0, string_literal1412_tree);
                            }

                            if ( state.backtracking==0 ) {
                            }
                            }
                            break;

                    }

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_savepoint_name_in_rollback_statement14719);
                    savepoint_name1413=savepoint_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, savepoint_name1413.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }

            // RPIExprWalker.g:1735:9: ( 'COMMENT' quoted_string )?
            int alt382=2;
            int LA382_0 = input.LA(1);

            if ( (LA382_0==212) ) {
                alt382=1;
            }
            switch (alt382) {
                case 1 :
                    // RPIExprWalker.g:1735:11: 'COMMENT' quoted_string
                    {
                    _last = (CommonTree)input.LT(1);
                    string_literal1414=(CommonTree)match(input,212,FOLLOW_212_in_rollback_statement14734); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1414_tree = (CommonTree)adaptor.dupNode(string_literal1414);

                    adaptor.addChild(root_0, string_literal1414_tree);
                    }
                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_quoted_string_in_rollback_statement14736);
                    quoted_string1415=quoted_string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, quoted_string1415.getTree());

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }


            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 261, rollback_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "rollback_statement"

    public static class savepoint_statement_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_statement"
    // RPIExprWalker.g:1738:1: savepoint_statement : 'SAVEPOINT' savepoint_name ;
    public final RPIExprWalker.savepoint_statement_return savepoint_statement() throws RecognitionException {
        RPIExprWalker.savepoint_statement_return retval = new RPIExprWalker.savepoint_statement_return();
        retval.start = input.LT(1);
        int savepoint_statement_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1416=null;
        RPIExprWalker.savepoint_name_return savepoint_name1417 = null;


        CommonTree string_literal1416_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 262) ) { return retval; }
            // RPIExprWalker.g:1739:5: ( 'SAVEPOINT' savepoint_name )
            // RPIExprWalker.g:1739:9: 'SAVEPOINT' savepoint_name
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1416=(CommonTree)match(input,211,FOLLOW_211_in_savepoint_statement14758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1416_tree = (CommonTree)adaptor.dupNode(string_literal1416);

            adaptor.addChild(root_0, string_literal1416_tree);
            }
            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_savepoint_name_in_savepoint_statement14760);
            savepoint_name1417=savepoint_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, savepoint_name1417.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 262, savepoint_statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_statement"

    public static class savepoint_name_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "savepoint_name"
    // RPIExprWalker.g:1742:1: savepoint_name : identifier ;
    public final RPIExprWalker.savepoint_name_return savepoint_name() throws RecognitionException {
        RPIExprWalker.savepoint_name_return retval = new RPIExprWalker.savepoint_name_return();
        retval.start = input.LT(1);
        int savepoint_name_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        RPIExprWalker.identifier_return identifier1418 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 263) ) { return retval; }
            // RPIExprWalker.g:1743:5: ( identifier )
            // RPIExprWalker.g:1743:9: identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            pushFollow(FOLLOW_identifier_in_savepoint_name14779);
            identifier1418=identifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) 
            adaptor.addChild(root_0, identifier1418.getTree());

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 263, savepoint_name_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "savepoint_name"

    public static class identifier_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifier"
    // RPIExprWalker.g:1746:1: identifier returns [StringBuffer value] : ( ID | DOUBLEQUOTED_STRING );
    public final RPIExprWalker.identifier_return identifier() throws RecognitionException {
        RPIExprWalker.identifier_return retval = new RPIExprWalker.identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1419=null;
        CommonTree DOUBLEQUOTED_STRING1420=null;

        CommonTree ID1419_tree=null;
        CommonTree DOUBLEQUOTED_STRING1420_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 264) ) { return retval; }
            // RPIExprWalker.g:1747:5: ( ID | DOUBLEQUOTED_STRING )
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==ID) ) {
                alt383=1;
            }
            else if ( (LA383_0==DOUBLEQUOTED_STRING) ) {
                alt383=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 383, 0, input);

                throw nvae;
            }
            switch (alt383) {
                case 1 :
                    // RPIExprWalker.g:1747:9: ID
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    ID1419=(CommonTree)match(input,ID,FOLLOW_ID_in_identifier14802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID1419_tree = (CommonTree)adaptor.dupNode(ID1419);

                    adaptor.addChild(root_0, ID1419_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (ID1419!=null?ID1419.getText():null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1748:9: DOUBLEQUOTED_STRING
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    DOUBLEQUOTED_STRING1420=(CommonTree)match(input,DOUBLEQUOTED_STRING,FOLLOW_DOUBLEQUOTED_STRING_in_identifier14814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLEQUOTED_STRING1420_tree = (CommonTree)adaptor.dupNode(DOUBLEQUOTED_STRING1420);

                    adaptor.addChild(root_0, DOUBLEQUOTED_STRING1420_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value = new StringBuffer(" " + (DOUBLEQUOTED_STRING1420!=null?DOUBLEQUOTED_STRING1420.getText():null));
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 264, identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifier"

    public static class quoted_string_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "quoted_string"
    // RPIExprWalker.g:1752:1: quoted_string returns [StringBuffer value] : QUOTED_STRING ;
    public final RPIExprWalker.quoted_string_return quoted_string() throws RecognitionException {
        RPIExprWalker.quoted_string_return retval = new RPIExprWalker.quoted_string_return();
        retval.start = input.LT(1);
        int quoted_string_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTED_STRING1421=null;

        CommonTree QUOTED_STRING1421_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 265) ) { return retval; }
            // RPIExprWalker.g:1753:5: ( QUOTED_STRING )
            // RPIExprWalker.g:1753:9: QUOTED_STRING
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            QUOTED_STRING1421=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_quoted_string14840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1421_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING1421);

            adaptor.addChild(root_0, QUOTED_STRING1421_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" " + (QUOTED_STRING1421!=null?QUOTED_STRING1421.getText():null));
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 265, quoted_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "quoted_string"

    public static class match_string_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "match_string"
    // RPIExprWalker.g:1756:1: match_string : QUOTED_STRING ;
    public final RPIExprWalker.match_string_return match_string() throws RecognitionException {
        RPIExprWalker.match_string_return retval = new RPIExprWalker.match_string_return();
        retval.start = input.LT(1);
        int match_string_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree QUOTED_STRING1422=null;

        CommonTree QUOTED_STRING1422_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 266) ) { return retval; }
            // RPIExprWalker.g:1757:5: ( QUOTED_STRING )
            // RPIExprWalker.g:1757:9: QUOTED_STRING
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            QUOTED_STRING1422=(CommonTree)match(input,QUOTED_STRING,FOLLOW_QUOTED_STRING_in_match_string14861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            QUOTED_STRING1422_tree = (CommonTree)adaptor.dupNode(QUOTED_STRING1422);

            adaptor.addChild(root_0, QUOTED_STRING1422_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 266, match_string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "match_string"

    public static class keyA_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyA"
    // RPIExprWalker.g:1759:1: keyA : {...}? ID ;
    public final RPIExprWalker.keyA_return keyA() throws RecognitionException {
        RPIExprWalker.keyA_return retval = new RPIExprWalker.keyA_return();
        retval.start = input.LT(1);
        int keyA_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1423=null;

        CommonTree ID1423_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 267) ) { return retval; }
            // RPIExprWalker.g:1759:34: ({...}? ID )
            // RPIExprWalker.g:1759:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "A"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyA", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"A\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1423=(CommonTree)match(input,ID,FOLLOW_ID_in_keyA14903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1423_tree = (CommonTree)adaptor.dupNode(ID1423);

            adaptor.addChild(root_0, ID1423_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 267, keyA_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyA"

    public static class keyAUTOMATIC_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyAUTOMATIC"
    // RPIExprWalker.g:1760:1: keyAUTOMATIC : {...}? ID ;
    public final RPIExprWalker.keyAUTOMATIC_return keyAUTOMATIC() throws RecognitionException {
        RPIExprWalker.keyAUTOMATIC_return retval = new RPIExprWalker.keyAUTOMATIC_return();
        retval.start = input.LT(1);
        int keyAUTOMATIC_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1424=null;

        CommonTree ID1424_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 268) ) { return retval; }
            // RPIExprWalker.g:1760:34: ({...}? ID )
            // RPIExprWalker.g:1760:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "AUTOMATIC"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTOMATIC", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"AUTOMATIC\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1424=(CommonTree)match(input,ID,FOLLOW_ID_in_keyAUTOMATIC14932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1424_tree = (CommonTree)adaptor.dupNode(ID1424);

            adaptor.addChild(root_0, ID1424_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 268, keyAUTOMATIC_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyAUTOMATIC"

    public static class keyCOUNT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCOUNT"
    // RPIExprWalker.g:1761:1: keyCOUNT : {...}? ID ;
    public final RPIExprWalker.keyCOUNT_return keyCOUNT() throws RecognitionException {
        RPIExprWalker.keyCOUNT_return retval = new RPIExprWalker.keyCOUNT_return();
        retval.start = input.LT(1);
        int keyCOUNT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1425=null;

        CommonTree ID1425_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 269) ) { return retval; }
            // RPIExprWalker.g:1761:34: ({...}? ID )
            // RPIExprWalker.g:1761:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((CommonTree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "COUNT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOUNT", "((CommonTree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"COUNT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1425=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCOUNT14965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1425_tree = (CommonTree)adaptor.dupNode(ID1425);

            adaptor.addChild(root_0, ID1425_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 269, keyCOUNT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCOUNT"

    public static class keyTRIM_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTRIM"
    // RPIExprWalker.g:1762:1: keyTRIM : {...}? ID ;
    public final RPIExprWalker.keyTRIM_return keyTRIM() throws RecognitionException {
        RPIExprWalker.keyTRIM_return retval = new RPIExprWalker.keyTRIM_return();
        retval.start = input.LT(1);
        int keyTRIM_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1426=null;

        CommonTree ID1426_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 270) ) { return retval; }
            // RPIExprWalker.g:1762:34: ({...}? ID )
            // RPIExprWalker.g:1762:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((CommonTree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TRIM"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTRIM", "((CommonTree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"TRIM\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1426=(CommonTree)match(input,ID,FOLLOW_ID_in_keyTRIM14999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1426_tree = (CommonTree)adaptor.dupNode(ID1426);

            adaptor.addChild(root_0, ID1426_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 270, keyTRIM_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTRIM"

    public static class keyCROSS_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCROSS"
    // RPIExprWalker.g:1763:1: keyCROSS : {...}? ID ;
    public final RPIExprWalker.keyCROSS_return keyCROSS() throws RecognitionException {
        RPIExprWalker.keyCROSS_return retval = new RPIExprWalker.keyCROSS_return();
        retval.start = input.LT(1);
        int keyCROSS_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1427=null;

        CommonTree ID1427_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 271) ) { return retval; }
            // RPIExprWalker.g:1763:34: ({...}? ID )
            // RPIExprWalker.g:1763:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CROSS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCROSS", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"CROSS\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1427=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCROSS15032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1427_tree = (CommonTree)adaptor.dupNode(ID1427);

            adaptor.addChild(root_0, ID1427_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 271, keyCROSS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCROSS"

    public static class keyCUBE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCUBE"
    // RPIExprWalker.g:1764:1: keyCUBE : {...}? ID ;
    public final RPIExprWalker.keyCUBE_return keyCUBE() throws RecognitionException {
        RPIExprWalker.keyCUBE_return retval = new RPIExprWalker.keyCUBE_return();
        retval.start = input.LT(1);
        int keyCUBE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1428=null;

        CommonTree ID1428_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 272) ) { return retval; }
            // RPIExprWalker.g:1764:34: ({...}? ID )
            // RPIExprWalker.g:1764:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CUBE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCUBE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"CUBE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1428=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCUBE15066); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1428_tree = (CommonTree)adaptor.dupNode(ID1428);

            adaptor.addChild(root_0, ID1428_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 272, keyCUBE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCUBE"

    public static class keyCURRENT_OF_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCURRENT_OF"
    // RPIExprWalker.g:1765:1: keyCURRENT_OF : {...}? ID ;
    public final RPIExprWalker.keyCURRENT_OF_return keyCURRENT_OF() throws RecognitionException {
        RPIExprWalker.keyCURRENT_OF_return retval = new RPIExprWalker.keyCURRENT_OF_return();
        retval.start = input.LT(1);
        int keyCURRENT_OF_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1429=null;

        CommonTree ID1429_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 273) ) { return retval; }
            // RPIExprWalker.g:1765:34: ({...}? ID )
            // RPIExprWalker.g:1765:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CURRENT_OF"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURRENT_OF", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"CURRENT_OF\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1429=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCURRENT_OF15094); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1429_tree = (CommonTree)adaptor.dupNode(ID1429);

            adaptor.addChild(root_0, ID1429_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 273, keyCURRENT_OF_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCURRENT_OF"

    public static class keyDAY_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDAY"
    // RPIExprWalker.g:1766:1: keyDAY : {...}? ID ;
    public final RPIExprWalker.keyDAY_return keyDAY() throws RecognitionException {
        RPIExprWalker.keyDAY_return retval = new RPIExprWalker.keyDAY_return();
        retval.start = input.LT(1);
        int keyDAY_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1430=null;

        CommonTree ID1430_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 274) ) { return retval; }
            // RPIExprWalker.g:1766:34: ({...}? ID )
            // RPIExprWalker.g:1766:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDAY", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"DAY\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1430=(CommonTree)match(input,ID,FOLLOW_ID_in_keyDAY15129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1430_tree = (CommonTree)adaptor.dupNode(ID1430);

            adaptor.addChild(root_0, ID1430_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 274, keyDAY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDAY"

    public static class keyDBTIMEZONE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDBTIMEZONE"
    // RPIExprWalker.g:1767:1: keyDBTIMEZONE : {...}? ID ;
    public final RPIExprWalker.keyDBTIMEZONE_return keyDBTIMEZONE() throws RecognitionException {
        RPIExprWalker.keyDBTIMEZONE_return retval = new RPIExprWalker.keyDBTIMEZONE_return();
        retval.start = input.LT(1);
        int keyDBTIMEZONE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1431=null;

        CommonTree ID1431_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 275) ) { return retval; }
            // RPIExprWalker.g:1767:34: ({...}? ID )
            // RPIExprWalker.g:1767:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DBTIMEZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDBTIMEZONE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"DBTIMEZONE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1431=(CommonTree)match(input,ID,FOLLOW_ID_in_keyDBTIMEZONE15157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1431_tree = (CommonTree)adaptor.dupNode(ID1431);

            adaptor.addChild(root_0, ID1431_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 275, keyDBTIMEZONE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDBTIMEZONE"

    public static class keyDECREMENT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDECREMENT"
    // RPIExprWalker.g:1768:1: keyDECREMENT : {...}? ID ;
    public final RPIExprWalker.keyDECREMENT_return keyDECREMENT() throws RecognitionException {
        RPIExprWalker.keyDECREMENT_return retval = new RPIExprWalker.keyDECREMENT_return();
        retval.start = input.LT(1);
        int keyDECREMENT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1432=null;

        CommonTree ID1432_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 276) ) { return retval; }
            // RPIExprWalker.g:1768:34: ({...}? ID )
            // RPIExprWalker.g:1768:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DECREMENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDECREMENT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"DECREMENT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1432=(CommonTree)match(input,ID,FOLLOW_ID_in_keyDECREMENT15186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1432_tree = (CommonTree)adaptor.dupNode(ID1432);

            adaptor.addChild(root_0, ID1432_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 276, keyDECREMENT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDECREMENT"

    public static class keyDIMENSION_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyDIMENSION"
    // RPIExprWalker.g:1769:1: keyDIMENSION : {...}? ID ;
    public final RPIExprWalker.keyDIMENSION_return keyDIMENSION() throws RecognitionException {
        RPIExprWalker.keyDIMENSION_return retval = new RPIExprWalker.keyDIMENSION_return();
        retval.start = input.LT(1);
        int keyDIMENSION_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1433=null;

        CommonTree ID1433_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 277) ) { return retval; }
            // RPIExprWalker.g:1769:34: ({...}? ID )
            // RPIExprWalker.g:1769:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "DIMENSION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyDIMENSION", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"DIMENSION\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1433=(CommonTree)match(input,ID,FOLLOW_ID_in_keyDIMENSION15215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1433_tree = (CommonTree)adaptor.dupNode(ID1433);

            adaptor.addChild(root_0, ID1433_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 277, keyDIMENSION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyDIMENSION"

    public static class keyEMPTY_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEMPTY"
    // RPIExprWalker.g:1770:1: keyEMPTY : {...}? ID ;
    public final RPIExprWalker.keyEMPTY_return keyEMPTY() throws RecognitionException {
        RPIExprWalker.keyEMPTY_return retval = new RPIExprWalker.keyEMPTY_return();
        retval.start = input.LT(1);
        int keyEMPTY_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1434=null;

        CommonTree ID1434_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 278) ) { return retval; }
            // RPIExprWalker.g:1770:34: ({...}? ID )
            // RPIExprWalker.g:1770:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EMPTY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEMPTY", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"EMPTY\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1434=(CommonTree)match(input,ID,FOLLOW_ID_in_keyEMPTY15248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1434_tree = (CommonTree)adaptor.dupNode(ID1434);

            adaptor.addChild(root_0, ID1434_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 278, keyEMPTY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEMPTY"

    public static class keyEQUALS_PATH_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEQUALS_PATH"
    // RPIExprWalker.g:1771:1: keyEQUALS_PATH : {...}? ID ;
    public final RPIExprWalker.keyEQUALS_PATH_return keyEQUALS_PATH() throws RecognitionException {
        RPIExprWalker.keyEQUALS_PATH_return retval = new RPIExprWalker.keyEQUALS_PATH_return();
        retval.start = input.LT(1);
        int keyEQUALS_PATH_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1435=null;

        CommonTree ID1435_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 279) ) { return retval; }
            // RPIExprWalker.g:1771:34: ({...}? ID )
            // RPIExprWalker.g:1771:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EQUALS_PATH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEQUALS_PATH", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"EQUALS_PATH\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1435=(CommonTree)match(input,ID,FOLLOW_ID_in_keyEQUALS_PATH15275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1435_tree = (CommonTree)adaptor.dupNode(ID1435);

            adaptor.addChild(root_0, ID1435_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 279, keyEQUALS_PATH_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEQUALS_PATH"

    public static class keyESCAPE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyESCAPE"
    // RPIExprWalker.g:1772:1: keyESCAPE : {...}? ID ;
    public final RPIExprWalker.keyESCAPE_return keyESCAPE() throws RecognitionException {
        RPIExprWalker.keyESCAPE_return retval = new RPIExprWalker.keyESCAPE_return();
        retval.start = input.LT(1);
        int keyESCAPE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1436=null;

        CommonTree ID1436_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 280) ) { return retval; }
            // RPIExprWalker.g:1772:34: ({...}? ID )
            // RPIExprWalker.g:1772:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ESCAPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyESCAPE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"ESCAPE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1436=(CommonTree)match(input,ID,FOLLOW_ID_in_keyESCAPE15307); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1436_tree = (CommonTree)adaptor.dupNode(ID1436);

            adaptor.addChild(root_0, ID1436_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 280, keyESCAPE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyESCAPE"

    public static class keyFIRST_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFIRST"
    // RPIExprWalker.g:1773:1: keyFIRST : {...}? ID ;
    public final RPIExprWalker.keyFIRST_return keyFIRST() throws RecognitionException {
        RPIExprWalker.keyFIRST_return retval = new RPIExprWalker.keyFIRST_return();
        retval.start = input.LT(1);
        int keyFIRST_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1437=null;

        CommonTree ID1437_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 281) ) { return retval; }
            // RPIExprWalker.g:1773:34: ({...}? ID )
            // RPIExprWalker.g:1773:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FIRST"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIRST", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"FIRST\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1437=(CommonTree)match(input,ID,FOLLOW_ID_in_keyFIRST15340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1437_tree = (CommonTree)adaptor.dupNode(ID1437);

            adaptor.addChild(root_0, ID1437_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 281, keyFIRST_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFIRST"

    public static class keyFULL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFULL"
    // RPIExprWalker.g:1774:1: keyFULL : {...}? ID ;
    public final RPIExprWalker.keyFULL_return keyFULL() throws RecognitionException {
        RPIExprWalker.keyFULL_return retval = new RPIExprWalker.keyFULL_return();
        retval.start = input.LT(1);
        int keyFULL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1438=null;

        CommonTree ID1438_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 282) ) { return retval; }
            // RPIExprWalker.g:1774:34: ({...}? ID )
            // RPIExprWalker.g:1774:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FULL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFULL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"FULL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1438=(CommonTree)match(input,ID,FOLLOW_ID_in_keyFULL15374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1438_tree = (CommonTree)adaptor.dupNode(ID1438);

            adaptor.addChild(root_0, ID1438_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 282, keyFULL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFULL"

    public static class keyGROUPING_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyGROUPING"
    // RPIExprWalker.g:1775:1: keyGROUPING : {...}? ID ;
    public final RPIExprWalker.keyGROUPING_return keyGROUPING() throws RecognitionException {
        RPIExprWalker.keyGROUPING_return retval = new RPIExprWalker.keyGROUPING_return();
        retval.start = input.LT(1);
        int keyGROUPING_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1439=null;

        CommonTree ID1439_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 283) ) { return retval; }
            // RPIExprWalker.g:1775:34: ({...}? ID )
            // RPIExprWalker.g:1775:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "GROUPING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyGROUPING", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"GROUPING\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1439=(CommonTree)match(input,ID,FOLLOW_ID_in_keyGROUPING15404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1439_tree = (CommonTree)adaptor.dupNode(ID1439);

            adaptor.addChild(root_0, ID1439_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 283, keyGROUPING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyGROUPING"

    public static class keyIGNORE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyIGNORE"
    // RPIExprWalker.g:1776:1: keyIGNORE : {...}? ID ;
    public final RPIExprWalker.keyIGNORE_return keyIGNORE() throws RecognitionException {
        RPIExprWalker.keyIGNORE_return retval = new RPIExprWalker.keyIGNORE_return();
        retval.start = input.LT(1);
        int keyIGNORE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1440=null;

        CommonTree ID1440_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 284) ) { return retval; }
            // RPIExprWalker.g:1776:34: ({...}? ID )
            // RPIExprWalker.g:1776:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyIGNORE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"IGNORE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1440=(CommonTree)match(input,ID,FOLLOW_ID_in_keyIGNORE15436); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1440_tree = (CommonTree)adaptor.dupNode(ID1440);

            adaptor.addChild(root_0, ID1440_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 284, keyIGNORE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyIGNORE"

    public static class keyINCREMENT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINCREMENT"
    // RPIExprWalker.g:1777:1: keyINCREMENT : {...}? ID ;
    public final RPIExprWalker.keyINCREMENT_return keyINCREMENT() throws RecognitionException {
        RPIExprWalker.keyINCREMENT_return retval = new RPIExprWalker.keyINCREMENT_return();
        retval.start = input.LT(1);
        int keyINCREMENT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1441=null;

        CommonTree ID1441_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 285) ) { return retval; }
            // RPIExprWalker.g:1777:34: ({...}? ID )
            // RPIExprWalker.g:1777:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INCREMENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINCREMENT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"INCREMENT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1441=(CommonTree)match(input,ID,FOLLOW_ID_in_keyINCREMENT15465); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1441_tree = (CommonTree)adaptor.dupNode(ID1441);

            adaptor.addChild(root_0, ID1441_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 285, keyINCREMENT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINCREMENT"

    public static class keyINFINITE_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINFINITE"
    // RPIExprWalker.g:1778:1: keyINFINITE returns [StringBuffer value] : {...}? ID ;
    public final RPIExprWalker.keyINFINITE_return keyINFINITE() throws RecognitionException {
        RPIExprWalker.keyINFINITE_return retval = new RPIExprWalker.keyINFINITE_return();
        retval.start = input.LT(1);
        int keyINFINITE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1442=null;

        CommonTree ID1442_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 286) ) { return retval; }
            // RPIExprWalker.g:1779:34: ({...}? ID )
            // RPIExprWalker.g:1779:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INFINITE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINFINITE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"INFINITE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1442=(CommonTree)match(input,ID,FOLLOW_ID_in_keyINFINITE15511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1442_tree = (CommonTree)adaptor.dupNode(ID1442);

            adaptor.addChild(root_0, ID1442_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" INFINITE");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 286, keyINFINITE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINFINITE"

    public static class keyINNER_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINNER"
    // RPIExprWalker.g:1781:1: keyINNER : {...}? ID ;
    public final RPIExprWalker.keyINNER_return keyINNER() throws RecognitionException {
        RPIExprWalker.keyINNER_return retval = new RPIExprWalker.keyINNER_return();
        retval.start = input.LT(1);
        int keyINNER_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1443=null;

        CommonTree ID1443_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 287) ) { return retval; }
            // RPIExprWalker.g:1781:34: ({...}? ID )
            // RPIExprWalker.g:1781:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INNER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINNER", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"INNER\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1443=(CommonTree)match(input,ID,FOLLOW_ID_in_keyINNER15581); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1443_tree = (CommonTree)adaptor.dupNode(ID1443);

            adaptor.addChild(root_0, ID1443_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 287, keyINNER_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINNER"

    public static class keyINTERVAL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINTERVAL"
    // RPIExprWalker.g:1782:1: keyINTERVAL : {...}? ID ;
    public final RPIExprWalker.keyINTERVAL_return keyINTERVAL() throws RecognitionException {
        RPIExprWalker.keyINTERVAL_return retval = new RPIExprWalker.keyINTERVAL_return();
        retval.start = input.LT(1);
        int keyINTERVAL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1444=null;

        CommonTree ID1444_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 288) ) { return retval; }
            // RPIExprWalker.g:1782:34: ({...}? ID )
            // RPIExprWalker.g:1782:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERVAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERVAL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"INTERVAL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1444=(CommonTree)match(input,ID,FOLLOW_ID_in_keyINTERVAL15611); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1444_tree = (CommonTree)adaptor.dupNode(ID1444);

            adaptor.addChild(root_0, ID1444_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 288, keyINTERVAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINTERVAL"

    public static class keyITERATE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyITERATE"
    // RPIExprWalker.g:1783:1: keyITERATE : {...}? ID ;
    public final RPIExprWalker.keyITERATE_return keyITERATE() throws RecognitionException {
        RPIExprWalker.keyITERATE_return retval = new RPIExprWalker.keyITERATE_return();
        retval.start = input.LT(1);
        int keyITERATE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1445=null;

        CommonTree ID1445_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 289) ) { return retval; }
            // RPIExprWalker.g:1783:34: ({...}? ID )
            // RPIExprWalker.g:1783:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ITERATE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyITERATE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"ITERATE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1445=(CommonTree)match(input,ID,FOLLOW_ID_in_keyITERATE15642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1445_tree = (CommonTree)adaptor.dupNode(ID1445);

            adaptor.addChild(root_0, ID1445_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 289, keyITERATE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyITERATE"

    public static class keyJOIN_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyJOIN"
    // RPIExprWalker.g:1784:1: keyJOIN : {...}? ID ;
    public final RPIExprWalker.keyJOIN_return keyJOIN() throws RecognitionException {
        RPIExprWalker.keyJOIN_return retval = new RPIExprWalker.keyJOIN_return();
        retval.start = input.LT(1);
        int keyJOIN_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1446=null;

        CommonTree ID1446_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 290) ) { return retval; }
            // RPIExprWalker.g:1784:34: ({...}? ID )
            // RPIExprWalker.g:1784:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "JOIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyJOIN", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"JOIN\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1446=(CommonTree)match(input,ID,FOLLOW_ID_in_keyJOIN15676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1446_tree = (CommonTree)adaptor.dupNode(ID1446);

            adaptor.addChild(root_0, ID1446_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 290, keyJOIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyJOIN"

    public static class keyKEEP_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyKEEP"
    // RPIExprWalker.g:1785:1: keyKEEP : {...}? ID ;
    public final RPIExprWalker.keyKEEP_return keyKEEP() throws RecognitionException {
        RPIExprWalker.keyKEEP_return retval = new RPIExprWalker.keyKEEP_return();
        retval.start = input.LT(1);
        int keyKEEP_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1447=null;

        CommonTree ID1447_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 291) ) { return retval; }
            // RPIExprWalker.g:1785:34: ({...}? ID )
            // RPIExprWalker.g:1785:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyKEEP", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"KEEP\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1447=(CommonTree)match(input,ID,FOLLOW_ID_in_keyKEEP15710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1447_tree = (CommonTree)adaptor.dupNode(ID1447);

            adaptor.addChild(root_0, ID1447_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 291, keyKEEP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyKEEP"

    public static class keyLAST_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLAST"
    // RPIExprWalker.g:1786:1: keyLAST : {...}? ID ;
    public final RPIExprWalker.keyLAST_return keyLAST() throws RecognitionException {
        RPIExprWalker.keyLAST_return retval = new RPIExprWalker.keyLAST_return();
        retval.start = input.LT(1);
        int keyLAST_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1448=null;

        CommonTree ID1448_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 292) ) { return retval; }
            // RPIExprWalker.g:1786:34: ({...}? ID )
            // RPIExprWalker.g:1786:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LAST"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLAST", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"LAST\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1448=(CommonTree)match(input,ID,FOLLOW_ID_in_keyLAST15744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1448_tree = (CommonTree)adaptor.dupNode(ID1448);

            adaptor.addChild(root_0, ID1448_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 292, keyLAST_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLAST"

    public static class keyLEFT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLEFT"
    // RPIExprWalker.g:1787:1: keyLEFT : {...}? ID ;
    public final RPIExprWalker.keyLEFT_return keyLEFT() throws RecognitionException {
        RPIExprWalker.keyLEFT_return retval = new RPIExprWalker.keyLEFT_return();
        retval.start = input.LT(1);
        int keyLEFT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1449=null;

        CommonTree ID1449_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 293) ) { return retval; }
            // RPIExprWalker.g:1787:34: ({...}? ID )
            // RPIExprWalker.g:1787:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LEFT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLEFT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"LEFT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1449=(CommonTree)match(input,ID,FOLLOW_ID_in_keyLEFT15778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1449_tree = (CommonTree)adaptor.dupNode(ID1449);

            adaptor.addChild(root_0, ID1449_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 293, keyLEFT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLEFT"

    public static class keyLIKE2_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLIKE2"
    // RPIExprWalker.g:1788:1: keyLIKE2 : {...}? ID ;
    public final RPIExprWalker.keyLIKE2_return keyLIKE2() throws RecognitionException {
        RPIExprWalker.keyLIKE2_return retval = new RPIExprWalker.keyLIKE2_return();
        retval.start = input.LT(1);
        int keyLIKE2_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1450=null;

        CommonTree ID1450_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 294) ) { return retval; }
            // RPIExprWalker.g:1788:34: ({...}? ID )
            // RPIExprWalker.g:1788:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LIKE2"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE2", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"LIKE2\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1450=(CommonTree)match(input,ID,FOLLOW_ID_in_keyLIKE215811); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1450_tree = (CommonTree)adaptor.dupNode(ID1450);

            adaptor.addChild(root_0, ID1450_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 294, keyLIKE2_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLIKE2"

    public static class keyLIKE4_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLIKE4"
    // RPIExprWalker.g:1789:1: keyLIKE4 : {...}? ID ;
    public final RPIExprWalker.keyLIKE4_return keyLIKE4() throws RecognitionException {
        RPIExprWalker.keyLIKE4_return retval = new RPIExprWalker.keyLIKE4_return();
        retval.start = input.LT(1);
        int keyLIKE4_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1451=null;

        CommonTree ID1451_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 295) ) { return retval; }
            // RPIExprWalker.g:1789:34: ({...}? ID )
            // RPIExprWalker.g:1789:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LIKE4"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKE4", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"LIKE4\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1451=(CommonTree)match(input,ID,FOLLOW_ID_in_keyLIKE415844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1451_tree = (CommonTree)adaptor.dupNode(ID1451);

            adaptor.addChild(root_0, ID1451_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 295, keyLIKE4_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLIKE4"

    public static class keyLIKEC_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLIKEC"
    // RPIExprWalker.g:1790:1: keyLIKEC : {...}? ID ;
    public final RPIExprWalker.keyLIKEC_return keyLIKEC() throws RecognitionException {
        RPIExprWalker.keyLIKEC_return retval = new RPIExprWalker.keyLIKEC_return();
        retval.start = input.LT(1);
        int keyLIKEC_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1452=null;

        CommonTree ID1452_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 296) ) { return retval; }
            // RPIExprWalker.g:1790:34: ({...}? ID )
            // RPIExprWalker.g:1790:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LIKEC"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLIKEC", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"LIKEC\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1452=(CommonTree)match(input,ID,FOLLOW_ID_in_keyLIKEC15877); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1452_tree = (CommonTree)adaptor.dupNode(ID1452);

            adaptor.addChild(root_0, ID1452_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 296, keyLIKEC_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLIKEC"

    public static class keyLOCAL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLOCAL"
    // RPIExprWalker.g:1791:1: keyLOCAL : {...}? ID ;
    public final RPIExprWalker.keyLOCAL_return keyLOCAL() throws RecognitionException {
        RPIExprWalker.keyLOCAL_return retval = new RPIExprWalker.keyLOCAL_return();
        retval.start = input.LT(1);
        int keyLOCAL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1453=null;

        CommonTree ID1453_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 297) ) { return retval; }
            // RPIExprWalker.g:1791:34: ({...}? ID )
            // RPIExprWalker.g:1791:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "LOCAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyLOCAL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"LOCAL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1453=(CommonTree)match(input,ID,FOLLOW_ID_in_keyLOCAL15910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1453_tree = (CommonTree)adaptor.dupNode(ID1453);

            adaptor.addChild(root_0, ID1453_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 297, keyLOCAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLOCAL"

    public static class keyMAIN_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMAIN"
    // RPIExprWalker.g:1792:1: keyMAIN : {...}? ID ;
    public final RPIExprWalker.keyMAIN_return keyMAIN() throws RecognitionException {
        RPIExprWalker.keyMAIN_return retval = new RPIExprWalker.keyMAIN_return();
        retval.start = input.LT(1);
        int keyMAIN_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1454=null;

        CommonTree ID1454_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 298) ) { return retval; }
            // RPIExprWalker.g:1792:34: ({...}? ID )
            // RPIExprWalker.g:1792:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "MAIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMAIN", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"MAIN\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1454=(CommonTree)match(input,ID,FOLLOW_ID_in_keyMAIN15944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1454_tree = (CommonTree)adaptor.dupNode(ID1454);

            adaptor.addChild(root_0, ID1454_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 298, keyMAIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMAIN"

    public static class keyMEASURES_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMEASURES"
    // RPIExprWalker.g:1793:1: keyMEASURES : {...}? ID ;
    public final RPIExprWalker.keyMEASURES_return keyMEASURES() throws RecognitionException {
        RPIExprWalker.keyMEASURES_return retval = new RPIExprWalker.keyMEASURES_return();
        retval.start = input.LT(1);
        int keyMEASURES_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1455=null;

        CommonTree ID1455_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 299) ) { return retval; }
            // RPIExprWalker.g:1793:34: ({...}? ID )
            // RPIExprWalker.g:1793:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "MEASURES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEASURES", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"MEASURES\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1455=(CommonTree)match(input,ID,FOLLOW_ID_in_keyMEASURES15974); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1455_tree = (CommonTree)adaptor.dupNode(ID1455);

            adaptor.addChild(root_0, ID1455_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 299, keyMEASURES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMEASURES"

    public static class keyMEMBER_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMEMBER"
    // RPIExprWalker.g:1794:1: keyMEMBER : {...}? ID ;
    public final RPIExprWalker.keyMEMBER_return keyMEMBER() throws RecognitionException {
        RPIExprWalker.keyMEMBER_return retval = new RPIExprWalker.keyMEMBER_return();
        retval.start = input.LT(1);
        int keyMEMBER_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1456=null;

        CommonTree ID1456_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 300) ) { return retval; }
            // RPIExprWalker.g:1794:34: ({...}? ID )
            // RPIExprWalker.g:1794:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "MEMBER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMEMBER", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"MEMBER\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1456=(CommonTree)match(input,ID,FOLLOW_ID_in_keyMEMBER16006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1456_tree = (CommonTree)adaptor.dupNode(ID1456);

            adaptor.addChild(root_0, ID1456_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 300, keyMEMBER_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMEMBER"

    public static class keyMODEL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMODEL"
    // RPIExprWalker.g:1795:1: keyMODEL : {...}? ID ;
    public final RPIExprWalker.keyMODEL_return keyMODEL() throws RecognitionException {
        RPIExprWalker.keyMODEL_return retval = new RPIExprWalker.keyMODEL_return();
        retval.start = input.LT(1);
        int keyMODEL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1457=null;

        CommonTree ID1457_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 301) ) { return retval; }
            // RPIExprWalker.g:1795:34: ({...}? ID )
            // RPIExprWalker.g:1795:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "MODEL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMODEL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"MODEL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1457=(CommonTree)match(input,ID,FOLLOW_ID_in_keyMODEL16039); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1457_tree = (CommonTree)adaptor.dupNode(ID1457);

            adaptor.addChild(root_0, ID1457_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 301, keyMODEL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMODEL"

    public static class keyMONTH_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyMONTH"
    // RPIExprWalker.g:1796:1: keyMONTH : {...}? ID ;
    public final RPIExprWalker.keyMONTH_return keyMONTH() throws RecognitionException {
        RPIExprWalker.keyMONTH_return retval = new RPIExprWalker.keyMONTH_return();
        retval.start = input.LT(1);
        int keyMONTH_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1458=null;

        CommonTree ID1458_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 302) ) { return retval; }
            // RPIExprWalker.g:1796:34: ({...}? ID )
            // RPIExprWalker.g:1796:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "MONTH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyMONTH", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"MONTH\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1458=(CommonTree)match(input,ID,FOLLOW_ID_in_keyMONTH16072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1458_tree = (CommonTree)adaptor.dupNode(ID1458);

            adaptor.addChild(root_0, ID1458_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 302, keyMONTH_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyMONTH"

    public static class keyNAN_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNAN"
    // RPIExprWalker.g:1797:1: keyNAN returns [StringBuffer value] : {...}? ID ;
    public final RPIExprWalker.keyNAN_return keyNAN() throws RecognitionException {
        RPIExprWalker.keyNAN_return retval = new RPIExprWalker.keyNAN_return();
        retval.start = input.LT(1);
        int keyNAN_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1459=null;

        CommonTree ID1459_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 303) ) { return retval; }
            // RPIExprWalker.g:1798:34: ({...}? ID )
            // RPIExprWalker.g:1798:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NAN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAN", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NAN\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1459=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNAN16118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1459_tree = (CommonTree)adaptor.dupNode(ID1459);

            adaptor.addChild(root_0, ID1459_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" NAN");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 303, keyNAN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNAN"

    public static class keyNATURAL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNATURAL"
    // RPIExprWalker.g:1800:1: keyNATURAL : {...}? ID ;
    public final RPIExprWalker.keyNATURAL_return keyNATURAL() throws RecognitionException {
        RPIExprWalker.keyNATURAL_return retval = new RPIExprWalker.keyNATURAL_return();
        retval.start = input.LT(1);
        int keyNATURAL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1460=null;

        CommonTree ID1460_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 304) ) { return retval; }
            // RPIExprWalker.g:1800:34: ({...}? ID )
            // RPIExprWalker.g:1800:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NATURAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNATURAL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NATURAL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1460=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNATURAL16186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1460_tree = (CommonTree)adaptor.dupNode(ID1460);

            adaptor.addChild(root_0, ID1460_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 304, keyNATURAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNATURAL"

    public static class keyNAV_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNAV"
    // RPIExprWalker.g:1801:1: keyNAV : {...}? ID ;
    public final RPIExprWalker.keyNAV_return keyNAV() throws RecognitionException {
        RPIExprWalker.keyNAV_return retval = new RPIExprWalker.keyNAV_return();
        retval.start = input.LT(1);
        int keyNAV_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1461=null;

        CommonTree ID1461_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 305) ) { return retval; }
            // RPIExprWalker.g:1801:34: ({...}? ID )
            // RPIExprWalker.g:1801:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NAV"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNAV", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NAV\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1461=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNAV16221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1461_tree = (CommonTree)adaptor.dupNode(ID1461);

            adaptor.addChild(root_0, ID1461_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 305, keyNAV_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNAV"

    public static class keyNOCYCLE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNOCYCLE"
    // RPIExprWalker.g:1802:1: keyNOCYCLE : {...}? ID ;
    public final RPIExprWalker.keyNOCYCLE_return keyNOCYCLE() throws RecognitionException {
        RPIExprWalker.keyNOCYCLE_return retval = new RPIExprWalker.keyNOCYCLE_return();
        retval.start = input.LT(1);
        int keyNOCYCLE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1462=null;

        CommonTree ID1462_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 306) ) { return retval; }
            // RPIExprWalker.g:1802:34: ({...}? ID )
            // RPIExprWalker.g:1802:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NOCYCLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNOCYCLE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NOCYCLE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1462=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNOCYCLE16252); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1462_tree = (CommonTree)adaptor.dupNode(ID1462);

            adaptor.addChild(root_0, ID1462_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 306, keyNOCYCLE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNOCYCLE"

    public static class keyNULLS_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNULLS"
    // RPIExprWalker.g:1803:1: keyNULLS : {...}? ID ;
    public final RPIExprWalker.keyNULLS_return keyNULLS() throws RecognitionException {
        RPIExprWalker.keyNULLS_return retval = new RPIExprWalker.keyNULLS_return();
        retval.start = input.LT(1);
        int keyNULLS_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1463=null;

        CommonTree ID1463_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 307) ) { return retval; }
            // RPIExprWalker.g:1803:34: ({...}? ID )
            // RPIExprWalker.g:1803:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NULLS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNULLS", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NULLS\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1463=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNULLS16285); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1463_tree = (CommonTree)adaptor.dupNode(ID1463);

            adaptor.addChild(root_0, ID1463_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 307, keyNULLS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNULLS"

    public static class keyONLY_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyONLY"
    // RPIExprWalker.g:1804:1: keyONLY : {...}? ID ;
    public final RPIExprWalker.keyONLY_return keyONLY() throws RecognitionException {
        RPIExprWalker.keyONLY_return retval = new RPIExprWalker.keyONLY_return();
        retval.start = input.LT(1);
        int keyONLY_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1464=null;

        CommonTree ID1464_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 308) ) { return retval; }
            // RPIExprWalker.g:1804:34: ({...}? ID )
            // RPIExprWalker.g:1804:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ONLY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyONLY", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"ONLY\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1464=(CommonTree)match(input,ID,FOLLOW_ID_in_keyONLY16319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1464_tree = (CommonTree)adaptor.dupNode(ID1464);

            adaptor.addChild(root_0, ID1464_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 308, keyONLY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyONLY"

    public static class keyOUTER_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyOUTER"
    // RPIExprWalker.g:1805:1: keyOUTER : {...}? ID ;
    public final RPIExprWalker.keyOUTER_return keyOUTER() throws RecognitionException {
        RPIExprWalker.keyOUTER_return retval = new RPIExprWalker.keyOUTER_return();
        retval.start = input.LT(1);
        int keyOUTER_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1465=null;

        CommonTree ID1465_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 309) ) { return retval; }
            // RPIExprWalker.g:1805:34: ({...}? ID )
            // RPIExprWalker.g:1805:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OUTER"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOUTER", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"OUTER\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1465=(CommonTree)match(input,ID,FOLLOW_ID_in_keyOUTER16352); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1465_tree = (CommonTree)adaptor.dupNode(ID1465);

            adaptor.addChild(root_0, ID1465_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 309, keyOUTER_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyOUTER"

    public static class keyPARTITION_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPARTITION"
    // RPIExprWalker.g:1806:1: keyPARTITION : {...}? ID ;
    public final RPIExprWalker.keyPARTITION_return keyPARTITION() throws RecognitionException {
        RPIExprWalker.keyPARTITION_return retval = new RPIExprWalker.keyPARTITION_return();
        retval.start = input.LT(1);
        int keyPARTITION_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1466=null;

        CommonTree ID1466_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 310) ) { return retval; }
            // RPIExprWalker.g:1806:34: ({...}? ID )
            // RPIExprWalker.g:1806:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "PARTITION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPARTITION", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"PARTITION\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1466=(CommonTree)match(input,ID,FOLLOW_ID_in_keyPARTITION16381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1466_tree = (CommonTree)adaptor.dupNode(ID1466);

            adaptor.addChild(root_0, ID1466_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 310, keyPARTITION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPARTITION"

    public static class keyPRECISION_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPRECISION"
    // RPIExprWalker.g:1807:1: keyPRECISION : {...}? ID ;
    public final RPIExprWalker.keyPRECISION_return keyPRECISION() throws RecognitionException {
        RPIExprWalker.keyPRECISION_return retval = new RPIExprWalker.keyPRECISION_return();
        retval.start = input.LT(1);
        int keyPRECISION_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1467=null;

        CommonTree ID1467_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 311) ) { return retval; }
            // RPIExprWalker.g:1807:34: ({...}? ID )
            // RPIExprWalker.g:1807:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "PRECISION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRECISION", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"PRECISION\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1467=(CommonTree)match(input,ID,FOLLOW_ID_in_keyPRECISION16410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1467_tree = (CommonTree)adaptor.dupNode(ID1467);

            adaptor.addChild(root_0, ID1467_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 311, keyPRECISION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPRECISION"

    public static class keyPRESENT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPRESENT"
    // RPIExprWalker.g:1808:1: keyPRESENT : {...}? ID ;
    public final RPIExprWalker.keyPRESENT_return keyPRESENT() throws RecognitionException {
        RPIExprWalker.keyPRESENT_return retval = new RPIExprWalker.keyPRESENT_return();
        retval.start = input.LT(1);
        int keyPRESENT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1468=null;

        CommonTree ID1468_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 312) ) { return retval; }
            // RPIExprWalker.g:1808:34: ({...}? ID )
            // RPIExprWalker.g:1808:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "PRESENT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyPRESENT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"PRESENT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1468=(CommonTree)match(input,ID,FOLLOW_ID_in_keyPRESENT16441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1468_tree = (CommonTree)adaptor.dupNode(ID1468);

            adaptor.addChild(root_0, ID1468_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 312, keyPRESENT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPRESENT"

    public static class keyREFERENCE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREFERENCE"
    // RPIExprWalker.g:1809:1: keyREFERENCE : {...}? ID ;
    public final RPIExprWalker.keyREFERENCE_return keyREFERENCE() throws RecognitionException {
        RPIExprWalker.keyREFERENCE_return retval = new RPIExprWalker.keyREFERENCE_return();
        retval.start = input.LT(1);
        int keyREFERENCE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1469=null;

        CommonTree ID1469_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 313) ) { return retval; }
            // RPIExprWalker.g:1809:34: ({...}? ID )
            // RPIExprWalker.g:1809:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REFERENCE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREFERENCE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"REFERENCE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1469=(CommonTree)match(input,ID,FOLLOW_ID_in_keyREFERENCE16470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1469_tree = (CommonTree)adaptor.dupNode(ID1469);

            adaptor.addChild(root_0, ID1469_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 313, keyREFERENCE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREFERENCE"

    public static class keyREGEXP_LIKE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREGEXP_LIKE"
    // RPIExprWalker.g:1810:1: keyREGEXP_LIKE : {...}? ID ;
    public final RPIExprWalker.keyREGEXP_LIKE_return keyREGEXP_LIKE() throws RecognitionException {
        RPIExprWalker.keyREGEXP_LIKE_return retval = new RPIExprWalker.keyREGEXP_LIKE_return();
        retval.start = input.LT(1);
        int keyREGEXP_LIKE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1470=null;

        CommonTree ID1470_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 314) ) { return retval; }
            // RPIExprWalker.g:1810:34: ({...}? ID )
            // RPIExprWalker.g:1810:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REGEXP_LIKE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREGEXP_LIKE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"REGEXP_LIKE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1470=(CommonTree)match(input,ID,FOLLOW_ID_in_keyREGEXP_LIKE16497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1470_tree = (CommonTree)adaptor.dupNode(ID1470);

            adaptor.addChild(root_0, ID1470_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 314, keyREGEXP_LIKE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREGEXP_LIKE"

    public static class keyRIGHT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRIGHT"
    // RPIExprWalker.g:1812:1: keyRIGHT : {...}? ID ;
    public final RPIExprWalker.keyRIGHT_return keyRIGHT() throws RecognitionException {
        RPIExprWalker.keyRIGHT_return retval = new RPIExprWalker.keyRIGHT_return();
        retval.start = input.LT(1);
        int keyRIGHT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1471=null;

        CommonTree ID1471_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 315) ) { return retval; }
            // RPIExprWalker.g:1812:34: ({...}? ID )
            // RPIExprWalker.g:1812:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RIGHT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRIGHT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"RIGHT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1471=(CommonTree)match(input,ID,FOLLOW_ID_in_keyRIGHT16531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1471_tree = (CommonTree)adaptor.dupNode(ID1471);

            adaptor.addChild(root_0, ID1471_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 315, keyRIGHT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRIGHT"

    public static class keyROLLUP_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyROLLUP"
    // RPIExprWalker.g:1813:1: keyROLLUP : {...}? ID ;
    public final RPIExprWalker.keyROLLUP_return keyROLLUP() throws RecognitionException {
        RPIExprWalker.keyROLLUP_return retval = new RPIExprWalker.keyROLLUP_return();
        retval.start = input.LT(1);
        int keyROLLUP_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1472=null;

        CommonTree ID1472_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 316) ) { return retval; }
            // RPIExprWalker.g:1813:34: ({...}? ID )
            // RPIExprWalker.g:1813:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ROLLUP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyROLLUP", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"ROLLUP\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1472=(CommonTree)match(input,ID,FOLLOW_ID_in_keyROLLUP16563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1472_tree = (CommonTree)adaptor.dupNode(ID1472);

            adaptor.addChild(root_0, ID1472_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 316, keyROLLUP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyROLLUP"

    public static class keyRULES_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRULES"
    // RPIExprWalker.g:1814:1: keyRULES : {...}? ID ;
    public final RPIExprWalker.keyRULES_return keyRULES() throws RecognitionException {
        RPIExprWalker.keyRULES_return retval = new RPIExprWalker.keyRULES_return();
        retval.start = input.LT(1);
        int keyRULES_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1473=null;

        CommonTree ID1473_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 317) ) { return retval; }
            // RPIExprWalker.g:1814:34: ({...}? ID )
            // RPIExprWalker.g:1814:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RULES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRULES", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"RULES\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1473=(CommonTree)match(input,ID,FOLLOW_ID_in_keyRULES16596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1473_tree = (CommonTree)adaptor.dupNode(ID1473);

            adaptor.addChild(root_0, ID1473_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 317, keyRULES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRULES"

    public static class keySECOND_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySECOND"
    // RPIExprWalker.g:1815:1: keySECOND : {...}? ID ;
    public final RPIExprWalker.keySECOND_return keySECOND() throws RecognitionException {
        RPIExprWalker.keySECOND_return retval = new RPIExprWalker.keySECOND_return();
        retval.start = input.LT(1);
        int keySECOND_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1474=null;

        CommonTree ID1474_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 318) ) { return retval; }
            // RPIExprWalker.g:1815:34: ({...}? ID )
            // RPIExprWalker.g:1815:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SECOND"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECOND", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SECOND\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1474=(CommonTree)match(input,ID,FOLLOW_ID_in_keySECOND16628); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1474_tree = (CommonTree)adaptor.dupNode(ID1474);

            adaptor.addChild(root_0, ID1474_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 318, keySECOND_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySECOND"

    public static class keySECONDS_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySECONDS"
    // RPIExprWalker.g:1816:1: keySECONDS : {...}? ID ;
    public final RPIExprWalker.keySECONDS_return keySECONDS() throws RecognitionException {
        RPIExprWalker.keySECONDS_return retval = new RPIExprWalker.keySECONDS_return();
        retval.start = input.LT(1);
        int keySECONDS_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1475=null;

        CommonTree ID1475_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 319) ) { return retval; }
            // RPIExprWalker.g:1816:34: ({...}? ID )
            // RPIExprWalker.g:1816:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SECONDS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySECONDS", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SECONDS\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1475=(CommonTree)match(input,ID,FOLLOW_ID_in_keySECONDS16659); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1475_tree = (CommonTree)adaptor.dupNode(ID1475);

            adaptor.addChild(root_0, ID1475_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 319, keySECONDS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySECONDS"

    public static class keySEQUENTIAL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySEQUENTIAL"
    // RPIExprWalker.g:1817:1: keySEQUENTIAL : {...}? ID ;
    public final RPIExprWalker.keySEQUENTIAL_return keySEQUENTIAL() throws RecognitionException {
        RPIExprWalker.keySEQUENTIAL_return retval = new RPIExprWalker.keySEQUENTIAL_return();
        retval.start = input.LT(1);
        int keySEQUENTIAL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1476=null;

        CommonTree ID1476_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 320) ) { return retval; }
            // RPIExprWalker.g:1817:34: ({...}? ID )
            // RPIExprWalker.g:1817:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SEQUENTIAL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySEQUENTIAL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SEQUENTIAL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1476=(CommonTree)match(input,ID,FOLLOW_ID_in_keySEQUENTIAL16687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1476_tree = (CommonTree)adaptor.dupNode(ID1476);

            adaptor.addChild(root_0, ID1476_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 320, keySEQUENTIAL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySEQUENTIAL"

    public static class keySESSIONTIMEZONE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySESSIONTIMEZONE"
    // RPIExprWalker.g:1818:1: keySESSIONTIMEZONE : {...}? ID ;
    public final RPIExprWalker.keySESSIONTIMEZONE_return keySESSIONTIMEZONE() throws RecognitionException {
        RPIExprWalker.keySESSIONTIMEZONE_return retval = new RPIExprWalker.keySESSIONTIMEZONE_return();
        retval.start = input.LT(1);
        int keySESSIONTIMEZONE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1477=null;

        CommonTree ID1477_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 321) ) { return retval; }
            // RPIExprWalker.g:1818:34: ({...}? ID )
            // RPIExprWalker.g:1818:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SESSIONTIMEZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySESSIONTIMEZONE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SESSIONTIMEZONE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1477=(CommonTree)match(input,ID,FOLLOW_ID_in_keySESSIONTIMEZONE16710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1477_tree = (CommonTree)adaptor.dupNode(ID1477);

            adaptor.addChild(root_0, ID1477_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 321, keySESSIONTIMEZONE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySESSIONTIMEZONE"

    public static class keySETS_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySETS"
    // RPIExprWalker.g:1819:1: keySETS : {...}? ID ;
    public final RPIExprWalker.keySETS_return keySETS() throws RecognitionException {
        RPIExprWalker.keySETS_return retval = new RPIExprWalker.keySETS_return();
        retval.start = input.LT(1);
        int keySETS_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1478=null;

        CommonTree ID1478_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 322) ) { return retval; }
            // RPIExprWalker.g:1819:34: ({...}? ID )
            // RPIExprWalker.g:1819:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SETS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySETS", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SETS\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1478=(CommonTree)match(input,ID,FOLLOW_ID_in_keySETS16744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1478_tree = (CommonTree)adaptor.dupNode(ID1478);

            adaptor.addChild(root_0, ID1478_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 322, keySETS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySETS"

    public static class keySIBLINGS_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySIBLINGS"
    // RPIExprWalker.g:1820:1: keySIBLINGS : {...}? ID ;
    public final RPIExprWalker.keySIBLINGS_return keySIBLINGS() throws RecognitionException {
        RPIExprWalker.keySIBLINGS_return retval = new RPIExprWalker.keySIBLINGS_return();
        retval.start = input.LT(1);
        int keySIBLINGS_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1479=null;

        CommonTree ID1479_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 323) ) { return retval; }
            // RPIExprWalker.g:1820:34: ({...}? ID )
            // RPIExprWalker.g:1820:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SIBLINGS"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySIBLINGS", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SIBLINGS\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1479=(CommonTree)match(input,ID,FOLLOW_ID_in_keySIBLINGS16774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1479_tree = (CommonTree)adaptor.dupNode(ID1479);

            adaptor.addChild(root_0, ID1479_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 323, keySIBLINGS_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySIBLINGS"

    public static class keySINGLE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySINGLE"
    // RPIExprWalker.g:1821:1: keySINGLE : {...}? ID ;
    public final RPIExprWalker.keySINGLE_return keySINGLE() throws RecognitionException {
        RPIExprWalker.keySINGLE_return retval = new RPIExprWalker.keySINGLE_return();
        retval.start = input.LT(1);
        int keySINGLE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1480=null;

        CommonTree ID1480_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 324) ) { return retval; }
            // RPIExprWalker.g:1821:34: ({...}? ID )
            // RPIExprWalker.g:1821:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SINGLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySINGLE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SINGLE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1480=(CommonTree)match(input,ID,FOLLOW_ID_in_keySINGLE16806); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1480_tree = (CommonTree)adaptor.dupNode(ID1480);

            adaptor.addChild(root_0, ID1480_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 324, keySINGLE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySINGLE"

    public static class keySOME_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySOME"
    // RPIExprWalker.g:1822:1: keySOME : {...}? ID ;
    public final RPIExprWalker.keySOME_return keySOME() throws RecognitionException {
        RPIExprWalker.keySOME_return retval = new RPIExprWalker.keySOME_return();
        retval.start = input.LT(1);
        int keySOME_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1481=null;

        CommonTree ID1481_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 325) ) { return retval; }
            // RPIExprWalker.g:1822:34: ({...}? ID )
            // RPIExprWalker.g:1822:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SOME"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySOME", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SOME\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1481=(CommonTree)match(input,ID,FOLLOW_ID_in_keySOME16840); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1481_tree = (CommonTree)adaptor.dupNode(ID1481);

            adaptor.addChild(root_0, ID1481_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 325, keySOME_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySOME"

    public static class keySUBMULTISET_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySUBMULTISET"
    // RPIExprWalker.g:1823:1: keySUBMULTISET : {...}? ID ;
    public final RPIExprWalker.keySUBMULTISET_return keySUBMULTISET() throws RecognitionException {
        RPIExprWalker.keySUBMULTISET_return retval = new RPIExprWalker.keySUBMULTISET_return();
        retval.start = input.LT(1);
        int keySUBMULTISET_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1482=null;

        CommonTree ID1482_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 326) ) { return retval; }
            // RPIExprWalker.g:1823:34: ({...}? ID )
            // RPIExprWalker.g:1823:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SUBMULTISET"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBMULTISET", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SUBMULTISET\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1482=(CommonTree)match(input,ID,FOLLOW_ID_in_keySUBMULTISET16867); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1482_tree = (CommonTree)adaptor.dupNode(ID1482);

            adaptor.addChild(root_0, ID1482_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 326, keySUBMULTISET_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySUBMULTISET"

    public static class keyTIME_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTIME"
    // RPIExprWalker.g:1824:1: keyTIME : {...}? ID ;
    public final RPIExprWalker.keyTIME_return keyTIME() throws RecognitionException {
        RPIExprWalker.keyTIME_return retval = new RPIExprWalker.keyTIME_return();
        retval.start = input.LT(1);
        int keyTIME_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1483=null;

        CommonTree ID1483_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 327) ) { return retval; }
            // RPIExprWalker.g:1824:34: ({...}? ID )
            // RPIExprWalker.g:1824:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIME"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIME", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"TIME\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1483=(CommonTree)match(input,ID,FOLLOW_ID_in_keyTIME16901); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1483_tree = (CommonTree)adaptor.dupNode(ID1483);

            adaptor.addChild(root_0, ID1483_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 327, keyTIME_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTIME"

    public static class keyTIMESTAMP_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTIMESTAMP"
    // RPIExprWalker.g:1825:1: keyTIMESTAMP : {...}? ID ;
    public final RPIExprWalker.keyTIMESTAMP_return keyTIMESTAMP() throws RecognitionException {
        RPIExprWalker.keyTIMESTAMP_return retval = new RPIExprWalker.keyTIMESTAMP_return();
        retval.start = input.LT(1);
        int keyTIMESTAMP_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1484=null;

        CommonTree ID1484_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 328) ) { return retval; }
            // RPIExprWalker.g:1825:34: ({...}? ID )
            // RPIExprWalker.g:1825:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTIMESTAMP", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"TIMESTAMP\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1484=(CommonTree)match(input,ID,FOLLOW_ID_in_keyTIMESTAMP16930); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1484_tree = (CommonTree)adaptor.dupNode(ID1484);

            adaptor.addChild(root_0, ID1484_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 328, keyTIMESTAMP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTIMESTAMP"

    public static class keyTHE_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTHE"
    // RPIExprWalker.g:1826:1: keyTHE returns [StringBuffer value] : {...}? ID ;
    public final RPIExprWalker.keyTHE_return keyTHE() throws RecognitionException {
        RPIExprWalker.keyTHE_return retval = new RPIExprWalker.keyTHE_return();
        retval.start = input.LT(1);
        int keyTHE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1485=null;

        CommonTree ID1485_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 329) ) { return retval; }
            // RPIExprWalker.g:1826:37: ({...}? ID )
            // RPIExprWalker.g:1826:39: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "THE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTHE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"THE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1485=(CommonTree)match(input,ID,FOLLOW_ID_in_keyTHE16943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1485_tree = (CommonTree)adaptor.dupNode(ID1485);

            adaptor.addChild(root_0, ID1485_tree);
            }
            if ( state.backtracking==0 ) {
              retval.value = new StringBuffer(" THE");
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 329, keyTHE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTHE"

    public static class keyUNDER_PATH_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUNDER_PATH"
    // RPIExprWalker.g:1828:1: keyUNDER_PATH : {...}? ID ;
    public final RPIExprWalker.keyUNDER_PATH_return keyUNDER_PATH() throws RecognitionException {
        RPIExprWalker.keyUNDER_PATH_return retval = new RPIExprWalker.keyUNDER_PATH_return();
        retval.start = input.LT(1);
        int keyUNDER_PATH_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1486=null;

        CommonTree ID1486_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 330) ) { return retval; }
            // RPIExprWalker.g:1828:34: ({...}? ID )
            // RPIExprWalker.g:1828:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UNDER_PATH"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNDER_PATH", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"UNDER_PATH\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1486=(CommonTree)match(input,ID,FOLLOW_ID_in_keyUNDER_PATH17012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1486_tree = (CommonTree)adaptor.dupNode(ID1486);

            adaptor.addChild(root_0, ID1486_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 330, keyUNDER_PATH_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUNDER_PATH"

    public static class keyUNTIL_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUNTIL"
    // RPIExprWalker.g:1829:1: keyUNTIL : {...}? ID ;
    public final RPIExprWalker.keyUNTIL_return keyUNTIL() throws RecognitionException {
        RPIExprWalker.keyUNTIL_return retval = new RPIExprWalker.keyUNTIL_return();
        retval.start = input.LT(1);
        int keyUNTIL_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1487=null;

        CommonTree ID1487_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 331) ) { return retval; }
            // RPIExprWalker.g:1829:34: ({...}? ID )
            // RPIExprWalker.g:1829:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UNTIL"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUNTIL", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"UNTIL\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1487=(CommonTree)match(input,ID,FOLLOW_ID_in_keyUNTIL17045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1487_tree = (CommonTree)adaptor.dupNode(ID1487);

            adaptor.addChild(root_0, ID1487_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 331, keyUNTIL_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUNTIL"

    public static class keyUPDATED_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUPDATED"
    // RPIExprWalker.g:1830:1: keyUPDATED : {...}? ID ;
    public final RPIExprWalker.keyUPDATED_return keyUPDATED() throws RecognitionException {
        RPIExprWalker.keyUPDATED_return retval = new RPIExprWalker.keyUPDATED_return();
        retval.start = input.LT(1);
        int keyUPDATED_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1488=null;

        CommonTree ID1488_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 332) ) { return retval; }
            // RPIExprWalker.g:1830:34: ({...}? ID )
            // RPIExprWalker.g:1830:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UPDATED"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPDATED", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"UPDATED\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1488=(CommonTree)match(input,ID,FOLLOW_ID_in_keyUPDATED17076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1488_tree = (CommonTree)adaptor.dupNode(ID1488);

            adaptor.addChild(root_0, ID1488_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 332, keyUPDATED_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUPDATED"

    public static class keyUPSERT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUPSERT"
    // RPIExprWalker.g:1831:1: keyUPSERT : {...}? ID ;
    public final RPIExprWalker.keyUPSERT_return keyUPSERT() throws RecognitionException {
        RPIExprWalker.keyUPSERT_return retval = new RPIExprWalker.keyUPSERT_return();
        retval.start = input.LT(1);
        int keyUPSERT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1489=null;

        CommonTree ID1489_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 333) ) { return retval; }
            // RPIExprWalker.g:1831:34: ({...}? ID )
            // RPIExprWalker.g:1831:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "UPSERT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUPSERT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"UPSERT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1489=(CommonTree)match(input,ID,FOLLOW_ID_in_keyUPSERT17108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1489_tree = (CommonTree)adaptor.dupNode(ID1489);

            adaptor.addChild(root_0, ID1489_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 333, keyUPSERT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUPSERT"

    public static class keyWAIT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyWAIT"
    // RPIExprWalker.g:1832:1: keyWAIT : {...}? ID ;
    public final RPIExprWalker.keyWAIT_return keyWAIT() throws RecognitionException {
        RPIExprWalker.keyWAIT_return retval = new RPIExprWalker.keyWAIT_return();
        retval.start = input.LT(1);
        int keyWAIT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1490=null;

        CommonTree ID1490_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 334) ) { return retval; }
            // RPIExprWalker.g:1832:34: ({...}? ID )
            // RPIExprWalker.g:1832:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "WAIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWAIT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"WAIT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1490=(CommonTree)match(input,ID,FOLLOW_ID_in_keyWAIT17142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1490_tree = (CommonTree)adaptor.dupNode(ID1490);

            adaptor.addChild(root_0, ID1490_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 334, keyWAIT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyWAIT"

    public static class keyYEAR_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyYEAR"
    // RPIExprWalker.g:1833:1: keyYEAR : {...}? ID ;
    public final RPIExprWalker.keyYEAR_return keyYEAR() throws RecognitionException {
        RPIExprWalker.keyYEAR_return retval = new RPIExprWalker.keyYEAR_return();
        retval.start = input.LT(1);
        int keyYEAR_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1491=null;

        CommonTree ID1491_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 335) ) { return retval; }
            // RPIExprWalker.g:1833:34: ({...}? ID )
            // RPIExprWalker.g:1833:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "YEAR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyYEAR", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"YEAR\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1491=(CommonTree)match(input,ID,FOLLOW_ID_in_keyYEAR17176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1491_tree = (CommonTree)adaptor.dupNode(ID1491);

            adaptor.addChild(root_0, ID1491_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 335, keyYEAR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyYEAR"

    public static class keyZONE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyZONE"
    // RPIExprWalker.g:1834:1: keyZONE : {...}? ID ;
    public final RPIExprWalker.keyZONE_return keyZONE() throws RecognitionException {
        RPIExprWalker.keyZONE_return retval = new RPIExprWalker.keyZONE_return();
        retval.start = input.LT(1);
        int keyZONE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1492=null;

        CommonTree ID1492_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 336) ) { return retval; }
            // RPIExprWalker.g:1834:34: ({...}? ID )
            // RPIExprWalker.g:1834:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ZONE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyZONE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"ZONE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1492=(CommonTree)match(input,ID,FOLLOW_ID_in_keyZONE17210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1492_tree = (CommonTree)adaptor.dupNode(ID1492);

            adaptor.addChild(root_0, ID1492_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 336, keyZONE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyZONE"

    public static class keyARRAY_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyARRAY"
    // RPIExprWalker.g:1836:1: keyARRAY : {...}? ID ;
    public final RPIExprWalker.keyARRAY_return keyARRAY() throws RecognitionException {
        RPIExprWalker.keyARRAY_return retval = new RPIExprWalker.keyARRAY_return();
        retval.start = input.LT(1);
        int keyARRAY_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1493=null;

        CommonTree ID1493_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 337) ) { return retval; }
            // RPIExprWalker.g:1836:34: ({...}? ID )
            // RPIExprWalker.g:1836:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "ARRAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyARRAY", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"ARRAY\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1493=(CommonTree)match(input,ID,FOLLOW_ID_in_keyARRAY17244); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1493_tree = (CommonTree)adaptor.dupNode(ID1493);

            adaptor.addChild(root_0, ID1493_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 337, keyARRAY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyARRAY"

    public static class keyAUTONOMOUS_TRANSACTION_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyAUTONOMOUS_TRANSACTION"
    // RPIExprWalker.g:1837:1: keyAUTONOMOUS_TRANSACTION : {...}? ID ;
    public final RPIExprWalker.keyAUTONOMOUS_TRANSACTION_return keyAUTONOMOUS_TRANSACTION() throws RecognitionException {
        RPIExprWalker.keyAUTONOMOUS_TRANSACTION_return retval = new RPIExprWalker.keyAUTONOMOUS_TRANSACTION_return();
        retval.start = input.LT(1);
        int keyAUTONOMOUS_TRANSACTION_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1494=null;

        CommonTree ID1494_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 338) ) { return retval; }
            // RPIExprWalker.g:1837:34: ({...}? ID )
            // RPIExprWalker.g:1837:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "AUTONOMOUS_TRANSACTION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyAUTONOMOUS_TRANSACTION", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"AUTONOMOUS_TRANSACTION\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1494=(CommonTree)match(input,ID,FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION17260); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1494_tree = (CommonTree)adaptor.dupNode(ID1494);

            adaptor.addChild(root_0, ID1494_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 338, keyAUTONOMOUS_TRANSACTION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyAUTONOMOUS_TRANSACTION"

    public static class keyBODY_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBODY"
    // RPIExprWalker.g:1838:1: keyBODY : {...}? ID ;
    public final RPIExprWalker.keyBODY_return keyBODY() throws RecognitionException {
        RPIExprWalker.keyBODY_return retval = new RPIExprWalker.keyBODY_return();
        retval.start = input.LT(1);
        int keyBODY_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1495=null;

        CommonTree ID1495_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 339) ) { return retval; }
            // RPIExprWalker.g:1838:34: ({...}? ID )
            // RPIExprWalker.g:1838:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BODY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBODY", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"BODY\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1495=(CommonTree)match(input,ID,FOLLOW_ID_in_keyBODY17294); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1495_tree = (CommonTree)adaptor.dupNode(ID1495);

            adaptor.addChild(root_0, ID1495_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 339, keyBODY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBODY"

    public static class keyBUILTIN_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBUILTIN"
    // RPIExprWalker.g:1839:1: keyBUILTIN : {...}? ID ;
    public final RPIExprWalker.keyBUILTIN_return keyBUILTIN() throws RecognitionException {
        RPIExprWalker.keyBUILTIN_return retval = new RPIExprWalker.keyBUILTIN_return();
        retval.start = input.LT(1);
        int keyBUILTIN_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1496=null;

        CommonTree ID1496_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 340) ) { return retval; }
            // RPIExprWalker.g:1839:34: ({...}? ID )
            // RPIExprWalker.g:1839:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBUILTIN", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"BUILTIN\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1496=(CommonTree)match(input,ID,FOLLOW_ID_in_keyBUILTIN17325); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1496_tree = (CommonTree)adaptor.dupNode(ID1496);

            adaptor.addChild(root_0, ID1496_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 340, keyBUILTIN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBUILTIN"

    public static class keyBULK_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBULK"
    // RPIExprWalker.g:1840:1: keyBULK : {...}? ID ;
    public final RPIExprWalker.keyBULK_return keyBULK() throws RecognitionException {
        RPIExprWalker.keyBULK_return retval = new RPIExprWalker.keyBULK_return();
        retval.start = input.LT(1);
        int keyBULK_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1497=null;

        CommonTree ID1497_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 341) ) { return retval; }
            // RPIExprWalker.g:1840:34: ({...}? ID )
            // RPIExprWalker.g:1840:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BULK"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBULK", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"BULK\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1497=(CommonTree)match(input,ID,FOLLOW_ID_in_keyBULK17359); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1497_tree = (CommonTree)adaptor.dupNode(ID1497);

            adaptor.addChild(root_0, ID1497_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 341, keyBULK_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBULK"

    public static class keyBYTE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyBYTE"
    // RPIExprWalker.g:1841:1: keyBYTE : {...}? ID ;
    public final RPIExprWalker.keyBYTE_return keyBYTE() throws RecognitionException {
        RPIExprWalker.keyBYTE_return retval = new RPIExprWalker.keyBYTE_return();
        retval.start = input.LT(1);
        int keyBYTE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1498=null;

        CommonTree ID1498_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 342) ) { return retval; }
            // RPIExprWalker.g:1841:34: ({...}? ID )
            // RPIExprWalker.g:1841:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BYTE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyBYTE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"BYTE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1498=(CommonTree)match(input,ID,FOLLOW_ID_in_keyBYTE17393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1498_tree = (CommonTree)adaptor.dupNode(ID1498);

            adaptor.addChild(root_0, ID1498_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 342, keyBYTE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyBYTE"

    public static class keyCLOSE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCLOSE"
    // RPIExprWalker.g:1842:1: keyCLOSE : {...}? ID ;
    public final RPIExprWalker.keyCLOSE_return keyCLOSE() throws RecognitionException {
        RPIExprWalker.keyCLOSE_return retval = new RPIExprWalker.keyCLOSE_return();
        retval.start = input.LT(1);
        int keyCLOSE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1499=null;

        CommonTree ID1499_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 343) ) { return retval; }
            // RPIExprWalker.g:1842:34: ({...}? ID )
            // RPIExprWalker.g:1842:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CLOSE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCLOSE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"CLOSE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1499=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCLOSE17426); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1499_tree = (CommonTree)adaptor.dupNode(ID1499);

            adaptor.addChild(root_0, ID1499_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 343, keyCLOSE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCLOSE"

    public static class keyCOLLECT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCOLLECT"
    // RPIExprWalker.g:1843:1: keyCOLLECT : {...}? ID ;
    public final RPIExprWalker.keyCOLLECT_return keyCOLLECT() throws RecognitionException {
        RPIExprWalker.keyCOLLECT_return retval = new RPIExprWalker.keyCOLLECT_return();
        retval.start = input.LT(1);
        int keyCOLLECT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1500=null;

        CommonTree ID1500_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 344) ) { return retval; }
            // RPIExprWalker.g:1843:34: ({...}? ID )
            // RPIExprWalker.g:1843:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "COLLECT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCOLLECT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"COLLECT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1500=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCOLLECT17457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1500_tree = (CommonTree)adaptor.dupNode(ID1500);

            adaptor.addChild(root_0, ID1500_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 344, keyCOLLECT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCOLLECT"

    public static class keyCURSOR_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyCURSOR"
    // RPIExprWalker.g:1844:1: keyCURSOR : {...}? ID ;
    public final RPIExprWalker.keyCURSOR_return keyCURSOR() throws RecognitionException {
        RPIExprWalker.keyCURSOR_return retval = new RPIExprWalker.keyCURSOR_return();
        retval.start = input.LT(1);
        int keyCURSOR_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1501=null;

        CommonTree ID1501_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 345) ) { return retval; }
            // RPIExprWalker.g:1844:34: ({...}? ID )
            // RPIExprWalker.g:1844:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "CURSOR"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyCURSOR", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"CURSOR\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1501=(CommonTree)match(input,ID,FOLLOW_ID_in_keyCURSOR17489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1501_tree = (CommonTree)adaptor.dupNode(ID1501);

            adaptor.addChild(root_0, ID1501_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 345, keyCURSOR_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyCURSOR"

    public static class keyELSIF_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyELSIF"
    // RPIExprWalker.g:1845:1: keyELSIF : 'ELSIF' ;
    public final RPIExprWalker.keyELSIF_return keyELSIF() throws RecognitionException {
        RPIExprWalker.keyELSIF_return retval = new RPIExprWalker.keyELSIF_return();
        retval.start = input.LT(1);
        int keyELSIF_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1502=null;

        CommonTree string_literal1502_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 346) ) { return retval; }
            // RPIExprWalker.g:1845:34: ( 'ELSIF' )
            // RPIExprWalker.g:1845:36: 'ELSIF'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1502=(CommonTree)match(input,213,FOLLOW_213_in_keyELSIF17520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1502_tree = (CommonTree)adaptor.dupNode(string_literal1502);

            adaptor.addChild(root_0, string_literal1502_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 346, keyELSIF_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyELSIF"

    public static class keyEXCEPTION_INIT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEXCEPTION_INIT"
    // RPIExprWalker.g:1846:1: keyEXCEPTION_INIT : {...}? ID ;
    public final RPIExprWalker.keyEXCEPTION_INIT_return keyEXCEPTION_INIT() throws RecognitionException {
        RPIExprWalker.keyEXCEPTION_INIT_return retval = new RPIExprWalker.keyEXCEPTION_INIT_return();
        retval.start = input.LT(1);
        int keyEXCEPTION_INIT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1503=null;

        CommonTree ID1503_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 347) ) { return retval; }
            // RPIExprWalker.g:1846:34: ({...}? ID )
            // RPIExprWalker.g:1846:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EXCEPTION_INIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXCEPTION_INIT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"EXCEPTION_INIT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1503=(CommonTree)match(input,ID,FOLLOW_ID_in_keyEXCEPTION_INIT17545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1503_tree = (CommonTree)adaptor.dupNode(ID1503);

            adaptor.addChild(root_0, ID1503_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 347, keyEXCEPTION_INIT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEXCEPTION_INIT"

    public static class keyEXIT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyEXIT"
    // RPIExprWalker.g:1847:1: keyEXIT : {...}? ID ;
    public final RPIExprWalker.keyEXIT_return keyEXIT() throws RecognitionException {
        RPIExprWalker.keyEXIT_return retval = new RPIExprWalker.keyEXIT_return();
        retval.start = input.LT(1);
        int keyEXIT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1504=null;

        CommonTree ID1504_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 348) ) { return retval; }
            // RPIExprWalker.g:1847:34: ({...}? ID )
            // RPIExprWalker.g:1847:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EXIT"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyEXIT", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"EXIT\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1504=(CommonTree)match(input,ID,FOLLOW_ID_in_keyEXIT17579); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1504_tree = (CommonTree)adaptor.dupNode(ID1504);

            adaptor.addChild(root_0, ID1504_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 348, keyEXIT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyEXIT"

    public static class keyFIPSFLAG_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFIPSFLAG"
    // RPIExprWalker.g:1848:1: keyFIPSFLAG : {...}? ID ;
    public final RPIExprWalker.keyFIPSFLAG_return keyFIPSFLAG() throws RecognitionException {
        RPIExprWalker.keyFIPSFLAG_return retval = new RPIExprWalker.keyFIPSFLAG_return();
        retval.start = input.LT(1);
        int keyFIPSFLAG_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1505=null;

        CommonTree ID1505_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 349) ) { return retval; }
            // RPIExprWalker.g:1848:34: ({...}? ID )
            // RPIExprWalker.g:1848:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyFIPSFLAG", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"FIPSFLAG\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1505=(CommonTree)match(input,ID,FOLLOW_ID_in_keyFIPSFLAG17609); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1505_tree = (CommonTree)adaptor.dupNode(ID1505);

            adaptor.addChild(root_0, ID1505_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 349, keyFIPSFLAG_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFIPSFLAG"

    public static class keyFUNCTION_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyFUNCTION"
    // RPIExprWalker.g:1849:1: keyFUNCTION : 'FUNCTION' ;
    public final RPIExprWalker.keyFUNCTION_return keyFUNCTION() throws RecognitionException {
        RPIExprWalker.keyFUNCTION_return retval = new RPIExprWalker.keyFUNCTION_return();
        retval.start = input.LT(1);
        int keyFUNCTION_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1506=null;

        CommonTree string_literal1506_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 350) ) { return retval; }
            // RPIExprWalker.g:1849:34: ( 'FUNCTION' )
            // RPIExprWalker.g:1849:36: 'FUNCTION'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1506=(CommonTree)match(input,162,FOLLOW_162_in_keyFUNCTION17637); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1506_tree = (CommonTree)adaptor.dupNode(string_literal1506);

            adaptor.addChild(root_0, string_literal1506_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 350, keyFUNCTION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyFUNCTION"

    public static class keyINTERFACE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyINTERFACE"
    // RPIExprWalker.g:1850:1: keyINTERFACE : {...}? ID ;
    public final RPIExprWalker.keyINTERFACE_return keyINTERFACE() throws RecognitionException {
        RPIExprWalker.keyINTERFACE_return retval = new RPIExprWalker.keyINTERFACE_return();
        retval.start = input.LT(1);
        int keyINTERFACE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1507=null;

        CommonTree ID1507_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 351) ) { return retval; }
            // RPIExprWalker.g:1850:34: ({...}? ID )
            // RPIExprWalker.g:1850:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyINTERFACE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"INTERFACE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1507=(CommonTree)match(input,ID,FOLLOW_ID_in_keyINTERFACE17667); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1507_tree = (CommonTree)adaptor.dupNode(ID1507);

            adaptor.addChild(root_0, ID1507_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 351, keyINTERFACE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyINTERFACE"

    public static class keyLOOP_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyLOOP"
    // RPIExprWalker.g:1851:1: keyLOOP : 'LOOP' ;
    public final RPIExprWalker.keyLOOP_return keyLOOP() throws RecognitionException {
        RPIExprWalker.keyLOOP_return retval = new RPIExprWalker.keyLOOP_return();
        retval.start = input.LT(1);
        int keyLOOP_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1508=null;

        CommonTree string_literal1508_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 352) ) { return retval; }
            // RPIExprWalker.g:1851:34: ( 'LOOP' )
            // RPIExprWalker.g:1851:36: 'LOOP'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1508=(CommonTree)match(input,214,FOLLOW_214_in_keyLOOP17699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1508_tree = (CommonTree)adaptor.dupNode(string_literal1508);

            adaptor.addChild(root_0, string_literal1508_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 352, keyLOOP_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyLOOP"

    public static class keyNEW_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNEW"
    // RPIExprWalker.g:1852:1: keyNEW : {...}? ID ;
    public final RPIExprWalker.keyNEW_return keyNEW() throws RecognitionException {
        RPIExprWalker.keyNEW_return retval = new RPIExprWalker.keyNEW_return();
        retval.start = input.LT(1);
        int keyNEW_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1509=null;

        CommonTree ID1509_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 353) ) { return retval; }
            // RPIExprWalker.g:1852:34: ({...}? ID )
            // RPIExprWalker.g:1852:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NEW"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NEW\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1509=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNEW17735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1509_tree = (CommonTree)adaptor.dupNode(ID1509);

            adaptor.addChild(root_0, ID1509_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 353, keyNEW_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNEW"

    public static class keyNEW_NAMES_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyNEW_NAMES"
    // RPIExprWalker.g:1853:1: keyNEW_NAMES : {...}? ID ;
    public final RPIExprWalker.keyNEW_NAMES_return keyNEW_NAMES() throws RecognitionException {
        RPIExprWalker.keyNEW_NAMES_return retval = new RPIExprWalker.keyNEW_NAMES_return();
        retval.start = input.LT(1);
        int keyNEW_NAMES_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1510=null;

        CommonTree ID1510_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 354) ) { return retval; }
            // RPIExprWalker.g:1853:34: ({...}? ID )
            // RPIExprWalker.g:1853:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyNEW_NAMES", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"NEW_NAMES\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1510=(CommonTree)match(input,ID,FOLLOW_ID_in_keyNEW_NAMES17764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1510_tree = (CommonTree)adaptor.dupNode(ID1510);

            adaptor.addChild(root_0, ID1510_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 354, keyNEW_NAMES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyNEW_NAMES"

    public static class keyOPEN_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyOPEN"
    // RPIExprWalker.g:1854:1: keyOPEN : {...}? ID ;
    public final RPIExprWalker.keyOPEN_return keyOPEN() throws RecognitionException {
        RPIExprWalker.keyOPEN_return retval = new RPIExprWalker.keyOPEN_return();
        retval.start = input.LT(1);
        int keyOPEN_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1511=null;

        CommonTree ID1511_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 355) ) { return retval; }
            // RPIExprWalker.g:1854:34: ({...}? ID )
            // RPIExprWalker.g:1854:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "OPEN"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyOPEN", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"OPEN\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1511=(CommonTree)match(input,ID,FOLLOW_ID_in_keyOPEN17798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1511_tree = (CommonTree)adaptor.dupNode(ID1511);

            adaptor.addChild(root_0, ID1511_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 355, keyOPEN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyOPEN"

    public static class keyOUT_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyOUT"
    // RPIExprWalker.g:1855:1: keyOUT : 'OUT' ;
    public final RPIExprWalker.keyOUT_return keyOUT() throws RecognitionException {
        RPIExprWalker.keyOUT_return retval = new RPIExprWalker.keyOUT_return();
        retval.start = input.LT(1);
        int keyOUT_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1512=null;

        CommonTree string_literal1512_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 356) ) { return retval; }
            // RPIExprWalker.g:1855:34: ( 'OUT' )
            // RPIExprWalker.g:1855:36: 'OUT'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1512=(CommonTree)match(input,215,FOLLOW_215_in_keyOUT17831); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1512_tree = (CommonTree)adaptor.dupNode(string_literal1512);

            adaptor.addChild(root_0, string_literal1512_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 356, keyOUT_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyOUT"

    public static class keyPACKAGE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPACKAGE"
    // RPIExprWalker.g:1856:1: keyPACKAGE : 'PACKAGE' ;
    public final RPIExprWalker.keyPACKAGE_return keyPACKAGE() throws RecognitionException {
        RPIExprWalker.keyPACKAGE_return retval = new RPIExprWalker.keyPACKAGE_return();
        retval.start = input.LT(1);
        int keyPACKAGE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1513=null;

        CommonTree string_literal1513_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 357) ) { return retval; }
            // RPIExprWalker.g:1856:34: ( 'PACKAGE' )
            // RPIExprWalker.g:1856:36: 'PACKAGE'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1513=(CommonTree)match(input,216,FOLLOW_216_in_keyPACKAGE17861); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1513_tree = (CommonTree)adaptor.dupNode(string_literal1513);

            adaptor.addChild(root_0, string_literal1513_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 357, keyPACKAGE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPACKAGE"

    public static class keyPRAGMA_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyPRAGMA"
    // RPIExprWalker.g:1857:1: keyPRAGMA : 'PRAGMA' ;
    public final RPIExprWalker.keyPRAGMA_return keyPRAGMA() throws RecognitionException {
        RPIExprWalker.keyPRAGMA_return retval = new RPIExprWalker.keyPRAGMA_return();
        retval.start = input.LT(1);
        int keyPRAGMA_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1514=null;

        CommonTree string_literal1514_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 358) ) { return retval; }
            // RPIExprWalker.g:1857:34: ( 'PRAGMA' )
            // RPIExprWalker.g:1857:36: 'PRAGMA'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1514=(CommonTree)match(input,217,FOLLOW_217_in_keyPRAGMA17892); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1514_tree = (CommonTree)adaptor.dupNode(string_literal1514);

            adaptor.addChild(root_0, string_literal1514_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 358, keyPRAGMA_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyPRAGMA"

    public static class keyRAISE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRAISE"
    // RPIExprWalker.g:1858:1: keyRAISE : 'RAISE' ;
    public final RPIExprWalker.keyRAISE_return keyRAISE() throws RecognitionException {
        RPIExprWalker.keyRAISE_return retval = new RPIExprWalker.keyRAISE_return();
        retval.start = input.LT(1);
        int keyRAISE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1515=null;

        CommonTree string_literal1515_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 359) ) { return retval; }
            // RPIExprWalker.g:1858:34: ( 'RAISE' )
            // RPIExprWalker.g:1858:36: 'RAISE'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1515=(CommonTree)match(input,218,FOLLOW_218_in_keyRAISE17924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1515_tree = (CommonTree)adaptor.dupNode(string_literal1515);

            adaptor.addChild(root_0, string_literal1515_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 359, keyRAISE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRAISE"

    public static class keyRANGE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRANGE"
    // RPIExprWalker.g:1859:1: keyRANGE : {...}? ID ;
    public final RPIExprWalker.keyRANGE_return keyRANGE() throws RecognitionException {
        RPIExprWalker.keyRANGE_return retval = new RPIExprWalker.keyRANGE_return();
        retval.start = input.LT(1);
        int keyRANGE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1516=null;

        CommonTree ID1516_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 360) ) { return retval; }
            // RPIExprWalker.g:1859:34: ({...}? ID )
            // RPIExprWalker.g:1859:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RANGE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRANGE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"RANGE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1516=(CommonTree)match(input,ID,FOLLOW_ID_in_keyRANGE17958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1516_tree = (CommonTree)adaptor.dupNode(ID1516);

            adaptor.addChild(root_0, ID1516_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 360, keyRANGE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRANGE"

    public static class keyREAD_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREAD"
    // RPIExprWalker.g:1860:1: keyREAD : {...}? ID ;
    public final RPIExprWalker.keyREAD_return keyREAD() throws RecognitionException {
        RPIExprWalker.keyREAD_return retval = new RPIExprWalker.keyREAD_return();
        retval.start = input.LT(1);
        int keyREAD_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1517=null;

        CommonTree ID1517_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 361) ) { return retval; }
            // RPIExprWalker.g:1860:34: ({...}? ID )
            // RPIExprWalker.g:1860:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "READ"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREAD", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"READ\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1517=(CommonTree)match(input,ID,FOLLOW_ID_in_keyREAD17992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1517_tree = (CommonTree)adaptor.dupNode(ID1517);

            adaptor.addChild(root_0, ID1517_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 361, keyREAD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREAD"

    public static class keyRECORD_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRECORD"
    // RPIExprWalker.g:1861:1: keyRECORD : 'RECORD' ;
    public final RPIExprWalker.keyRECORD_return keyRECORD() throws RecognitionException {
        RPIExprWalker.keyRECORD_return retval = new RPIExprWalker.keyRECORD_return();
        retval.start = input.LT(1);
        int keyRECORD_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1518=null;

        CommonTree string_literal1518_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 362) ) { return retval; }
            // RPIExprWalker.g:1861:34: ( 'RECORD' )
            // RPIExprWalker.g:1861:36: 'RECORD'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1518=(CommonTree)match(input,219,FOLLOW_219_in_keyRECORD18022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1518_tree = (CommonTree)adaptor.dupNode(string_literal1518);

            adaptor.addChild(root_0, string_literal1518_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 362, keyRECORD_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRECORD"

    public static class keyREF_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREF"
    // RPIExprWalker.g:1862:1: keyREF : {...}? ID ;
    public final RPIExprWalker.keyREF_return keyREF() throws RecognitionException {
        RPIExprWalker.keyREF_return retval = new RPIExprWalker.keyREF_return();
        retval.start = input.LT(1);
        int keyREF_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1519=null;

        CommonTree ID1519_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 363) ) { return retval; }
            // RPIExprWalker.g:1862:34: ({...}? ID )
            // RPIExprWalker.g:1862:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REF"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREF", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"REF\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1519=(CommonTree)match(input,ID,FOLLOW_ID_in_keyREF18058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1519_tree = (CommonTree)adaptor.dupNode(ID1519);

            adaptor.addChild(root_0, ID1519_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 363, keyREF_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREF"

    public static class keyREPLACE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREPLACE"
    // RPIExprWalker.g:1863:1: keyREPLACE : {...}? ID ;
    public final RPIExprWalker.keyREPLACE_return keyREPLACE() throws RecognitionException {
        RPIExprWalker.keyREPLACE_return retval = new RPIExprWalker.keyREPLACE_return();
        retval.start = input.LT(1);
        int keyREPLACE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1520=null;

        CommonTree ID1520_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 364) ) { return retval; }
            // RPIExprWalker.g:1863:34: ({...}? ID )
            // RPIExprWalker.g:1863:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REPLACE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREPLACE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"REPLACE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1520=(CommonTree)match(input,ID,FOLLOW_ID_in_keyREPLACE18089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1520_tree = (CommonTree)adaptor.dupNode(ID1520);

            adaptor.addChild(root_0, ID1520_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 364, keyREPLACE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREPLACE"

    public static class keyRESTRICT_REFERENCES_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRESTRICT_REFERENCES"
    // RPIExprWalker.g:1864:1: keyRESTRICT_REFERENCES : {...}? ID ;
    public final RPIExprWalker.keyRESTRICT_REFERENCES_return keyRESTRICT_REFERENCES() throws RecognitionException {
        RPIExprWalker.keyRESTRICT_REFERENCES_return retval = new RPIExprWalker.keyRESTRICT_REFERENCES_return();
        retval.start = input.LT(1);
        int keyRESTRICT_REFERENCES_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1521=null;

        CommonTree ID1521_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 365) ) { return retval; }
            // RPIExprWalker.g:1864:34: ({...}? ID )
            // RPIExprWalker.g:1864:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RESTRICT_REFERENCES"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyRESTRICT_REFERENCES", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"RESTRICT_REFERENCES\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1521=(CommonTree)match(input,ID,FOLLOW_ID_in_keyRESTRICT_REFERENCES18108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1521_tree = (CommonTree)adaptor.dupNode(ID1521);

            adaptor.addChild(root_0, ID1521_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 365, keyRESTRICT_REFERENCES_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRESTRICT_REFERENCES"

    public static class keyRETURN_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRETURN"
    // RPIExprWalker.g:1865:1: keyRETURN : 'RETURN' ;
    public final RPIExprWalker.keyRETURN_return keyRETURN() throws RecognitionException {
        RPIExprWalker.keyRETURN_return retval = new RPIExprWalker.keyRETURN_return();
        retval.start = input.LT(1);
        int keyRETURN_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1522=null;

        CommonTree string_literal1522_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 366) ) { return retval; }
            // RPIExprWalker.g:1865:34: ( 'RETURN' )
            // RPIExprWalker.g:1865:36: 'RETURN'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1522=(CommonTree)match(input,220,FOLLOW_220_in_keyRETURN18138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1522_tree = (CommonTree)adaptor.dupNode(string_literal1522);

            adaptor.addChild(root_0, string_literal1522_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 366, keyRETURN_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRETURN"

    public static class keyRETURNING_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyRETURNING"
    // RPIExprWalker.g:1866:1: keyRETURNING : 'RETURNING' ;
    public final RPIExprWalker.keyRETURNING_return keyRETURNING() throws RecognitionException {
        RPIExprWalker.keyRETURNING_return retval = new RPIExprWalker.keyRETURNING_return();
        retval.start = input.LT(1);
        int keyRETURNING_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1523=null;

        CommonTree string_literal1523_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 367) ) { return retval; }
            // RPIExprWalker.g:1866:34: ( 'RETURNING' )
            // RPIExprWalker.g:1866:36: 'RETURNING'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1523=(CommonTree)match(input,221,FOLLOW_221_in_keyRETURNING18166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1523_tree = (CommonTree)adaptor.dupNode(string_literal1523);

            adaptor.addChild(root_0, string_literal1523_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 367, keyRETURNING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyRETURNING"

    public static class keyREVERSE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyREVERSE"
    // RPIExprWalker.g:1867:1: keyREVERSE : {...}? ID ;
    public final RPIExprWalker.keyREVERSE_return keyREVERSE() throws RecognitionException {
        RPIExprWalker.keyREVERSE_return retval = new RPIExprWalker.keyREVERSE_return();
        retval.start = input.LT(1);
        int keyREVERSE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1524=null;

        CommonTree ID1524_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 368) ) { return retval; }
            // RPIExprWalker.g:1867:34: ({...}? ID )
            // RPIExprWalker.g:1867:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "REVERSE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyREVERSE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"REVERSE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1524=(CommonTree)match(input,ID,FOLLOW_ID_in_keyREVERSE18198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1524_tree = (CommonTree)adaptor.dupNode(ID1524);

            adaptor.addChild(root_0, ID1524_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 368, keyREVERSE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyREVERSE"

    public static class keyROLLBACK_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyROLLBACK"
    // RPIExprWalker.g:1868:1: keyROLLBACK : 'ROLLBACK' ;
    public final RPIExprWalker.keyROLLBACK_return keyROLLBACK() throws RecognitionException {
        RPIExprWalker.keyROLLBACK_return retval = new RPIExprWalker.keyROLLBACK_return();
        retval.start = input.LT(1);
        int keyROLLBACK_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1525=null;

        CommonTree string_literal1525_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 369) ) { return retval; }
            // RPIExprWalker.g:1868:34: ( 'ROLLBACK' )
            // RPIExprWalker.g:1868:36: 'ROLLBACK'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1525=(CommonTree)match(input,222,FOLLOW_222_in_keyROLLBACK18226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1525_tree = (CommonTree)adaptor.dupNode(string_literal1525);

            adaptor.addChild(root_0, string_literal1525_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 369, keyROLLBACK_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyROLLBACK"

    public static class keySERIALLY_REUSABLE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySERIALLY_REUSABLE"
    // RPIExprWalker.g:1869:1: keySERIALLY_REUSABLE : {...}? ID ;
    public final RPIExprWalker.keySERIALLY_REUSABLE_return keySERIALLY_REUSABLE() throws RecognitionException {
        RPIExprWalker.keySERIALLY_REUSABLE_return retval = new RPIExprWalker.keySERIALLY_REUSABLE_return();
        retval.start = input.LT(1);
        int keySERIALLY_REUSABLE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1526=null;

        CommonTree ID1526_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 370) ) { return retval; }
            // RPIExprWalker.g:1869:34: ({...}? ID )
            // RPIExprWalker.g:1869:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SERIALLY_REUSABLE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySERIALLY_REUSABLE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SERIALLY_REUSABLE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1526=(CommonTree)match(input,ID,FOLLOW_ID_in_keySERIALLY_REUSABLE18248); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1526_tree = (CommonTree)adaptor.dupNode(ID1526);

            adaptor.addChild(root_0, ID1526_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 370, keySERIALLY_REUSABLE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySERIALLY_REUSABLE"

    public static class keySUBTYPE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keySUBTYPE"
    // RPIExprWalker.g:1870:1: keySUBTYPE : {...}? ID ;
    public final RPIExprWalker.keySUBTYPE_return keySUBTYPE() throws RecognitionException {
        RPIExprWalker.keySUBTYPE_return retval = new RPIExprWalker.keySUBTYPE_return();
        retval.start = input.LT(1);
        int keySUBTYPE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1527=null;

        CommonTree ID1527_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 371) ) { return retval; }
            // RPIExprWalker.g:1870:34: ({...}? ID )
            // RPIExprWalker.g:1870:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keySUBTYPE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"SUBTYPE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1527=(CommonTree)match(input,ID,FOLLOW_ID_in_keySUBTYPE18279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1527_tree = (CommonTree)adaptor.dupNode(ID1527);

            adaptor.addChild(root_0, ID1527_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 371, keySUBTYPE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keySUBTYPE"

    public static class keyTRANSACTION_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTRANSACTION"
    // RPIExprWalker.g:1871:1: keyTRANSACTION : {...}? ID ;
    public final RPIExprWalker.keyTRANSACTION_return keyTRANSACTION() throws RecognitionException {
        RPIExprWalker.keyTRANSACTION_return retval = new RPIExprWalker.keyTRANSACTION_return();
        retval.start = input.LT(1);
        int keyTRANSACTION_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1528=null;

        CommonTree ID1528_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 372) ) { return retval; }
            // RPIExprWalker.g:1871:34: ({...}? ID )
            // RPIExprWalker.g:1871:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TRANSACTION"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTRANSACTION", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"TRANSACTION\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1528=(CommonTree)match(input,ID,FOLLOW_ID_in_keyTRANSACTION18306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1528_tree = (CommonTree)adaptor.dupNode(ID1528);

            adaptor.addChild(root_0, ID1528_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 372, keyTRANSACTION_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTRANSACTION"

    public static class keyTYPE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyTYPE"
    // RPIExprWalker.g:1872:1: keyTYPE : {...}? ID ;
    public final RPIExprWalker.keyTYPE_return keyTYPE() throws RecognitionException {
        RPIExprWalker.keyTYPE_return retval = new RPIExprWalker.keyTYPE_return();
        retval.start = input.LT(1);
        int keyTYPE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1529=null;

        CommonTree ID1529_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 373) ) { return retval; }
            // RPIExprWalker.g:1872:34: ({...}? ID )
            // RPIExprWalker.g:1872:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyTYPE", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"TYPE\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1529=(CommonTree)match(input,ID,FOLLOW_ID_in_keyTYPE18340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1529_tree = (CommonTree)adaptor.dupNode(ID1529);

            adaptor.addChild(root_0, ID1529_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 373, keyTYPE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyTYPE"

    public static class keyUSING_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyUSING"
    // RPIExprWalker.g:1873:1: keyUSING : {...}? ID ;
    public final RPIExprWalker.keyUSING_return keyUSING() throws RecognitionException {
        RPIExprWalker.keyUSING_return retval = new RPIExprWalker.keyUSING_return();
        retval.start = input.LT(1);
        int keyUSING_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1530=null;

        CommonTree ID1530_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 374) ) { return retval; }
            // RPIExprWalker.g:1873:34: ({...}? ID )
            // RPIExprWalker.g:1873:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "USING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyUSING", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"USING\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1530=(CommonTree)match(input,ID,FOLLOW_ID_in_keyUSING18373); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1530_tree = (CommonTree)adaptor.dupNode(ID1530);

            adaptor.addChild(root_0, ID1530_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 374, keyUSING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyUSING"

    public static class keyVARRAY_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyVARRAY"
    // RPIExprWalker.g:1874:1: keyVARRAY : {...}? ID ;
    public final RPIExprWalker.keyVARRAY_return keyVARRAY() throws RecognitionException {
        RPIExprWalker.keyVARRAY_return retval = new RPIExprWalker.keyVARRAY_return();
        retval.start = input.LT(1);
        int keyVARRAY_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1531=null;

        CommonTree ID1531_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 375) ) { return retval; }
            // RPIExprWalker.g:1874:34: ({...}? ID )
            // RPIExprWalker.g:1874:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "VARRAY"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARRAY", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"VARRAY\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1531=(CommonTree)match(input,ID,FOLLOW_ID_in_keyVARRAY18405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1531_tree = (CommonTree)adaptor.dupNode(ID1531);

            adaptor.addChild(root_0, ID1531_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 375, keyVARRAY_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyVARRAY"

    public static class keyVARYING_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyVARYING"
    // RPIExprWalker.g:1875:1: keyVARYING : {...}? ID ;
    public final RPIExprWalker.keyVARYING_return keyVARYING() throws RecognitionException {
        RPIExprWalker.keyVARYING_return retval = new RPIExprWalker.keyVARYING_return();
        retval.start = input.LT(1);
        int keyVARYING_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1532=null;

        CommonTree ID1532_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 376) ) { return retval; }
            // RPIExprWalker.g:1875:33: ({...}? ID )
            // RPIExprWalker.g:1875:35: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "VARYING"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyVARYING", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"VARYING\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1532=(CommonTree)match(input,ID,FOLLOW_ID_in_keyVARYING18435); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1532_tree = (CommonTree)adaptor.dupNode(ID1532);

            adaptor.addChild(root_0, ID1532_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 376, keyVARYING_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyVARYING"

    public static class keyWHILE_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyWHILE"
    // RPIExprWalker.g:1876:1: keyWHILE : 'WHILE' ;
    public final RPIExprWalker.keyWHILE_return keyWHILE() throws RecognitionException {
        RPIExprWalker.keyWHILE_return retval = new RPIExprWalker.keyWHILE_return();
        retval.start = input.LT(1);
        int keyWHILE_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1533=null;

        CommonTree string_literal1533_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 377) ) { return retval; }
            // RPIExprWalker.g:1876:34: ( 'WHILE' )
            // RPIExprWalker.g:1876:36: 'WHILE'
            {
            root_0 = (CommonTree)adaptor.nil();

            _last = (CommonTree)input.LT(1);
            string_literal1533=(CommonTree)match(input,223,FOLLOW_223_in_keyWHILE18466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal1533_tree = (CommonTree)adaptor.dupNode(string_literal1533);

            adaptor.addChild(root_0, string_literal1533_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 377, keyWHILE_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyWHILE"

    public static class keyWORK_return extends TreeRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keyWORK"
    // RPIExprWalker.g:1877:1: keyWORK : {...}? ID ;
    public final RPIExprWalker.keyWORK_return keyWORK() throws RecognitionException {
        RPIExprWalker.keyWORK_return retval = new RPIExprWalker.keyWORK_return();
        retval.start = input.LT(1);
        int keyWORK_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree ID1534=null;

        CommonTree ID1534_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 378) ) { return retval; }
            // RPIExprWalker.g:1877:34: ({...}? ID )
            // RPIExprWalker.g:1877:36: {...}? ID
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "WORK"))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "keyWORK", "((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( \"WORK\")");
            }
            _last = (CommonTree)input.LT(1);
            ID1534=(CommonTree)match(input,ID,FOLLOW_ID_in_keyWORK18501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID1534_tree = (CommonTree)adaptor.dupNode(ID1534);

            adaptor.addChild(root_0, ID1534_tree);
            }

            if ( state.backtracking==0 ) {
            }
            }

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 378, keyWORK_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "keyWORK"

    public static class sql_identifier_return extends TreeRuleReturnScope {
        public StringBuffer value;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_identifier"
    // RPIExprWalker.g:1879:1: sql_identifier returns [StringBuffer value] : ( identifier | 'ROWID' );
    public final RPIExprWalker.sql_identifier_return sql_identifier() throws RecognitionException {
        RPIExprWalker.sql_identifier_return retval = new RPIExprWalker.sql_identifier_return();
        retval.start = input.LT(1);
        int sql_identifier_StartIndex = input.index();
        CommonTree root_0 = null;

        CommonTree _first_0 = null;
        CommonTree _last = null;

        CommonTree string_literal1536=null;
        RPIExprWalker.identifier_return identifier1535 = null;


        CommonTree string_literal1536_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 379) ) { return retval; }
            // RPIExprWalker.g:1880:5: ( identifier | 'ROWID' )
            int alt384=2;
            int LA384_0 = input.LA(1);

            if ( (LA384_0==ID||LA384_0==DOUBLEQUOTED_STRING) ) {
                alt384=1;
            }
            else if ( (LA384_0==158) ) {
                alt384=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);

                throw nvae;
            }
            switch (alt384) {
                case 1 :
                    // RPIExprWalker.g:1880:9: identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    pushFollow(FOLLOW_identifier_in_sql_identifier18519);
                    identifier1535=identifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) 
                    adaptor.addChild(root_0, identifier1535.getTree());
                    if ( state.backtracking==0 ) {
                      retval.value =new StringBuffer(" " + (identifier1535!=null?identifier1535.value:null).toString().trim());
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;
                case 2 :
                    // RPIExprWalker.g:1881:9: 'ROWID'
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    _last = (CommonTree)input.LT(1);
                    string_literal1536=(CommonTree)match(input,158,FOLLOW_158_in_sql_identifier18531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal1536_tree = (CommonTree)adaptor.dupNode(string_literal1536);

                    adaptor.addChild(root_0, string_literal1536_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.value =new StringBuffer(" ROWID");
                    }

                    if ( state.backtracking==0 ) {
                    }
                    }
                    break;

            }
            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 379, sql_identifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "sql_identifier"

    // $ANTLR start synpred40_RPIExprWalker
    public final void synpred40_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:387:9: ( type_declaration )
        // RPIExprWalker.g:387:9: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred40_RPIExprWalker1353);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred40_RPIExprWalker

    // $ANTLR start synpred41_RPIExprWalker
    public final void synpred41_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:388:9: ( subtype_declaration )
        // RPIExprWalker.g:388:9: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred41_RPIExprWalker1363);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_RPIExprWalker

    // $ANTLR start synpred54_RPIExprWalker
    public final void synpred54_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:407:34: ( keyNEW )
        // RPIExprWalker.g:407:34: keyNEW
        {
        pushFollow(FOLLOW_keyNEW_in_synpred54_RPIExprWalker1560);
        keyNEW();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred54_RPIExprWalker

    // $ANTLR start synpred70_RPIExprWalker
    public final void synpred70_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:437:9: ( assignment_statement )
        // RPIExprWalker.g:437:9: assignment_statement
        {
        pushFollow(FOLLOW_assignment_statement_in_synpred70_RPIExprWalker1868);
        assignment_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred70_RPIExprWalker

    // $ANTLR start synpred71_RPIExprWalker
    public final void synpred71_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:438:9: ( exit_statement )
        // RPIExprWalker.g:438:9: exit_statement
        {
        pushFollow(FOLLOW_exit_statement_in_synpred71_RPIExprWalker1878);
        exit_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred71_RPIExprWalker

    // $ANTLR start synpred73_RPIExprWalker
    public final void synpred73_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:440:9: ( case_statement )
        // RPIExprWalker.g:440:9: case_statement
        {
        pushFollow(FOLLOW_case_statement_in_synpred73_RPIExprWalker1898);
        case_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred73_RPIExprWalker

    // $ANTLR start synpred75_RPIExprWalker
    public final void synpred75_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:442:9: ( loop_statement )
        // RPIExprWalker.g:442:9: loop_statement
        {
        pushFollow(FOLLOW_loop_statement_in_synpred75_RPIExprWalker1919);
        loop_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred75_RPIExprWalker

    // $ANTLR start synpred79_RPIExprWalker
    public final void synpred79_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:446:9: ( sql_statement )
        // RPIExprWalker.g:446:9: sql_statement
        {
        pushFollow(FOLLOW_sql_statement_in_synpred79_RPIExprWalker1960);
        sql_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred79_RPIExprWalker

    // $ANTLR start synpred80_RPIExprWalker
    public final void synpred80_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:447:9: ( plsql_block )
        // RPIExprWalker.g:447:9: plsql_block
        {
        pushFollow(FOLLOW_plsql_block_in_synpred80_RPIExprWalker1970);
        plsql_block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred80_RPIExprWalker

    // $ANTLR start synpred89_RPIExprWalker
    public final void synpred89_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:463:9: ( subtype_declaration )
        // RPIExprWalker.g:463:9: subtype_declaration
        {
        pushFollow(FOLLOW_subtype_declaration_in_synpred89_RPIExprWalker2141);
        subtype_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred89_RPIExprWalker

    // $ANTLR start synpred97_RPIExprWalker
    public final void synpred97_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:471:9: ( type_declaration )
        // RPIExprWalker.g:471:9: type_declaration
        {
        pushFollow(FOLLOW_type_declaration_in_synpred97_RPIExprWalker2227);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred97_RPIExprWalker

    // $ANTLR start synpred100_RPIExprWalker
    public final void synpred100_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:477:13: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN )
        // RPIExprWalker.g:477:13: keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN
        {
        pushFollow(FOLLOW_keyRESTRICT_REFERENCES_in_synpred100_RPIExprWalker2272);
        keyRESTRICT_REFERENCES();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred100_RPIExprWalker2274); if (state.failed) return ;
        // RPIExprWalker.g:477:43: ( 'DEFAULT' | function_name )
        int alt391=2;
        int LA391_0 = input.LA(1);

        if ( (LA391_0==117) ) {
            alt391=1;
        }
        else if ( (LA391_0==ID||LA391_0==QUOTED_STRING||LA391_0==DOUBLEQUOTED_STRING) ) {
            alt391=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 391, 0, input);

            throw nvae;
        }
        switch (alt391) {
            case 1 :
                // RPIExprWalker.g:477:45: 'DEFAULT'
                {
                match(input,117,FOLLOW_117_in_synpred100_RPIExprWalker2278); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:477:57: function_name
                {
                pushFollow(FOLLOW_function_name_in_synpred100_RPIExprWalker2282);
                function_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // RPIExprWalker.g:477:73: ( COMMA pragma_param )+
        int cnt392=0;
        loop392:
        do {
            int alt392=2;
            int LA392_0 = input.LA(1);

            if ( (LA392_0==COMMA) ) {
                alt392=1;
            }


            switch (alt392) {
        	case 1 :
        	    // RPIExprWalker.g:477:75: COMMA pragma_param
        	    {
        	    match(input,COMMA,FOLLOW_COMMA_in_synpred100_RPIExprWalker2288); if (state.failed) return ;
        	    pushFollow(FOLLOW_pragma_param_in_synpred100_RPIExprWalker2290);
        	    pragma_param();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt392 >= 1 ) break loop392;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(392, input);
                    throw eee;
            }
            cnt392++;
        } while (true);

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred100_RPIExprWalker2295); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred100_RPIExprWalker

    // $ANTLR start synpred101_RPIExprWalker
    public final void synpred101_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:478:13: ( keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN )
        // RPIExprWalker.g:478:13: keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN
        {
        pushFollow(FOLLOW_keyEXCEPTION_INIT_in_synpred101_RPIExprWalker2310);
        keyEXCEPTION_INIT();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred101_RPIExprWalker2312); if (state.failed) return ;
        pushFollow(FOLLOW_exception_name_in_synpred101_RPIExprWalker2314);
        exception_name();

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred101_RPIExprWalker2316); if (state.failed) return ;
        pushFollow(FOLLOW_literal_in_synpred101_RPIExprWalker2318);
        literal();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred101_RPIExprWalker2320); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred101_RPIExprWalker

    // $ANTLR start synpred102_RPIExprWalker
    public final void synpred102_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:479:13: ( keyAUTONOMOUS_TRANSACTION )
        // RPIExprWalker.g:479:13: keyAUTONOMOUS_TRANSACTION
        {
        pushFollow(FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred102_RPIExprWalker2334);
        keyAUTONOMOUS_TRANSACTION();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred102_RPIExprWalker

    // $ANTLR start synpred103_RPIExprWalker
    public final void synpred103_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:480:13: ( keySERIALLY_REUSABLE )
        // RPIExprWalker.g:480:13: keySERIALLY_REUSABLE
        {
        pushFollow(FOLLOW_keySERIALLY_REUSABLE_in_synpred103_RPIExprWalker2348);
        keySERIALLY_REUSABLE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred103_RPIExprWalker

    // $ANTLR start synpred104_RPIExprWalker
    public final void synpred104_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:481:13: ( keyBUILTIN LPAREN pragma_params RPAREN )
        // RPIExprWalker.g:481:13: keyBUILTIN LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyBUILTIN_in_synpred104_RPIExprWalker2362);
        keyBUILTIN();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred104_RPIExprWalker2364); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred104_RPIExprWalker2366);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred104_RPIExprWalker2368); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred104_RPIExprWalker

    // $ANTLR start synpred105_RPIExprWalker
    public final void synpred105_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:482:13: ( keyFIPSFLAG LPAREN pragma_params RPAREN )
        // RPIExprWalker.g:482:13: keyFIPSFLAG LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyFIPSFLAG_in_synpred105_RPIExprWalker2382);
        keyFIPSFLAG();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred105_RPIExprWalker2384); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred105_RPIExprWalker2386);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred105_RPIExprWalker2388); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_RPIExprWalker

    // $ANTLR start synpred106_RPIExprWalker
    public final void synpred106_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:484:13: ( keyINTERFACE LPAREN pragma_params RPAREN )
        // RPIExprWalker.g:484:13: keyINTERFACE LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyINTERFACE_in_synpred106_RPIExprWalker2403);
        keyINTERFACE();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred106_RPIExprWalker2405); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred106_RPIExprWalker2407);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred106_RPIExprWalker2409); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred106_RPIExprWalker

    // $ANTLR start synpred107_RPIExprWalker
    public final void synpred107_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:485:13: ( keyNEW_NAMES LPAREN pragma_params RPAREN )
        // RPIExprWalker.g:485:13: keyNEW_NAMES LPAREN pragma_params RPAREN
        {
        pushFollow(FOLLOW_keyNEW_NAMES_in_synpred107_RPIExprWalker2423);
        keyNEW_NAMES();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred107_RPIExprWalker2425); if (state.failed) return ;
        pushFollow(FOLLOW_pragma_params_in_synpred107_RPIExprWalker2427);
        pragma_params();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred107_RPIExprWalker2429); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred107_RPIExprWalker

    // $ANTLR start synpred141_RPIExprWalker
    public final void synpred141_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:552:9: ( keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )? )
        // RPIExprWalker.g:552:9: keyINTERVAL keyDAY ( LPAREN NUMBER RPAREN )? 'TO' keySECOND ( LPAREN NUMBER RPAREN )?
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred141_RPIExprWalker3030);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyDAY_in_synpred141_RPIExprWalker3032);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:552:28: ( LPAREN NUMBER RPAREN )?
        int alt401=2;
        int LA401_0 = input.LA(1);

        if ( (LA401_0==LPAREN) ) {
            alt401=1;
        }
        switch (alt401) {
            case 1 :
                // RPIExprWalker.g:552:30: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred141_RPIExprWalker3036); if (state.failed) return ;
                match(input,NUMBER,FOLLOW_NUMBER_in_synpred141_RPIExprWalker3038); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred141_RPIExprWalker3040); if (state.failed) return ;

                }
                break;

        }

        match(input,135,FOLLOW_135_in_synpred141_RPIExprWalker3045); if (state.failed) return ;
        pushFollow(FOLLOW_keySECOND_in_synpred141_RPIExprWalker3047);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:552:69: ( LPAREN NUMBER RPAREN )?
        int alt402=2;
        int LA402_0 = input.LA(1);

        if ( (LA402_0==LPAREN) ) {
            alt402=1;
        }
        switch (alt402) {
            case 1 :
                // RPIExprWalker.g:552:71: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred141_RPIExprWalker3051); if (state.failed) return ;
                match(input,NUMBER,FOLLOW_NUMBER_in_synpred141_RPIExprWalker3053); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred141_RPIExprWalker3055); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred141_RPIExprWalker

    // $ANTLR start synpred143_RPIExprWalker
    public final void synpred143_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:553:9: ( keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH )
        // RPIExprWalker.g:553:9: keyINTERVAL keyYEAR ( LPAREN NUMBER RPAREN )? 'TO' keyMONTH
        {
        pushFollow(FOLLOW_keyINTERVAL_in_synpred143_RPIExprWalker3068);
        keyINTERVAL();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyYEAR_in_synpred143_RPIExprWalker3070);
        keyYEAR();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:553:29: ( LPAREN NUMBER RPAREN )?
        int alt403=2;
        int LA403_0 = input.LA(1);

        if ( (LA403_0==LPAREN) ) {
            alt403=1;
        }
        switch (alt403) {
            case 1 :
                // RPIExprWalker.g:553:31: LPAREN NUMBER RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred143_RPIExprWalker3074); if (state.failed) return ;
                match(input,NUMBER,FOLLOW_NUMBER_in_synpred143_RPIExprWalker3076); if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred143_RPIExprWalker3078); if (state.failed) return ;

                }
                break;

        }

        match(input,135,FOLLOW_135_in_synpred143_RPIExprWalker3083); if (state.failed) return ;
        pushFollow(FOLLOW_keyMONTH_in_synpred143_RPIExprWalker3085);
        keyMONTH();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_RPIExprWalker

    // $ANTLR start synpred144_RPIExprWalker
    public final void synpred144_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:554:11: ( keyTIME )
        // RPIExprWalker.g:554:11: keyTIME
        {
        pushFollow(FOLLOW_keyTIME_in_synpred144_RPIExprWalker3097);
        keyTIME();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred144_RPIExprWalker

    // $ANTLR start synpred199_RPIExprWalker
    public final void synpred199_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:580:9: ( datatype )
        // RPIExprWalker.g:580:9: datatype
        {
        pushFollow(FOLLOW_datatype_in_synpred199_RPIExprWalker3684);
        datatype();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_RPIExprWalker

    // $ANTLR start synpred259_RPIExprWalker
    public final void synpred259_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:785:11: ({...}? LPAREN ( call_parameters )? RPAREN )
        // RPIExprWalker.g:785:11: {...}? LPAREN ( call_parameters )? RPAREN
        {
        if ( !(( input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred259_RPIExprWalker", " input.LA(1) != LPAREN || input.LA(2) != PLUS || input.LA(3) != RPAREN ");
        }
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred259_RPIExprWalker5398); if (state.failed) return ;
        // RPIExprWalker.g:786:39: ( call_parameters )?
        int alt446=2;
        int LA446_0 = input.LA(1);

        if ( ((LA446_0>=SUBSTR && LA446_0<=TO_CHAR)||LA446_0==TRIM||(LA446_0>=ID && LA446_0<=LPAREN)||(LA446_0>=SQL && LA446_0<=MINUS)||LA446_0==NUMBER||LA446_0==NOT||LA446_0==QUOTED_STRING||LA446_0==DOUBLEQUOTED_STRING||LA446_0==116||LA446_0==158||(LA446_0>=168 && LA446_0<=169)||(LA446_0>=174 && LA446_0<=175)||LA446_0==198) ) {
            alt446=1;
        }
        switch (alt446) {
            case 1 :
                // RPIExprWalker.g:786:41: call_parameters
                {
                pushFollow(FOLLOW_call_parameters_in_synpred259_RPIExprWalker5404);
                call_parameters();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred259_RPIExprWalker5419); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_RPIExprWalker

    // $ANTLR start synpred265_RPIExprWalker
    public final void synpred265_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:822:21: ( numeric_loop_param )
        // RPIExprWalker.g:822:23: numeric_loop_param
        {
        pushFollow(FOLLOW_numeric_loop_param_in_synpred265_RPIExprWalker5657);
        numeric_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_RPIExprWalker

    // $ANTLR start synpred266_RPIExprWalker
    public final void synpred266_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:823:21: ( cursor_loop_param )
        // RPIExprWalker.g:823:23: cursor_loop_param
        {
        pushFollow(FOLLOW_cursor_loop_param_in_synpred266_RPIExprWalker5687);
        cursor_loop_param();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred266_RPIExprWalker

    // $ANTLR start synpred269_RPIExprWalker
    public final void synpred269_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:834:27: ( keyREVERSE )
        // RPIExprWalker.g:834:27: keyREVERSE
        {
        pushFollow(FOLLOW_keyREVERSE_in_synpred269_RPIExprWalker5810);
        keyREVERSE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_RPIExprWalker

    // $ANTLR start synpred279_RPIExprWalker
    public final void synpred279_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:892:9: ( close_statement )
        // RPIExprWalker.g:892:9: close_statement
        {
        pushFollow(FOLLOW_close_statement_in_synpred279_RPIExprWalker6220);
        close_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred279_RPIExprWalker

    // $ANTLR start synpred283_RPIExprWalker
    public final void synpred283_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:896:9: ( open_statement )
        // RPIExprWalker.g:896:9: open_statement
        {
        pushFollow(FOLLOW_open_statement_in_synpred283_RPIExprWalker6260);
        open_statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred283_RPIExprWalker

    // $ANTLR start synpred285_RPIExprWalker
    public final void synpred285_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:913:11: ( 'DISTINCT' )
        // RPIExprWalker.g:913:11: 'DISTINCT'
        {
        match(input,175,FOLLOW_175_in_synpred285_RPIExprWalker6388); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred285_RPIExprWalker

    // $ANTLR start synpred290_RPIExprWalker
    public final void synpred290_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:921:44: ( table_reference_list )
        // RPIExprWalker.g:921:44: table_reference_list
        {
        pushFollow(FOLLOW_table_reference_list_in_synpred290_RPIExprWalker6478);
        table_reference_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred290_RPIExprWalker

    // $ANTLR start synpred291_RPIExprWalker
    public final void synpred291_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.join_clause_return j1 = null;


        // RPIExprWalker.g:921:136: (j1= join_clause )
        // RPIExprWalker.g:921:136: j1= join_clause
        {
        pushFollow(FOLLOW_join_clause_in_synpred291_RPIExprWalker6487);
        j1=join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred291_RPIExprWalker

    // $ANTLR start synpred292_RPIExprWalker
    public final void synpred292_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:922:11: ( where_clause )
        // RPIExprWalker.g:922:11: where_clause
        {
        pushFollow(FOLLOW_where_clause_in_synpred292_RPIExprWalker6515);
        where_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred292_RPIExprWalker

    // $ANTLR start synpred293_RPIExprWalker
    public final void synpred293_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:922:90: ( hierarchical_query_clause )
        // RPIExprWalker.g:922:90: hierarchical_query_clause
        {
        pushFollow(FOLLOW_hierarchical_query_clause_in_synpred293_RPIExprWalker6523);
        hierarchical_query_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred293_RPIExprWalker

    // $ANTLR start synpred294_RPIExprWalker
    public final void synpred294_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:922:176: ( group_by_clause )
        // RPIExprWalker.g:922:176: group_by_clause
        {
        pushFollow(FOLLOW_group_by_clause_in_synpred294_RPIExprWalker6531);
        group_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred294_RPIExprWalker

    // $ANTLR start synpred295_RPIExprWalker
    public final void synpred295_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:923:11: ( 'HAVING' sql_condition )
        // RPIExprWalker.g:923:11: 'HAVING' sql_condition
        {
        match(input,180,FOLLOW_180_in_synpred295_RPIExprWalker6547); if (state.failed) return ;
        pushFollow(FOLLOW_sql_condition_in_synpred295_RPIExprWalker6549);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred295_RPIExprWalker

    // $ANTLR start synpred296_RPIExprWalker
    public final void synpred296_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:923:88: ( model_clause )
        // RPIExprWalker.g:923:88: model_clause
        {
        pushFollow(FOLLOW_model_clause_in_synpred296_RPIExprWalker6557);
        model_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred296_RPIExprWalker

    // $ANTLR start synpred301_RPIExprWalker
    public final void synpred301_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.select_expression_return s1 = null;


        // RPIExprWalker.g:924:13: ( ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery ) )
        // RPIExprWalker.g:924:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' ) (s1= select_expression | subquery )
        {
        // RPIExprWalker.g:924:13: ( 'UNION' ( 'ALL' )? | 'INTERSECT' | 'MINUS' )
        int alt451=3;
        switch ( input.LA(1) ) {
        case 181:
            {
            alt451=1;
            }
            break;
        case 182:
            {
            alt451=2;
            }
            break;
        case 183:
            {
            alt451=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 451, 0, input);

            throw nvae;
        }

        switch (alt451) {
            case 1 :
                // RPIExprWalker.g:924:17: 'UNION' ( 'ALL' )?
                {
                match(input,181,FOLLOW_181_in_synpred301_RPIExprWalker6579); if (state.failed) return ;
                // RPIExprWalker.g:924:52: ( 'ALL' )?
                int alt450=2;
                int LA450_0 = input.LA(1);

                if ( (LA450_0==177) ) {
                    alt450=1;
                }
                switch (alt450) {
                    case 1 :
                        // RPIExprWalker.g:924:54: 'ALL'
                        {
                        match(input,177,FOLLOW_177_in_synpred301_RPIExprWalker6585); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;
            case 2 :
                // RPIExprWalker.g:925:17: 'INTERSECT'
                {
                match(input,182,FOLLOW_182_in_synpred301_RPIExprWalker6607); if (state.failed) return ;

                }
                break;
            case 3 :
                // RPIExprWalker.g:926:17: 'MINUS'
                {
                match(input,183,FOLLOW_183_in_synpred301_RPIExprWalker6627); if (state.failed) return ;

                }
                break;

        }

        // RPIExprWalker.g:928:13: (s1= select_expression | subquery )
        int alt452=2;
        int LA452_0 = input.LA(1);

        if ( (LA452_0==174) ) {
            alt452=1;
        }
        else if ( (LA452_0==LPAREN) ) {
            alt452=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 452, 0, input);

            throw nvae;
        }
        switch (alt452) {
            case 1 :
                // RPIExprWalker.g:928:17: s1= select_expression
                {
                pushFollow(FOLLOW_select_expression_in_synpred301_RPIExprWalker6665);
                s1=select_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:929:17: subquery
                {
                pushFollow(FOLLOW_subquery_in_synpred301_RPIExprWalker6686);
                subquery();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred301_RPIExprWalker

    // $ANTLR start synpred302_RPIExprWalker
    public final void synpred302_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:932:11: ( order_by_clause )
        // RPIExprWalker.g:932:11: order_by_clause
        {
        pushFollow(FOLLOW_order_by_clause_in_synpred302_RPIExprWalker6725);
        order_by_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred302_RPIExprWalker

    // $ANTLR start synpred305_RPIExprWalker
    public final void synpred305_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.selected_table_return s2 = null;


        // RPIExprWalker.g:962:11: ( COMMA s2= selected_table )
        // RPIExprWalker.g:962:11: COMMA s2= selected_table
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred305_RPIExprWalker6878); if (state.failed) return ;
        pushFollow(FOLLOW_selected_table_in_synpred305_RPIExprWalker6882);
        s2=selected_table();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred305_RPIExprWalker

    // $ANTLR start synpred306_RPIExprWalker
    public final void synpred306_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:966:22: ( inner_cross_join_clause )
        // RPIExprWalker.g:966:22: inner_cross_join_clause
        {
        pushFollow(FOLLOW_inner_cross_join_clause_in_synpred306_RPIExprWalker6909);
        inner_cross_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred306_RPIExprWalker

    // $ANTLR start synpred307_RPIExprWalker
    public final void synpred307_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:966:48: ( outer_join_clause )
        // RPIExprWalker.g:966:48: outer_join_clause
        {
        pushFollow(FOLLOW_outer_join_clause_in_synpred307_RPIExprWalker6913);
        outer_join_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred307_RPIExprWalker

    // $ANTLR start synpred310_RPIExprWalker
    public final void synpred310_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:969:9: ( ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN ) )
        // RPIExprWalker.g:969:9: ( keyINNER )? keyJOIN table_name ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        {
        // RPIExprWalker.g:969:9: ( keyINNER )?
        int alt453=2;
        int LA453_0 = input.LA(1);

        if ( (LA453_0==ID) ) {
            int LA453_1 = input.LA(2);

            if ( (LA453_1==ID) ) {
                int LA453_2 = input.LA(3);

                if ( (LA453_2==ID) ) {
                    int LA453_4 = input.LA(4);

                    if ( (LA453_4==ID||LA453_4==184) ) {
                        alt453=1;
                    }
                }
                else if ( (LA453_2==DOUBLEQUOTED_STRING||LA453_2==158) ) {
                    alt453=1;
                }
            }
        }
        switch (alt453) {
            case 1 :
                // RPIExprWalker.g:969:11: keyINNER
                {
                pushFollow(FOLLOW_keyINNER_in_synpred310_RPIExprWalker6936);
                keyINNER();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_keyJOIN_in_synpred310_RPIExprWalker6941);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_table_name_in_synpred310_RPIExprWalker6943);
        table_name();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:969:42: ( 'ON' sql_condition | keyUSING LPAREN column_specs RPAREN )
        int alt454=2;
        int LA454_0 = input.LA(1);

        if ( (LA454_0==184) ) {
            alt454=1;
        }
        else if ( (LA454_0==ID) ) {
            alt454=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 454, 0, input);

            throw nvae;
        }
        switch (alt454) {
            case 1 :
                // RPIExprWalker.g:969:44: 'ON' sql_condition
                {
                match(input,184,FOLLOW_184_in_synpred310_RPIExprWalker6947); if (state.failed) return ;
                pushFollow(FOLLOW_sql_condition_in_synpred310_RPIExprWalker6949);
                sql_condition();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:969:65: keyUSING LPAREN column_specs RPAREN
                {
                pushFollow(FOLLOW_keyUSING_in_synpred310_RPIExprWalker6953);
                keyUSING();

                state._fsp--;
                if (state.failed) return ;
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred310_RPIExprWalker6955); if (state.failed) return ;
                pushFollow(FOLLOW_column_specs_in_synpred310_RPIExprWalker6957);
                column_specs();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred310_RPIExprWalker6959); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred310_RPIExprWalker

    // $ANTLR start synpred311_RPIExprWalker
    public final void synpred311_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:970:11: ( keyCROSS )
        // RPIExprWalker.g:970:11: keyCROSS
        {
        pushFollow(FOLLOW_keyCROSS_in_synpred311_RPIExprWalker6973);
        keyCROSS();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred311_RPIExprWalker

    // $ANTLR start synpred313_RPIExprWalker
    public final void synpred313_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:974:13: ( outer_join_type keyJOIN )
        // RPIExprWalker.g:974:13: outer_join_type keyJOIN
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred313_RPIExprWalker7026);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyJOIN_in_synpred313_RPIExprWalker7028);
        keyJOIN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred313_RPIExprWalker

    // $ANTLR start synpred314_RPIExprWalker
    public final void synpred314_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:975:26: ( outer_join_type )
        // RPIExprWalker.g:975:26: outer_join_type
        {
        pushFollow(FOLLOW_outer_join_type_in_synpred314_RPIExprWalker7046);
        outer_join_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred314_RPIExprWalker

    // $ANTLR start synpred315_RPIExprWalker
    public final void synpred315_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:977:22: ( query_partition_clause )
        // RPIExprWalker.g:977:22: query_partition_clause
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred315_RPIExprWalker7075);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred315_RPIExprWalker

    // $ANTLR start synpred316_RPIExprWalker
    public final void synpred316_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:978:11: ( 'ON' sql_condition )
        // RPIExprWalker.g:978:11: 'ON' sql_condition
        {
        match(input,184,FOLLOW_184_in_synpred316_RPIExprWalker7090); if (state.failed) return ;
        pushFollow(FOLLOW_sql_condition_in_synpred316_RPIExprWalker7092);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred316_RPIExprWalker

    // $ANTLR start synpred317_RPIExprWalker
    public final void synpred317_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:978:32: ( keyUSING LPAREN column_specs RPAREN )
        // RPIExprWalker.g:978:32: keyUSING LPAREN column_specs RPAREN
        {
        pushFollow(FOLLOW_keyUSING_in_synpred317_RPIExprWalker7096);
        keyUSING();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred317_RPIExprWalker7098); if (state.failed) return ;
        pushFollow(FOLLOW_column_specs_in_synpred317_RPIExprWalker7100);
        column_specs();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred317_RPIExprWalker7102); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred317_RPIExprWalker

    // $ANTLR start synpred318_RPIExprWalker
    public final void synpred318_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:984:11: ( keyFULL )
        // RPIExprWalker.g:984:11: keyFULL
        {
        pushFollow(FOLLOW_keyFULL_in_synpred318_RPIExprWalker7147);
        keyFULL();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred318_RPIExprWalker

    // $ANTLR start synpred319_RPIExprWalker
    public final void synpred319_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:984:21: ( keyLEFT )
        // RPIExprWalker.g:984:21: keyLEFT
        {
        pushFollow(FOLLOW_keyLEFT_in_synpred319_RPIExprWalker7151);
        keyLEFT();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred319_RPIExprWalker

    // $ANTLR start synpred320_RPIExprWalker
    public final void synpred320_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:984:44: ( keyOUTER )
        // RPIExprWalker.g:984:44: keyOUTER
        {
        pushFollow(FOLLOW_keyOUTER_in_synpred320_RPIExprWalker7161);
        keyOUTER();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred320_RPIExprWalker

    // $ANTLR start synpred322_RPIExprWalker
    public final void synpred322_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:993:60: ( keyNOCYCLE )
        // RPIExprWalker.g:993:60: keyNOCYCLE
        {
        pushFollow(FOLLOW_keyNOCYCLE_in_synpred322_RPIExprWalker7253);
        keyNOCYCLE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred322_RPIExprWalker

    // $ANTLR start synpred323_RPIExprWalker
    public final void synpred323_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:999:25: ( COMMA group_by_expr )
        // RPIExprWalker.g:999:25: COMMA group_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred323_RPIExprWalker7302); if (state.failed) return ;
        pushFollow(FOLLOW_group_by_expr_in_synpred323_RPIExprWalker7304);
        group_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred323_RPIExprWalker

    // $ANTLR start synpred324_RPIExprWalker
    public final void synpred324_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1002:9: ( rollup_cube_clause )
        // RPIExprWalker.g:1002:9: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred324_RPIExprWalker7325);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred324_RPIExprWalker

    // $ANTLR start synpred325_RPIExprWalker
    public final void synpred325_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1003:9: ( grouping_sets_clause )
        // RPIExprWalker.g:1003:9: grouping_sets_clause
        {
        pushFollow(FOLLOW_grouping_sets_clause_in_synpred325_RPIExprWalker7335);
        grouping_sets_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred325_RPIExprWalker

    // $ANTLR start synpred326_RPIExprWalker
    public final void synpred326_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1007:11: ( keyROLLUP )
        // RPIExprWalker.g:1007:11: keyROLLUP
        {
        pushFollow(FOLLOW_keyROLLUP_in_synpred326_RPIExprWalker7365);
        keyROLLUP();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred326_RPIExprWalker

    // $ANTLR start synpred328_RPIExprWalker
    public final void synpred328_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1016:9: ( rollup_cube_clause )
        // RPIExprWalker.g:1016:9: rollup_cube_clause
        {
        pushFollow(FOLLOW_rollup_cube_clause_in_synpred328_RPIExprWalker7448);
        rollup_cube_clause();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred328_RPIExprWalker

    // $ANTLR start synpred331_RPIExprWalker
    public final void synpred331_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1024:13: ( keyIGNORE )
        // RPIExprWalker.g:1024:13: keyIGNORE
        {
        pushFollow(FOLLOW_keyIGNORE_in_synpred331_RPIExprWalker7530);
        keyIGNORE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred331_RPIExprWalker

    // $ANTLR start synpred332_RPIExprWalker
    public final void synpred332_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1024:11: ( ( keyIGNORE | keyKEEP ) keyNAV )
        // RPIExprWalker.g:1024:11: ( keyIGNORE | keyKEEP ) keyNAV
        {
        // RPIExprWalker.g:1024:11: ( keyIGNORE | keyKEEP )
        int alt455=2;
        int LA455_0 = input.LA(1);

        if ( (LA455_0==ID) ) {
            int LA455_1 = input.LA(2);

            if ( ((synpred331_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "IGNORE")))) ) {
                alt455=1;
            }
            else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "KEEP"))) ) {
                alt455=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 455, 1, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 455, 0, input);

            throw nvae;
        }
        switch (alt455) {
            case 1 :
                // RPIExprWalker.g:1024:13: keyIGNORE
                {
                pushFollow(FOLLOW_keyIGNORE_in_synpred332_RPIExprWalker7530);
                keyIGNORE();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:1024:25: keyKEEP
                {
                pushFollow(FOLLOW_keyKEEP_in_synpred332_RPIExprWalker7534);
                keyKEEP();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_keyNAV_in_synpred332_RPIExprWalker7538);
        keyNAV();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred332_RPIExprWalker

    // $ANTLR start synpred333_RPIExprWalker
    public final void synpred333_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1025:22: ( keyDIMENSION )
        // RPIExprWalker.g:1025:22: keyDIMENSION
        {
        pushFollow(FOLLOW_keyDIMENSION_in_synpred333_RPIExprWalker7557);
        keyDIMENSION();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred333_RPIExprWalker

    // $ANTLR start synpred338_RPIExprWalker
    public final void synpred338_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1045:11: ( query_partition_clause ( column_spec )? )
        // RPIExprWalker.g:1045:11: query_partition_clause ( column_spec )?
        {
        pushFollow(FOLLOW_query_partition_clause_in_synpred338_RPIExprWalker7741);
        query_partition_clause();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:1045:34: ( column_spec )?
        int alt457=2;
        int LA457_0 = input.LA(1);

        if ( (LA457_0==ID||LA457_0==DOUBLEQUOTED_STRING||LA457_0==158) ) {
            alt457=1;
        }
        switch (alt457) {
            case 1 :
                // RPIExprWalker.g:1045:36: column_spec
                {
                pushFollow(FOLLOW_column_spec_in_synpred338_RPIExprWalker7745);
                column_spec();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred338_RPIExprWalker

    // $ANTLR start synpred345_RPIExprWalker
    public final void synpred345_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1056:61: ( keyAUTOMATIC )
        // RPIExprWalker.g:1056:61: keyAUTOMATIC
        {
        pushFollow(FOLLOW_keyAUTOMATIC_in_synpred345_RPIExprWalker7888);
        keyAUTOMATIC();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred345_RPIExprWalker

    // $ANTLR start synpred357_RPIExprWalker
    public final void synpred357_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1073:9: ( sql_condition )
        // RPIExprWalker.g:1073:9: sql_condition
        {
        pushFollow(FOLLOW_sql_condition_in_synpred357_RPIExprWalker8101);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred357_RPIExprWalker

    // $ANTLR start synpred358_RPIExprWalker
    public final void synpred358_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1073:25: ( sql_expression )
        // RPIExprWalker.g:1073:25: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred358_RPIExprWalker8105);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred358_RPIExprWalker

    // $ANTLR start synpred362_RPIExprWalker
    public final void synpred362_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1081:63: ( keyINCREMENT )
        // RPIExprWalker.g:1081:63: keyINCREMENT
        {
        pushFollow(FOLLOW_keyINCREMENT_in_synpred362_RPIExprWalker8208);
        keyINCREMENT();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred362_RPIExprWalker

    // $ANTLR start synpred370_RPIExprWalker
    public final void synpred370_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1107:25: ( COMMA order_by_expr )
        // RPIExprWalker.g:1107:25: COMMA order_by_expr
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred370_RPIExprWalker8450); if (state.failed) return ;
        pushFollow(FOLLOW_order_by_expr_in_synpred370_RPIExprWalker8452);
        order_by_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred370_RPIExprWalker

    // $ANTLR start synpred373_RPIExprWalker
    public final void synpred373_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1114:31: ( keyNULLS keyFIRST )
        // RPIExprWalker.g:1114:31: keyNULLS keyFIRST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred373_RPIExprWalker8512);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyFIRST_in_synpred373_RPIExprWalker8514);
        keyFIRST();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred373_RPIExprWalker

    // $ANTLR start synpred374_RPIExprWalker
    public final void synpred374_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1114:51: ( keyNULLS keyLAST )
        // RPIExprWalker.g:1114:51: keyNULLS keyLAST
        {
        pushFollow(FOLLOW_keyNULLS_in_synpred374_RPIExprWalker8518);
        keyNULLS();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_keyLAST_in_synpred374_RPIExprWalker8520);
        keyLAST();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred374_RPIExprWalker

    // $ANTLR start synpred381_RPIExprWalker
    public final void synpred381_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1154:9: ({...}? sql_expression )
        // RPIExprWalker.g:1154:9: {...}? sql_expression
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred381_RPIExprWalker", "  is_sql ");
        }
        pushFollow(FOLLOW_sql_expression_in_synpred381_RPIExprWalker8794);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred381_RPIExprWalker

    // $ANTLR start synpred383_RPIExprWalker
    public final void synpred383_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1173:19: ( 'OR' expr_or )
        // RPIExprWalker.g:1173:19: 'OR' expr_or
        {
        match(input,OR,FOLLOW_OR_in_synpred383_RPIExprWalker8925); if (state.failed) return ;
        pushFollow(FOLLOW_expr_or_in_synpred383_RPIExprWalker8927);
        expr_or();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred383_RPIExprWalker

    // $ANTLR start synpred384_RPIExprWalker
    public final void synpred384_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1176:20: ( 'AND' expr_and )
        // RPIExprWalker.g:1176:20: 'AND' expr_and
        {
        match(input,AND,FOLLOW_AND_in_synpred384_RPIExprWalker8952); if (state.failed) return ;
        pushFollow(FOLLOW_expr_and_in_synpred384_RPIExprWalker8954);
        expr_and();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred384_RPIExprWalker

    // $ANTLR start synpred386_RPIExprWalker
    public final void synpred386_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1183:13: ( relational_op expr_add )
        // RPIExprWalker.g:1183:13: relational_op expr_add
        {
        pushFollow(FOLLOW_relational_op_in_synpred386_RPIExprWalker9015);
        relational_op();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred386_RPIExprWalker9017);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred386_RPIExprWalker

    // $ANTLR start synpred387_RPIExprWalker
    public final void synpred387_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1184:13: ( FOUND_ATTR )
        // RPIExprWalker.g:1184:13: FOUND_ATTR
        {
        match(input,FOUND_ATTR,FOLLOW_FOUND_ATTR_in_synpred387_RPIExprWalker9031); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred387_RPIExprWalker

    // $ANTLR start synpred388_RPIExprWalker
    public final void synpred388_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1184:26: ( NOTFOUND_ATTR )
        // RPIExprWalker.g:1184:26: NOTFOUND_ATTR
        {
        match(input,NOTFOUND_ATTR,FOLLOW_NOTFOUND_ATTR_in_synpred388_RPIExprWalker9035); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred388_RPIExprWalker

    // $ANTLR start synpred389_RPIExprWalker
    public final void synpred389_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1184:42: ( ISOPEN_ATTR )
        // RPIExprWalker.g:1184:42: ISOPEN_ATTR
        {
        match(input,ISOPEN_ATTR,FOLLOW_ISOPEN_ATTR_in_synpred389_RPIExprWalker9039); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred389_RPIExprWalker

    // $ANTLR start synpred390_RPIExprWalker
    public final void synpred390_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1184:56: ( ROWCOUNT_ATTR )
        // RPIExprWalker.g:1184:56: ROWCOUNT_ATTR
        {
        match(input,ROWCOUNT_ATTR,FOLLOW_ROWCOUNT_ATTR_in_synpred390_RPIExprWalker9043); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred390_RPIExprWalker

    // $ANTLR start synpred391_RPIExprWalker
    public final void synpred391_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1184:72: ( BULK_ROWCOUNT_ATTR )
        // RPIExprWalker.g:1184:72: BULK_ROWCOUNT_ATTR
        {
        match(input,BULK_ROWCOUNT_ATTR,FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred391_RPIExprWalker9047); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred391_RPIExprWalker

    // $ANTLR start synpred393_RPIExprWalker
    public final void synpred393_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1185:13: ( 'IS' ( 'NOT' )? 'NULL' )
        // RPIExprWalker.g:1185:13: 'IS' ( 'NOT' )? 'NULL'
        {
        match(input,111,FOLLOW_111_in_synpred393_RPIExprWalker9061); if (state.failed) return ;
        // RPIExprWalker.g:1185:18: ( 'NOT' )?
        int alt469=2;
        int LA469_0 = input.LA(1);

        if ( (LA469_0==NOT) ) {
            alt469=1;
        }
        switch (alt469) {
            case 1 :
                // RPIExprWalker.g:1185:20: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred393_RPIExprWalker9065); if (state.failed) return ;

                }
                break;

        }

        match(input,116,FOLLOW_116_in_synpred393_RPIExprWalker9070); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred393_RPIExprWalker

    // $ANTLR start synpred395_RPIExprWalker
    public final void synpred395_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1186:13: ( ( 'NOT' )? 'LIKE' expr_add )
        // RPIExprWalker.g:1186:13: ( 'NOT' )? 'LIKE' expr_add
        {
        // RPIExprWalker.g:1186:13: ( 'NOT' )?
        int alt470=2;
        int LA470_0 = input.LA(1);

        if ( (LA470_0==NOT) ) {
            alt470=1;
        }
        switch (alt470) {
            case 1 :
                // RPIExprWalker.g:1186:15: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred395_RPIExprWalker9086); if (state.failed) return ;

                }
                break;

        }

        match(input,192,FOLLOW_192_in_synpred395_RPIExprWalker9091); if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred395_RPIExprWalker9093);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred395_RPIExprWalker

    // $ANTLR start synpred397_RPIExprWalker
    public final void synpred397_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1187:13: ( ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add )
        // RPIExprWalker.g:1187:13: ( 'NOT' )? 'BETWEEN' expr_add 'AND' expr_add
        {
        // RPIExprWalker.g:1187:13: ( 'NOT' )?
        int alt471=2;
        int LA471_0 = input.LA(1);

        if ( (LA471_0==NOT) ) {
            alt471=1;
        }
        switch (alt471) {
            case 1 :
                // RPIExprWalker.g:1187:15: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred397_RPIExprWalker9109); if (state.failed) return ;

                }
                break;

        }

        match(input,196,FOLLOW_196_in_synpred397_RPIExprWalker9114); if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred397_RPIExprWalker9116);
        expr_add();

        state._fsp--;
        if (state.failed) return ;
        match(input,AND,FOLLOW_AND_in_synpred397_RPIExprWalker9118); if (state.failed) return ;
        pushFollow(FOLLOW_expr_add_in_synpred397_RPIExprWalker9120);
        expr_add();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred397_RPIExprWalker

    // $ANTLR start synpred399_RPIExprWalker
    public final void synpred399_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1188:13: ( ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN )
        // RPIExprWalker.g:1188:13: ( 'NOT' )? 'IN' LPAREN nested_expressions RPAREN
        {
        // RPIExprWalker.g:1188:13: ( 'NOT' )?
        int alt472=2;
        int LA472_0 = input.LA(1);

        if ( (LA472_0==NOT) ) {
            alt472=1;
        }
        switch (alt472) {
            case 1 :
                // RPIExprWalker.g:1188:15: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred399_RPIExprWalker9136); if (state.failed) return ;

                }
                break;

        }

        match(input,160,FOLLOW_160_in_synpred399_RPIExprWalker9141); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred399_RPIExprWalker9143); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expressions_in_synpred399_RPIExprWalker9145);
        nested_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred399_RPIExprWalker9147); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred399_RPIExprWalker

    // $ANTLR start synpred401_RPIExprWalker
    public final void synpred401_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.sql_expression_return s2 = null;


        // RPIExprWalker.g:1198:7: ( COMMA s2= sql_expression )
        // RPIExprWalker.g:1198:7: COMMA s2= sql_expression
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred401_RPIExprWalker9226); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expression_in_synpred401_RPIExprWalker9230);
        s2=sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred401_RPIExprWalker

    // $ANTLR start synpred404_RPIExprWalker
    public final void synpred404_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.expr_mul_return e2 = null;


        // RPIExprWalker.g:1206:11: ( ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul )
        // RPIExprWalker.g:1206:11: ( PLUS | MINUS | DOUBLEVERTBAR ) e2= expr_mul
        {
        if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS)||input.LA(1)==DOUBLEVERTBAR ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_expr_mul_in_synpred404_RPIExprWalker9339);
        e2=expr_mul();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred404_RPIExprWalker

    // $ANTLR start synpred406_RPIExprWalker
    public final void synpred406_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.expr_sign_return e2 = null;


        // RPIExprWalker.g:1211:11: ( ( ASTERISK | DIV ) e2= expr_sign )
        // RPIExprWalker.g:1211:11: ( ASTERISK | DIV ) e2= expr_sign
        {
        if ( (input.LA(1)>=ASTERISK && input.LA(1)<=DIV) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        pushFollow(FOLLOW_expr_sign_in_synpred406_RPIExprWalker9396);
        e2=expr_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred406_RPIExprWalker

    // $ANTLR start synpred409_RPIExprWalker
    public final void synpred409_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.expr_expr_return e2 = null;


        // RPIExprWalker.g:1219:11: ( EXPONENT e2= expr_expr )
        // RPIExprWalker.g:1219:11: EXPONENT e2= expr_expr
        {
        match(input,EXPONENT,FOLLOW_EXPONENT_in_synpred409_RPIExprWalker9488); if (state.failed) return ;
        pushFollow(FOLLOW_expr_expr_in_synpred409_RPIExprWalker9492);
        e2=expr_expr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred409_RPIExprWalker

    // $ANTLR start synpred410_RPIExprWalker
    public final void synpred410_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1222:9: ( expr_paren )
        // RPIExprWalker.g:1222:11: expr_paren
        {
        pushFollow(FOLLOW_expr_paren_in_synpred410_RPIExprWalker9521);
        expr_paren();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred410_RPIExprWalker

    // $ANTLR start synpred411_RPIExprWalker
    public final void synpred411_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1223:9: ( function_expression )
        // RPIExprWalker.g:1223:11: function_expression
        {
        pushFollow(FOLLOW_function_expression_in_synpred411_RPIExprWalker9540);
        function_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred411_RPIExprWalker

    // $ANTLR start synpred412_RPIExprWalker
    public final void synpred412_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1225:9: ( case_expression )
        // RPIExprWalker.g:1225:11: case_expression
        {
        pushFollow(FOLLOW_case_expression_in_synpred412_RPIExprWalker9560);
        case_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred412_RPIExprWalker

    // $ANTLR start synpred413_RPIExprWalker
    public final void synpred413_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1226:9: ( cursor_expression )
        // RPIExprWalker.g:1226:11: cursor_expression
        {
        pushFollow(FOLLOW_cursor_expression_in_synpred413_RPIExprWalker9579);
        cursor_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred413_RPIExprWalker

    // $ANTLR start synpred414_RPIExprWalker
    public final void synpred414_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1227:9: ( simple_expression )
        // RPIExprWalker.g:1227:11: simple_expression
        {
        pushFollow(FOLLOW_simple_expression_in_synpred414_RPIExprWalker9598);
        simple_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred414_RPIExprWalker

    // $ANTLR start synpred415_RPIExprWalker
    public final void synpred415_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1228:9: ( select_expression )
        // RPIExprWalker.g:1228:11: select_expression
        {
        pushFollow(FOLLOW_select_expression_in_synpred415_RPIExprWalker9618);
        select_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred415_RPIExprWalker

    // $ANTLR start synpred422_RPIExprWalker
    public final void synpred422_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1247:9: ( column_spec )
        // RPIExprWalker.g:1247:11: column_spec
        {
        pushFollow(FOLLOW_column_spec_in_synpred422_RPIExprWalker9756);
        column_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred422_RPIExprWalker

    // $ANTLR start synpred436_RPIExprWalker
    public final void synpred436_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1300:31: ( keyDBTIMEZONE )
        // RPIExprWalker.g:1300:31: keyDBTIMEZONE
        {
        pushFollow(FOLLOW_keyDBTIMEZONE_in_synpred436_RPIExprWalker10223);
        keyDBTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred436_RPIExprWalker

    // $ANTLR start synpred437_RPIExprWalker
    public final void synpred437_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1300:47: ( keySESSIONTIMEZONE )
        // RPIExprWalker.g:1300:47: keySESSIONTIMEZONE
        {
        pushFollow(FOLLOW_keySESSIONTIMEZONE_in_synpred437_RPIExprWalker10227);
        keySESSIONTIMEZONE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred437_RPIExprWalker

    // $ANTLR start synpred439_RPIExprWalker
    public final void synpred439_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.nested_expression_return n1 = null;


        // RPIExprWalker.g:1305:13: ( keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN )
        // RPIExprWalker.g:1305:13: keyCOUNT LPAREN ( ASTERISK | n1= nested_expression ) RPAREN
        {
        pushFollow(FOLLOW_keyCOUNT_in_synpred439_RPIExprWalker10282);
        keyCOUNT();

        state._fsp--;
        if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred439_RPIExprWalker10284); if (state.failed) return ;
        // RPIExprWalker.g:1306:9: ( ASTERISK | n1= nested_expression )
        int alt473=2;
        int LA473_0 = input.LA(1);

        if ( (LA473_0==ASTERISK) ) {
            alt473=1;
        }
        else if ( ((LA473_0>=SUBSTR && LA473_0<=TO_CHAR)||LA473_0==TRIM||(LA473_0>=ID && LA473_0<=LPAREN)||(LA473_0>=SQL && LA473_0<=MINUS)||LA473_0==NUMBER||LA473_0==NOT||LA473_0==QUOTED_STRING||LA473_0==DOUBLEQUOTED_STRING||LA473_0==116||LA473_0==158||(LA473_0>=168 && LA473_0<=169)||(LA473_0>=174 && LA473_0<=175)||LA473_0==198) ) {
            alt473=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 473, 0, input);

            throw nvae;
        }
        switch (alt473) {
            case 1 :
                // RPIExprWalker.g:1306:11: ASTERISK
                {
                match(input,ASTERISK,FOLLOW_ASTERISK_in_synpred439_RPIExprWalker10299); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:1307:9: n1= nested_expression
                {
                pushFollow(FOLLOW_nested_expression_in_synpred439_RPIExprWalker10315);
                n1=nested_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred439_RPIExprWalker10320); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred439_RPIExprWalker

    // $ANTLR start synpred446_RPIExprWalker
    public final void synpred446_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.nested_expression_return n5 = null;


        // RPIExprWalker.g:1321:9: ( function_call ( DOT n5= nested_expression )? )
        // RPIExprWalker.g:1321:9: function_call ( DOT n5= nested_expression )?
        {
        pushFollow(FOLLOW_function_call_in_synpred446_RPIExprWalker10546);
        function_call();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:1322:9: ( DOT n5= nested_expression )?
        int alt476=2;
        int LA476_0 = input.LA(1);

        if ( (LA476_0==DOT) ) {
            alt476=1;
        }
        switch (alt476) {
            case 1 :
                // RPIExprWalker.g:1322:11: DOT n5= nested_expression
                {
                match(input,DOT,FOLLOW_DOT_in_synpred446_RPIExprWalker10561); if (state.failed) return ;
                pushFollow(FOLLOW_nested_expression_in_synpred446_RPIExprWalker10567);
                n5=nested_expression();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred446_RPIExprWalker

    // $ANTLR start synpred447_RPIExprWalker
    public final void synpred447_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.nested_expression_return n6 = null;


        // RPIExprWalker.g:1324:11: ( LPAREN n6= nested_expression RPAREN )
        // RPIExprWalker.g:1324:11: LPAREN n6= nested_expression RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred447_RPIExprWalker10600); if (state.failed) return ;
        pushFollow(FOLLOW_nested_expression_in_synpred447_RPIExprWalker10604);
        n6=nested_expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred447_RPIExprWalker10606); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred447_RPIExprWalker

    // $ANTLR start synpred452_RPIExprWalker
    public final void synpred452_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1337:13: ( keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )? )
        // RPIExprWalker.g:1337:13: keyDAY ( LPAREN leading_field_precision RPAREN )? 'TO' keySECOND ( LPAREN fractional_second_precision RPAREN )?
        {
        pushFollow(FOLLOW_keyDAY_in_synpred452_RPIExprWalker10753);
        keyDAY();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:1337:20: ( LPAREN leading_field_precision RPAREN )?
        int alt478=2;
        int LA478_0 = input.LA(1);

        if ( (LA478_0==LPAREN) ) {
            alt478=1;
        }
        switch (alt478) {
            case 1 :
                // RPIExprWalker.g:1337:22: LPAREN leading_field_precision RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred452_RPIExprWalker10757); if (state.failed) return ;
                pushFollow(FOLLOW_leading_field_precision_in_synpred452_RPIExprWalker10759);
                leading_field_precision();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred452_RPIExprWalker10761); if (state.failed) return ;

                }
                break;

        }

        match(input,135,FOLLOW_135_in_synpred452_RPIExprWalker10766); if (state.failed) return ;
        pushFollow(FOLLOW_keySECOND_in_synpred452_RPIExprWalker10768);
        keySECOND();

        state._fsp--;
        if (state.failed) return ;
        // RPIExprWalker.g:1337:78: ( LPAREN fractional_second_precision RPAREN )?
        int alt479=2;
        int LA479_0 = input.LA(1);

        if ( (LA479_0==LPAREN) ) {
            alt479=1;
        }
        switch (alt479) {
            case 1 :
                // RPIExprWalker.g:1337:80: LPAREN fractional_second_precision RPAREN
                {
                match(input,LPAREN,FOLLOW_LPAREN_in_synpred452_RPIExprWalker10772); if (state.failed) return ;
                pushFollow(FOLLOW_fractional_second_precision_in_synpred452_RPIExprWalker10774);
                fractional_second_precision();

                state._fsp--;
                if (state.failed) return ;
                match(input,RPAREN,FOLLOW_RPAREN_in_synpred452_RPIExprWalker10776); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred452_RPIExprWalker

    // $ANTLR start synpred459_RPIExprWalker
    public final void synpred459_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.sql_identifier_return s2 = null;


        // RPIExprWalker.g:1405:11: ( DOT s2= sql_identifier )
        // RPIExprWalker.g:1405:11: DOT s2= sql_identifier
        {
        match(input,DOT,FOLLOW_DOT_in_synpred459_RPIExprWalker11229); if (state.failed) return ;
        pushFollow(FOLLOW_sql_identifier_in_synpred459_RPIExprWalker11233);
        s2=sql_identifier();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred459_RPIExprWalker

    // $ANTLR start synpred463_RPIExprWalker
    public final void synpred463_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1421:10: ( table_spec )
        // RPIExprWalker.g:1421:10: table_spec
        {
        pushFollow(FOLLOW_table_spec_in_synpred463_RPIExprWalker11326);
        table_spec();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred463_RPIExprWalker

    // $ANTLR start synpred466_RPIExprWalker
    public final void synpred466_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1423:78: ( alias )
        // RPIExprWalker.g:1423:78: alias
        {
        pushFollow(FOLLOW_alias_in_synpred466_RPIExprWalker11368);
        alias();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred466_RPIExprWalker

    // $ANTLR start synpred472_RPIExprWalker
    public final void synpred472_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1441:9: ({...}? condition_or )
        // RPIExprWalker.g:1441:9: {...}? condition_or
        {
        if ( !((  is_sql )) ) {
            if (state.backtracking>0) {state.failed=true; return ;}
            throw new FailedPredicateException(input, "synpred472_RPIExprWalker", "  is_sql ");
        }
        pushFollow(FOLLOW_condition_or_in_synpred472_RPIExprWalker11531);
        condition_or();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred472_RPIExprWalker

    // $ANTLR start synpred473_RPIExprWalker
    public final void synpred473_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.condition_and_return c2 = null;


        // RPIExprWalker.g:1454:11: ( 'OR' c2= condition_and )
        // RPIExprWalker.g:1454:11: 'OR' c2= condition_and
        {
        match(input,OR,FOLLOW_OR_in_synpred473_RPIExprWalker11642); if (state.failed) return ;
        pushFollow(FOLLOW_condition_and_in_synpred473_RPIExprWalker11646);
        c2=condition_and();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred473_RPIExprWalker

    // $ANTLR start synpred474_RPIExprWalker
    public final void synpred474_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.condition_not_return c2 = null;


        // RPIExprWalker.g:1458:11: ( 'AND' c2= condition_not )
        // RPIExprWalker.g:1458:11: 'AND' c2= condition_not
        {
        match(input,AND,FOLLOW_AND_in_synpred474_RPIExprWalker11691); if (state.failed) return ;
        pushFollow(FOLLOW_condition_not_in_synpred474_RPIExprWalker11695);
        c2=condition_not();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred474_RPIExprWalker

    // $ANTLR start synpred477_RPIExprWalker
    public final void synpred477_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1466:9: ( condition_is )
        // RPIExprWalker.g:1466:9: condition_is
        {
        pushFollow(FOLLOW_condition_is_in_synpred477_RPIExprWalker11774);
        condition_is();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred477_RPIExprWalker

    // $ANTLR start synpred478_RPIExprWalker
    public final void synpred478_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1467:9: ( condition_comparison )
        // RPIExprWalker.g:1467:9: condition_comparison
        {
        pushFollow(FOLLOW_condition_comparison_in_synpred478_RPIExprWalker11784);
        condition_comparison();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred478_RPIExprWalker

    // $ANTLR start synpred479_RPIExprWalker
    public final void synpred479_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1468:9: ( condition_group_comparison )
        // RPIExprWalker.g:1468:9: condition_group_comparison
        {
        pushFollow(FOLLOW_condition_group_comparison_in_synpred479_RPIExprWalker11796);
        condition_group_comparison();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred479_RPIExprWalker

    // $ANTLR start synpred480_RPIExprWalker
    public final void synpred480_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1469:9: ( condition_in )
        // RPIExprWalker.g:1469:9: condition_in
        {
        pushFollow(FOLLOW_condition_in_in_synpred480_RPIExprWalker11806);
        condition_in();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred480_RPIExprWalker

    // $ANTLR start synpred481_RPIExprWalker
    public final void synpred481_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1470:9: ( condition_is_a_set )
        // RPIExprWalker.g:1470:9: condition_is_a_set
        {
        pushFollow(FOLLOW_condition_is_a_set_in_synpred481_RPIExprWalker11818);
        condition_is_a_set();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred481_RPIExprWalker

    // $ANTLR start synpred482_RPIExprWalker
    public final void synpred482_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1471:9: ( condition_is_any )
        // RPIExprWalker.g:1471:9: condition_is_any
        {
        pushFollow(FOLLOW_condition_is_any_in_synpred482_RPIExprWalker11828);
        condition_is_any();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred482_RPIExprWalker

    // $ANTLR start synpred483_RPIExprWalker
    public final void synpred483_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1472:9: ( condition_is_empty )
        // RPIExprWalker.g:1472:9: condition_is_empty
        {
        pushFollow(FOLLOW_condition_is_empty_in_synpred483_RPIExprWalker11838);
        condition_is_empty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred483_RPIExprWalker

    // $ANTLR start synpred484_RPIExprWalker
    public final void synpred484_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1473:9: ( condition_is_of_type )
        // RPIExprWalker.g:1473:9: condition_is_of_type
        {
        pushFollow(FOLLOW_condition_is_of_type_in_synpred484_RPIExprWalker11848);
        condition_is_of_type();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred484_RPIExprWalker

    // $ANTLR start synpred485_RPIExprWalker
    public final void synpred485_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1474:9: ( condition_is_present )
        // RPIExprWalker.g:1474:9: condition_is_present
        {
        pushFollow(FOLLOW_condition_is_present_in_synpred485_RPIExprWalker11858);
        condition_is_present();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred485_RPIExprWalker

    // $ANTLR start synpred486_RPIExprWalker
    public final void synpred486_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1475:9: ( condition_like )
        // RPIExprWalker.g:1475:9: condition_like
        {
        pushFollow(FOLLOW_condition_like_in_synpred486_RPIExprWalker11868);
        condition_like();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred486_RPIExprWalker

    // $ANTLR start synpred487_RPIExprWalker
    public final void synpred487_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1476:9: ( condition_memeber )
        // RPIExprWalker.g:1476:9: condition_memeber
        {
        pushFollow(FOLLOW_condition_memeber_in_synpred487_RPIExprWalker11878);
        condition_memeber();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred487_RPIExprWalker

    // $ANTLR start synpred488_RPIExprWalker
    public final void synpred488_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1477:9: ( condition_between )
        // RPIExprWalker.g:1477:9: condition_between
        {
        pushFollow(FOLLOW_condition_between_in_synpred488_RPIExprWalker11888);
        condition_between();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred488_RPIExprWalker

    // $ANTLR start synpred489_RPIExprWalker
    public final void synpred489_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1478:9: ( condition_regexp_like )
        // RPIExprWalker.g:1478:9: condition_regexp_like
        {
        pushFollow(FOLLOW_condition_regexp_like_in_synpred489_RPIExprWalker11898);
        condition_regexp_like();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred489_RPIExprWalker

    // $ANTLR start synpred490_RPIExprWalker
    public final void synpred490_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1479:9: ( condition_submultiset )
        // RPIExprWalker.g:1479:9: condition_submultiset
        {
        pushFollow(FOLLOW_condition_submultiset_in_synpred490_RPIExprWalker11908);
        condition_submultiset();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred490_RPIExprWalker

    // $ANTLR start synpred491_RPIExprWalker
    public final void synpred491_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1480:9: ( condition_equals_path )
        // RPIExprWalker.g:1480:9: condition_equals_path
        {
        pushFollow(FOLLOW_condition_equals_path_in_synpred491_RPIExprWalker11918);
        condition_equals_path();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred491_RPIExprWalker

    // $ANTLR start synpred492_RPIExprWalker
    public final void synpred492_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1481:9: ( condition_under_path )
        // RPIExprWalker.g:1481:9: condition_under_path
        {
        pushFollow(FOLLOW_condition_under_path_in_synpred492_RPIExprWalker11928);
        condition_under_path();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred492_RPIExprWalker

    // $ANTLR start synpred494_RPIExprWalker
    public final void synpred494_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1492:11: ( keyNAN )
        // RPIExprWalker.g:1492:11: keyNAN
        {
        pushFollow(FOLLOW_keyNAN_in_synpred494_RPIExprWalker12043);
        keyNAN();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred494_RPIExprWalker

    // $ANTLR start synpred495_RPIExprWalker
    public final void synpred495_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1493:9: ( keyINFINITE )
        // RPIExprWalker.g:1493:9: keyINFINITE
        {
        pushFollow(FOLLOW_keyINFINITE_in_synpred495_RPIExprWalker12058);
        keyINFINITE();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred495_RPIExprWalker

    // $ANTLR start synpred498_RPIExprWalker
    public final void synpred498_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.outer_join_sign_return o2 = null;


        // RPIExprWalker.g:1501:11: (o2= outer_join_sign )
        // RPIExprWalker.g:1501:11: o2= outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred498_RPIExprWalker12177);
        o2=outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred498_RPIExprWalker

    // $ANTLR start synpred499_RPIExprWalker
    public final void synpred499_RPIExprWalker_fragment() throws RecognitionException {   
        CommonTree n1=null;
        RPIExprWalker.outer_join_sign_return o1 = null;

        RPIExprWalker.select_command_return s1 = null;

        RPIExprWalker.outer_join_sign_return o2 = null;


        // RPIExprWalker.g:1497:9: ( LPAREN sql_expressions RPAREN (o1= outer_join_sign )? ( EQ | n1= NOT_EQ ) LPAREN s1= select_command RPAREN (o2= outer_join_sign )? )
        // RPIExprWalker.g:1497:9: LPAREN sql_expressions RPAREN (o1= outer_join_sign )? ( EQ | n1= NOT_EQ ) LPAREN s1= select_command RPAREN (o2= outer_join_sign )?
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred499_RPIExprWalker12097); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred499_RPIExprWalker12099);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred499_RPIExprWalker12101); if (state.failed) return ;
        // RPIExprWalker.g:1498:9: (o1= outer_join_sign )?
        int alt481=2;
        int LA481_0 = input.LA(1);

        if ( (LA481_0==LPAREN) ) {
            alt481=1;
        }
        switch (alt481) {
            case 1 :
                // RPIExprWalker.g:1498:11: o1= outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred499_RPIExprWalker12117);
                o1=outer_join_sign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // RPIExprWalker.g:1499:9: ( EQ | n1= NOT_EQ )
        int alt482=2;
        int LA482_0 = input.LA(1);

        if ( (LA482_0==EQ) ) {
            alt482=1;
        }
        else if ( (LA482_0==NOT_EQ) ) {
            alt482=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 482, 0, input);

            throw nvae;
        }
        switch (alt482) {
            case 1 :
                // RPIExprWalker.g:1499:11: EQ
                {
                match(input,EQ,FOLLOW_EQ_in_synpred499_RPIExprWalker12134); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:1499:38: n1= NOT_EQ
                {
                n1=(CommonTree)match(input,NOT_EQ,FOLLOW_NOT_EQ_in_synpred499_RPIExprWalker12141); if (state.failed) return ;

                }
                break;

        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred499_RPIExprWalker12155); if (state.failed) return ;
        pushFollow(FOLLOW_select_command_in_synpred499_RPIExprWalker12159);
        s1=select_command();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred499_RPIExprWalker12161); if (state.failed) return ;
        // RPIExprWalker.g:1501:9: (o2= outer_join_sign )?
        int alt483=2;
        int LA483_0 = input.LA(1);

        if ( (LA483_0==LPAREN) ) {
            alt483=1;
        }
        switch (alt483) {
            case 1 :
                // RPIExprWalker.g:1501:11: o2= outer_join_sign
                {
                pushFollow(FOLLOW_outer_join_sign_in_synpred499_RPIExprWalker12177);
                o2=outer_join_sign();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred499_RPIExprWalker

    // $ANTLR start synpred508_RPIExprWalker
    public final void synpred508_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.sql_expression_return sql2 = null;


        // RPIExprWalker.g:1513:11: (sql2= sql_expression )
        // RPIExprWalker.g:1513:11: sql2= sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred508_RPIExprWalker12363);
        sql2=sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred508_RPIExprWalker

    // $ANTLR start synpred509_RPIExprWalker
    public final void synpred509_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.outer_join_sign_return o4 = null;


        // RPIExprWalker.g:1515:11: (o4= outer_join_sign )
        // RPIExprWalker.g:1515:11: o4= outer_join_sign
        {
        pushFollow(FOLLOW_outer_join_sign_in_synpred509_RPIExprWalker12401);
        o4=outer_join_sign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred509_RPIExprWalker

    // $ANTLR start synpred513_RPIExprWalker
    public final void synpred513_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1518:92: ( grouping_expression_list )
        // RPIExprWalker.g:1518:92: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred513_RPIExprWalker12457);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred513_RPIExprWalker

    // $ANTLR start synpred514_RPIExprWalker
    public final void synpred514_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1518:9: ( LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // RPIExprWalker.g:1518:9: LPAREN sql_expressions RPAREN ( EQ | NOT_EQ ) ( 'ANY' | keySOME | 'ALL' ) LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred514_RPIExprWalker12423); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred514_RPIExprWalker12425);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred514_RPIExprWalker12427); if (state.failed) return ;
        if ( input.LA(1)==EQ||input.LA(1)==NOT_EQ ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }

        // RPIExprWalker.g:1518:55: ( 'ANY' | keySOME | 'ALL' )
        int alt484=3;
        switch ( input.LA(1) ) {
        case 202:
            {
            alt484=1;
            }
            break;
        case ID:
            {
            alt484=2;
            }
            break;
        case 177:
            {
            alt484=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 484, 0, input);

            throw nvae;
        }

        switch (alt484) {
            case 1 :
                // RPIExprWalker.g:1518:57: 'ANY'
                {
                match(input,202,FOLLOW_202_in_synpred514_RPIExprWalker12441); if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:1518:65: keySOME
                {
                pushFollow(FOLLOW_keySOME_in_synpred514_RPIExprWalker12445);
                keySOME();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // RPIExprWalker.g:1518:75: 'ALL'
                {
                match(input,177,FOLLOW_177_in_synpred514_RPIExprWalker12449); if (state.failed) return ;

                }
                break;

        }

        match(input,LPAREN,FOLLOW_LPAREN_in_synpred514_RPIExprWalker12453); if (state.failed) return ;
        // RPIExprWalker.g:1518:90: ( grouping_expression_list | select_command )
        int alt485=2;
        int LA485_0 = input.LA(1);

        if ( ((LA485_0>=SUBSTR && LA485_0<=TO_CHAR)||LA485_0==TRIM||(LA485_0>=ID && LA485_0<=LPAREN)||(LA485_0>=SQL && LA485_0<=MINUS)||LA485_0==NUMBER||LA485_0==QUOTED_STRING||LA485_0==DOUBLEQUOTED_STRING||LA485_0==116||LA485_0==158||(LA485_0>=168 && LA485_0<=169)||LA485_0==175||LA485_0==198) ) {
            alt485=1;
        }
        else if ( (LA485_0==174) ) {
            int LA485_18 = input.LA(2);

            if ( (synpred513_RPIExprWalker()) ) {
                alt485=1;
            }
            else if ( (true) ) {
                alt485=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 485, 18, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 485, 0, input);

            throw nvae;
        }
        switch (alt485) {
            case 1 :
                // RPIExprWalker.g:1518:92: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred514_RPIExprWalker12457);
                grouping_expression_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:1518:119: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred514_RPIExprWalker12461);
                select_command();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred514_RPIExprWalker12465); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred514_RPIExprWalker

    // $ANTLR start synpred522_RPIExprWalker
    public final void synpred522_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1519:125: ( sql_expressions )
        // RPIExprWalker.g:1519:125: sql_expressions
        {
        pushFollow(FOLLOW_sql_expressions_in_synpred522_RPIExprWalker12521);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred522_RPIExprWalker

    // $ANTLR start synpred524_RPIExprWalker
    public final void synpred524_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1524:11: ( grouping_expression_list )
        // RPIExprWalker.g:1524:11: grouping_expression_list
        {
        pushFollow(FOLLOW_grouping_expression_list_in_synpred524_RPIExprWalker12592);
        grouping_expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred524_RPIExprWalker

    // $ANTLR start synpred525_RPIExprWalker
    public final void synpred525_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1522:9: ( LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN )
        // RPIExprWalker.g:1522:9: LPAREN sql_expressions RPAREN ( 'NOT' )? 'IN' LPAREN ( grouping_expression_list | select_command ) RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred525_RPIExprWalker12551); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred525_RPIExprWalker12553);
        sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred525_RPIExprWalker12555); if (state.failed) return ;
        // RPIExprWalker.g:1523:9: ( 'NOT' )?
        int alt486=2;
        int LA486_0 = input.LA(1);

        if ( (LA486_0==NOT) ) {
            alt486=1;
        }
        switch (alt486) {
            case 1 :
                // RPIExprWalker.g:1523:11: 'NOT'
                {
                match(input,NOT,FOLLOW_NOT_in_synpred525_RPIExprWalker12569); if (state.failed) return ;

                }
                break;

        }

        match(input,160,FOLLOW_160_in_synpred525_RPIExprWalker12575); if (state.failed) return ;
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred525_RPIExprWalker12577); if (state.failed) return ;
        // RPIExprWalker.g:1524:9: ( grouping_expression_list | select_command )
        int alt487=2;
        int LA487_0 = input.LA(1);

        if ( ((LA487_0>=SUBSTR && LA487_0<=TO_CHAR)||LA487_0==TRIM||(LA487_0>=ID && LA487_0<=LPAREN)||(LA487_0>=SQL && LA487_0<=MINUS)||LA487_0==NUMBER||LA487_0==QUOTED_STRING||LA487_0==DOUBLEQUOTED_STRING||LA487_0==116||LA487_0==158||(LA487_0>=168 && LA487_0<=169)||LA487_0==175||LA487_0==198) ) {
            alt487=1;
        }
        else if ( (LA487_0==174) ) {
            int LA487_18 = input.LA(2);

            if ( (synpred524_RPIExprWalker()) ) {
                alt487=1;
            }
            else if ( (true) ) {
                alt487=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 487, 18, input);

                throw nvae;
            }
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 487, 0, input);

            throw nvae;
        }
        switch (alt487) {
            case 1 :
                // RPIExprWalker.g:1524:11: grouping_expression_list
                {
                pushFollow(FOLLOW_grouping_expression_list_in_synpred525_RPIExprWalker12592);
                grouping_expression_list();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 2 :
                // RPIExprWalker.g:1525:9: select_command
                {
                pushFollow(FOLLOW_select_command_in_synpred525_RPIExprWalker12607);
                select_command();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,RPAREN,FOLLOW_RPAREN_in_synpred525_RPIExprWalker12612); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred525_RPIExprWalker

    // $ANTLR start synpred527_RPIExprWalker
    public final void synpred527_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1528:11: ( expression_list )
        // RPIExprWalker.g:1528:11: expression_list
        {
        pushFollow(FOLLOW_expression_list_in_synpred527_RPIExprWalker12663);
        expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred527_RPIExprWalker

    // $ANTLR start synpred537_RPIExprWalker
    public final void synpred537_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1553:46: ( keyLIKEC )
        // RPIExprWalker.g:1553:46: keyLIKEC
        {
        pushFollow(FOLLOW_keyLIKEC_in_synpred537_RPIExprWalker12921);
        keyLIKEC();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred537_RPIExprWalker

    // $ANTLR start synpred538_RPIExprWalker
    public final void synpred538_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1553:57: ( keyLIKE2 )
        // RPIExprWalker.g:1553:57: keyLIKE2
        {
        pushFollow(FOLLOW_keyLIKE2_in_synpred538_RPIExprWalker12925);
        keyLIKE2();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred538_RPIExprWalker

    // $ANTLR start synpred539_RPIExprWalker
    public final void synpred539_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1553:96: ( keyESCAPE sql_expression )
        // RPIExprWalker.g:1553:96: keyESCAPE sql_expression
        {
        pushFollow(FOLLOW_keyESCAPE_in_synpred539_RPIExprWalker12937);
        keyESCAPE();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_sql_expression_in_synpred539_RPIExprWalker12939);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred539_RPIExprWalker

    // $ANTLR start synpred548_RPIExprWalker
    public final void synpred548_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.expression_list_return e2 = null;


        // RPIExprWalker.g:1584:11: ( COMMA e2= expression_list )
        // RPIExprWalker.g:1584:11: COMMA e2= expression_list
        {
        match(input,COMMA,FOLLOW_COMMA_in_synpred548_RPIExprWalker13247); if (state.failed) return ;
        pushFollow(FOLLOW_expression_list_in_synpred548_RPIExprWalker13251);
        e2=expression_list();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred548_RPIExprWalker

    // $ANTLR start synpred549_RPIExprWalker
    public final void synpred549_RPIExprWalker_fragment() throws RecognitionException {   
        RPIExprWalker.sql_expressions_return s1 = null;


        // RPIExprWalker.g:1587:9: ( LPAREN s1= sql_expressions RPAREN )
        // RPIExprWalker.g:1587:9: LPAREN s1= sql_expressions RPAREN
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred549_RPIExprWalker13277); if (state.failed) return ;
        pushFollow(FOLLOW_sql_expressions_in_synpred549_RPIExprWalker13281);
        s1=sql_expressions();

        state._fsp--;
        if (state.failed) return ;
        match(input,RPAREN,FOLLOW_RPAREN_in_synpred549_RPIExprWalker13283); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred549_RPIExprWalker

    // $ANTLR start synpred557_RPIExprWalker
    public final void synpred557_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1605:9: ( sql_expression )
        // RPIExprWalker.g:1605:11: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred557_RPIExprWalker13431);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred557_RPIExprWalker

    // $ANTLR start synpred560_RPIExprWalker
    public final void synpred560_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1619:17: ( 'PRIOR' )
        // RPIExprWalker.g:1619:17: 'PRIOR'
        {
        match(input,197,FOLLOW_197_in_synpred560_RPIExprWalker13585); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred560_RPIExprWalker

    // $ANTLR start synpred561_RPIExprWalker
    public final void synpred561_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1619:13: ( ( 'PRIOR' )? sql_condition )
        // RPIExprWalker.g:1619:15: ( 'PRIOR' )? sql_condition
        {
        // RPIExprWalker.g:1619:15: ( 'PRIOR' )?
        int alt488=2;
        int LA488_0 = input.LA(1);

        if ( (LA488_0==197) ) {
            int LA488_1 = input.LA(2);

            if ( (synpred560_RPIExprWalker()) ) {
                alt488=1;
            }
        }
        switch (alt488) {
            case 1 :
                // RPIExprWalker.g:1619:17: 'PRIOR'
                {
                match(input,197,FOLLOW_197_in_synpred561_RPIExprWalker13585); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_sql_condition_in_synpred561_RPIExprWalker13590);
        sql_condition();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred561_RPIExprWalker

    // $ANTLR start synpred562_RPIExprWalker
    public final void synpred562_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1619:48: ( 'PRIOR' )
        // RPIExprWalker.g:1619:48: 'PRIOR'
        {
        match(input,197,FOLLOW_197_in_synpred562_RPIExprWalker13597); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred562_RPIExprWalker

    // $ANTLR start synpred571_RPIExprWalker
    public final void synpred571_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1638:11: ( sql_expression )
        // RPIExprWalker.g:1638:13: sql_expression
        {
        pushFollow(FOLLOW_sql_expression_in_synpred571_RPIExprWalker13800);
        sql_expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred571_RPIExprWalker

    // $ANTLR start synpred572_RPIExprWalker
    public final void synpred572_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1638:50: ( NUMBER )
        // RPIExprWalker.g:1638:52: NUMBER
        {
        match(input,NUMBER,FOLLOW_NUMBER_in_synpred572_RPIExprWalker13812); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred572_RPIExprWalker

    // $ANTLR start synpred593_RPIExprWalker
    public final void synpred593_RPIExprWalker_fragment() throws RecognitionException {   
        // RPIExprWalker.g:1709:13: ( variable_names )
        // RPIExprWalker.g:1709:13: variable_names
        {
        pushFollow(FOLLOW_variable_names_in_synpred593_RPIExprWalker14493);
        variable_names();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred593_RPIExprWalker

    // Delegated rules

    public final boolean synpred80_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred404_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred404_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred490_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred490_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred374_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred374_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred571_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred571_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred514_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred514_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred548_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred548_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred141_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred141_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred89_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred89_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred486_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred486_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred393_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred393_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred466_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred466_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred473_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred473_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred323_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred323_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred325_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred325_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred332_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred332_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred411_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred411_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred446_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred446_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred484_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred484_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred494_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred494_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred324_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred324_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred539_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred539_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred387_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred387_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred295_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred295_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred495_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred495_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred331_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred331_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred391_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred391_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred412_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred412_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred525_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred525_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred452_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred452_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred338_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred338_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred491_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred491_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred480_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred480_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred381_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred381_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred409_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred409_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred437_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred437_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred478_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred478_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred395_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred395_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred562_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred562_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred413_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred413_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred481_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred481_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred399_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred399_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred285_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred285_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred384_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred384_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred483_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred483_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred319_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred319_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred572_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred572_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred489_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred489_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred474_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred474_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred373_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred373_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred410_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred410_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred509_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred509_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred492_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred492_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred508_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred508_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred283_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred283_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred71_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred71_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred488_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred488_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred561_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred561_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred498_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred498_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred390_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred390_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred538_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred538_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred499_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred499_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred397_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred397_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred357_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred357_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred485_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred485_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred487_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred487_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred463_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred463_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred279_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred279_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred415_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred415_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred401_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred401_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred549_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred549_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred513_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred513_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred472_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred472_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred293_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred293_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred328_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred328_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred383_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred383_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred414_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred414_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred479_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred479_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred345_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred345_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred320_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred320_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred560_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred560_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred527_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred527_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred482_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred482_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred362_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred362_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred436_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred436_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred370_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred370_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred333_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred333_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred358_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred358_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred73_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred73_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred557_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred557_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred524_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred524_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred439_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred439_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred459_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred459_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred593_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred593_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred406_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred406_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred422_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred422_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred75_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred75_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred389_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred389_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred106_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred106_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred104_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred104_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred447_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred447_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred386_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred386_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred522_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred522_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred477_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred477_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred388_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred388_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred326_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred326_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred537_RPIExprWalker() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred537_RPIExprWalker_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA21 dfa21 = new DFA21(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA43 dfa43 = new DFA43(this);
    static final String DFA21_eotS =
        "\u030e\uffff";
    static final String DFA21_eofS =
        "\u030e\uffff";
    static final String DFA21_minS =
        "\3\25\3\uffff\1\25\1\26\1\uffff\5\31\3\26\5\31\1\26\1\31\2\25\2"+
        "\26\2\25\2\26\1\u008f\7\31\1\26\1\uffff\4\25\1\26\1\31\1\25\1\31"+
        "\1\uffff\2\25\1\40\1\26\3\40\1\31\1\26\1\40\1\u0091\1\40\1\u0091"+
        "\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\1\40\2\26\1"+
        "\102\1\27\3\25\2\uffff\1\25\1\uffff\27\25\1\u008f\11\25\1\uffff"+
        "\1\40\1\25\3\113\1\27\1\25\4\27\6\25\4\27\1\26\1\40\1\25\2\102\1"+
        "\27\2\25\1\40\1\25\1\31\1\25\5\27\3\26\2\27\1\25\3\27\1\26\1\27"+
        "\2\25\2\26\2\25\2\26\1\u008f\7\27\2\26\1\25\1\157\6\25\1\17\1\164"+
        "\1\0\1\25\1\uffff\1\40\1\25\3\40\2\25\1\40\1\u0091\1\40\1\u0091"+
        "\1\40\1\u0091\1\25\1\40\1\25\3\40\1\25\1\u0091\1\25\2\40\1\27\1"+
        "\26\1\31\1\25\1\17\1\40\4\31\2\27\3\31\1\102\2\27\3\31\1\102\2\27"+
        "\3\31\1\102\4\31\1\27\2\31\1\102\1\31\2\26\3\112\1\40\1\26\2\40"+
        "\1\25\1\27\1\26\1\40\2\25\1\27\1\40\1\27\1\26\1\40\1\u0091\1\40"+
        "\1\u0091\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\2\40"+
        "\2\25\1\31\1\40\1\25\3\113\2\25\1\102\1\27\1\31\1\25\4\27\6\25\4"+
        "\27\1\25\1\40\1\25\2\102\2\27\1\u0087\2\40\2\27\1\25\1\31\1\25\1"+
        "\31\1\25\2\31\1\25\1\31\1\25\3\27\2\26\1\102\1\40\1\25\1\27\1\25"+
        "\3\113\1\27\6\25\4\27\1\26\1\40\1\25\2\102\2\27\1\25\5\27\3\26\2"+
        "\27\1\25\3\27\1\26\1\27\2\25\2\26\2\25\2\26\1\u008f\7\27\2\26\1"+
        "\27\5\25\1\40\4\25\2\27\3\25\1\102\2\27\3\25\1\102\2\27\3\25\1\102"+
        "\4\25\1\27\2\25\1\102\2\25\2\27\1\25\14\102\2\26\1\40\3\27\2\25"+
        "\1\27\1\26\1\27\1\25\6\27\1\102\5\27\1\102\5\27\1\102\7\27\1\102"+
        "\2\27\1\40\1\26\2\40\1\25\1\40\1\25\1\27\1\26\1\27\1\25\1\40\1\27"+
        "\1\26\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\26\1\40\1\26\3\40"+
        "\1\25\1\u0091\1\25\2\40\1\31\1\40\2\25\3\112\1\uffff\1\25\1\27\11"+
        "\25\2\31\4\25\1\27\2\26\3\112\1\u0087\1\40\1\27\1\25\1\27\1\25\1"+
        "\27\1\25\2\27\1\25\4\27\2\26\1\102\1\27\3\113\1\40\2\25\1\27\6\25"+
        "\4\27\1\26\1\40\1\25\2\102\3\27\1\25\14\102\14\111\1\25\1\27\14"+
        "\102\1\40\3\27\2\25\2\27\1\26\1\25\6\27\1\102\5\27\1\102\5\27\1"+
        "\102\7\27\1\102\2\27\7\25\2\26\1\27\4\25\1\27\2\26\3\112\1\u0087"+
        "\1\40\1\27\1\25\1\27\1\25\1\27\1\25\2\27\1\25\1\27\30\111\1\25\1"+
        "\27\14\102\2\26\1\27\4\25\14\111";
    static final String DFA21_maxS =
        "\1\u00d9\2\u009f\3\uffff\2\u00dc\1\uffff\6\165\1\u0084\10\165\1"+
        "\25\3\u0090\4\165\1\u0090\3\165\1\u0090\4\165\1\uffff\1\u009e\1"+
        "\126\1\25\1\u00db\1\u0087\1\165\1\u009e\1\165\1\uffff\1\126\1\u009f"+
        "\1\40\1\165\3\40\1\165\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1"+
        "\u0091\1\165\1\40\1\165\3\40\1\165\1\u0091\1\u009e\1\40\2\165\1"+
        "\123\1\27\2\u00a0\1\25\2\uffff\1\u009f\1\uffff\6\74\1\u0084\10\74"+
        "\1\25\3\u0090\4\74\1\u0090\3\74\1\u0090\2\74\1\123\1\74\1\123\1"+
        "\uffff\1\40\1\25\3\113\1\27\1\u009f\1\32\3\27\1\u008f\1\u009e\1"+
        "\u008f\1\u009e\1\u008f\1\u009e\4\27\1\165\1\40\1\u009e\2\123\1\27"+
        "\1\u00db\1\u009e\1\40\1\u009e\1\u0088\1\u009f\6\32\1\u0084\3\32"+
        "\1\u0088\5\32\1\25\3\u0090\4\32\1\u0090\3\32\1\u0090\2\32\1\123"+
        "\1\32\1\123\1\126\1\u00dc\1\165\1\u0088\1\u009e\1\74\1\u009e\1\74"+
        "\1\u00c6\1\164\1\0\1\25\1\uffff\1\40\1\74\3\40\1\74\1\u0090\1\40"+
        "\1\u0091\1\40\1\u0091\1\40\1\u0091\1\107\1\40\1\107\3\40\1\74\1"+
        "\u0091\1\u009e\2\40\1\27\2\165\1\u0088\1\u00c6\1\40\4\165\2\27\1"+
        "\u0090\2\165\1\111\2\27\1\u0090\2\165\1\111\2\27\1\u0090\2\165\1"+
        "\111\4\165\1\27\2\165\1\111\3\165\3\112\1\40\1\32\2\40\1\u009e\1"+
        "\32\1\u0087\1\40\1\25\1\u009e\1\32\1\40\1\32\1\u0090\1\40\1\u0091"+
        "\1\40\1\u0091\1\40\1\u0091\1\32\1\40\1\32\3\40\1\32\1\u0091\1\u009e"+
        "\2\40\2\u00a0\1\165\1\40\1\25\3\113\3\123\1\u00c4\1\31\1\25\1\32"+
        "\3\27\1\u008f\1\u009e\1\u008f\1\u009e\1\u008f\1\u009e\4\27\1\107"+
        "\1\40\1\u009e\2\123\2\27\1\u0087\2\40\1\u00c4\1\27\1\u009e\1\165"+
        "\1\u009e\1\165\1\u009e\2\165\1\u009e\1\165\1\126\1\32\2\27\3\123"+
        "\1\40\1\25\1\27\1\25\3\113\1\27\1\u008f\1\u009e\1\u008f\1\u009e"+
        "\1\u008f\1\u009e\4\27\1\32\1\40\1\u009e\2\123\2\27\1\u009f\6\32"+
        "\1\u0084\3\32\1\u0088\5\32\1\25\3\u0090\4\32\1\u0090\3\32\1\u0090"+
        "\2\32\1\123\1\32\1\123\1\27\1\74\2\u009e\1\u00a4\1\74\1\40\4\74"+
        "\2\27\1\u0090\3\111\2\27\1\u0090\3\111\2\27\1\u0090\3\111\4\74\1"+
        "\27\3\111\2\74\2\27\1\u0088\14\111\2\165\1\40\3\32\2\u009e\1\27"+
        "\1\32\1\u0088\2\32\2\27\1\u0090\3\111\2\27\1\u0090\3\111\2\27\1"+
        "\u0090\3\111\4\32\1\27\3\111\2\32\1\40\1\32\2\40\1\u009e\1\40\1"+
        "\u009e\1\32\1\u0087\1\32\1\25\1\40\1\32\1\u0090\1\40\1\u0091\1\40"+
        "\1\u0091\1\40\1\u0091\1\32\1\40\1\32\3\40\1\32\1\u0091\1\u009e\2"+
        "\40\1\u00a4\1\40\5\112\1\uffff\1\107\1\27\1\u009e\1\74\1\u009e\1"+
        "\74\1\u009e\2\74\1\u009e\1\74\1\165\1\u0088\4\u009e\1\27\5\112\1"+
        "\u0087\1\40\1\32\1\u009e\1\32\1\u009e\1\32\1\u009e\2\32\1\u009e"+
        "\2\32\2\27\3\123\1\27\3\113\1\40\2\25\1\27\1\u008f\1\u009e\1\u008f"+
        "\1\u009e\1\u008f\1\u009e\4\27\1\32\1\40\1\u009e\2\123\3\27\1\126"+
        "\30\111\1\126\1\27\14\111\1\40\3\32\2\u009e\1\u0088\1\27\3\32\2"+
        "\27\1\u0090\3\111\2\27\1\u0090\3\111\2\27\1\u0090\3\111\4\32\1\27"+
        "\3\111\2\32\1\74\2\102\4\u009e\2\102\1\32\4\u009e\1\27\5\112\1\u0087"+
        "\1\40\1\32\1\u009e\1\32\1\u009e\1\32\1\u009e\2\32\1\u009e\1\32\30"+
        "\111\1\126\1\27\14\111\2\102\1\32\4\u009e\14\111";
    static final String DFA21_acceptS =
        "\3\uffff\1\11\1\12\1\14\2\uffff\1\1\40\uffff\1\13\10\uffff\1\10"+
        "\40\uffff\1\5\1\4\1\uffff\1\7\41\uffff\1\2\117\uffff\1\3\u015a\uffff"+
        "\1\6\u00ea\uffff";
    static final String DFA21_specialS =
        "\u00c6\uffff\1\0\u0247\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\1\100\uffff\1\2\112\uffff\1\3\1\4\66\uffff\1\5",
            "\1\6\54\uffff\1\51\23\uffff\1\7\34\uffff\1\10\3\uffff\1\51"+
            "\2\uffff\1\11\1\12\1\13\1\14\1\15\4\16\1\17\1\20\1\21\1\22\2"+
            "\uffff\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\34\1\uffff\1\32"+
            "\1\33\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
            "\1\50",
            "\1\10\54\uffff\1\51\23\uffff\1\10\34\uffff\1\10\3\uffff\1\51"+
            "\2\uffff\15\10\2\uffff\10\10\1\uffff\16\10",
            "",
            "",
            "",
            "\1\56\1\53\2\uffff\1\10\42\uffff\1\10\5\uffff\1\52\1\10\6\uffff"+
            "\1\57\1\61\7\uffff\1\60\33\uffff\1\55\5\uffff\1\10\22\uffff"+
            "\1\54\123\uffff\1\62",
            "\1\63\2\uffff\1\10\42\uffff\1\10\5\uffff\1\52\1\10\6\uffff"+
            "\1\57\1\61\7\uffff\1\60\33\uffff\1\55\5\uffff\1\10\146\uffff"+
            "\1\62",
            "",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\65\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\67\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10\16\uffff\1\66",
            "\1\70\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\71\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\72",
            "\1\73\1\74\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\64\5\uffff\1\10\32\uffff\1\75",
            "\1\76\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10\32\uffff\1\77",
            "\1\100\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10\32\uffff\1\101",
            "\1\102\1\103\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\64\5\uffff\1\10",
            "\1\104\1\105\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\64\5\uffff\1\10",
            "\1\106\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\107\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\2\110",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10"+
            "\32\uffff\1\111",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\112\1\10\6\uffff\1\57\1\61\7"+
            "\uffff\1\60\33\uffff\1\64\5\uffff\1\10",
            "\1\113\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "",
            "\1\114\100\uffff\1\115\107\uffff\1\116",
            "\1\120\12\uffff\1\117\65\uffff\1\121",
            "\1\122",
            "\1\125\1\170\77\uffff\1\167\43\uffff\1\127\1\130\1\131\1\132"+
            "\1\133\4\134\1\135\1\136\1\137\1\140\2\uffff\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\147\1\152\1\uffff\1\150\1\151\1\153\1\154"+
            "\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
            "\3\uffff\1\123\12\uffff\1\126\54\uffff\1\124",
            "\1\171\160\uffff\1\172",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\173\100\uffff\1\174\107\uffff\1\175",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "",
            "\1\120\12\uffff\1\176\65\uffff\1\121",
            "\1\177\1\170\77\uffff\1\167\43\uffff\1\127\1\130\1\131\1\132"+
            "\1\133\4\134\1\135\1\136\1\137\1\140\2\uffff\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\147\1\152\1\uffff\1\150\1\151\1\153\1\154"+
            "\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166",
            "\1\u0080",
            "\1\67\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\74\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10\32\uffff\1\75",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\1\u0088",
            "\1\u0089",
            "\1\103\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\u008a",
            "\1\105\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64"+
            "\5\uffff\1\10",
            "\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e\1\u008f\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\u0090",
            "\1\u0091\100\uffff\1\u0092\107\uffff\1\116",
            "\1\u0093",
            "\1\u0096\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u0095\1\10\6"+
            "\uffff\1\57\1\61\7\uffff\1\60\33\uffff\1\u0094\5\uffff\1\10",
            "\1\u0096\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u0095\1\10\6"+
            "\uffff\1\57\1\61\7\uffff\1\60\33\uffff\1\u0094\5\uffff\1\10",
            "\1\u0097\7\uffff\1\57\1\61\7\uffff\1\60",
            "\1\u0098",
            "\1\u00a4\1\uffff\1\u00bd\2\uffff\1\u00bc\73\uffff\1\u00bb\43"+
            "\uffff\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\4\u009f\1\u00a0"+
            "\1\u00a1\1\u00a2\1\u00a3\2\uffff\1\u00a5\1\u00a6\1\u00a7\1\u00a8"+
            "\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\uffff\1\u00ac\1\u00ad\1\u00af"+
            "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7"+
            "\1\u00b8\1\u00b9\1\u00ba\1\u0099",
            "\1\u00a4\1\uffff\1\u00bd\2\uffff\1\u00bc\73\uffff\1\u00bb\43"+
            "\uffff\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\4\u009f\1\u00a0"+
            "\1\u00a1\1\u00a2\1\u00a3\2\uffff\1\u00a5\1\u00a6\1\u00a7\1\u00a8"+
            "\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\uffff\1\u00ac\1\u00ad\1\u00af"+
            "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7"+
            "\1\u00b8\1\u00b9\1\u00ba\1\u0099",
            "\1\u00be",
            "",
            "",
            "\1\u00bf\1\u00c4\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u00c2\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0\2\uffff\1\170"+
            "\43\uffff\15\170\1\uffff\1\u00c7\10\170\1\uffff\16\170",
            "",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00c9\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00cb\2\uffff\1\u00c6\42\uffff\1\u00c5\107\uffff"+
            "\1\u00ca",
            "\1\u00c8\1\u00cc\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00cd\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00ce",
            "\1\u00cf\1\u00d0\2\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff"+
            "\1\u00d1",
            "\1\u00c8\1\u00d2\2\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff"+
            "\1\u00d3",
            "\1\u00c8\1\u00d4\2\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff"+
            "\1\u00d5",
            "\1\u00d6\1\u00d7\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00d8\1\u00d9\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00da\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00db\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\2\u00dc",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff\1\u00dd",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u00de\7"+
            "\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "\1\u00c8\1\u00df\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u00c2\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "",
            "\1\u00e1",
            "\1\u00e2",
            "\1\61",
            "\1\61",
            "\1\61",
            "\1\u00e3",
            "\1\u00e4\1\u00e5\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u00c2\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0\2\uffff\1\170"+
            "\43\uffff\15\170\1\uffff\1\u00c7\10\170\1\uffff\16\170",
            "\1\u00e7\2\uffff\1\u00e6",
            "\1\u00e8",
            "\1\u00e9",
            "\1\u00ea",
            "\1\u00eb\1\uffff\1\u00ed\167\uffff\1\u00ec",
            "\1\u00ee\100\uffff\1\u00ef\107\uffff\1\u00f0",
            "\1\u00f1\1\uffff\1\u00f3\167\uffff\1\u00f2",
            "\1\u00f4\100\uffff\1\u00f5\107\uffff\1\u00f6",
            "\1\u00f7\1\uffff\1\u00f9\167\uffff\1\u00f8",
            "\1\u00fa\100\uffff\1\u00fb\107\uffff\1\u00fc",
            "\1\u00fd",
            "\1\u00fe",
            "\1\u00ff",
            "\1\u0100",
            "\1\u008f\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1"+
            "\64\5\uffff\1\10",
            "\1\u0101",
            "\1\u0102\100\uffff\1\u0103\107\uffff\1\u0104",
            "\1\u0097\7\uffff\1\57\1\61\7\uffff\1\60",
            "\1\u0097\7\uffff\1\57\1\61\7\uffff\1\60",
            "\1\u0105",
            "\1\125\1\170\77\uffff\1\167\43\uffff\1\127\1\130\1\131\1\132"+
            "\1\133\4\134\1\135\1\136\1\137\1\140\2\uffff\1\141\1\142\1\143"+
            "\1\144\1\145\1\146\1\147\1\152\1\uffff\1\150\1\151\1\153\1\154"+
            "\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
            "\3\uffff\1\123\67\uffff\1\124",
            "\1\u0106\100\uffff\1\u0107\107\uffff\1\u0108",
            "\1\176",
            "\1\u0109\100\uffff\1\u010a\107\uffff\1\u0108",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10"+
            "\22\uffff\1\54",
            "\1\u00a4\1\uffff\1\u00bd\2\uffff\1\u00bc\73\uffff\1\u00bb\43"+
            "\uffff\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\4\u009f\1\u00a0"+
            "\1\u00a1\1\u00a2\1\u00a3\2\uffff\1\u00a5\1\u00a6\1\u00a7\1\u00a8"+
            "\1\u00a9\1\u00aa\1\u00ab\1\u00ae\1\uffff\1\u00ac\1\u00ad\1\u00af"+
            "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7"+
            "\1\u00b8\1\u00b9\1\u00ba",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u010b\1\u00bd\2\uffff\1\u00bc",
            "\1\u010d\1\u00bd\2\uffff\1\u00bc\151\uffff\1\u010c",
            "\1\u010e\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0111\1\u0112\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u010f\7"+
            "\uffff\1\u0110\1\u0115\7\uffff\1\u0114\64\uffff\1\u0113",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0116\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0117",
            "\1\u0118\1\u0119\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011a",
            "\1\u011b\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011c",
            "\1\u011d\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011e",
            "\1\u011f\1\u0120\1\u00bd\2\uffff\1\u00bc",
            "\1\u0121\1\u0122\1\u00bd\2\uffff\1\u00bc",
            "\1\u0123\1\u00bd\2\uffff\1\u00bc",
            "\1\u0124\1\u00bd\2\uffff\1\u00bc",
            "\2\u0125",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u0126",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0127\7\uffff\1\u0110\1"+
            "\u0115\7\uffff\1\u0114",
            "\1\u0128\1\u00bd\2\uffff\1\u00bc",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u010f\7\uffff\1"+
            "\u0110\1\u0115\7\uffff\1\u0114",
            "\1\u012a\100\uffff\1\u012b",
            "\1\126\154\uffff\1\62",
            "\1\u012c\3\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1"+
            "\64\5\uffff\1\10",
            "\1\170\1\u012d\2\uffff\1\170\2\uffff\2\u00c8\2\uffff\1\u00c8"+
            "\33\uffff\1\170\5\uffff\1\170\4\uffff\1\u00c8\2\uffff\2\170"+
            "\7\uffff\1\170\63\uffff\1\u012e\1\170",
            "\1\u012f\100\uffff\1\u0130\107\uffff\1\u0131",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u0132\100\uffff\1\u0133\107\uffff\1\u0134",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\2\170\1\uffff\1\170\2\uffff\2\170\4\uffff\3\170\2\uffff\1"+
            "\u0135\33\uffff\1\170\12\uffff\1\170\16\uffff\1\170\35\uffff"+
            "\1\170\51\uffff\1\170\11\uffff\2\170\4\uffff\2\170\26\uffff"+
            "\1\170",
            "\1\u0136",
            "\1\uffff",
            "\1\u0137",
            "",
            "\1\u0138",
            "\1\u00c8\1\u00cb\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u0139",
            "\1\u013a",
            "\1\u013b",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00d0\2\uffff\1\u00c6\2\uffff\2\u00c8\2\uffff\1"+
            "\u00c8\33\uffff\1\u00c5\12\uffff\1\u00c8\110\uffff\1\u00d1",
            "\1\u013c",
            "\1\u013d",
            "\1\u013e",
            "\1\u013f",
            "\1\u0140",
            "\1\u0141",
            "\1\u00c8\1\u00d7\2\uffff\1\u00c6\2\uffff\2\u00c8\2\uffff\1"+
            "\u00c8\33\uffff\1\u00c5\12\uffff\1\u00c8",
            "\1\u0142",
            "\1\u00c8\1\u00d9\2\uffff\1\u00c6\2\uffff\2\u00c8\2\uffff\1"+
            "\u00c8\33\uffff\1\u00c5\12\uffff\1\u00c8",
            "\1\u0143",
            "\1\u0144",
            "\1\u0145",
            "\1\u0146\1\u0147\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u0148",
            "\1\u0149\100\uffff\1\u014a\107\uffff\1\u0134",
            "\1\u014b",
            "\1\u014c",
            "\1\u014d",
            "\1\u014e\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1"+
            "\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\170\1\u014f\2\uffff\1\170\2\uffff\2\u00c8\2\uffff\1\u00c8"+
            "\33\uffff\1\170\5\uffff\1\170\4\uffff\1\u00c8\2\uffff\2\170"+
            "\7\uffff\1\170\63\uffff\1\u012e\1\170",
            "\2\170\1\uffff\1\170\2\uffff\2\170\4\uffff\3\170\2\uffff\1"+
            "\u0150\33\uffff\1\170\12\uffff\1\170\16\uffff\1\170\35\uffff"+
            "\1\170\51\uffff\1\170\11\uffff\2\170\4\uffff\2\170\26\uffff"+
            "\1\170",
            "\1\u0151",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u00ed",
            "\1\u00ed",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10"+
            "\32\uffff\1\75",
            "\1\10\42\uffff\1\10\5\uffff\1\u0152\1\10\5\uffff\1\u0153\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u0152\1\10\5\uffff\1\u0153\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\u0152\6\uffff\1\u0153",
            "\1\u00f3",
            "\1\u00f3",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10"+
            "\32\uffff\1\77",
            "\1\10\42\uffff\1\10\5\uffff\1\u0154\1\10\5\uffff\1\u0155\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u0154\1\10\5\uffff\1\u0155\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\u0154\6\uffff\1\u0155",
            "\1\u00f9",
            "\1\u00f9",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10"+
            "\32\uffff\1\101",
            "\1\10\42\uffff\1\10\5\uffff\1\u0156\1\10\5\uffff\1\u0157\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u0156\1\10\5\uffff\1\u0157\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\u0156\6\uffff\1\u0157",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u0158",
            "\1\10\42\uffff\1\10\5\uffff\1\u0159\1\10\5\uffff\1\u015a\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u0159\1\10\5\uffff\1\u015a\45"+
            "\uffff\1\64\5\uffff\1\10",
            "\1\u0159\6\uffff\1\u015a",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u0096\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u015b\1\10\6"+
            "\uffff\1\57\44\uffff\1\u0094\5\uffff\1\10",
            "\1\u0096\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u015b\1\10\6"+
            "\uffff\1\57\44\uffff\1\u0094\5\uffff\1\10",
            "\1\57",
            "\1\57",
            "\1\57",
            "\1\u015c",
            "\1\u010d\1\u00bd\2\uffff\1\u00bc",
            "\1\u015d",
            "\1\u015e",
            "\1\u015f\100\uffff\1\u0160\107\uffff\1\u0161",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0162\160\uffff\1\u0163",
            "\1\u0164",
            "\1\u0165",
            "\1\u0166\100\uffff\1\u0167\107\uffff\1\u0168",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0169",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0119\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011a",
            "\1\u016a",
            "\1\u016b",
            "\1\u016c",
            "\1\u016d",
            "\1\u016e",
            "\1\u016f",
            "\1\u0120\1\u00bd\2\uffff\1\u00bc",
            "\1\u0170",
            "\1\u0122\1\u00bd\2\uffff\1\u00bc",
            "\1\u0171",
            "\1\u0172",
            "\1\u0173",
            "\1\u0174\1\u0175\1\u00bd\2\uffff\1\u00bc",
            "\1\u0176",
            "\1\u0177\100\uffff\1\u0178\107\uffff\1\u0161",
            "\1\u0179",
            "\1\u017a",
            "\1\u0186\1\uffff\1\u00bd\2\uffff\1\u00bc\73\uffff\1\u019d\43"+
            "\uffff\1\u017c\1\u017d\1\u017e\1\u017f\1\u0180\4\u0181\1\u0182"+
            "\1\u0183\1\u0184\1\u0185\2\uffff\1\u0187\1\u0188\1\u0189\1\u018a"+
            "\1\u018b\1\u018c\1\u018d\1\u0190\1\uffff\1\u018e\1\u018f\1\u0191"+
            "\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197\1\u0198\1\u0199"+
            "\1\u019a\1\u019b\1\u019c\1\u017b",
            "\1\u0186\1\uffff\1\u00bd\2\uffff\1\u00bc\73\uffff\1\u019d\43"+
            "\uffff\1\u017c\1\u017d\1\u017e\1\u017f\1\u0180\4\u0181\1\u0182"+
            "\1\u0183\1\u0184\1\u0185\2\uffff\1\u0187\1\u0188\1\u0189\1\u018a"+
            "\1\u018b\1\u018c\1\u018d\1\u0190\1\uffff\1\u018e\1\u018f\1\u0191"+
            "\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197\1\u0198\1\u0199"+
            "\1\u019a\1\u019b\1\u019c\1\u017b",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u019e",
            "\1\u019f",
            "\1\u00c1",
            "\1\u00c1",
            "\1\u00c1",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u01a0\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u01a0\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "\1\u01a1\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "\1\u01a2\1\170\1\uffff\1\170\1\uffff\4\170\32\uffff\3\170\1"+
            "\uffff\4\170\12\uffff\7\170\1\uffff\1\170\32\uffff\1\170\60"+
            "\uffff\1\170\37\uffff\1\170\3\uffff\1\170",
            "\1\u00c6",
            "\1\u01a3",
            "\1\u01a5\2\uffff\1\u01a4",
            "\1\u01a6",
            "\1\u01a7",
            "\1\u01a8",
            "\1\u01a9\1\uffff\1\u01ab\167\uffff\1\u01aa",
            "\1\u01ac\100\uffff\1\u01ad\107\uffff\1\u01ae",
            "\1\u01af\1\uffff\1\u01b1\167\uffff\1\u01b0",
            "\1\u01b2\100\uffff\1\u01b3\107\uffff\1\u01b4",
            "\1\u01b5\1\uffff\1\u01b7\167\uffff\1\u01b6",
            "\1\u01b8\100\uffff\1\u01b9\107\uffff\1\u01ba",
            "\1\u01bb",
            "\1\u01bc",
            "\1\u01bd",
            "\1\u01be",
            "\1\u00c8\1\u0147\2\uffff\1\u00c6\2\uffff\2\u00c8\2\uffff\1"+
            "\u00c8\33\uffff\1\u00c5\12\uffff\1\u00c8",
            "\1\u01bf",
            "\1\u01c0\100\uffff\1\u01c1\107\uffff\1\u01c2",
            "\1\u01a1\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "\1\u01a1\7\uffff\1\u00c3\1\u00c1\7\uffff\1\u00c0",
            "\1\u01c3",
            "\1\u01c4",
            "\1\172",
            "\1\u01c5",
            "\1\u01c6",
            "\1\u01c7\1\170\1\uffff\1\170\1\uffff\4\170\32\uffff\3\170\1"+
            "\uffff\4\170\12\uffff\7\170\1\uffff\1\170\32\uffff\1\170\60"+
            "\uffff\1\170\37\uffff\1\170\3\uffff\1\170",
            "\1\u00e7",
            "\1\u01c8\100\uffff\1\u01c9\107\uffff\1\u01ca",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u01cb\100\uffff\1\u01cc\107\uffff\1\u01cd",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u01ce\100\uffff\1\u01cf\107\uffff\1\u01d0",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u01d1\100\uffff\1\u01d2\107\uffff\1\u01d3",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\u01d4\100\uffff\1\u01d5",
            "\1\u01d7\2\uffff\1\u01d6",
            "\1\u01d8",
            "\1\u01d9",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u01da\7\uffff\1"+
            "\u0110\1\u0115\7\uffff\1\u0114",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u01da\7\uffff\1"+
            "\u0110\1\u0115\7\uffff\1\u0114",
            "\1\u01db\7\uffff\1\u0110\1\u0115\7\uffff\1\u0114",
            "\1\u01dc",
            "\1\u01dd",
            "\1\u01de",
            "\1\u01df",
            "\1\u0115",
            "\1\u0115",
            "\1\u0115",
            "\1\u01e0",
            "\1\u01e1\1\uffff\1\u01e3\167\uffff\1\u01e2",
            "\1\u01e4\100\uffff\1\u01e5\107\uffff\1\u01e6",
            "\1\u01e7\1\uffff\1\u01e9\167\uffff\1\u01e8",
            "\1\u01ea\100\uffff\1\u01eb\107\uffff\1\u01ec",
            "\1\u01ed\1\uffff\1\u01ef\167\uffff\1\u01ee",
            "\1\u01f0\100\uffff\1\u01f1\107\uffff\1\u01f2",
            "\1\u01f3",
            "\1\u01f4",
            "\1\u01f5",
            "\1\u01f6",
            "\1\u0175\1\u00bd\2\uffff\1\u00bc",
            "\1\u01f7",
            "\1\u01f8\100\uffff\1\u01f9\107\uffff\1\u01fa",
            "\1\u01db\7\uffff\1\u0110\1\u0115\7\uffff\1\u0114",
            "\1\u01db\7\uffff\1\u0110\1\u0115\7\uffff\1\u0114",
            "\1\u01fb",
            "\1\u01fc",
            "\1\u0186\1\uffff\1\u00bd\2\uffff\1\u00bc\73\uffff\1\u019d\43"+
            "\uffff\1\u017c\1\u017d\1\u017e\1\u017f\1\u0180\4\u0181\1\u0182"+
            "\1\u0183\1\u0184\1\u0185\2\uffff\1\u0187\1\u0188\1\u0189\1\u018a"+
            "\1\u018b\1\u018c\1\u018d\1\u0190\1\uffff\1\u018e\1\u018f\1\u0191"+
            "\1\u0192\1\u0193\1\u0194\1\u0195\1\u0196\1\u0197\1\u0198\1\u0199"+
            "\1\u019a\1\u019b\1\u019c",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u01fd\1\u00bd\2\uffff\1\u00bc",
            "\1\u01ff\1\u00bd\2\uffff\1\u00bc\151\uffff\1\u01fe",
            "\1\u0200\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0205\1\u0202\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0201\7"+
            "\uffff\1\u0206\1\u0204\7\uffff\1\u0203\64\uffff\1\u0207",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0208\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0209",
            "\1\u020a\1\u020b\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u020c",
            "\1\u020d\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u020e",
            "\1\u020f\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u0210",
            "\1\u0211\1\u0212\1\u00bd\2\uffff\1\u00bc",
            "\1\u0213\1\u0214\1\u00bd\2\uffff\1\u00bc",
            "\1\u0215\1\u00bd\2\uffff\1\u00bc",
            "\1\u0216\1\u00bd\2\uffff\1\u00bc",
            "\2\u0217",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u0218",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0219\7\uffff\1\u0206\1"+
            "\u0204\7\uffff\1\u0203",
            "\1\u021a\1\u00bd\2\uffff\1\u00bc",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0201\7\uffff\1"+
            "\u0206\1\u0204\7\uffff\1\u0203",
            "\1\u021c",
            "\1\u00c8\1\u021d\2\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u021e\100\uffff\1\u021f\107\uffff\1\u0220",
            "\1\u0221\100\uffff\1\u0222\107\uffff\1\u0220",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\113\uffff\1\u00c7"+
            "\33\uffff\1\u0223",
            "\1\u0224\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u0225",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u01ab",
            "\1\u01ab",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff\1\u00d1",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u0226\6"+
            "\uffff\1\u0227",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u0226\6"+
            "\uffff\1\u0227",
            "\1\u0226\6\uffff\1\u0227",
            "\1\u01b1",
            "\1\u01b1",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff\1\u00d3",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u0228\6"+
            "\uffff\1\u0229",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u0228\6"+
            "\uffff\1\u0229",
            "\1\u0228\6\uffff\1\u0229",
            "\1\u01b7",
            "\1\u01b7",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\123\uffff\1\u00d5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u022a\6"+
            "\uffff\1\u022b",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u022a\6"+
            "\uffff\1\u022b",
            "\1\u022a\6\uffff\1\u022b",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u022c",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u022d\6"+
            "\uffff\1\u022e",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1\u022d\6"+
            "\uffff\1\u022e",
            "\1\u022d\6\uffff\1\u022e",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u022f",
            "\1\u0230",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5\113\uffff\1\u00c7",
            "\1\u0231\6\uffff\1\u0153",
            "\1\u0231\6\uffff\1\u0153",
            "\1\u0231\6\uffff\1\u0153",
            "\1\u0232\6\uffff\1\u0155",
            "\1\u0232\6\uffff\1\u0155",
            "\1\u0232\6\uffff\1\u0155",
            "\1\u0233\6\uffff\1\u0157",
            "\1\u0233\6\uffff\1\u0157",
            "\1\u0233\6\uffff\1\u0157",
            "\1\u0234\6\uffff\1\u015a",
            "\1\u0234\6\uffff\1\u015a",
            "\1\u0234\6\uffff\1\u015a",
            "\1\u0096\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u015b\1\10\53"+
            "\uffff\1\u0094\5\uffff\1\10",
            "\1\u0096\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u015b\1\10\53"+
            "\uffff\1\u0094\5\uffff\1\10",
            "\1\u0235",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0236\100\uffff\1\u0237\107\uffff\1\u0238",
            "\1\u0239\100\uffff\1\u023a\107\uffff\1\u0238",
            "\1\u023b",
            "\1\u023c\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc\155\uffff\1\u0113",
            "\1\u023d\1\uffff\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u01e3",
            "\1\u01e3",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011a",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u023e\6\uffff\1\u023f",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u023e\6\uffff\1\u023f",
            "\1\u023e\6\uffff\1\u023f",
            "\1\u01e9",
            "\1\u01e9",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011c",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0240\6\uffff\1\u0241",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0240\6\uffff\1\u0241",
            "\1\u0240\6\uffff\1\u0241",
            "\1\u01ef",
            "\1\u01ef",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u011e",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0242\6\uffff\1\u0243",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0242\6\uffff\1\u0243",
            "\1\u0242\6\uffff\1\u0243",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0244",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0245\6\uffff\1\u0246",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0245\6\uffff\1\u0246",
            "\1\u0245\6\uffff\1\u0246",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0247",
            "\1\u01ff\1\u00bd\2\uffff\1\u00bc",
            "\1\u0248",
            "\1\u0249",
            "\1\u024a\100\uffff\1\u024b\107\uffff\1\u024c",
            "\1\u024d",
            "\1\u024e\100\uffff\1\u024f\107\uffff\1\u0250",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0251\160\uffff\1\u0252",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0253",
            "\1\u0254",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u020b\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u020c",
            "\1\u0255",
            "\1\u0256",
            "\1\u0257",
            "\1\u0258",
            "\1\u0259",
            "\1\u025a",
            "\1\u0212\1\u00bd\2\uffff\1\u00bc",
            "\1\u025b",
            "\1\u0214\1\u00bd\2\uffff\1\u00bc",
            "\1\u025c",
            "\1\u025d",
            "\1\u025e",
            "\1\u025f\1\u0260\1\u00bd\2\uffff\1\u00bc",
            "\1\u0261",
            "\1\u0262\100\uffff\1\u0263\107\uffff\1\u024c",
            "\1\u0264",
            "\1\u0265",
            "\1\170\42\uffff\1\170\112\uffff\1\u012e\1\170\33\uffff\1\u0223",
            "\1\u0266",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u0267\7\uffff\1\u00c3",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u0267\7\uffff\1\u00c3",
            "\1\u00c3",
            "\1\u00c3",
            "\1\u00c3",
            "",
            "\1\u00c8\3\uffff\1\u00c6\2\uffff\2\u00c8\2\uffff\1\u00c8\33"+
            "\uffff\1\u00c5\12\uffff\1\u00c8",
            "\1\u01a5",
            "\1\u0268\100\uffff\1\u0269\107\uffff\1\u026a",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u026b\100\uffff\1\u026c\107\uffff\1\u026d",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u026e\100\uffff\1\u026f\107\uffff\1\u0270",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u0271\100\uffff\1\u0272\107\uffff\1\u0273",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\64\5\uffff\1\10",
            "\1\170\42\uffff\1\170\112\uffff\1\u012e\1\170",
            "\1\u0274\100\uffff\1\u0275\107\uffff\1\u0276",
            "\1\u0277\100\uffff\1\u0278\107\uffff\1\u0279",
            "\1\u027a\100\uffff\1\u027b\107\uffff\1\u027c",
            "\1\u027d\100\uffff\1\u027e\107\uffff\1\u027f",
            "\1\u01d7",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0280\7\uffff\1"+
            "\u0110",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0280\7\uffff\1"+
            "\u0110",
            "\1\u0110",
            "\1\u0110",
            "\1\u0110",
            "\1\u0163",
            "\1\u0281",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0282\100\uffff\1\u0283\107\uffff\1\u0284",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0285\100\uffff\1\u0286\107\uffff\1\u0287",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0288\100\uffff\1\u0289\107\uffff\1\u028a",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u028b\100\uffff\1\u028c\107\uffff\1\u028d",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u028f\2\uffff\1\u028e",
            "\1\u0290",
            "\1\u0291",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0292\7\uffff\1"+
            "\u0206\1\u0204\7\uffff\1\u0203",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0292\7\uffff\1"+
            "\u0206\1\u0204\7\uffff\1\u0203",
            "\1\u0293\7\uffff\1\u0206\1\u0204\7\uffff\1\u0203",
            "\1\u0294",
            "\1\u0204",
            "\1\u0204",
            "\1\u0204",
            "\1\u0295",
            "\1\u0296",
            "\1\u0297",
            "\1\u0298",
            "\1\u0299\1\uffff\1\u029b\167\uffff\1\u029a",
            "\1\u029c\100\uffff\1\u029d\107\uffff\1\u029e",
            "\1\u029f\1\uffff\1\u02a1\167\uffff\1\u02a0",
            "\1\u02a2\100\uffff\1\u02a3\107\uffff\1\u02a4",
            "\1\u02a5\1\uffff\1\u02a7\167\uffff\1\u02a6",
            "\1\u02a8\100\uffff\1\u02a9\107\uffff\1\u02aa",
            "\1\u02ab",
            "\1\u02ac",
            "\1\u02ad",
            "\1\u02ae",
            "\1\u0260\1\u00bd\2\uffff\1\u00bc",
            "\1\u02af",
            "\1\u02b0\100\uffff\1\u02b1\107\uffff\1\u02b2",
            "\1\u0293\7\uffff\1\u0206\1\u0204\7\uffff\1\u0203",
            "\1\u0293\7\uffff\1\u0206\1\u0204\7\uffff\1\u0203",
            "\1\u02b3",
            "\1\u02b4",
            "\1\u02b5",
            "\1\u02b6\100\uffff\1\u02b7",
            "\1\u02b8\6\uffff\1\u0227",
            "\1\u02b8\6\uffff\1\u0227",
            "\1\u02b8\6\uffff\1\u0227",
            "\1\u02b9\6\uffff\1\u0229",
            "\1\u02b9\6\uffff\1\u0229",
            "\1\u02b9\6\uffff\1\u0229",
            "\1\u02ba\6\uffff\1\u022b",
            "\1\u02ba\6\uffff\1\u022b",
            "\1\u02ba\6\uffff\1\u022b",
            "\1\u02bb\6\uffff\1\u022e",
            "\1\u02bb\6\uffff\1\u022e",
            "\1\u02bb\6\uffff\1\u022e",
            "\1\u0153",
            "\1\u0153",
            "\1\u0153",
            "\1\u0155",
            "\1\u0155",
            "\1\u0155",
            "\1\u0157",
            "\1\u0157",
            "\1\u0157",
            "\1\u015a",
            "\1\u015a",
            "\1\u015a",
            "\1\u02bc\100\uffff\1\u02bd",
            "\1\u02be",
            "\1\u02bf\6\uffff\1\u023f",
            "\1\u02bf\6\uffff\1\u023f",
            "\1\u02bf\6\uffff\1\u023f",
            "\1\u02c0\6\uffff\1\u0241",
            "\1\u02c0\6\uffff\1\u0241",
            "\1\u02c0\6\uffff\1\u0241",
            "\1\u02c1\6\uffff\1\u0243",
            "\1\u02c1\6\uffff\1\u0243",
            "\1\u02c1\6\uffff\1\u0243",
            "\1\u02c2\6\uffff\1\u0246",
            "\1\u02c2\6\uffff\1\u0246",
            "\1\u02c2\6\uffff\1\u0246",
            "\1\u02c3",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02c4\100\uffff\1\u02c5\107\uffff\1\u02c6",
            "\1\u02c7\100\uffff\1\u02c8\107\uffff\1\u02c6",
            "\1\u00bd\2\uffff\1\u00bc\155\uffff\1\u0207",
            "\1\u02c9",
            "\1\u02ca\1\u00bd\2\uffff\1\u00bc",
            "\1\u02cb\1\uffff\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u029b",
            "\1\u029b",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u020c",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02cc\6\uffff\1\u02cd",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02cc\6\uffff\1\u02cd",
            "\1\u02cc\6\uffff\1\u02cd",
            "\1\u02a1",
            "\1\u02a1",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u020e",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02ce\6\uffff\1\u02cf",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02ce\6\uffff\1\u02cf",
            "\1\u02ce\6\uffff\1\u02cf",
            "\1\u02a7",
            "\1\u02a7",
            "\1\u00bd\2\uffff\1\u00bc\165\uffff\1\u0210",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02d0\6\uffff\1\u02d1",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02d0\6\uffff\1\u02d1",
            "\1\u02d0\6\uffff\1\u02d1",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02d2",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02d3\6\uffff\1\u02d4",
            "\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02d3\6\uffff\1\u02d4",
            "\1\u02d3\6\uffff\1\u02d4",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00c8\3\uffff\1\u00c6\42\uffff\1\u00c5",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u0267",
            "\1\u00c8\1\u00e0\2\uffff\1\u00c6\42\uffff\1\u00c5\5\uffff\1"+
            "\u0267",
            "\1\u02d5\100\uffff\1\u02d6\107\uffff\1\u02d7",
            "\1\u02d8\100\uffff\1\u02d9\107\uffff\1\u02da",
            "\1\u02db\100\uffff\1\u02dc\107\uffff\1\u02dd",
            "\1\u02de\100\uffff\1\u02df\107\uffff\1\u02e0",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0280",
            "\1\u0129\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u0280",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02e1\100\uffff\1\u02e2\107\uffff\1\u02e3",
            "\1\u02e4\100\uffff\1\u02e5\107\uffff\1\u02e6",
            "\1\u02e7\100\uffff\1\u02e8\107\uffff\1\u02e9",
            "\1\u02ea\100\uffff\1\u02eb\107\uffff\1\u02ec",
            "\1\u028f",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02ed\7\uffff\1"+
            "\u0206",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02ed\7\uffff\1"+
            "\u0206",
            "\1\u0206",
            "\1\u0206",
            "\1\u0206",
            "\1\u0252",
            "\1\u02ee",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02ef\100\uffff\1\u02f0\107\uffff\1\u02f1",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02f2\100\uffff\1\u02f3\107\uffff\1\u02f4",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02f5\100\uffff\1\u02f6\107\uffff\1\u02f7",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u02f8\100\uffff\1\u02f9\107\uffff\1\u02fa",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0227",
            "\1\u0227",
            "\1\u0227",
            "\1\u0229",
            "\1\u0229",
            "\1\u0229",
            "\1\u022b",
            "\1\u022b",
            "\1\u022b",
            "\1\u022e",
            "\1\u022e",
            "\1\u022e",
            "\1\u023f",
            "\1\u023f",
            "\1\u023f",
            "\1\u0241",
            "\1\u0241",
            "\1\u0241",
            "\1\u0243",
            "\1\u0243",
            "\1\u0243",
            "\1\u0246",
            "\1\u0246",
            "\1\u0246",
            "\1\u02fb\100\uffff\1\u02fc",
            "\1\u02fd",
            "\1\u02fe\6\uffff\1\u02cd",
            "\1\u02fe\6\uffff\1\u02cd",
            "\1\u02fe\6\uffff\1\u02cd",
            "\1\u02ff\6\uffff\1\u02cf",
            "\1\u02ff\6\uffff\1\u02cf",
            "\1\u02ff\6\uffff\1\u02cf",
            "\1\u0300\6\uffff\1\u02d1",
            "\1\u0300\6\uffff\1\u02d1",
            "\1\u0300\6\uffff\1\u02d1",
            "\1\u0301\6\uffff\1\u02d4",
            "\1\u0301\6\uffff\1\u02d4",
            "\1\u0301\6\uffff\1\u02d4",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02ed",
            "\1\u021b\1\u00bd\2\uffff\1\u00bc\47\uffff\1\u02ed",
            "\1\u00bd\2\uffff\1\u00bc",
            "\1\u0302\100\uffff\1\u0303\107\uffff\1\u0304",
            "\1\u0305\100\uffff\1\u0306\107\uffff\1\u0307",
            "\1\u0308\100\uffff\1\u0309\107\uffff\1\u030a",
            "\1\u030b\100\uffff\1\u030c\107\uffff\1\u030d",
            "\1\u02cd",
            "\1\u02cd",
            "\1\u02cd",
            "\1\u02cf",
            "\1\u02cf",
            "\1\u02cf",
            "\1\u02d1",
            "\1\u02d1",
            "\1\u02d1",
            "\1\u02d4",
            "\1\u02d4",
            "\1\u02d4"
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "385:1: package_obj_spec : ( variable_declaration | type_declaration | subtype_declaration | record_declaration | plsql_table_declaration | varray_declaration | cursor_declaration | cursor_spec | procedure_spec | function_spec | exception_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA21_198 = input.LA(1);

                         
                        int index21_198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred40_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))) ) {s = 120;}

                        else if ( ((synpred41_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE")))) ) {s = 200;}

                         
                        input.seek(index21_198);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 21, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\u00d5\uffff";
    static final String DFA30_eofS =
        "\u00d5\uffff";
    static final String DFA30_minS =
        "\3\25\1\73\5\uffff\5\31\3\26\2\31\1\25\3\31\1\26\1\31\2\25\2\26"+
        "\2\25\2\26\1\u008f\7\31\2\26\1\25\1\uffff\1\40\1\26\2\40\1\26\1"+
        "\25\1\31\3\25\1\31\1\25\1\40\1\31\1\26\1\40\1\u0091\1\40\1\u0091"+
        "\1\40\1\u0091\1\26\1\40\1\26\3\40\1\25\1\u0091\1\25\1\40\1\25\1"+
        "\u00a1\3\27\1\40\1\25\2\26\1\102\1\27\3\uffff\1\25\3\113\1\25\1"+
        "\27\6\25\4\27\1\26\1\40\1\25\2\102\2\27\1\40\3\31\1\27\1\26\2\25"+
        "\1\40\1\25\1\31\1\40\1\26\1\25\1\31\2\27\3\31\1\102\2\27\3\31\1"+
        "\102\2\27\3\31\1\102\4\31\1\27\2\31\1\102\2\31\1\27\1\u0087\1\40"+
        "\2\26\3\112\1\27\1\40\1\31\1\25\1\31\1\25\1\31\1\25\2\31\1\25\1"+
        "\31\1\27\2\25\1\27\14\102\1\31\2\26\1\uffff\1\u0087\4\25\14\111";
    static final String DFA30_maxS =
        "\1\u00d9\2\u009f\1\u00a2\5\uffff\6\165\1\u0084\3\165\1\u0088\5\165"+
        "\1\25\3\u0090\4\165\1\u0090\3\165\1\u0090\5\165\1\25\1\uffff\1\40"+
        "\1\165\2\40\1\u0087\1\u009e\1\165\1\126\1\u00db\1\u009e\1\165\1"+
        "\25\1\40\1\165\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1"+
        "\165\1\40\1\165\3\40\1\165\1\u0091\1\u009e\1\40\1\126\1\u00a2\1"+
        "\32\2\27\1\40\1\25\2\165\1\123\1\27\3\uffff\1\u0088\3\113\1\25\1"+
        "\27\1\u008f\1\u009e\1\u008f\1\u009e\1\u008f\1\u009e\4\27\1\165\1"+
        "\40\1\u009e\2\123\2\27\1\40\3\165\1\27\1\165\1\u009e\1\u00db\1\40"+
        "\1\u009e\1\u0088\1\40\1\u0087\2\165\2\27\1\u0090\2\165\1\111\2\27"+
        "\1\u0090\2\165\1\111\2\27\1\u0090\2\165\1\111\4\165\1\27\2\165\1"+
        "\111\2\165\1\27\1\u0087\1\40\2\165\3\112\1\27\1\40\1\165\1\u009e"+
        "\1\165\1\u009e\1\165\1\u009e\2\165\1\u009e\1\165\1\27\1\126\1\u00a4"+
        "\1\27\14\111\3\165\1\uffff\1\u00a4\4\u009e\14\111";
    static final String DFA30_acceptS =
        "\4\uffff\1\10\1\11\1\12\1\4\1\1\43\uffff\1\2\52\uffff\1\3\1\6\1"+
        "\5\151\uffff\1\7\21\uffff";
    static final String DFA30_specialS =
        "\u00d5\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\1\100\uffff\1\2\27\uffff\1\3\62\uffff\1\4\1\5\66\uffff\1"+
            "\6",
            "\1\23\54\uffff\1\7\23\uffff\1\52\34\uffff\1\10\3\uffff\1\7"+
            "\2\uffff\1\11\1\12\1\13\1\14\1\15\4\16\1\17\1\20\1\21\1\22\2"+
            "\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\35\1\uffff\1\33"+
            "\1\34\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
            "\1\51",
            "\1\10\54\uffff\1\7\23\uffff\1\10\34\uffff\1\10\3\uffff\1\7"+
            "\2\uffff\15\10\2\uffff\10\10\1\uffff\16\10",
            "\1\53\145\uffff\1\4\1\5",
            "",
            "",
            "",
            "",
            "",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\55\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\57\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10\16\uffff\1\56",
            "\1\60\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\61\1\64\2\uffff\1\10\42\uffff\1\10\5\uffff\1\62\1\10\6\uffff"+
            "\1\63\1\67\7\uffff\1\66\33\uffff\1\65\5\uffff\1\10\22\uffff"+
            "\1\70",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\71\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\72",
            "\1\73\1\74\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\54\5\uffff\1\10\32\uffff\1\75",
            "\1\76\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10\32\uffff\1\77",
            "\1\100\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10\32\uffff\1\101",
            "\1\102\1\103\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\54\5\uffff\1\10",
            "\1\104\1\105\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\54\5\uffff\1\10",
            "\1\106\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\107\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\2\110",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10"+
            "\32\uffff\1\111",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\112\1\10\6\uffff\1\63\1\67\7"+
            "\uffff\1\66\33\uffff\1\54\5\uffff\1\10",
            "\1\113\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\114\2\uffff\1\10\42\uffff\1\10\5\uffff\1\62\1\10\6\uffff"+
            "\1\63\1\67\7\uffff\1\66\33\uffff\1\65\5\uffff\1\10",
            "\1\115",
            "",
            "\1\116",
            "\1\57\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\117",
            "\1\120",
            "\1\121\160\uffff\1\122",
            "\1\123\100\uffff\1\124\107\uffff\1\125",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\127\12\uffff\1\126\65\uffff\1\127",
            "\1\132\100\uffff\1\54\43\uffff\15\54\2\uffff\10\54\1\uffff"+
            "\16\54\3\uffff\1\130\12\uffff\1\127\54\uffff\1\131",
            "\1\133\100\uffff\1\134\107\uffff\1\135",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\136",
            "\1\137",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\74\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10\32\uffff\1\75",
            "\1\140",
            "\1\141",
            "\1\142",
            "\1\143",
            "\1\144",
            "\1\145",
            "\1\103\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\146",
            "\1\105\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\147",
            "\1\150",
            "\1\151",
            "\1\152\1\153\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff"+
            "\1\54\5\uffff\1\10",
            "\1\154",
            "\1\155\100\uffff\1\156\107\uffff\1\125",
            "\1\157",
            "\1\127\12\uffff\1\160\65\uffff\1\127",
            "\1\4\1\5",
            "\1\162\2\uffff\1\161",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\171\2\uffff\1\10\42\uffff\1\10\5\uffff\1\167\1\10\6\uffff"+
            "\1\63\1\67\7\uffff\1\66\33\uffff\1\170\5\uffff\1\10",
            "\1\171\2\uffff\1\10\42\uffff\1\10\5\uffff\1\167\1\10\6\uffff"+
            "\1\63\1\67\7\uffff\1\66\33\uffff\1\170\5\uffff\1\10",
            "\1\172\7\uffff\1\63\1\67\7\uffff\1\66",
            "\1\173",
            "",
            "",
            "",
            "\1\175\1\174\2\uffff\1\54\42\uffff\1\54\5\uffff\1\54\7\uffff"+
            "\2\54\7\uffff\1\54\64\uffff\1\54",
            "\1\67",
            "\1\67",
            "\1\67",
            "\1\176",
            "\1\177",
            "\1\u0080\1\uffff\1\u0082\167\uffff\1\u0081",
            "\1\u0083\100\uffff\1\u0084\107\uffff\1\u0085",
            "\1\u0086\1\uffff\1\u0088\167\uffff\1\u0087",
            "\1\u0089\100\uffff\1\u008a\107\uffff\1\u008b",
            "\1\u008c\1\uffff\1\u008e\167\uffff\1\u008d",
            "\1\u008f\100\uffff\1\u0090\107\uffff\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0094",
            "\1\u0095",
            "\1\153\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54"+
            "\5\uffff\1\10",
            "\1\u0096",
            "\1\u0097\100\uffff\1\u0098\107\uffff\1\u0099",
            "\1\172\7\uffff\1\63\1\67\7\uffff\1\66",
            "\1\172\7\uffff\1\63\1\67\7\uffff\1\66",
            "\1\u009a",
            "\1\u009b",
            "\1\u009c",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u009d",
            "\1\u009e\2\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1"+
            "\54\5\uffff\1\10",
            "\1\u009f\100\uffff\1\u00a0\107\uffff\1\u00a1",
            "\1\132\100\uffff\1\54\43\uffff\15\54\2\uffff\10\54\1\uffff"+
            "\16\54\3\uffff\1\130\67\uffff\1\131",
            "\1\160",
            "\1\u00a2\100\uffff\1\u00a3\107\uffff\1\u00a1",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10"+
            "\22\uffff\1\70",
            "\1\u00a4",
            "\1\u00a5\5\uffff\2\54\2\uffff\1\54\46\uffff\1\54\77\uffff\1"+
            "\54",
            "\1\u00a6\3\uffff\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1"+
            "\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u0082",
            "\1\u0082",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10"+
            "\32\uffff\1\75",
            "\1\10\42\uffff\1\10\5\uffff\1\u00a7\1\10\5\uffff\1\u00a8\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u00a7\1\10\5\uffff\1\u00a8\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\u00a7\6\uffff\1\u00a8",
            "\1\u0088",
            "\1\u0088",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10"+
            "\32\uffff\1\77",
            "\1\10\42\uffff\1\10\5\uffff\1\u00a9\1\10\5\uffff\1\u00aa\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u00a9\1\10\5\uffff\1\u00aa\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\u00a9\6\uffff\1\u00aa",
            "\1\u008e",
            "\1\u008e",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10"+
            "\32\uffff\1\101",
            "\1\10\42\uffff\1\10\5\uffff\1\u00ab\1\10\5\uffff\1\u00ac\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u00ab\1\10\5\uffff\1\u00ac\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\u00ab\6\uffff\1\u00ac",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u00ad",
            "\1\10\42\uffff\1\10\5\uffff\1\u00ae\1\10\5\uffff\1\u00af\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\5\uffff\1\u00ae\1\10\5\uffff\1\u00af\45"+
            "\uffff\1\54\5\uffff\1\10",
            "\1\u00ae\6\uffff\1\u00af",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\162",
            "\1\122",
            "\1\u00b0",
            "\1\171\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u00b1\1\10\6\uffff"+
            "\1\63\44\uffff\1\170\5\uffff\1\10",
            "\1\171\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u00b1\1\10\6\uffff"+
            "\1\63\44\uffff\1\170\5\uffff\1\10",
            "\1\63",
            "\1\63",
            "\1\63",
            "\1\u00b2",
            "\1\u00b3",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u00b4\100\uffff\1\u00b5\107\uffff\1\u00b6",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u00b7\100\uffff\1\u00b8\107\uffff\1\u00b9",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u00ba\100\uffff\1\u00bb\107\uffff\1\u00bc",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u00bd\100\uffff\1\u00be\107\uffff\1\u00bf",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\u00c0",
            "\1\u00c1\100\uffff\1\u00c2",
            "\1\54\3\uffff\1\54\42\uffff\1\54\113\uffff\1\54\33\uffff\1"+
            "\u00c3",
            "\1\u00c4",
            "\1\u00c5\6\uffff\1\u00a8",
            "\1\u00c5\6\uffff\1\u00a8",
            "\1\u00c5\6\uffff\1\u00a8",
            "\1\u00c6\6\uffff\1\u00aa",
            "\1\u00c6\6\uffff\1\u00aa",
            "\1\u00c6\6\uffff\1\u00aa",
            "\1\u00c7\6\uffff\1\u00ac",
            "\1\u00c7\6\uffff\1\u00ac",
            "\1\u00c7\6\uffff\1\u00ac",
            "\1\u00c8\6\uffff\1\u00af",
            "\1\u00c8\6\uffff\1\u00af",
            "\1\u00c8\6\uffff\1\u00af",
            "\1\10\42\uffff\1\10\6\uffff\1\10\53\uffff\1\54\5\uffff\1\10",
            "\1\171\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u00b1\1\10\53\uffff"+
            "\1\170\5\uffff\1\10",
            "\1\171\2\uffff\1\10\42\uffff\1\10\5\uffff\1\u00b1\1\10\53\uffff"+
            "\1\170\5\uffff\1\10",
            "",
            "\1\54\34\uffff\1\u00c3",
            "\1\u00c9\100\uffff\1\u00ca\107\uffff\1\u00cb",
            "\1\u00cc\100\uffff\1\u00cd\107\uffff\1\u00ce",
            "\1\u00cf\100\uffff\1\u00d0\107\uffff\1\u00d1",
            "\1\u00d2\100\uffff\1\u00d3\107\uffff\1\u00d4",
            "\1\u00a8",
            "\1\u00a8",
            "\1\u00a8",
            "\1\u00aa",
            "\1\u00aa",
            "\1\u00aa",
            "\1\u00ac",
            "\1\u00ac",
            "\1\u00ac",
            "\1\u00af",
            "\1\u00af",
            "\1\u00af"
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "419:1: package_obj_body : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_body | function_body | pragma_declaration );";
        }
    }
    static final String DFA40_eotS =
        "\u0194\uffff";
    static final String DFA40_eofS =
        "\u0194\uffff";
    static final String DFA40_minS =
        "\3\25\1\73\3\uffff\1\25\1\26\2\uffff\5\31\3\26\5\31\1\26\1\31\2"+
        "\25\2\26\2\25\2\26\1\u008f\7\31\1\26\5\25\1\26\1\25\2\31\2\25\1"+
        "\40\1\26\3\40\1\31\1\26\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1"+
        "\26\1\40\1\26\3\40\1\25\1\u0091\1\25\1\40\1\u00a1\1\27\1\uffff\1"+
        "\25\2\uffff\30\25\1\u008f\11\25\1\uffff\2\26\1\102\1\40\1\25\3\113"+
        "\1\27\1\25\4\27\6\25\4\27\1\26\1\40\1\25\2\102\1\27\1\31\2\25\1"+
        "\17\1\25\1\164\1\0\4\25\1\uffff\1\40\1\25\3\40\2\25\1\40\1\u0091"+
        "\1\40\1\u0091\1\40\1\u0091\1\25\1\40\1\25\3\40\1\25\1\u0091\1\25"+
        "\3\40\3\25\1\27\1\26\1\31\1\25\1\17\1\40\4\31\2\27\3\31\1\102\2"+
        "\27\3\31\1\102\2\27\3\31\1\102\4\31\1\27\2\31\1\102\2\31\1\40\1"+
        "\25\1\27\1\25\1\31\2\25\1\102\3\113\4\27\6\25\4\27\1\25\1\40\1\25"+
        "\2\102\2\27\2\26\3\112\1\u0087\2\40\2\27\1\25\1\31\1\25\1\31\1\25"+
        "\2\31\1\25\1\31\1\27\5\25\1\40\4\25\2\27\3\25\1\102\2\27\3\25\1"+
        "\102\2\27\3\25\1\102\4\25\1\27\2\25\1\102\3\25\2\27\1\25\14\102"+
        "\1\31\1\40\1\uffff\3\25\3\112\1\27\11\25\2\26\2\31\4\25\1\27\1\25"+
        "\14\102\14\111\7\25\14\111";
    static final String DFA40_maxS =
        "\1\u00d9\2\u009f\1\u00a2\3\uffff\1\u0088\1\165\2\uffff\6\165\1\u0084"+
        "\10\165\1\25\3\u0090\4\165\1\u0090\3\165\1\u0090\4\165\1\25\1\126"+
        "\1\25\1\u00db\1\u009e\1\u0087\1\u009e\2\165\1\126\1\u009f\1\40\1"+
        "\165\3\40\1\165\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1"+
        "\165\1\40\1\165\3\40\1\165\1\u0091\1\u009e\1\40\1\u00a2\1\27\1\uffff"+
        "\1\25\2\uffff\1\u009f\6\74\1\u0084\10\74\1\25\3\u0090\4\74\1\u0090"+
        "\3\74\1\u0090\2\74\1\123\1\74\1\123\1\uffff\2\165\1\123\1\40\1\25"+
        "\3\113\1\27\1\u009f\1\32\3\27\1\u008f\1\u009e\1\u008f\1\u009e\1"+
        "\u008f\1\u009e\4\27\1\165\1\40\1\u009e\2\123\1\27\1\u0088\1\165"+
        "\1\u0088\1\u00c6\1\25\1\164\1\0\2\u009e\2\74\1\uffff\1\40\1\74\3"+
        "\40\1\74\1\u0090\1\40\1\u0091\1\40\1\u0091\1\40\1\u0091\1\107\1"+
        "\40\1\107\3\40\1\74\1\u0091\1\u009e\3\40\1\u00db\2\u009e\1\27\2"+
        "\165\1\u0088\1\u00c6\1\40\4\165\2\27\1\u0090\2\165\1\111\2\27\1"+
        "\u0090\2\165\1\111\2\27\1\u0090\2\165\1\111\4\165\1\27\2\165\1\111"+
        "\2\165\1\40\1\25\1\u00c4\1\25\1\31\3\123\3\113\1\32\3\27\1\u008f"+
        "\1\u009e\1\u008f\1\u009e\1\u008f\1\u009e\4\27\1\107\1\40\1\u009e"+
        "\2\123\2\27\2\165\3\112\1\u0087\2\40\1\u00c4\1\27\1\u009e\1\165"+
        "\1\u009e\1\165\1\u009e\2\165\1\u009e\1\165\1\27\1\74\1\u00a4\1\74"+
        "\2\u009e\1\40\4\74\2\27\1\u0090\3\111\2\27\1\u0090\3\111\2\27\1"+
        "\u0090\3\111\4\74\1\27\3\111\2\74\1\126\2\27\1\u0088\14\111\1\u00a4"+
        "\1\40\1\uffff\1\107\5\112\1\27\1\u009e\1\74\1\u009e\1\74\1\u009e"+
        "\2\74\1\u009e\1\74\3\165\1\u0088\4\u009e\1\27\1\126\30\111\1\74"+
        "\2\102\4\u009e\14\111";
    static final String DFA40_acceptS =
        "\4\uffff\1\10\1\11\1\13\2\uffff\1\4\1\1\104\uffff\1\3\1\uffff\1"+
        "\6\1\5\42\uffff\1\12\51\uffff\1\2\u00ae\uffff\1\7\105\uffff";
    static final String DFA40_specialS =
        "\u009a\uffff\1\0\u00f9\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\1\100\uffff\1\2\27\uffff\1\3\62\uffff\1\4\1\5\66\uffff\1"+
            "\6",
            "\1\7\54\uffff\1\11\23\uffff\1\10\34\uffff\1\12\3\uffff\1\11"+
            "\2\uffff\1\13\1\14\1\15\1\16\1\17\4\20\1\21\1\22\1\23\1\24\2"+
            "\uffff\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\36\1\uffff\1\34"+
            "\1\35\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
            "\1\52",
            "\1\12\54\uffff\1\11\23\uffff\1\12\34\uffff\1\12\3\uffff\1\11"+
            "\2\uffff\15\12\2\uffff\10\12\1\uffff\16\12",
            "\1\53\145\uffff\1\4\1\5",
            "",
            "",
            "",
            "\1\60\1\54\2\uffff\1\12\42\uffff\1\12\5\uffff\1\57\1\12\6\uffff"+
            "\1\63\1\62\7\uffff\1\61\33\uffff\1\56\5\uffff\1\12\22\uffff"+
            "\1\55",
            "\1\64\2\uffff\1\12\42\uffff\1\12\5\uffff\1\57\1\12\6\uffff"+
            "\1\63\1\62\7\uffff\1\61\33\uffff\1\56\5\uffff\1\12",
            "",
            "",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\66\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\70\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12\16\uffff\1\67",
            "\1\71\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\72\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\73",
            "\1\74\1\75\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff"+
            "\1\65\5\uffff\1\12\32\uffff\1\76",
            "\1\77\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12\32\uffff\1\100",
            "\1\101\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12\32\uffff\1\102",
            "\1\103\1\104\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff"+
            "\1\65\5\uffff\1\12",
            "\1\105\1\106\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff"+
            "\1\65\5\uffff\1\12",
            "\1\107\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\110\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\2\111",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12"+
            "\32\uffff\1\112",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\5\uffff\1\113\1\12\6\uffff\1\63\1\62\7"+
            "\uffff\1\61\33\uffff\1\65\5\uffff\1\12",
            "\1\114\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\115",
            "\1\117\12\uffff\1\116\65\uffff\1\117",
            "\1\120",
            "\1\123\1\165\77\uffff\1\164\43\uffff\1\124\1\125\1\126\1\127"+
            "\1\130\4\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
            "\1\141\1\142\1\143\1\144\1\147\1\uffff\1\145\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
            "\3\uffff\1\121\12\uffff\1\117\54\uffff\1\122",
            "\1\166\100\uffff\1\167\107\uffff\1\170",
            "\1\171\160\uffff\1\172",
            "\1\173\100\uffff\1\174\107\uffff\1\175",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\117\12\uffff\1\176\65\uffff\1\117",
            "\1\177\1\165\77\uffff\1\164\43\uffff\1\124\1\125\1\126\1\127"+
            "\1\130\4\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
            "\1\141\1\142\1\143\1\144\1\147\1\uffff\1\145\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163",
            "\1\u0080",
            "\1\70\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\75\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12\32\uffff\1\76",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\1\u0088",
            "\1\u0089",
            "\1\104\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\u008a",
            "\1\106\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65"+
            "\5\uffff\1\12",
            "\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e\1\u008f\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\u0090",
            "\1\u0091\100\uffff\1\u0092\107\uffff\1\170",
            "\1\u0093",
            "\1\4\1\5",
            "\1\u0094",
            "",
            "\1\u0095",
            "",
            "",
            "\1\u0096\1\u0097\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u009b\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c\2\uffff\1\165"+
            "\43\uffff\15\165\1\uffff\1\u0098\10\165\1\uffff\16\165",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00a0\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00a2\2\uffff\1\u009a\42\uffff\1\u0099\107\uffff"+
            "\1\u00a1",
            "\1\u009f\1\u00a3\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00a4\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u00a5",
            "\1\u00a6\1\u00a7\2\uffff\1\u009a\42\uffff\1\u0099\123\uffff"+
            "\1\u00a8",
            "\1\u009f\1\u00a9\2\uffff\1\u009a\42\uffff\1\u0099\123\uffff"+
            "\1\u00aa",
            "\1\u009f\1\u00ab\2\uffff\1\u009a\42\uffff\1\u0099\123\uffff"+
            "\1\u00ac",
            "\1\u00ad\1\u00ae\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u00af\1\u00b0\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00b1\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00b2\2\uffff\1\u009a\42\uffff\1\u0099",
            "\2\u00b3",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\123\uffff\1\u00b4",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u00b5\7"+
            "\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "\1\u009f\1\u00b6\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u009b\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "",
            "\1\u00b8\2\uffff\1\12\42\uffff\1\12\5\uffff\1\u00ba\1\12\6"+
            "\uffff\1\63\1\62\7\uffff\1\61\33\uffff\1\u00b9\5\uffff\1\12",
            "\1\u00b8\2\uffff\1\12\42\uffff\1\12\5\uffff\1\u00ba\1\12\6"+
            "\uffff\1\63\1\62\7\uffff\1\61\33\uffff\1\u00b9\5\uffff\1\12",
            "\1\u00bb\7\uffff\1\63\1\62\7\uffff\1\61",
            "\1\u00bc",
            "\1\u00bd",
            "\1\62",
            "\1\62",
            "\1\62",
            "\1\u00be",
            "\1\u00bf\1\u00c0\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u009b\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c\2\uffff\1\165"+
            "\43\uffff\15\165\1\uffff\1\u0098\10\165\1\uffff\16\165",
            "\1\u00c2\2\uffff\1\u00c1",
            "\1\u00c3",
            "\1\u00c4",
            "\1\u00c5",
            "\1\u00c6\1\uffff\1\u00c8\167\uffff\1\u00c7",
            "\1\u00c9\100\uffff\1\u00ca\107\uffff\1\u00cb",
            "\1\u00cc\1\uffff\1\u00ce\167\uffff\1\u00cd",
            "\1\u00cf\100\uffff\1\u00d0\107\uffff\1\u00d1",
            "\1\u00d2\1\uffff\1\u00d4\167\uffff\1\u00d3",
            "\1\u00d5\100\uffff\1\u00d6\107\uffff\1\u00d7",
            "\1\u00d8",
            "\1\u00d9",
            "\1\u00da",
            "\1\u00db",
            "\1\u008f\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1"+
            "\65\5\uffff\1\12",
            "\1\u00dc",
            "\1\u00dd\100\uffff\1\u00de\107\uffff\1\u00df",
            "\1\u00bb\7\uffff\1\63\1\62\7\uffff\1\61",
            "\1\u00bb\7\uffff\1\63\1\62\7\uffff\1\61",
            "\1\u00e0",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12"+
            "\22\uffff\1\55",
            "\1\u00e1\3\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1"+
            "\65\5\uffff\1\12",
            "\1\165\1\u00e2\2\uffff\1\165\2\uffff\2\u009f\2\uffff\1\u009f"+
            "\33\uffff\1\165\5\uffff\1\165\4\uffff\1\u009f\2\uffff\2\165"+
            "\7\uffff\1\165\63\uffff\1\u00e3\1\165",
            "\2\165\1\uffff\1\165\2\uffff\2\165\4\uffff\3\165\2\uffff\1"+
            "\u00e4\33\uffff\1\165\12\uffff\1\165\16\uffff\1\165\35\uffff"+
            "\1\165\51\uffff\1\165\11\uffff\2\165\4\uffff\2\165\26\uffff"+
            "\1\165",
            "\1\u00e5",
            "\1\u00e6",
            "\1\uffff",
            "\1\u00e7\100\uffff\1\u00e8\107\uffff\1\u00e9",
            "\1\u00ea\100\uffff\1\u00eb\107\uffff\1\u00ec",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "",
            "\1\u00ed",
            "\1\u009f\1\u00a2\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u00ee",
            "\1\u00ef",
            "\1\u00f0",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00a7\2\uffff\1\u009a\2\uffff\2\u009f\2\uffff\1"+
            "\u009f\33\uffff\1\u0099\12\uffff\1\u009f\110\uffff\1\u00a8",
            "\1\u00f1",
            "\1\u00f2",
            "\1\u00f3",
            "\1\u00f4",
            "\1\u00f5",
            "\1\u00f6",
            "\1\u009f\1\u00ae\2\uffff\1\u009a\2\uffff\2\u009f\2\uffff\1"+
            "\u009f\33\uffff\1\u0099\12\uffff\1\u009f",
            "\1\u00f7",
            "\1\u009f\1\u00b0\2\uffff\1\u009a\2\uffff\2\u009f\2\uffff\1"+
            "\u009f\33\uffff\1\u0099\12\uffff\1\u009f",
            "\1\u00f8",
            "\1\u00f9",
            "\1\u00fa",
            "\1\u00fb\1\u00fc\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u00fd",
            "\1\u00fe\100\uffff\1\u00ff\107\uffff\1\u00e9",
            "\1\u0100",
            "\1\u0101",
            "\1\176",
            "\1\123\1\165\77\uffff\1\164\43\uffff\1\124\1\125\1\126\1\127"+
            "\1\130\4\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
            "\1\141\1\142\1\143\1\144\1\147\1\uffff\1\145\1\146\1\150\1\151"+
            "\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163"+
            "\3\uffff\1\121\67\uffff\1\122",
            "\1\u0102\100\uffff\1\u0103\107\uffff\1\u0104",
            "\1\u0105\100\uffff\1\u0106\107\uffff\1\u0104",
            "\1\u0107",
            "\1\u0108\2\uffff\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1"+
            "\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\165\1\u0109\2\uffff\1\165\2\uffff\2\u009f\2\uffff\1\u009f"+
            "\33\uffff\1\165\5\uffff\1\165\4\uffff\1\u009f\2\uffff\2\165"+
            "\7\uffff\1\165\63\uffff\1\u00e3\1\165",
            "\2\165\1\uffff\1\165\2\uffff\2\165\4\uffff\3\165\2\uffff\1"+
            "\u010a\33\uffff\1\165\12\uffff\1\165\16\uffff\1\165\35\uffff"+
            "\1\165\51\uffff\1\165\11\uffff\2\165\4\uffff\2\165\26\uffff"+
            "\1\165",
            "\1\u010b",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u00c8",
            "\1\u00c8",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12"+
            "\32\uffff\1\76",
            "\1\12\42\uffff\1\12\5\uffff\1\u010c\1\12\5\uffff\1\u010d\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\5\uffff\1\u010c\1\12\5\uffff\1\u010d\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\u010c\6\uffff\1\u010d",
            "\1\u00ce",
            "\1\u00ce",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12"+
            "\32\uffff\1\100",
            "\1\12\42\uffff\1\12\5\uffff\1\u010e\1\12\5\uffff\1\u010f\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\5\uffff\1\u010e\1\12\5\uffff\1\u010f\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\u010e\6\uffff\1\u010f",
            "\1\u00d4",
            "\1\u00d4",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12"+
            "\32\uffff\1\102",
            "\1\12\42\uffff\1\12\5\uffff\1\u0110\1\12\5\uffff\1\u0111\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\5\uffff\1\u0110\1\12\5\uffff\1\u0111\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\u0110\6\uffff\1\u0111",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u0112",
            "\1\12\42\uffff\1\12\5\uffff\1\u0113\1\12\5\uffff\1\u0114\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\5\uffff\1\u0113\1\12\5\uffff\1\u0114\45"+
            "\uffff\1\65\5\uffff\1\12",
            "\1\u0113\6\uffff\1\u0114",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u0115",
            "\1\u0116",
            "\1\u0117\1\165\1\uffff\1\165\1\uffff\4\165\32\uffff\3\165\1"+
            "\uffff\4\165\12\uffff\7\165\1\uffff\1\165\32\uffff\1\165\60"+
            "\uffff\1\165\37\uffff\1\165\3\uffff\1\165",
            "\1\u0118",
            "\1\u009a",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u0119\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u0119\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "\1\u011a\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "\1\u009d",
            "\1\u009d",
            "\1\u009d",
            "\1\u011c\2\uffff\1\u011b",
            "\1\u011d",
            "\1\u011e",
            "\1\u011f",
            "\1\u0120\1\uffff\1\u0122\167\uffff\1\u0121",
            "\1\u0123\100\uffff\1\u0124\107\uffff\1\u0125",
            "\1\u0126\1\uffff\1\u0128\167\uffff\1\u0127",
            "\1\u0129\100\uffff\1\u012a\107\uffff\1\u012b",
            "\1\u012c\1\uffff\1\u012e\167\uffff\1\u012d",
            "\1\u012f\100\uffff\1\u0130\107\uffff\1\u0131",
            "\1\u0132",
            "\1\u0133",
            "\1\u0134",
            "\1\u0135",
            "\1\u009f\1\u00fc\2\uffff\1\u009a\2\uffff\2\u009f\2\uffff\1"+
            "\u009f\33\uffff\1\u0099\12\uffff\1\u009f",
            "\1\u0136",
            "\1\u0137\100\uffff\1\u0138\107\uffff\1\u0139",
            "\1\u011a\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "\1\u011a\7\uffff\1\u009e\1\u009d\7\uffff\1\u009c",
            "\1\u013a",
            "\1\u013b",
            "\1\u00b8\2\uffff\1\12\42\uffff\1\12\5\uffff\1\u013c\1\12\6"+
            "\uffff\1\63\44\uffff\1\u00b9\5\uffff\1\12",
            "\1\u00b8\2\uffff\1\12\42\uffff\1\12\5\uffff\1\u013c\1\12\6"+
            "\uffff\1\63\44\uffff\1\u00b9\5\uffff\1\12",
            "\1\63",
            "\1\63",
            "\1\63",
            "\1\172",
            "\1\u013d",
            "\1\u013e",
            "\1\u013f\1\165\1\uffff\1\165\1\uffff\4\165\32\uffff\3\165\1"+
            "\uffff\4\165\12\uffff\7\165\1\uffff\1\165\32\uffff\1\165\60"+
            "\uffff\1\165\37\uffff\1\165\3\uffff\1\165",
            "\1\u00c2",
            "\1\u0140\100\uffff\1\u0141\107\uffff\1\u0142",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u0143\100\uffff\1\u0144\107\uffff\1\u0145",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u0146\100\uffff\1\u0147\107\uffff\1\u0148",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u0149\100\uffff\1\u014a\107\uffff\1\u014b",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\u014c",
            "\1\u009f\1\u014d\2\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\113\uffff\1\u0098"+
            "\33\uffff\1\u014e",
            "\1\u014f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u0150\100\uffff\1\u0151\107\uffff\1\u0152",
            "\1\u0153\100\uffff\1\u0154\107\uffff\1\u0152",
            "\1\u0155",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u0122",
            "\1\u0122",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\123\uffff\1\u00a8",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u0156\6"+
            "\uffff\1\u0157",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u0156\6"+
            "\uffff\1\u0157",
            "\1\u0156\6\uffff\1\u0157",
            "\1\u0128",
            "\1\u0128",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\123\uffff\1\u00aa",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u0158\6"+
            "\uffff\1\u0159",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u0158\6"+
            "\uffff\1\u0159",
            "\1\u0158\6\uffff\1\u0159",
            "\1\u012e",
            "\1\u012e",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\123\uffff\1\u00ac",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u015a\6"+
            "\uffff\1\u015b",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u015a\6"+
            "\uffff\1\u015b",
            "\1\u015a\6\uffff\1\u015b",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u015c",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u015d\6"+
            "\uffff\1\u015e",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1\u015d\6"+
            "\uffff\1\u015e",
            "\1\u015d\6\uffff\1\u015e",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u015f\100\uffff\1\u0160",
            "\1\u0161",
            "\1\u0162",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099\113\uffff\1\u0098",
            "\1\u0163\6\uffff\1\u010d",
            "\1\u0163\6\uffff\1\u010d",
            "\1\u0163\6\uffff\1\u010d",
            "\1\u0164\6\uffff\1\u010f",
            "\1\u0164\6\uffff\1\u010f",
            "\1\u0164\6\uffff\1\u010f",
            "\1\u0165\6\uffff\1\u0111",
            "\1\u0165\6\uffff\1\u0111",
            "\1\u0165\6\uffff\1\u0111",
            "\1\u0166\6\uffff\1\u0114",
            "\1\u0166\6\uffff\1\u0114",
            "\1\u0166\6\uffff\1\u0114",
            "\1\165\42\uffff\1\165\112\uffff\1\u00e3\1\165\33\uffff\1\u014e",
            "\1\u0167",
            "",
            "\1\u009f\3\uffff\1\u009a\2\uffff\2\u009f\2\uffff\1\u009f\33"+
            "\uffff\1\u0099\12\uffff\1\u009f",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u0168\7\uffff\1\u009e",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u0168\7\uffff\1\u009e",
            "\1\u009e",
            "\1\u009e",
            "\1\u009e",
            "\1\u011c",
            "\1\u0169\100\uffff\1\u016a\107\uffff\1\u016b",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u016c\100\uffff\1\u016d\107\uffff\1\u016e",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u016f\100\uffff\1\u0170\107\uffff\1\u0171",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u0172\100\uffff\1\u0173\107\uffff\1\u0174",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u00b8\2\uffff\1\12\42\uffff\1\12\5\uffff\1\u013c\1\12\53"+
            "\uffff\1\u00b9\5\uffff\1\12",
            "\1\u00b8\2\uffff\1\12\42\uffff\1\12\5\uffff\1\u013c\1\12\53"+
            "\uffff\1\u00b9\5\uffff\1\12",
            "\1\12\42\uffff\1\12\6\uffff\1\12\53\uffff\1\65\5\uffff\1\12",
            "\1\165\42\uffff\1\165\112\uffff\1\u00e3\1\165",
            "\1\u0175\100\uffff\1\u0176\107\uffff\1\u0177",
            "\1\u0178\100\uffff\1\u0179\107\uffff\1\u017a",
            "\1\u017b\100\uffff\1\u017c\107\uffff\1\u017d",
            "\1\u017e\100\uffff\1\u017f\107\uffff\1\u0180",
            "\1\u0181",
            "\1\u0182\100\uffff\1\u0183",
            "\1\u0184\6\uffff\1\u0157",
            "\1\u0184\6\uffff\1\u0157",
            "\1\u0184\6\uffff\1\u0157",
            "\1\u0185\6\uffff\1\u0159",
            "\1\u0185\6\uffff\1\u0159",
            "\1\u0185\6\uffff\1\u0159",
            "\1\u0186\6\uffff\1\u015b",
            "\1\u0186\6\uffff\1\u015b",
            "\1\u0186\6\uffff\1\u015b",
            "\1\u0187\6\uffff\1\u015e",
            "\1\u0187\6\uffff\1\u015e",
            "\1\u0187\6\uffff\1\u015e",
            "\1\u010d",
            "\1\u010d",
            "\1\u010d",
            "\1\u010f",
            "\1\u010f",
            "\1\u010f",
            "\1\u0111",
            "\1\u0111",
            "\1\u0111",
            "\1\u0114",
            "\1\u0114",
            "\1\u0114",
            "\1\u009f\3\uffff\1\u009a\42\uffff\1\u0099",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u0168",
            "\1\u009f\1\u00b7\2\uffff\1\u009a\42\uffff\1\u0099\5\uffff\1"+
            "\u0168",
            "\1\u0188\100\uffff\1\u0189\107\uffff\1\u018a",
            "\1\u018b\100\uffff\1\u018c\107\uffff\1\u018d",
            "\1\u018e\100\uffff\1\u018f\107\uffff\1\u0190",
            "\1\u0191\100\uffff\1\u0192\107\uffff\1\u0193",
            "\1\u0157",
            "\1\u0157",
            "\1\u0157",
            "\1\u0159",
            "\1\u0159",
            "\1\u0159",
            "\1\u015b",
            "\1\u015b",
            "\1\u015b",
            "\1\u015e",
            "\1\u015e",
            "\1\u015e"
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "461:1: declare_spec : ( variable_declaration | subtype_declaration | cursor_declaration | exception_declaration | record_declaration | plsql_table_declaration | varray_declaration | procedure_declaration | function_declaration | type_declaration | pragma_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_154 = input.LA(1);

                         
                        int index40_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred89_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SUBTYPE")))) ) {s = 159;}

                        else if ( ((synpred97_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TYPE")))) ) {s = 117;}

                         
                        input.seek(index40_154);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA43_eotS =
        "\44\uffff";
    static final String DFA43_eofS =
        "\44\uffff";
    static final String DFA43_minS =
        "\1\25\1\26\1\25\2\uffff\1\40\4\27\1\uffff\1\25\1\0\2\25\1\uffff"+
        "\1\40\4\27\5\uffff\1\40\4\27\1\40\2\27\2\0";
    static final String DFA43_maxS =
        "\1\25\1\26\1\165\2\uffff\1\40\2\32\2\102\1\uffff\1\126\1\0\2\126"+
        "\1\uffff\1\40\4\32\5\uffff\1\40\4\32\1\40\2\32\2\0";
    static final String DFA43_acceptS =
        "\3\uffff\1\3\1\4\5\uffff\1\1\4\uffff\1\2\5\uffff\1\5\1\6\1\7\1\10"+
        "\1\11\12\uffff";
    static final String DFA43_specialS =
        "\1\uffff\1\0\12\uffff\1\3\25\uffff\1\2\1\1}>";
    static final String[] DFA43_transitionS = {
            "\1\1",
            "\1\2",
            "\1\10\6\uffff\2\5\2\uffff\1\6\46\uffff\1\7\16\uffff\1\11\36"+
            "\uffff\1\12",
            "",
            "",
            "\1\6",
            "\1\14\2\uffff\1\13",
            "\1\14\2\uffff\1\15",
            "\1\14\2\uffff\1\16\47\uffff\1\17",
            "\1\14\2\uffff\1\16\47\uffff\1\17",
            "",
            "\1\23\6\uffff\2\20\2\uffff\1\21\46\uffff\1\22\16\uffff\1\24",
            "\1\uffff",
            "\1\35\6\uffff\2\32\2\uffff\1\33\46\uffff\1\34\16\uffff\1\36",
            "\1\35\6\uffff\2\37\2\uffff\1\40\46\uffff\1\41\16\uffff\1\36",
            "",
            "\1\21",
            "\1\14\2\uffff\1\13",
            "\1\14\2\uffff\1\13",
            "\1\14\2\uffff\1\13",
            "\1\14\2\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "\1\33",
            "\1\42\2\uffff\1\15",
            "\1\42\2\uffff\1\15",
            "\1\42\2\uffff\1\15",
            "\1\42\2\uffff\1\15",
            "\1\40",
            "\1\43\2\uffff\1\15",
            "\1\43\2\uffff\1\15",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA43_eot = DFA.unpackEncodedString(DFA43_eotS);
    static final short[] DFA43_eof = DFA.unpackEncodedString(DFA43_eofS);
    static final char[] DFA43_min = DFA.unpackEncodedStringToUnsignedChars(DFA43_minS);
    static final char[] DFA43_max = DFA.unpackEncodedStringToUnsignedChars(DFA43_maxS);
    static final short[] DFA43_accept = DFA.unpackEncodedString(DFA43_acceptS);
    static final short[] DFA43_special = DFA.unpackEncodedString(DFA43_specialS);
    static final short[][] DFA43_transition;

    static {
        int numStates = DFA43_transitionS.length;
        DFA43_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA43_transition[i] = DFA.unpackEncodedString(DFA43_transitionS[i]);
        }
    }

    class DFA43 extends DFA {

        public DFA43(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 43;
            this.eot = DFA43_eot;
            this.eof = DFA43_eof;
            this.min = DFA43_min;
            this.max = DFA43_max;
            this.accept = DFA43_accept;
            this.special = DFA43_special;
            this.transition = DFA43_transition;
        }
        public String getDescription() {
            return "477:9: ( keyRESTRICT_REFERENCES LPAREN ( 'DEFAULT' | function_name ) ( COMMA pragma_param )+ RPAREN | keyEXCEPTION_INIT LPAREN exception_name COMMA literal RPAREN | keyAUTONOMOUS_TRANSACTION | keySERIALLY_REUSABLE | keyBUILTIN LPAREN pragma_params RPAREN | keyFIPSFLAG LPAREN pragma_params RPAREN | keyINTERFACE LPAREN pragma_params RPAREN | keyNEW_NAMES LPAREN pragma_params RPAREN | keyTIMESTAMP LPAREN pragma_params RPAREN )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TreeNodeStream input = (TreeNodeStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA43_1 = input.LA(1);

                         
                        int index43_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA43_1==LPAREN) ) {s = 2;}

                        else if ( ((synpred102_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "AUTONOMOUS_TRANSACTION")))) ) {s = 3;}

                        else if ( ((synpred103_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "SERIALLY_REUSABLE")))) ) {s = 4;}

                         
                        input.seek(index43_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA43_35 = input.LA(1);

                         
                        int index43_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred100_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RESTRICT_REFERENCES")))) ) {s = 10;}

                        else if ( ((synpred101_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "EXCEPTION_INIT")))) ) {s = 15;}

                        else if ( ((synpred104_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN")))) ) {s = 21;}

                        else if ( ((synpred105_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG")))) ) {s = 22;}

                        else if ( ((synpred106_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE")))) ) {s = 23;}

                        else if ( ((synpred107_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES")))) ) {s = 24;}

                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {s = 25;}

                         
                        input.seek(index43_35);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA43_34 = input.LA(1);

                         
                        int index43_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred100_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "RESTRICT_REFERENCES")))) ) {s = 10;}

                        else if ( ((synpred104_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN")))) ) {s = 21;}

                        else if ( ((synpred105_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG")))) ) {s = 22;}

                        else if ( ((synpred106_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE")))) ) {s = 23;}

                        else if ( ((synpred107_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES")))) ) {s = 24;}

                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {s = 25;}

                         
                        input.seek(index43_34);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA43_12 = input.LA(1);

                         
                        int index43_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((synpred104_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "BUILTIN")))) ) {s = 21;}

                        else if ( ((synpred105_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "FIPSFLAG")))) ) {s = 22;}

                        else if ( ((synpred106_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "INTERFACE")))) ) {s = 23;}

                        else if ( ((synpred107_RPIExprWalker()&&(((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "NEW_NAMES")))) ) {s = 24;}

                        else if ( ((((Tree)RPIExprWalker.this.input.LT(1)).getText().toUpperCase().equals( "TIMESTAMP"))) ) {s = 25;}

                         
                        input.seek(index43_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 43, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_ASSIGN_in_stat60 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_stat64 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_varlist_in_stat68 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_stat71 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIM_in_stat89 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_stat93 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_quotedstringlist_in_stat97 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_PRINT_in_stat115 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_stat119 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SETBASEPERIOD_in_stat138 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_quoted_string_in_stat140 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DBCONNECT_in_stat159 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_quoted_string_in_stat163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_stat175 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SETLEVEL_in_stat195 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_stat197 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_ID_in_stat199 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_quotedstringlist_in_stat203 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_stat_in_stats229 = new BitSet(new long[]{0x0000000000026702L});
    public static final BitSet FOLLOW_QUOTEDSTRINGLIST_in_quotedstringlist253 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_quoted_string_in_quotedstringlist269 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L});
    public static final BitSet FOLLOW_VARLIST_in_varlist310 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_varlist325 = new BitSet(new long[]{0x0000000000200008L});
    public static final BitSet FOLLOW_atom_in_expr356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_expr373 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr377 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_expr382 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_MINUS_in_expr402 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr406 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_expr411 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_ASTERISK_in_expr429 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr433 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_expr438 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_DIV_in_expr456 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_expr460 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_expr465 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_in_atom502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REF_in_atom520 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_ID_in_atom522 = new BitSet(new long[]{0x0000000200000008L});
    public static final BitSet FOLLOW_COMPMODIFIER_in_atom526 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_CREATEPREDICATE_in_atom539 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_sql_in_atom541 = new BitSet(new long[]{0x0000000000000088L});
    public static final BitSet FOLLOW_varlist_in_atom543 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_function_in_atom562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_sql598 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_select_expression_in_sql600 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_boolExpr663 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr667 = new BitSet(new long[]{0xE000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr672 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_OR_in_boolExpr692 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr696 = new BitSet(new long[]{0xE000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr701 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_NOT_in_boolExpr721 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolAtom_in_boolExpr725 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLOP_EQ_in_boolOp765 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_boolOp769 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_boolOp774 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLOP_LT_in_boolOp794 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_boolOp798 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_boolOp803 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLOP_GT_in_boolOp823 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_boolOp827 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_boolOp832 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLOP_GE_in_boolOp852 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_boolOp856 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_boolOp861 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_BOOLOP_LE_in_boolOp881 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_expr_in_boolOp885 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_boolOp890 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_boolOp_in_boolAtom923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IFTHEN_in_function975 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_boolExpr_in_function977 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_function987 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_function992 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_GETBASEPERIOD_in_function1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GETCURRPERIOD_in_function1028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AGG_in_function1045 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_AGGRULE_in_function1050 = new BitSet(new long[]{0x01A00041F0000840L});
    public static final BitSet FOLLOW_expr_in_function1054 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_create_package_in_start_rule1082 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_EOF_in_start_rule1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_create_package1105 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_OR_in_create_package1109 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyREPLACE_in_create_package1111 = new BitSet(new long[]{0x0800000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_package_spec_in_create_package1126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_package_body_in_create_package1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_spec1155 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_spec1157 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_package_spec1159 = new BitSet(new long[]{0x0000000000200000L,0x0002000000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_package_obj_spec_in_package_spec1180 = new BitSet(new long[]{0x0000000000200000L,0x0002000000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_113_in_package_spec1193 = new BitSet(new long[]{0x0000000002200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_spec1196 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_spec1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPACKAGE_in_package_body1223 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyBODY_in_package_body1227 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_body1231 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_package_body1233 = new BitSet(new long[]{0x0000000000200000L,0x0006400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_package_obj_body_in_package_body1253 = new BitSet(new long[]{0x0000000000200000L,0x0006400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_package_body1268 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_package_body1270 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_package_body1285 = new BitSet(new long[]{0x0000000002200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_package_name_in_package_body1289 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_package_body1294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_package_name1315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_package_name1317 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_package_name1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_spec1342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_package_obj_spec1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_spec1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_spec1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_spec1385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_spec1396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_spec1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_spec_in_package_obj_spec1417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_spec_in_package_obj_spec1428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_spec_in_package_obj_spec1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_spec1450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_spec1461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_declaration1480 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_115_in_variable_declaration1483 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_variable_declaration1495 = new BitSet(new long[]{0x1000000002000000L,0x0020000000000008L});
    public static final BitSet FOLLOW_NOT_in_variable_declaration1498 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_variable_declaration1500 = new BitSet(new long[]{0x0000000002000000L,0x0020000000000008L});
    public static final BitSet FOLLOW_set_in_variable_declaration1515 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_variable_declaration1525 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_variable_declaration1529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_type_declaration1552 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_type_declaration1554 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_type_declaration1556 = new BitSet(new long[]{0x0000000000600000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_keyNEW_in_type_declaration1560 = new BitSet(new long[]{0x0000000000600000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_type_declaration1567 = new BitSet(new long[]{0x1000000002000000L});
    public static final BitSet FOLLOW_NOT_in_type_declaration1571 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration1573 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_LPAREN_in_type_declaration1580 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_type_declaration1582 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_type_declaration1584 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_type_declaration1588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySUBTYPE_in_subtype_declaration1611 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration1613 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_subtype_declaration1615 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_subtype_declaration1617 = new BitSet(new long[]{0x1000000002200000L});
    public static final BitSet FOLLOW_NOT_in_subtype_declaration1621 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_subtype_declaration1623 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyRANGE_in_subtype_declaration1627 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration1629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_subtype_declaration1631 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_subtype_declaration1633 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_subtype_declaration1638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_declaration1664 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_declaration1666 = new BitSet(new long[]{0x0000000000400000L,0x0000800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_declaration1678 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_declaration1680 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_declaration1682 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_cursor_declaration1695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_cursor_declaration1697 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_cursor_declaration1699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_package_obj_body1717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_package_obj_body1728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_package_obj_body1739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_package_obj_body1750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_package_obj_body1761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_package_obj_body1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_package_obj_body1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_package_obj_body1793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_package_obj_body1804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_package_obj_body1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements1834 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements1836 = new BitSet(new long[]{0x0000000000200002L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_statement_in_seq_of_statements1840 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_seq_of_statements1842 = new BitSet(new long[]{0x0000000000200002L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_assignment_statement_in_statement1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_statement1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_statement_in_statement1888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_statement1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_statement_in_statement1908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_statement1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_null_statement_in_statement1930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_statement_in_statement1940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_statement_in_statement1950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_statement1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_statement1970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_statement1981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_plsql_block2010 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_plsql_block2012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RLABEL_in_plsql_block2014 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_118_in_plsql_block2031 = new BitSet(new long[]{0x0000000000200000L,0x0040400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_declare_spec_in_plsql_block2037 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_plsql_block2055 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_plsql_block2067 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_plsql_block2079 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_plsql_block2083 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_plsql_block2102 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_plsql_block2106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_in_declare_spec2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_declare_spec2141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_declaration_in_declare_spec2152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_declaration_in_declare_spec2163 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_declaration_in_declare_spec2174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_declaration_in_declare_spec2185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varray_declaration_in_declare_spec2196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_declaration_in_declare_spec2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_declaration_in_declare_spec2217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_declare_spec2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_declaration_in_declare_spec2238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPRAGMA_in_pragma_declaration2257 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_pragma_declaration2272 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2274 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_117_in_pragma_declaration2278 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_function_name_in_pragma_declaration2282 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration2288 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_declaration2290 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2295 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_pragma_declaration2310 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2312 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_pragma_declaration2314 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_pragma_declaration2316 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_pragma_declaration2318 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2320 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_pragma_declaration2334 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_pragma_declaration2348 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyBUILTIN_in_pragma_declaration2362 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2364 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2366 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2368 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_pragma_declaration2382 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2384 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2386 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2388 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyINTERFACE_in_pragma_declaration2403 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2405 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2407 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2409 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_pragma_declaration2423 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2425 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2427 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2429 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_pragma_declaration2443 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_pragma_declaration2445 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_pragma_declaration2447 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_pragma_declaration2449 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pragma_declaration2469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params2488 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_pragma_params2492 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_param_in_pragma_params2494 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_set_in_pragma_param2516 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_pragma_param2527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pragma_param2537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_pragma_param2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_assignment_statement2577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_SQL_ASSIGN_in_assignment_statement2579 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_assignment_statement2581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalues2601 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_lvalues2605 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400100L});
    public static final BitSet FOLLOW_lvalue_in_lvalues2607 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_variable_name_in_lvalue2628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_lvalue2638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_lvalue2640 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_name_in_lvalue2642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_lvalue2652 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_lvalue2654 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_subscript_in_lvalue2656 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_lvalue2658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_lvalue2662 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_field_name_in_lvalue2664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_COLON_in_lvalue2677 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue2679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_lvalue2683 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_host_variable_in_lvalue2685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_field_name2707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_subscript2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_host_variable2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_goto_statement2777 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_goto_statement2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_label_name2802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXIT_in_exit_statement2824 = new BitSet(new long[]{0x0000000000200002L,0x0200000000400000L});
    public static final BitSet FOLLOW_label_name_in_exit_statement2828 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_exit_statement2835 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_exit_statement2837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_datatype2863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_datatype2874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_datatype2884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_datatype2894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_datatype2905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_datatype2916 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2936 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2938 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_datatype2942 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2944 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype2949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_datatype2962 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_datatype2966 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2972 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2974 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype2976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_datatype2989 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype2993 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype2995 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_datatype3010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_datatype3020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype3030 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDAY_in_datatype3032 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3036 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3038 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_datatype3045 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_datatype3047 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3051 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3053 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_datatype3068 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyYEAR_in_datatype3070 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3074 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3076 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_datatype3083 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMONTH_in_datatype3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datatype3097 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_keyTIMESTAMP_in_datatype3101 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3107 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3109 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_datatype3118 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datatype3122 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyTIME_in_datatype3127 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyZONE_in_datatype3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_datatype3141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_datatype3151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_datatype3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_datatype3171 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3175 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3177 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_datatype3192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_datatype3202 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyPRECISION_in_datatype3204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_datatype3214 = new BitSet(new long[]{0x0000000000600002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3223 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3230 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3232 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3236 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_143_in_datatype3240 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3254 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_datatype3279 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3301 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3303 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3307 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_143_in_datatype3311 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3325 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_datatype3350 = new BitSet(new long[]{0x0000000000400002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3371 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3373 = new BitSet(new long[]{0x0000000000A00000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_keyBYTE_in_datatype3377 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_143_in_datatype3381 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3395 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_datatype3420 = new BitSet(new long[]{0x0000000000600002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3424 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3431 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3433 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_datatype3448 = new BitSet(new long[]{0x0000000000600002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3456 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3463 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3465 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_datatype3480 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3485 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3487 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_datatype3502 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3506 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3508 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_datatype3523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
    public static final BitSet FOLLOW_set_in_datatype3526 = new BitSet(new long[]{0x0000000000600002L});
    public static final BitSet FOLLOW_keyVARYING_in_datatype3538 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3545 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3547 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_datatype3562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_datatype3572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_datatype3582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_datatype3592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_144_in_datatype3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_datatype3598 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_identifier_in_datatype3602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_datatype3606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_CHARSET_ATTR_in_datatype3608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_datatype3623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_datatype3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_datatype3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_datatype3654 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_datatype3658 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_datatype3660 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_datatype3662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datatype_in_type_spec3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_type_spec3696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_TYPE_ATTR_in_type_spec3698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_type_spec3709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_ROWTYPE_ATTR_in_type_spec3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_name_in_type_spec3722 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_type_spec3726 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_type_spec3728 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_type_spec3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_type_name3752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_type_name3756 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_type_name3758 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs3780 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_parameter_specs3784 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_spec_in_parameter_specs3786 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_parameter_name_in_parameter_spec3808 = new BitSet(new long[]{0x0000000000200002L,0xFC08000000400000L,0x00000001FFFDFE7FL});
    public static final BitSet FOLLOW_160_in_parameter_spec3812 = new BitSet(new long[]{0x0000000000200002L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_parameter_spec3819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_parameter_name3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_spec3863 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_spec3865 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_spec3878 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_parameter_specs_in_cursor_spec3880 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_spec3882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyRETURN_in_cursor_spec3895 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_return_type_in_cursor_spec3897 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_cursor_spec3899 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_procedure_spec3918 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_spec3920 = new BitSet(new long[]{0x0000000002400000L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_spec3929 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_arguments_in_procedure_spec3931 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_spec3933 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_spec3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_function_spec3957 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_function_name_in_function_spec3959 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_spec3972 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_arguments_in_function_spec3974 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_spec3976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_spec3989 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_return_type_in_function_spec3991 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_spec3993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_declaration4012 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_exception_declaration4014 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_exception_declaration4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exception_name_in_exception_names4035 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_exception_names4039 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_exception_names4041 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_exception_package_name_in_exception_name4065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_exception_name4067 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_exception_name4072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_exception_package_name4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_type_dec_in_record_declaration4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_record_type_dec4145 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_record_type_dec4147 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_record_type_dec4149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_keyRECORD_in_record_type_dec4151 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_record_type_dec4162 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_specs_in_record_type_dec4164 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_record_type_dec4166 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_record_type_dec4168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_spec_in_field_specs4191 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_field_specs4195 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_field_spec_in_field_specs4197 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_column_name_in_field_spec4218 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_field_spec4220 = new BitSet(new long[]{0x1000000000000002L,0x0020000000000008L});
    public static final BitSet FOLLOW_NOT_in_field_spec4231 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_field_spec4233 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000008L});
    public static final BitSet FOLLOW_set_in_field_spec4248 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_field_spec4258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_type_dec_in_plsql_table_declaration4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTYPE_in_table_type_dec4299 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_table_type_dec4301 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_table_type_dec4303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_table_type_dec4305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_table_type_dec4316 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_table_type_dec4318 = new BitSet(new long[]{0x1000000002000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_NOT_in_table_type_dec4322 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_table_type_dec4324 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_165_in_table_type_dec4341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_table_type_dec4343 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L,0x0000000002080000L});
    public static final BitSet FOLLOW_122_in_table_type_dec4362 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_153_in_table_type_dec4380 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_147_in_table_type_dec4398 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_table_type_dec4400 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_integer_in_table_type_dec4402 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_table_type_dec4404 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_table_type_dec4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_table_var_dec4458 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_table_var_dec4460 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_table_var_dec4462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name4481 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_plsql_table_name4485 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_identifier_in_plsql_table_name4487 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_keyTYPE_in_varray_declaration4509 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_varray_declaration4511 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_varray_declaration4513 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyVARRAY_in_varray_declaration4526 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyVARYING_in_varray_declaration4530 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyARRAY_in_varray_declaration4532 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_varray_declaration4536 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_integer_in_varray_declaration4538 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_varray_declaration4540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_varray_declaration4550 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_spec_in_varray_declaration4552 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_NOT_in_varray_declaration4556 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_varray_declaration4558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedure_body_in_procedure_declaration4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_procedure_body4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_procedure_body4606 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body4609 = new BitSet(new long[]{0x0000000000400000L,0x0001800000000000L});
    public static final BitSet FOLLOW_LPAREN_in_procedure_body4622 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_argument_in_procedure_body4624 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_procedure_body4628 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_argument_in_procedure_body4630 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_procedure_body4635 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_procedure_body4649 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_declare_spec_in_procedure_body4688 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_procedure_body4705 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_procedure_body4719 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_procedure_body4733 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_procedure_body4737 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_procedure_body4753 = new BitSet(new long[]{0x0000000002200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_procedure_name_in_procedure_body4757 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_procedure_body4762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_begin_block4781 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_begin_block4793 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_begin_block4807 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_begin_block4811 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_begin_block4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_exception_handler4847 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_names_in_exception_handler4849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_exception_handler4851 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_exception_handler4861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_proc_fun_start4880 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_proc_fun_start4884 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyREPLACE_in_proc_fun_start4886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_proc_fun_start_in_function_body4910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_function_body4915 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_function_name_in_function_body4918 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LPAREN_in_function_body4931 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_arguments_in_function_body4933 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_body4935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyRETURN_in_function_body4949 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_return_type_in_function_body4951 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_set_in_function_body4953 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_declare_spec_in_function_body4992 = new BitSet(new long[]{0x0000000000200000L,0x0044400000400000L,0x0000000600000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_114_in_function_body5009 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_function_body5023 = new BitSet(new long[]{0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_119_in_function_body5037 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_exception_handler_in_function_body5041 = new BitSet(new long[]{0x0000000000000000L,0x0202000000000000L});
    public static final BitSet FOLLOW_113_in_function_body5057 = new BitSet(new long[]{0x0000000002200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_function_name_in_function_body5061 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_function_body5066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_function_name5085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_function_name5089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_procedure_name5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_procedure_name5113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arguments5133 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_arguments5137 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_argument_in_arguments5139 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_argument_name_in_argument5161 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000001FFFDFE7FL,0x0000000000800000L});
    public static final BitSet FOLLOW_keyOUT_in_argument5165 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_160_in_argument5169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_keyOUT_in_argument5171 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_160_in_argument5175 = new BitSet(new long[]{0x0000000000200002L,0xFC28000000400008L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_argument_type_in_argument5181 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000008L});
    public static final BitSet FOLLOW_set_in_argument5196 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_argument5206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_argument_name5228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_argument_type5247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_value5266 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_value5277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_quoted_string_in_value5287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_value5297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_value5301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_value5311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_spec_in_return_type5330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_body_in_function_declaration5349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_user_defined_function_in_function_call5372 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_function_call5398 = new BitSet(new long[]{0x1000000138E58000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameters_in_function_call5404 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_call5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_table_name_in_collection_function_call5447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_name_in_variable_names5466 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_variable_names5470 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_variable_name_in_variable_names5472 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_identifier_in_variable_name5493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_null_statement5512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRAISE_in_raise_statement5532 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_raise_statement5536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_statement5562 = new BitSet(new long[]{0x1000000138658002L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_return_statement5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LLABEL_in_loop_statement5590 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_loop_statement5592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_RLABEL_in_loop_statement5594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_keyWHILE_in_loop_statement5611 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_loop_statement5614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_170_in_loop_statement5632 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_numeric_loop_param_in_loop_statement5663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_cursor_loop_param_in_loop_statement5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement5747 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_loop_statement5757 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_loop_statement5767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L,0x0000040000000000L,0x0000000080400000L});
    public static final BitSet FOLLOW_keyLOOP_in_loop_statement5769 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_loop_statement5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_index_name_in_numeric_loop_param5804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_numeric_loop_param5806 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyREVERSE_in_numeric_loop_param5810 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param5815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_DOUBLEDOT_in_numeric_loop_param5817 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_numeric_loop_param5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_index_name5838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_integer_expr5862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_cursor_name5883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_cursor_loop_param5902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_cursor_loop_param5904 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_cursor_loop_param5918 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param5922 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_cursor_loop_param5924 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param5926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_loop_param5943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_statement_in_cursor_loop_param5945 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_loop_param5947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_record_name5976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_commit_statement5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_if_statement6014 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement6017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_if_statement6019 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement6021 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_keyELSIF_in_if_statement6048 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_condition_in_if_statement6050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_if_statement6052 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement6054 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_173_in_if_statement6077 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_if_statement6079 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_if_statement6092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_if_statement6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_command_in_sql_statement6113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_modify_data_in_sql_command6132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_to_control_data_in_sql_command6142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_command_in_to_modify_data6161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insert_command_in_to_modify_data6171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_command_in_to_modify_data6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_delete_command_in_to_modify_data6191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_transaction_command_in_to_modify_data6201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_to_control_data6220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_commit_statement_in_to_control_data6230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fetch_statement_in_to_control_data6240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lock_table_statement_in_to_control_data6250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_to_control_data6260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollback_statement_in_to_control_data6270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_savepoint_statement_in_to_control_data6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_statement_in_select_command6303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_select_statement6337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_select_expression6371 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_175_in_select_expression6388 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_176_in_select_expression6394 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_177_in_select_expression6399 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_select_list_in_select_expression6415 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_keyBULK_in_select_expression6438 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_select_expression6440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000C000000000000L});
    public static final BitSet FOLLOW_178_in_select_expression6456 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400100L});
    public static final BitSet FOLLOW_lvalues_in_select_expression6458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_select_expression6472 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_select_expression6478 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9EF0000000000000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression6487 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9EF0000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_select_expression6492 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_join_clause_in_select_expression6498 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_select_expression6500 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9EF0000000000000L});
    public static final BitSet FOLLOW_where_clause_in_select_expression6515 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x9CF0000000000000L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_select_expression6523 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x90F0000000000000L});
    public static final BitSet FOLLOW_group_by_clause_in_select_expression6531 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x80F0000000000000L});
    public static final BitSet FOLLOW_180_in_select_expression6547 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_select_expression6549 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x80E0000000000000L});
    public static final BitSet FOLLOW_model_clause_in_select_expression6557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x80E0000000000000L});
    public static final BitSet FOLLOW_181_in_select_expression6579 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0002400840000000L});
    public static final BitSet FOLLOW_177_in_select_expression6585 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_182_in_select_expression6607 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_183_in_select_expression6627 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_select_expression_in_select_expression6665 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_subquery_in_select_expression6686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_select_expression6725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASTERISK_in_select_list6752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_displayed_column_in_select_list6766 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_select_list6789 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_displayed_column_in_select_list6793 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_179_in_table_reference_list_from6825 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_table_reference_list_from6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list6854 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_table_reference_list6878 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_table_reference_list6882 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_table_name_in_join_clause6905 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_join_clause6909 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_outer_join_clause_in_join_clause6913 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause6936 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause6941 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause6943 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_inner_cross_join_clause6947 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_inner_cross_join_clause6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_inner_cross_join_clause6953 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_inner_cross_join_clause6955 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_inner_cross_join_clause6957 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_inner_cross_join_clause6959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_inner_cross_join_clause6973 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyNATURAL_in_inner_cross_join_clause6977 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyINNER_in_inner_cross_join_clause6981 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_inner_cross_join_clause6987 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_inner_cross_join_clause6989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause7009 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause7026 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause7028 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_keyNATURAL_in_outer_join_clause7042 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_outer_join_type_in_outer_join_clause7046 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_outer_join_clause7051 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_outer_join_clause7071 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_query_partition_clause_in_outer_join_clause7075 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_outer_join_clause7090 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_outer_join_clause7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_outer_join_clause7096 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_clause7098 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_outer_join_clause7100 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_clause7102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyPARTITION_in_query_partition_clause7123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_query_partition_clause7125 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_query_partition_clause7127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_outer_join_type7147 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyLEFT_in_outer_join_type7151 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyRIGHT_in_outer_join_type7155 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyOUTER_in_outer_join_type7161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_outer_join_sign7186 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_PLUS_in_outer_join_sign7188 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_outer_join_sign7190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_where_clause7214 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_where_clause7216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_hierarchical_query_clause7238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_hierarchical_query_clause7240 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause7242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_hierarchical_query_clause7247 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_hierarchical_query_clause7249 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_hierarchical_query_clause7253 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_hierarchical_query_clause7258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_group_by_clause7276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_group_by_clause7278 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_group_by_exprs_in_group_by_clause7280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs7298 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_group_by_exprs7302 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_group_by_expr_in_group_by_exprs7304 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_group_by_expr7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_group_by_expr7335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_group_by_expr7345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLUP_in_rollup_cube_clause7365 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keyCUBE_in_rollup_cube_clause7369 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_rollup_cube_clause7373 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_rollup_cube_clause7375 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_rollup_cube_clause7377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyGROUPING_in_grouping_sets_clause7395 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySETS_in_grouping_sets_clause7397 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_grouping_sets_clause7399 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_clause7401 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_grouping_sets_clause7403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7421 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_grouping_sets_exprs7425 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_sets_expr_in_grouping_sets_exprs7427 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_grouping_sets_expr7448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_grouping_sets_expr7452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMODEL_in_model_clause7470 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_model_clause7474 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_return_rows_clause_in_model_clause7488 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_reference_model_in_model_clause7503 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_main_model_in_model_clause7508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_cell_reference_options7530 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyKEEP_in_cell_reference_options7534 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyNAV_in_cell_reference_options7538 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_cell_reference_options7553 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_cell_reference_options7557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySINGLE_in_cell_reference_options7561 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_keyREFERENCE_in_cell_reference_options7563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_return_rows_clause7586 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_keyUPDATED_in_return_rows_clause7590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_177_in_return_rows_clause7594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_return_rows_clause7598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREFERENCE_in_reference_model7616 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_reference_model_name_in_reference_model7618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_reference_model7620 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_reference_model7622 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_reference_model7624 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_reference_model7626 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_model_column_clauses_in_reference_model7636 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_reference_model7640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_reference_model_name7660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyMAIN_in_main_model7680 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_main_model_name_in_main_model7682 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_model_column_clauses_in_main_model7687 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_cell_reference_options_in_main_model7699 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_model_rules_clause_in_main_model7703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_main_model_name7721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_model_column_clauses7741 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_model_column_clauses7745 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDIMENSION_in_model_column_clauses7761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_model_column_clauses7763 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses7765 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses7767 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses7769 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMEASURES_in_model_column_clauses7779 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_column_clauses7781 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_model_columns_in_model_column_clauses7783 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_column_clauses7785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_column_in_model_columns7803 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_model_columns7807 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_model_column_in_model_columns7809 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_model_column7830 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_112_in_model_column7836 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_model_column7841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRULES_in_model_rules_clause7864 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_model_rules_clause7868 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_clause7872 = new BitSet(new long[]{0x0000000000600000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_model_rules_clause7876 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_model_rules_clause7888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_keySEQUENTIAL_in_model_rules_clause7892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_191_in_model_rules_clause7896 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyITERATE_in_model_rules_clause7914 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause7916 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_model_rules_clause7918 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause7920 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyUNTIL_in_model_rules_clause7924 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause7926 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_model_rules_clause7928 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause7930 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_model_rules_clause7946 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_model_rules_exprs_in_model_rules_clause7948 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_model_rules_clause7950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs7968 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_model_rules_exprs7972 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_model_rules_expr_in_model_rules_exprs7974 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_190_in_model_rules_expr7997 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_keyUPSERT_in_model_rules_expr8001 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4002000040000000L});
    public static final BitSet FOLLOW_177_in_model_rules_expr8005 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x4000000040000000L});
    public static final BitSet FOLLOW_cell_assignment_in_model_rules_expr8013 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_order_by_clause_in_model_rules_expr8017 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_model_rules_expr8022 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_model_rules_expr8024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_measure_column_in_cell_assignment8042 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_LBRACK_in_cell_assignment8044 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_multi_column_for_loop_in_cell_assignment8048 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_cell_assignment_exprs_in_cell_assignment8052 = new BitSet(new long[]{0x0200000000000000L});
    public static final BitSet FOLLOW_RBRACK_in_cell_assignment8056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8074 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_cell_assignment_exprs8078 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_cell_assignment_expr_in_cell_assignment_exprs8080 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_condition_in_cell_assignment_expr8101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_cell_assignment_expr8105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_column_for_loop_in_cell_assignment_expr8109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_measure_column8127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_single_column_for_loop8145 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_single_column_for_loop8147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000100000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_160_in_single_column_for_loop8161 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_single_column_for_loop8163 = new BitSet(new long[]{0x0000000130600000L,0x0000000000400080L,0x0000000840000000L});
    public static final BitSet FOLLOW_literals_in_single_column_for_loop8167 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_subquery_in_single_column_for_loop8171 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_single_column_for_loop8175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_single_column_for_loop8191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_pattern_in_single_column_for_loop8193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_179_in_single_column_for_loop8198 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop8200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_single_column_for_loop8202 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop8204 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyINCREMENT_in_single_column_for_loop8208 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_keyDECREMENT_in_single_column_for_loop8212 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_single_column_for_loop8216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_literal8244 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_literal8255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_literal8265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_literals8283 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_literals8287 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_literals8289 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_bracket_literals8310 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literals_in_bracket_literals8312 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_bracket_literals8314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list8332 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_bracket_literals_list8336 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_bracket_literals_in_bracket_literals_list8338 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_pattern8359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_multi_column_for_loop8377 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop8379 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_multi_column_for_loop8381 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop8383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_multi_column_for_loop8385 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_multi_column_for_loop8387 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_bracket_literals_list_in_multi_column_for_loop8391 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_subquery_in_multi_column_for_loop8395 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_multi_column_for_loop8399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_order_by_clause8417 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_keySIBLINGS_in_order_by_clause8421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_order_by_clause8426 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_order_by_exprs_in_order_by_clause8428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs8446 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_order_by_exprs8450 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_order_by_expr_in_order_by_exprs8452 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_order_by_expr8477 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_order_by_expr8499 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr8512 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyFIRST_in_order_by_expr8514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_order_by_expr8518 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLAST_in_order_by_expr8520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_for_update_clause8541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_for_update_clause8543 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_164_in_for_update_clause8547 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_for_update_clause8549 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_keyWAIT_in_for_update_clause8556 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_integer_in_for_update_clause8558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_for_update_clause8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_where_condition_whole8584 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_where_condition_whole8586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_where_condition8605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_displayed_column8632 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_displayed_column8634 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_ASTERISK_in_displayed_column8636 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_expression_in_displayed_column8654 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_alias_in_displayed_column8678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_schema_name8714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_table_name8739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions8760 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_nested_expressions8764 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_nested_expressions8766 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_nested_expression8794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_nested_expression8808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_condition8841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions8860 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_plsql_expressions8864 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_plsql_expressions8866 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_expr_bool_in_plsql_expression8901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool8921 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_expr_bool8925 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_or_in_expr_bool8927 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_expr_and_in_expr_or8948 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_AND_in_expr_or8952 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_and_in_expr_or8954 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_NOT_in_expr_and8977 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_not_in_expr_and8982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9000 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_relational_op_in_expr_not9015 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9017 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_expr_not9031 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_expr_not9035 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_expr_not9039 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_expr_not9043 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_expr_not9047 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_111_in_expr_not9061 = new BitSet(new long[]{0x1000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_NOT_in_expr_not9065 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_expr_not9070 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOT_in_expr_not9086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_expr_not9091 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9093 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOT_in_expr_not9109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_expr_not9114 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9116 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_expr_not9118 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_not9120 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_NOT_in_expr_not9136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_expr_not9141 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_expr_not9143 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expressions_in_expr_not9145 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_expr_not9147 = new BitSet(new long[]{0xD000000001000002L,0x000080000011F003L,0x0000000100000000L,0x0000000000000011L});
    public static final BitSet FOLLOW_168_in_boolean_literal9181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_boolean_literal9187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions9214 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_sql_expressions9226 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_sql_expressions9230 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_expr_add_in_sql_expression9269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add9297 = new BitSet(new long[]{0x0000000030000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_PLUS_in_expr_add9313 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_MINUS_in_expr_add9318 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_DOUBLEVERTBAR_in_expr_add9323 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_mul_in_expr_add9339 = new BitSet(new long[]{0x0000000030000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul9367 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_ASTERISK_in_expr_mul9384 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_DIV_in_expr_mul9389 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_sign_in_expr_mul9396 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_PLUS_in_expr_sign9426 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_MINUS_in_expr_sign9431 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_pow_in_expr_sign9446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow9474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_EXPONENT_in_expr_pow9488 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_expr_in_expr_pow9492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_expr_paren_in_expr_expr9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_expr_expr9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_expr_expr9566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_expr_expr9585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_expr_expr9604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_expr_expr9624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_boolean_literal_in_simple_expression9657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_simple_expression9669 = new BitSet(new long[]{0x0000000000000000L,0x000000000001F000L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_simple_expression9684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_simple_expression9698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_simple_expression9713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_simple_expression9727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_simple_expression9741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_simple_expression9761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_simple_expression9773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_simple_expression9785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_simple_expression9800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_prior_in_compound_expression9822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_expr_paren9846 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_expr_paren9859 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_expr_paren9872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_expr_prior9892 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_expr_prior9894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_case_expression9912 = new BitSet(new long[]{0x1000000138658000L,0x03544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_simple_case_expression_in_case_expression9916 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_searched_case_expression_in_case_expression9920 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_else_case_expression_in_case_expression9926 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_case_expression9931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression9949 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_case_expression9953 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression9955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_simple_case_expression9957 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_simple_case_expression9959 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_searched_case_expression9982 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_nested_condition_in_searched_case_expression9984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_searched_case_expression9986 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_searched_case_expression9988 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_173_in_else_case_expression10009 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_else_case_expression10011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_label_name_in_case_statement10031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_case_statement10036 = new BitSet(new long[]{0x1000000138658000L,0x03544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_simple_case_statement_in_case_statement10041 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_searched_case_statement_in_case_statement10045 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_else_case_statement_in_case_statement10051 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_case_statement10056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_case_statement10058 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L});
    public static final BitSet FOLLOW_label_name_in_case_statement10062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement10083 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_case_statement10087 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_simple_case_statement10089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_simple_case_statement10091 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_simple_case_statement10093 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_searched_case_statement10116 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expression_in_searched_case_statement10118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_searched_case_statement10120 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_searched_case_statement10122 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_173_in_else_case_statement10143 = new BitSet(new long[]{0x0000000000200000L,0x0154400000400120L,0x40005C0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_seq_of_statements_in_else_case_statement10145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCURSOR_in_cursor_expression10163 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_cursor_expression10165 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_cursor_expression10167 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_cursor_expression10169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_datetime_expression10187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_199_in_datetime_expression10189 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLOCAL_in_datetime_expression10203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_datetime_expression10217 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyZONE_in_datetime_expression10219 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyDBTIMEZONE_in_datetime_expression10223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_datetime_expression10227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_datetime_expression10231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_function_expression10282 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10284 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_function_expression10299 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10315 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_CHAR_in_function_expression10347 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10370 = new BitSet(new long[]{0x0000000000000008L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_function_expression10383 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_SUBSTR_in_function_expression10417 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10435 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_function_expression10453 = new BitSet(new long[]{0x1000000138658008L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_integer_expr_in_function_expression10460 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_TRIM_in_function_expression10504 = new BitSet(new long[]{0x0000000000000004L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10520 = new BitSet(new long[]{0x0000000000000008L});
    public static final BitSet FOLLOW_function_call_in_function_expression10546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_function_expression10561 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_function_expression10585 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_LPAREN_in_function_expression10600 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10604 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_function_expression10606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_expression_in_function_expression10631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_special_expression10677 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_special_expression10679 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_special_expression10683 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_special_expression10687 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_special_expression10691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_special_expression10705 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_special_expression10707 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_special_expression10709 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_special_expression10711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_interval_expression10739 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDAY_in_interval_expression10753 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression10757 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_interval_expression10759 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression10761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_interval_expression10766 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_interval_expression10768 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression10772 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_fractional_second_precision_in_interval_expression10774 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression10776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyYEAR_in_interval_expression10793 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_interval_expression10797 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_interval_expression10799 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_interval_expression10801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_interval_expression10806 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMONTH_in_interval_expression10808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_leading_field_precision10836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_fractional_second_precision10855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sequence_name10944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_integer10962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_alias10989 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_alias11004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_column_specs11034 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_column_specs11038 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_column_specs11040 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec11068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_column_spec11082 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec11086 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_column_spec11100 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_column_spec11104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_column_name11136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_nested_table11154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_nested_table_column_name11174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name11176 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_nested_table_column_name11181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name11183 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_nested_table_in_nested_table_column_name11185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_nested_table_column_name11187 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_nested_table_column_name11189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function11214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function11229 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_user_defined_function11233 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_user_defined_function11251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000320L});
    public static final BitSet FOLLOW_200_in_user_defined_function11266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_user_defined_function11271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_user_defined_function11276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_selected_table11326 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_163_in_selected_table11342 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_keyTHE_in_selected_table11347 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_selected_table11361 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_alias_in_selected_table11368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_table_spec11406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_table_spec11408 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_table_spec11422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_spec11436 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_link_name_in_table_spec11438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_schema_name_in_table_alias11463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_table_alias11465 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_table_alias11470 = new BitSet(new long[]{0x0000000000200002L,0x0001000000480000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AT_SIGN_in_table_alias11474 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_link_name_in_table_alias11476 = new BitSet(new long[]{0x0000000000200002L,0x0001000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_alias_in_table_alias11483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_link_name11509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_nested_condition11531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_bool_in_nested_condition11543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_sql_condition11578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_paren11599 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_condition_paren11601 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_paren11603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_and_in_condition_or11627 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_OR_in_condition_or11642 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_and_in_condition_or11646 = new BitSet(new long[]{0x0800000000000002L});
    public static final BitSet FOLLOW_condition_not_in_condition_and11675 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_AND_in_condition_and11691 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_not_in_condition_and11695 = new BitSet(new long[]{0x0400000000000002L});
    public static final BitSet FOLLOW_NOT_in_condition_not11722 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not11726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_expr_in_condition_not11740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_exists_in_condition_expr11764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_condition_expr11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_condition_expr11784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_condition_expr11796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_condition_expr11806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_condition_expr11818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_condition_expr11828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_condition_expr11838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_condition_expr11848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_condition_expr11858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_condition_expr11868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_memeber_in_condition_expr11878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_condition_expr11888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_condition_expr11898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_condition_expr11908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_condition_expr11918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_condition_expr11928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_paren_in_condition_expr11938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_condition_exists11960 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_exists11962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_exists11964 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_exists11966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is12000 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is12002 = new BitSet(new long[]{0x1000000000200000L,0x0010000000000000L});
    public static final BitSet FOLLOW_NOT_in_condition_is12026 = new BitSet(new long[]{0x0000000000200000L,0x0010000000000000L});
    public static final BitSet FOLLOW_keyNAN_in_condition_is12043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_condition_is12058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_condition_is12072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison12097 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_comparison12099 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison12101 = new BitSet(new long[]{0x0000000001400000L,0x0000000000100000L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison12117 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQ_in_condition_comparison12134 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_NOT_EQ_in_condition_comparison12141 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison12155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison12159 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison12161 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison12177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_condition_comparison12204 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison12221 = new BitSet(new long[]{0xC000000001400000L,0x0000000000100003L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison12238 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_EQ_in_condition_comparison12255 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_NOT_EQ_in_condition_comparison12272 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_BOOLOP_GT_in_condition_comparison12286 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_BOOLOP_GE_in_condition_comparison12300 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_BOOLOP_LT_in_condition_comparison12314 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_BOOLOP_LE_in_condition_comparison12328 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_197_in_condition_comparison12344 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_comparison12363 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_comparison12377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_condition_comparison12381 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_comparison12383 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_sign_in_condition_comparison12401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison12423 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison12425 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison12427 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_condition_group_comparison12429 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_condition_group_comparison12441 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison12445 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_177_in_condition_group_comparison12449 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison12453 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_group_comparison12457 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison12461 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison12465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_group_comparison12475 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_set_in_condition_group_comparison12477 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_condition_group_comparison12505 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySOME_in_condition_group_comparison12509 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_177_in_condition_group_comparison12513 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_group_comparison12517 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_group_comparison12521 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_group_comparison12525 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_group_comparison12529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in12551 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_condition_in12553 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in12555 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NOT_in_condition_in12569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_condition_in12575 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in12577 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_condition_in12592 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_in12607 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in12612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_in12624 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NOT_in_condition_in12639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_condition_in12645 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_in12648 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_condition_in12663 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_condition_in12678 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_in12683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_a_set12703 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_a_set12705 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_is_a_set12709 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keyA_in_condition_is_a_set12714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_condition_is_a_set12716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_name_in_condition_is_any12736 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_any12738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_condition_is_any12743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_is_empty12761 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_empty12763 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_is_empty12767 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keyEMPTY_in_condition_is_empty12772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_is_of_type12790 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_of_type12792 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_NOT_in_condition_is_of_type12796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_164_in_condition_is_of_type12801 = new BitSet(new long[]{0x0000000000600000L});
    public static final BitSet FOLLOW_keyTYPE_in_condition_is_of_type12805 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_is_of_type12810 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type12812 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_is_of_type12814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12832 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_condition_is_of_type_names12836 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_condition_is_of_type_name_in_condition_is_of_type_names12838 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_keyONLY_in_condition_is_of_type_name12861 = new BitSet(new long[]{0x0000000000200000L,0xFC08000000400000L,0x00000000FFFDFE7FL});
    public static final BitSet FOLLOW_type_name_in_condition_is_of_type_name12866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cell_reference_in_condition_is_present12884 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_condition_is_present12886 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyPRESENT_in_condition_is_present12888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like12906 = new BitSet(new long[]{0x1000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_NOT_in_condition_like12910 = new BitSet(new long[]{0x1000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_condition_like12917 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyLIKEC_in_condition_like12921 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyLIKE2_in_condition_like12925 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyLIKE4_in_condition_like12929 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like12933 = new BitSet(new long[]{0x0000000000200002L});
    public static final BitSet FOLLOW_keyESCAPE_in_condition_like12937 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_like12939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_memeber12960 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_memeber12964 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keyMEMBER_in_condition_memeber12969 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000001040000000L});
    public static final BitSet FOLLOW_164_in_condition_memeber12973 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_memeber12978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between12996 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NOT_in_condition_between13000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_condition_between13005 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between13007 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_condition_between13009 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_condition_between13011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREGEXP_LIKE_in_condition_regexp_like13029 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_regexp_like13031 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameters_in_condition_regexp_like13033 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_regexp_like13035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset13053 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_NOT_in_condition_submultiset13057 = new BitSet(new long[]{0x1000000000200000L});
    public static final BitSet FOLLOW_keySUBMULTISET_in_condition_submultiset13062 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000001040000000L});
    public static final BitSet FOLLOW_164_in_condition_submultiset13066 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_nested_table_column_name_in_condition_submultiset13071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEQUALS_PATH_in_condition_equals_path13089 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_equals_path13091 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_condition_equals_path13093 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path13095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_path_string_in_condition_equals_path13097 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_condition_equals_path13101 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_equals_path13103 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_equals_path13108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUNDER_PATH_in_condition_under_path13126 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_condition_under_path13128 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_condition_under_path13130 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path13134 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_levels_in_condition_under_path13136 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path13141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_path_string_in_condition_under_path13143 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_COMMA_in_condition_under_path13147 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_correlation_integer_in_condition_under_path13149 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_condition_under_path13154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_levels13172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_integer_in_correlation_integer13190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_path_string13208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list13232 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_grouping_expression_list13247 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_grouping_expression_list13251 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_expression_list13277 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list13281 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_expression_list13283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_expression_list13297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_identifier_in_cell_reference13317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters13335 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_call_parameters13339 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameter_in_call_parameters13341 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_parameter_name_in_call_parameter13364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_ARROW_in_call_parameter13366 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_call_parameter13371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_relational_op0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_exp_set13437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_exp_set13447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subquery13470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_subquery13472 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_subquery13474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_connect_clause13497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_connect_clause13499 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause13501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_187_in_connect_clause13514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_connect_clause13516 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_197_in_connect_clause13531 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause13533 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause13535 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause13537 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause13551 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause13553 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause13555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_connect_clause13557 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_197_in_connect_clause13597 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause13601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause13615 = new BitSet(new long[]{0xC000000001000000L,0x0000000000100003L});
    public static final BitSet FOLLOW_relational_op_in_connect_clause13617 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A60L});
    public static final BitSet FOLLOW_197_in_connect_clause13621 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_connect_clause13626 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_connect_clause13630 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause13632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_186_in_connect_clause13657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_connect_clause13659 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_connect_clause13661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_group_clause13683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_group_clause13685 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_group_clause13687 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_COMMA_in_group_clause13691 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_group_clause13693 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_180_in_group_clause13700 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_group_clause13702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_set_clause13728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_set_clause13730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_182_in_set_clause13736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_183_in_set_clause13740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_set_clause13744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_order_clause13764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_order_clause13766 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sorted_def_in_order_clause13768 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_order_clause13772 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sorted_def_in_order_clause13774 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_sql_expression_in_sorted_def13806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_NUMBER_in_sorted_def13818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_set_in_sorted_def13822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_update_clause13850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_update_clause13852 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000001000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_164_in_update_clause13856 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_update_clause13858 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_COMMA_in_update_clause13862 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_name_in_update_clause13864 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_update_clause13874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_insert_command13896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_insert_command13898 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_insert_command13900 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000400000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command13912 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_insert_command13914 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command13916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_204_in_insert_command13933 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_insert_command13935 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_insert_command13937 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_insert_command13939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_select_statement_in_insert_command13953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_returning_clause_in_insert_command13975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_update_command13997 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_update_command13999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_145_in_update_command14009 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_update_nested_column_specs_in_update_command14024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_update_column_specs_in_update_command14038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_185_in_update_command14062 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_update_command14080 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_update_command14082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sql_condition_in_update_command14100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_returning_clause_in_update_command14137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs14159 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_update_column_specs14163 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_update_column_spec_in_update_column_specs14165 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_column_spec_in_update_column_spec14187 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_update_column_spec14189 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_update_column_spec14191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs14210 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_COMMA_in_update_nested_column_specs14214 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_update_nested_column_spec_in_update_nested_column_specs14216 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_update_nested_column_spec14238 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_update_nested_column_spec14240 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_update_nested_column_spec14242 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_EQ_in_update_nested_column_spec14244 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_subquery_in_update_nested_column_spec14246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_delete_command14265 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0008000840000000L});
    public static final BitSet FOLLOW_179_in_delete_command14269 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_delete_command14274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_185_in_delete_command14289 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_keyCURRENT_OF_in_delete_command14307 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_delete_command14309 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sql_condition_in_delete_command14327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_returning_clause_in_delete_command14364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRETURN_in_returning_clause14388 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_keyRETURNING_in_returning_clause14392 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4003DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_select_list_in_returning_clause14396 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_keyBULK_in_returning_clause14400 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyCOLLECT_in_returning_clause14402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_returning_clause14407 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400100L});
    public static final BitSet FOLLOW_lvalues_in_returning_clause14409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_set_transaction_command14428 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyTRANSACTION_in_set_transaction_command14430 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyREAD_in_set_transaction_command14432 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyONLY_in_set_transaction_command14434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCLOSE_in_close_statement14453 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_close_statement14455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_fetch_statement14474 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_fetch_statement14476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_fetch_statement14478 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_variable_names_in_fetch_statement14493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_record_name_in_fetch_statement14507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_lock_table_statement14536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_163_in_lock_table_statement14538 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_table_reference_list_in_lock_table_statement14540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_lock_table_statement14550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000070000L});
    public static final BitSet FOLLOW_lock_mode_in_lock_table_statement14552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_lock_table_statement14554 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_lock_table_statement14558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_lock_mode14580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_209_in_lock_mode14582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_208_in_lock_mode14592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_lock_mode14594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_lock_mode14604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_lock_mode14606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_lock_mode14616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_lock_mode14626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_208_in_lock_mode14628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_210_in_lock_mode14630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_lock_mode14640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOPEN_in_open_statement14659 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_cursor_name_in_open_statement14661 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_open_statement14665 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_plsql_expressions_in_open_statement14667 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_open_statement14669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLBACK_in_rollback_statement14691 = new BitSet(new long[]{0x0000000000200002L,0x0000000000000000L,0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_keyWORK_in_rollback_statement14695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L,0x0000000000100000L});
    public static final BitSet FOLLOW_135_in_rollback_statement14710 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_rollback_statement14714 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_savepoint_name_in_rollback_statement14719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_212_in_rollback_statement14734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_quoted_string_in_rollback_statement14736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_211_in_savepoint_statement14758 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_savepoint_name_in_savepoint_statement14760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_savepoint_name14779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_identifier14802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLEQUOTED_STRING_in_identifier14814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_quoted_string14840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_in_match_string14861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyA14903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyAUTOMATIC14932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCOUNT14965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTRIM14999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCROSS15032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCUBE15066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCURRENT_OF15094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDAY15129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDBTIMEZONE15157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDECREMENT15186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyDIMENSION15215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEMPTY15248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEQUALS_PATH15275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyESCAPE15307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFIRST15340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFULL15374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyGROUPING15404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyIGNORE15436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINCREMENT15465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINFINITE15511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINNER15581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINTERVAL15611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyITERATE15642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyJOIN15676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyKEEP15710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLAST15744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLEFT15778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKE215811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKE415844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLIKEC15877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyLOCAL15910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMAIN15944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMEASURES15974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMEMBER16006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMODEL16039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyMONTH16072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNAN16118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNATURAL16186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNAV16221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNOCYCLE16252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNULLS16285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyONLY16319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyOUTER16352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPARTITION16381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPRECISION16410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyPRESENT16441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREFERENCE16470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREGEXP_LIKE16497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRIGHT16531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyROLLUP16563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRULES16596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySECOND16628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySECONDS16659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySEQUENTIAL16687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySESSIONTIMEZONE16710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySETS16744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySIBLINGS16774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySINGLE16806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySOME16840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBMULTISET16867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTIME16901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTIMESTAMP16930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTHE16943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUNDER_PATH17012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUNTIL17045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUPDATED17076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUPSERT17108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyWAIT17142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyYEAR17176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyZONE17210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyARRAY17244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyAUTONOMOUS_TRANSACTION17260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBODY17294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBUILTIN17325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBULK17359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyBYTE17393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCLOSE17426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCOLLECT17457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyCURSOR17489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_keyELSIF17520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEXCEPTION_INIT17545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyEXIT17579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyFIPSFLAG17609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_keyFUNCTION17637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyINTERFACE17667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_keyLOOP17699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNEW17735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyNEW_NAMES17764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyOPEN17798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_215_in_keyOUT17831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_216_in_keyPACKAGE17861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_217_in_keyPRAGMA17892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_keyRAISE17924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRANGE17958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREAD17992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_keyRECORD18022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREF18058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREPLACE18089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyRESTRICT_REFERENCES18108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_220_in_keyRETURN18138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_221_in_keyRETURNING18166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyREVERSE18198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_222_in_keyROLLBACK18226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySERIALLY_REUSABLE18248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keySUBTYPE18279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTRANSACTION18306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyTYPE18340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyUSING18373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyVARRAY18405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyVARYING18435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_223_in_keyWHILE18466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_keyWORK18501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifier_in_sql_identifier18519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_sql_identifier18531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred40_RPIExprWalker1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred41_RPIExprWalker1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNEW_in_synpred54_RPIExprWalker1560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignment_statement_in_synpred70_RPIExprWalker1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exit_statement_in_synpred71_RPIExprWalker1878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_statement_in_synpred73_RPIExprWalker1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loop_statement_in_synpred75_RPIExprWalker1919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_statement_in_synpred79_RPIExprWalker1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_plsql_block_in_synpred80_RPIExprWalker1970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subtype_declaration_in_synpred89_RPIExprWalker2141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred97_RPIExprWalker2227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyRESTRICT_REFERENCES_in_synpred100_RPIExprWalker2272 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred100_RPIExprWalker2274 = new BitSet(new long[]{0x0000000000200000L,0x0020000000400080L});
    public static final BitSet FOLLOW_117_in_synpred100_RPIExprWalker2278 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_function_name_in_synpred100_RPIExprWalker2282 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred100_RPIExprWalker2288 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_param_in_synpred100_RPIExprWalker2290 = new BitSet(new long[]{0x0000000004800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred100_RPIExprWalker2295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyEXCEPTION_INIT_in_synpred101_RPIExprWalker2310 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred101_RPIExprWalker2312 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L});
    public static final BitSet FOLLOW_exception_name_in_synpred101_RPIExprWalker2314 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred101_RPIExprWalker2316 = new BitSet(new long[]{0x0000000130000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_literal_in_synpred101_RPIExprWalker2318 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred101_RPIExprWalker2320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyAUTONOMOUS_TRANSACTION_in_synpred102_RPIExprWalker2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySERIALLY_REUSABLE_in_synpred103_RPIExprWalker2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyBUILTIN_in_synpred104_RPIExprWalker2362 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred104_RPIExprWalker2364 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred104_RPIExprWalker2366 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred104_RPIExprWalker2368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFIPSFLAG_in_synpred105_RPIExprWalker2382 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred105_RPIExprWalker2384 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred105_RPIExprWalker2386 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred105_RPIExprWalker2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERFACE_in_synpred106_RPIExprWalker2403 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred106_RPIExprWalker2405 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred106_RPIExprWalker2407 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred106_RPIExprWalker2409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNEW_NAMES_in_synpred107_RPIExprWalker2423 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred107_RPIExprWalker2425 = new BitSet(new long[]{0x0000000130200000L,0x0000000000400080L});
    public static final BitSet FOLLOW_pragma_params_in_synpred107_RPIExprWalker2427 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred107_RPIExprWalker2429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_synpred141_RPIExprWalker3030 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyDAY_in_synpred141_RPIExprWalker3032 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_synpred141_RPIExprWalker3036 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred141_RPIExprWalker3038 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred141_RPIExprWalker3040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred141_RPIExprWalker3045 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_synpred141_RPIExprWalker3047 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred141_RPIExprWalker3051 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred141_RPIExprWalker3053 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred141_RPIExprWalker3055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINTERVAL_in_synpred143_RPIExprWalker3068 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyYEAR_in_synpred143_RPIExprWalker3070 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_synpred143_RPIExprWalker3074 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_NUMBER_in_synpred143_RPIExprWalker3076 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred143_RPIExprWalker3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred143_RPIExprWalker3083 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyMONTH_in_synpred143_RPIExprWalker3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyTIME_in_synpred144_RPIExprWalker3097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_datatype_in_synpred199_RPIExprWalker3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred259_RPIExprWalker5398 = new BitSet(new long[]{0x1000000138E58000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_call_parameters_in_synpred259_RPIExprWalker5404 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred259_RPIExprWalker5419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numeric_loop_param_in_synpred265_RPIExprWalker5657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_loop_param_in_synpred266_RPIExprWalker5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyREVERSE_in_synpred269_RPIExprWalker5810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_close_statement_in_synpred279_RPIExprWalker6220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_open_statement_in_synpred283_RPIExprWalker6260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_synpred285_RPIExprWalker6388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_reference_list_in_synpred290_RPIExprWalker6478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_join_clause_in_synpred291_RPIExprWalker6487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_where_clause_in_synpred292_RPIExprWalker6515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hierarchical_query_clause_in_synpred293_RPIExprWalker6523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_by_clause_in_synpred294_RPIExprWalker6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_synpred295_RPIExprWalker6547 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred295_RPIExprWalker6549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_model_clause_in_synpred296_RPIExprWalker6557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_synpred301_RPIExprWalker6579 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0002400840000000L});
    public static final BitSet FOLLOW_177_in_synpred301_RPIExprWalker6585 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_182_in_synpred301_RPIExprWalker6607 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_183_in_synpred301_RPIExprWalker6627 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000400840000000L});
    public static final BitSet FOLLOW_select_expression_in_synpred301_RPIExprWalker6665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subquery_in_synpred301_RPIExprWalker6686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_order_by_clause_in_synpred302_RPIExprWalker6725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred305_RPIExprWalker6878 = new BitSet(new long[]{0x0000000000600000L,0x0000000000400000L,0x0000000840000000L});
    public static final BitSet FOLLOW_selected_table_in_synpred305_RPIExprWalker6882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inner_cross_join_clause_in_synpred306_RPIExprWalker6909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_clause_in_synpred307_RPIExprWalker6913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINNER_in_synpred310_RPIExprWalker6936 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_synpred310_RPIExprWalker6941 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_table_name_in_synpred310_RPIExprWalker6943 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_synpred310_RPIExprWalker6947 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred310_RPIExprWalker6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred310_RPIExprWalker6953 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred310_RPIExprWalker6955 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_synpred310_RPIExprWalker6957 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred310_RPIExprWalker6959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCROSS_in_synpred311_RPIExprWalker6973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_synpred313_RPIExprWalker7026 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyJOIN_in_synpred313_RPIExprWalker7028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_type_in_synpred314_RPIExprWalker7046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred315_RPIExprWalker7075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred316_RPIExprWalker7090 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred316_RPIExprWalker7092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyUSING_in_synpred317_RPIExprWalker7096 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred317_RPIExprWalker7098 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_specs_in_synpred317_RPIExprWalker7100 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred317_RPIExprWalker7102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyFULL_in_synpred318_RPIExprWalker7147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLEFT_in_synpred319_RPIExprWalker7151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyOUTER_in_synpred320_RPIExprWalker7161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNOCYCLE_in_synpred322_RPIExprWalker7253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred323_RPIExprWalker7302 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_group_by_expr_in_synpred323_RPIExprWalker7304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred324_RPIExprWalker7325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_sets_clause_in_synpred325_RPIExprWalker7335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyROLLUP_in_synpred326_RPIExprWalker7365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rollup_cube_clause_in_synpred328_RPIExprWalker7448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_synpred331_RPIExprWalker7530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyIGNORE_in_synpred332_RPIExprWalker7530 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyKEEP_in_synpred332_RPIExprWalker7534 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyNAV_in_synpred332_RPIExprWalker7538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDIMENSION_in_synpred333_RPIExprWalker7557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_query_partition_clause_in_synpred338_RPIExprWalker7741 = new BitSet(new long[]{0x0000000000200002L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_column_spec_in_synpred338_RPIExprWalker7745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyAUTOMATIC_in_synpred345_RPIExprWalker7888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_condition_in_synpred357_RPIExprWalker8101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred358_RPIExprWalker8105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINCREMENT_in_synpred362_RPIExprWalker8208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred370_RPIExprWalker8450 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_order_by_expr_in_synpred370_RPIExprWalker8452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred373_RPIExprWalker8512 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyFIRST_in_synpred373_RPIExprWalker8514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNULLS_in_synpred374_RPIExprWalker8518 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keyLAST_in_synpred374_RPIExprWalker8520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred381_RPIExprWalker8794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_synpred383_RPIExprWalker8925 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_or_in_synpred383_RPIExprWalker8927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_synpred384_RPIExprWalker8952 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_and_in_synpred384_RPIExprWalker8954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relational_op_in_synpred386_RPIExprWalker9015 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred386_RPIExprWalker9017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOUND_ATTR_in_synpred387_RPIExprWalker9031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTFOUND_ATTR_in_synpred388_RPIExprWalker9035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISOPEN_ATTR_in_synpred389_RPIExprWalker9039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ROWCOUNT_ATTR_in_synpred390_RPIExprWalker9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BULK_ROWCOUNT_ATTR_in_synpred391_RPIExprWalker9047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_synpred393_RPIExprWalker9061 = new BitSet(new long[]{0x1000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_NOT_in_synpred393_RPIExprWalker9065 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_synpred393_RPIExprWalker9070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred395_RPIExprWalker9086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_synpred395_RPIExprWalker9091 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred395_RPIExprWalker9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred397_RPIExprWalker9109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_synpred397_RPIExprWalker9114 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred397_RPIExprWalker9116 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_AND_in_synpred397_RPIExprWalker9118 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_add_in_synpred397_RPIExprWalker9120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_synpred399_RPIExprWalker9136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_synpred399_RPIExprWalker9141 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred399_RPIExprWalker9143 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expressions_in_synpred399_RPIExprWalker9145 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred399_RPIExprWalker9147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred401_RPIExprWalker9226 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_synpred401_RPIExprWalker9230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred404_RPIExprWalker9311 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_mul_in_synpred404_RPIExprWalker9339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred406_RPIExprWalker9382 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_sign_in_synpred406_RPIExprWalker9396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXPONENT_in_synpred409_RPIExprWalker9488 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expr_expr_in_synpred409_RPIExprWalker9492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_paren_in_synpred410_RPIExprWalker9521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_expression_in_synpred411_RPIExprWalker9540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_expression_in_synpred412_RPIExprWalker9560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cursor_expression_in_synpred413_RPIExprWalker9579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_synpred414_RPIExprWalker9598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_select_expression_in_synpred415_RPIExprWalker9618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_column_spec_in_synpred422_RPIExprWalker9756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDBTIMEZONE_in_synpred436_RPIExprWalker10223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySESSIONTIMEZONE_in_synpred437_RPIExprWalker10227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyCOUNT_in_synpred439_RPIExprWalker10282 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred439_RPIExprWalker10284 = new BitSet(new long[]{0x1000000178658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_ASTERISK_in_synpred439_RPIExprWalker10299 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_nested_expression_in_synpred439_RPIExprWalker10315 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred439_RPIExprWalker10320 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_call_in_synpred446_RPIExprWalker10546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_synpred446_RPIExprWalker10561 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred446_RPIExprWalker10567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred447_RPIExprWalker10600 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_nested_expression_in_synpred447_RPIExprWalker10604 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred447_RPIExprWalker10606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyDAY_in_synpred452_RPIExprWalker10753 = new BitSet(new long[]{0x0000000000400000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LPAREN_in_synpred452_RPIExprWalker10757 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_leading_field_precision_in_synpred452_RPIExprWalker10759 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred452_RPIExprWalker10761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred452_RPIExprWalker10766 = new BitSet(new long[]{0x0000000000200000L});
    public static final BitSet FOLLOW_keySECOND_in_synpred452_RPIExprWalker10768 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred452_RPIExprWalker10772 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_fractional_second_precision_in_synpred452_RPIExprWalker10774 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred452_RPIExprWalker10776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_synpred459_RPIExprWalker11229 = new BitSet(new long[]{0x0000000000200000L,0x0000000000400000L,0x0000000040000000L});
    public static final BitSet FOLLOW_sql_identifier_in_synpred459_RPIExprWalker11233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_table_spec_in_synpred463_RPIExprWalker11326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alias_in_synpred466_RPIExprWalker11368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_or_in_synpred472_RPIExprWalker11531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OR_in_synpred473_RPIExprWalker11642 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_and_in_synpred473_RPIExprWalker11646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AND_in_synpred474_RPIExprWalker11691 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_condition_not_in_synpred474_RPIExprWalker11695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_in_synpred477_RPIExprWalker11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_comparison_in_synpred478_RPIExprWalker11784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_group_comparison_in_synpred479_RPIExprWalker11796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_in_in_synpred480_RPIExprWalker11806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_a_set_in_synpred481_RPIExprWalker11818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_any_in_synpred482_RPIExprWalker11828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_empty_in_synpred483_RPIExprWalker11838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_of_type_in_synpred484_RPIExprWalker11848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_is_present_in_synpred485_RPIExprWalker11858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_like_in_synpred486_RPIExprWalker11868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_memeber_in_synpred487_RPIExprWalker11878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_between_in_synpred488_RPIExprWalker11888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_regexp_like_in_synpred489_RPIExprWalker11898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_submultiset_in_synpred490_RPIExprWalker11908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_equals_path_in_synpred491_RPIExprWalker11918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condition_under_path_in_synpred492_RPIExprWalker11928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyNAN_in_synpred494_RPIExprWalker12043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyINFINITE_in_synpred495_RPIExprWalker12058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred498_RPIExprWalker12177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred499_RPIExprWalker12097 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred499_RPIExprWalker12099 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred499_RPIExprWalker12101 = new BitSet(new long[]{0x0000000001400000L,0x0000000000100000L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred499_RPIExprWalker12117 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_EQ_in_synpred499_RPIExprWalker12134 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_NOT_EQ_in_synpred499_RPIExprWalker12141 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred499_RPIExprWalker12155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_select_command_in_synpred499_RPIExprWalker12159 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred499_RPIExprWalker12161 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred499_RPIExprWalker12177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred508_RPIExprWalker12363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outer_join_sign_in_synpred509_RPIExprWalker12401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred513_RPIExprWalker12457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred514_RPIExprWalker12423 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred514_RPIExprWalker12425 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred514_RPIExprWalker12427 = new BitSet(new long[]{0x0000000001000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_set_in_synpred514_RPIExprWalker12429 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0002000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_202_in_synpred514_RPIExprWalker12441 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_keySOME_in_synpred514_RPIExprWalker12445 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_177_in_synpred514_RPIExprWalker12449 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred514_RPIExprWalker12453 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred514_RPIExprWalker12457 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_synpred514_RPIExprWalker12461 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred514_RPIExprWalker12465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred522_RPIExprWalker12521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred524_RPIExprWalker12592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred525_RPIExprWalker12551 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred525_RPIExprWalker12553 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred525_RPIExprWalker12555 = new BitSet(new long[]{0x1000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_NOT_in_synpred525_RPIExprWalker12569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_synpred525_RPIExprWalker12575 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred525_RPIExprWalker12577 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_grouping_expression_list_in_synpred525_RPIExprWalker12592 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_select_command_in_synpred525_RPIExprWalker12607 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred525_RPIExprWalker12612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_list_in_synpred527_RPIExprWalker12663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLIKEC_in_synpred537_RPIExprWalker12921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyLIKE2_in_synpred538_RPIExprWalker12925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyESCAPE_in_synpred539_RPIExprWalker12937 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expression_in_synpred539_RPIExprWalker12939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_synpred548_RPIExprWalker13247 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_expression_list_in_synpred548_RPIExprWalker13251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_synpred549_RPIExprWalker13277 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486A40L});
    public static final BitSet FOLLOW_sql_expressions_in_synpred549_RPIExprWalker13281 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_RPAREN_in_synpred549_RPIExprWalker13283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred557_RPIExprWalker13431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_synpred560_RPIExprWalker13585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_synpred561_RPIExprWalker13585 = new BitSet(new long[]{0x1000000138658000L,0x01544000004001A0L,0x4000DF0640020000L,0x00000000D6486F60L});
    public static final BitSet FOLLOW_sql_condition_in_synpred561_RPIExprWalker13590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_synpred562_RPIExprWalker13597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sql_expression_in_synpred571_RPIExprWalker13800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_in_synpred572_RPIExprWalker13812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_names_in_synpred593_RPIExprWalker14493 = new BitSet(new long[]{0x0000000000000002L});

}